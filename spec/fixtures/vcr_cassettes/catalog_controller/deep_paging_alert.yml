---
http_interactions:
- request:
    method: get
    uri: https://query.discovery.trln.org/trlnbib/select?f.author_facet_f.facet.limit=11&f.available_f.facet.limit=11&f.date_cataloged_dt.facet.limit=11&f.language_f.facet.limit=11&f.lcc_callnum_classification_f.facet.limit=4501&f.location_hierarchy_f.facet.limit=201&f.location_hierarchy_f.facet.sort=count&f.physical_media_f.facet.limit=11&f.resource_type_f.facet.limit=11&f.subject_chronological_f.facet.limit=11&f.subject_genre_f.facet.limit=11&f.subject_geographic_f.facet.limit=11&f.subject_topical_f.facet.limit=11&facet=true&facet.field=date_cataloged_dt&facet.query=date_cataloged_dt:%5BNOW-3MONTH/DAY%20TO%20NOW%5D&fq=institution_f:unc&rows=20&sort=score%20desc,%20publication_year_isort%20desc,%20title_sort_ssort_single%20asc&start=4980&stats=true&stats.field=publication_year_isort&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 25 Oct 2019 19:32:08 GMT
      Content-Type:
      - application/json;charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - nginx/1.16.1
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {
  "responseHeader":{
    "zkConnected":true,
    "status":0,
    "QTime":3123,
    "params":{
      "f.lcc_callnum_classification_f.facet.limit":"4501",
      "facet.field":["access_type_f",
        "available_f",
        "{!ex=rollup}location_hierarchy_f",
        "resource_type_f",
        "lcc_callnum_classification_f",
        "language_f",
        "date_cataloged_dt"],
      "f.available_f.facet.limit":"11",
      "f.date_cataloged_dt.facet.limit":"11",
      "f.location_hierarchy_f.facet.sort":"count",
      "f.subject_chronological_f.facet.limit":"11",
      "f.subject_genre_f.facet.limit":"11",
      "start":"4980",
      "fq":"institution_f:unc",
      "sort":"score desc, publication_year_isort desc, title_sort_ssort_single asc",
      "rows":"20",
      "f.subject_geographic_f.facet.limit":"11",
      "facet.query":["date_cataloged_dt:[NOW-7DAY/DAY TO NOW]",
        "date_cataloged_dt:[NOW-1MONTH/DAY TO NOW]",
        "date_cataloged_dt:[NOW-3MONTH/DAY TO NOW]"],
      "f.language_f.facet.limit":"11",
      "f.location_hierarchy_f.facet.limit":"201",
      "stats":"true",
      "f.physical_media_f.facet.limit":"11",
      "f.author_facet_f.facet.limit":"11",
      "f.resource_type_f.facet.limit":"11",
      "f.subject_topical_f.facet.limit":"11",
      "facet":"true",
      "wt":"json",
      "stats.field":"publication_year_isort"}},
  "response":{"numFound":7043195,"start":4980,"docs":[
      {
        "id":"UNCb3267630",
        "url_a":["{\"href\":\"http://purl.access.gpo.gov/GPO/LPS2942\",\"type\":\"fulltext\",\"text\":\"Available via the UNC-Chapel Hill Libraries\",\"restricted\":\"false\"}"],
        "items_a":["{\"item_id\":\"i4641490\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"In-Library Use Only\",\"call_no\":\"A 1.38/2:\",\"cn_scheme\":\"SUDOC\"}"],
        "author_suggest":["United States. Department of Agriculture. Office of Communications"],
        "names_a":["{\"name\":\"United States. Department of Agriculture. Office of Communications\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 96648032",
          "GPO Item Number: 0013-A-01",
          "GPO Item Number: 0013-A-01 (online)"],
        "barcodes_a":["HAXY-1460-00001"],
        "holdings_a":["{\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"call_no\":\"A 1.38/2:\",\"notes\":[\"For holdings, ask at Service Desk.\"]}"],
        "language_a":["English"],
        "local_id":"b3267630",
        "shelfkey":"sudoc:A 1.38/2:",
        "available_a":["Available"],
        "frequency_current_a":["Annual"],
        "lang_code_a":["eng"],
        "publisher_a":["Office of Communications, U.S. Dept. of Agriculture",
          "Supt. of Docs., U.S. G.P.O., distributor"],
        "rollup_id":"OCLC31747093",
        "title_suggest":["Agriculture fact book."],
        "title_main":"Agriculture fact book.",
        "title_sort_ssort_single":"agriculture fact book",
        "access_type_a":["Online",
          "At the Library"],
        "institution_a":["unc"],
        "oclc_number":"31747093",
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Washington, DC : Office of Communications, U.S. Dept. of Agriculture : [Supt. of Docs., U.S. G.P.O., distributor], 1994-\"}"],
        "note_general_a":["Shipping list no.: 99-0317-P.",
          "Issue: 1998."],
        "earlier_work_a":["{\"label\":\"Continues\",\"title\":[\"Fact book of agriculture\"]}"],
        "resource_type_a":["Government publication",
          "Journal, Magazine, or Periodical"],
        "subject_genre_a":["Handbooks, manuals, etc",
          "Reference"],
        "date_cataloged":"2004-10-01T04:00:00Z",
        "genre_headings_a":["Handbooks, manuals, etc"],
        "subject_suggest":["Handbooks, manuals, etc",
          "Agriculture -- United States -- Handbooks, manuals, etc",
          "Agriculture -- Economic aspects -- United States -- Handbooks, manuals, etc"],
        "physical_media_a":["Print",
          "Online"],
        "vendor_marc_id_a":["99021541"],
        "subject_topical_a":["Agriculture",
          "Economic aspects"],
        "publication_year_sort":"2020",
        "reverse_shelfkey":"sudoc:P~Y}WR~X~",
        "subject_headings_a":["Agriculture -- United States -- Handbooks, manuals, etc",
          "Agriculture -- Economic aspects -- United States -- Handbooks, manuals, etc"],
        "note_serial_dates_a":["1994-"],
        "location_hierarchy_a":["unc",
          "unc:uncdavy",
          "unc:uncdavy:uncdavdoc"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["United States"],
        "call_number_schemes_a":["SUDOC"],
        "origin_place_search_a":["Washington, DC",
          "District of Columbia",
          "United States"],
        "physical_description_a":["volumes ; 23 cm"]},
      {
        "id":"UNCb3761207",
        "url_a":["{\"href\":\"http://purl.access.gpo.gov/GPO/LPS2942\",\"type\":\"fulltext\",\"note\":\"click on issue from listing of publications\",\"restricted\":\"false\"}"],
        "author_suggest":["United States. Department of Agriculture. Office of Communications"],
        "names_a":["{\"name\":\"United States. Department of Agriculture. Office of Communications\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: sn 99015470",
          "GPO Item Number: 0013-A-01 (online)"],
        "language_a":["English"],
        "local_id":"b3761207",
        "available_a":["Available"],
        "frequency_current_a":["Annual"],
        "lang_code_a":["eng"],
        "publisher_a":["The Office"],
        "rollup_id":"OCLC42278818",
        "this_work_a":["{\"title\":[\"Agriculture fact book (Online)\"]}"],
        "title_suggest":["Agriculture fact book"],
        "title_main":"Agriculture fact book",
        "title_sort_ssort_single":"agriculture fact book",
        "access_type_a":["Online"],
        "institution_a":["unc",
          "duke",
          "nccu",
          "ncsu"],
        "oclc_number":"42278818",
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"[Washington, D.C.] : The Office.\"}"],
        "note_general_a":["Distributed to depository libraries in paper.",
          "Description based on: 1996; title from content page (viewed on Sept. 1, 1999)."],
        "note_summary_a":["This book offers basic facts about many aspects of U.S. agriculture, including the U.S. farm sector, the structure of U.S. agriculture, and rural America."],
        "resource_type_a":["Government publication",
          "Journal, Magazine, or Periodical"],
        "subject_genre_a":["Handbooks, manuals, etc",
          "Reference"],
        "date_cataloged":"2004-10-01T04:00:00Z",
        "genre_headings_a":["Handbooks, manuals, etc"],
        "subject_suggest":["Handbooks, manuals, etc",
          "Agriculture -- United States -- Handbooks, manuals, etc",
          "Agriculture -- Economic aspects -- United States -- Handbooks, manuals, etc"],
        "note_file_type_a":["Electronic journal in Adobe Acrobat format"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["99059493"],
        "subject_topical_a":["Agriculture",
          "Economic aspects"],
        "publication_year_sort":"2020",
        "subject_headings_a":["Agriculture -- United States -- Handbooks, manuals, etc",
          "Agriculture -- Economic aspects -- United States -- Handbooks, manuals, etc"],
        "note_serial_dates_a":["Electronic coverage as of Sept. 1, 1999: 1996-"],
        "record_data_source_a":["ILSMARC",
          "Shared Records",
          "DWS"],
        "subject_geographic_a":["United States"],
        "virtual_collection_a":["TRLN Shared Records. Documents without shelves."],
        "note_system_details_a":["System requirements: Adobe Acrobat software which is available for download.",
          "Mode of access: Internet at the USDA web site. Address as of 1/5/98: http://www.usda.gov/news/pubs/index.htm; current access is available via PURL."],
        "origin_place_search_a":["[Washington, D.C.]",
          "District of Columbia",
          "United States"],
        "statement_of_responsibility_a":["U.S. Department of Agriculture, Office of Communication."]},
      {
        "id":"UNCb6412446",
        "url_a":["{\"href\":\"http://VB3LK7EB4T.search.serialssolutions.com/?V=1.0\\u0026L=VB3LK7EB4T\\u0026S=JCs\\u0026C=AITEU\\u0026T=marc\",\"type\":\"fulltext\",\"text\":\"Full text available via the UNC-Chapel Hill Libraries\",\"restricted\":\"false\"}"],
        "issn_linking_a":["1683-6480"],
        "author_suggest":["European Commission. Directorate-General for Agriculture",
          "European Commission. Directorate-General for Agriculture and Rural Development"],
        "names_a":["{\"name\":\"European Commission. Directorate-General for Agriculture\"}",
          "{\"name\":\"European Commission. Directorate-General for Agriculture and Rural Development\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 2003234038"],
        "language_a":["English"],
        "local_id":"b6412446",
        "available_a":["Available"],
        "frequency_current_a":["Annual"],
        "lang_code_a":["eng"],
        "publisher_a":["Office for Official Publications of the European Communities"],
        "rollup_id":"OCLC51035041",
        "this_work_a":["{\"title\":[\"Agriculture in the European Union (Online)\"]}"],
        "title_suggest":["Agriculture in the European Union : statistical and economic information"],
        "title_main":"Agriculture in the European Union : statistical and economic information",
        "title_sort_ssort_single":"agriculture in the european union statistical and economic information",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "oclc_number":"51035041",
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Luxembourg : Office for Official Publications of the European Communities, 2002-\"}"],
        "note_general_a":["At head of title, 2001-2003: European Union, Directorate-General for Agriculture; 2004- : European Union, Directorate-General for Agriculture and Rural Development."],
        "earlier_work_a":["{\"label\":\"Separated from\",\"title\":[\"Agricultural situation in the European Union\"],\"issn\":\"1025-6660\"}"],
        "resource_type_a":["Government publication",
          "Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals",
          "Statistics",
          "Electronic journals"],
        "date_cataloged":"2019-04-08T04:00:00Z",
        "genre_headings_a":["Periodicals",
          "Statistics",
          "Electronic journals"],
        "subject_suggest":["Periodicals",
          "Statistics",
          "Electronic journals",
          "Agriculture -- Economic aspects -- European Union countries -- Periodicals",
          "Agriculture -- European Union countries -- Statistics -- Periodicals",
          "Agriculture",
          "Agriculture -- Economic aspects",
          "Europe -- European Union countries",
          "Agricultural statistics",
          "-- European Community",
          "Agricultural development"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["SSJ0065547"],
        "subject_topical_a":["Agriculture",
          "Economic aspects"],
        "publication_year_sort":"2020",
        "subject_headings_a":["Agriculture -- Economic aspects -- European Union countries -- Periodicals",
          "Agriculture -- European Union countries -- Statistics -- Periodicals",
          "Agriculture",
          "Agriculture -- Economic aspects",
          "Europe -- European Union countries",
          "Agricultural statistics",
          "-- European Community",
          "Agricultural development"],
        "note_related_work_a":["Previously published as the separately-paged statistical annex section of: Agricultural situation in the European Union."],
        "note_serial_dates_a":["2001-"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["European Union countries",
          "Europe"],
        "origin_place_search_a":["Luxembourg"],
        "statement_of_responsibility_a":["European Communities."]},
      {
        "id":"UNCb9619088",
        "url_a":["{\"href\":\"https://purl.fdlp.gov/GPO/gpo122374\",\"type\":\"fulltext\",\"restricted\":\"false\"}"],
        "author_suggest":["Schnepf, Randall Dean, 1954-",
          "Library of Congress. Congressional Research Service"],
        "names_a":["{\"name\":\"Schnepf, Randall Dean, 1954-\",\"rel\":\"author\"}",
          "{\"name\":\"Library of Congress. Congressional Research Service\",\"rel\":\"issuing body\"}"],
        "owner_a":["unc"],
        "edition_a":["[Library of Congress public edition]."],
        "misc_id_a":["LCCN: 2019253402",
          "GPO Item Number: 0807-A-07 (online)"],
        "language_a":["English"],
        "local_id":"b9619088",
        "shelfkey":"sudoc:LC 14.23:R 43592/",
        "available_a":["Available"],
        "frequency_current_a":["Updated irregularly"],
        "publisher_a":["Congressional Research Service"],
        "rollup_id":"OCLC1105927027",
        "title_suggest":["Agriculture in the WTO Bali ministerial agreement",
          "CRS report"],
        "title_main":"Agriculture in the WTO Bali ministerial agreement",
        "title_sort_ssort_single":"agriculture in the wto bali ministerial agreement",
        "access_type_a":["Online"],
        "institution_a":["unc",
          "duke",
          "nccu",
          "ncsu"],
        "oclc_number":"1105927027",
        "series_work_a":["{\"title\":[\"CRS report\"],\"details\":\"R43592.\"}"],
        "creator_main_a":["Schnepf, Randall Dean, 1954- author"],
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"[Washington, D.C.] : Congressional Research Service, 2019-\"}"],
        "note_general_a":["\"Updated November 13, 2014.\"",
          "The CRS report home page provides access to all versions published since 2018 in accordance with P.L. 115-141; earliest version dated 2014.",
          "Report includes bibliographical references."],
        "host_item_work_a":["{\"label\":\"In\",\"title\":[\"CRS reports\",\"(Library of Congress. Congressional Research Service)\"]}"],
        "resource_type_a":["Government publication",
          "Web page or site"],
        "date_cataloged":"2019-10-10T04:00:00Z",
        "physical_media_a":["Online"],
        "subject_topical_a":["World Trade Organization. Ministerial Conference",
          "Agriculture",
          "International cooperation",
          "Foreign trade regulation",
          "Free trade",
          "Tariff on farm produce"],
        "publication_year_sort":"2020",
        "reverse_shelfkey":"sudoc:EN~YV}XW~8~VWUQX~",
        "series_statement_a":["Report / Congressional Research Service ; R43592"],
        "subject_headings_a":["World Trade Organization. Ministerial Conference",
          "Agriculture -- International cooperation",
          "Foreign trade regulation",
          "Free trade",
          "Tariff on farm produce"],
        "subject_suggest":["World Trade Organization. Ministerial Conference",
          "Agriculture -- International cooperation",
          "Foreign trade regulation",
          "Free trade",
          "Tariff on farm produce"],
        "record_data_source_a":["ILSMARC",
          "Shared Records",
          "DWS"],
        "virtual_collection_a":["TRLN Shared Records. Documents without shelves."],
        "call_number_schemes_a":["SUDOC"],
        "origin_place_search_a":["[Washington, D.C.]",
          "District of Columbia",
          "United States"],
        "physical_description_a":["1 online resource"],
        "statement_of_responsibility_a":["Randy Schnepf."]},
      {
        "id":"UNCb9404895",
        "url_a":["{\"href\":\"https://purl.fdlp.gov/GPO/gpo111407\",\"type\":\"fulltext\",\"restricted\":\"false\"}"],
        "author_suggest":["Schnepf, Randall Dean, 1954-",
          "Library of Congress. Congressional Research Service"],
        "names_a":["{\"name\":\"Schnepf, Randall Dean, 1954-\",\"rel\":\"author\"}",
          "{\"name\":\"Library of Congress. Congressional Research Service\",\"rel\":\"issuing body\"}"],
        "owner_a":["unc"],
        "edition_a":["[Library of Congress public edition]."],
        "misc_id_a":["LCCN: 2018231606",
          "GPO Item Number: 0807-A-07 (online)"],
        "language_a":["English"],
        "local_id":"b9404895",
        "available_a":["Available"],
        "frequency_current_a":["Updated irregularly"],
        "lang_code_a":["eng"],
        "publisher_a":["Congressional Research Service"],
        "rollup_id":"OCLC1062353061",
        "title_suggest":["Agriculture in the WTO : rules and limits on U.S. domestic support",
          "CRS report"],
        "title_main":"Agriculture in the WTO : rules and limits on U.S. domestic support",
        "title_sort_ssort_single":"agriculture in the wto rules and limits on us domestic support",
        "access_type_a":["Online"],
        "institution_a":["unc",
          "duke",
          "nccu",
          "ncsu"],
        "oclc_number":"1062353061",
        "series_work_a":["{\"title\":[\"CRS report\"],\"details\":\"R45305.\"}"],
        "creator_main_a":["Schnepf, Randall Dean, 1954- author"],
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"[Washington, D.C.] : Congressional Research Service, 2018-\"}"],
        "note_general_a":["The CRS report home page provides access to all versions published since 2018 in accordance with P.L. 115-141.",
          "Report includes bibliographical references."],
        "host_item_work_a":["{\"label\":\"In\",\"title\":[\"CRS reports\",\"(Library of Congress. Congressional Research Service)\"]}"],
        "resource_type_a":["Government publication",
          "Web page or site"],
        "date_cataloged":"2018-12-21T05:00:00Z",
        "physical_media_a":["Online"],
        "subject_topical_a":["Agricultural price supports",
          "Agricultural prices",
          "Government policy"],
        "publication_year_sort":"2020",
        "series_statement_a":["Report / Congressional Research Service ; R45305"],
        "subject_headings_a":["Agricultural price supports -- United States",
          "Agricultural prices -- Government policy -- United States"],
        "subject_suggest":["Agricultural price supports -- United States",
          "Agricultural prices -- Government policy -- United States"],
        "record_data_source_a":["ILSMARC",
          "Shared Records",
          "DWS"],
        "subject_geographic_a":["United States"],
        "virtual_collection_a":["TRLN Shared Records. Documents without shelves."],
        "origin_place_search_a":["[Washington, D.C.]",
          "District of Columbia",
          "United States"],
        "physical_description_a":["1 online resource."],
        "statement_of_responsibility_a":["Randy Schnepf."]},
      {
        "id":"UNCb7278446",
        "url_a":["{\"href\":\"https://www.westlaw.com/Browse/Home/News/NewsbyIndustry/AgricultureIndustryNews?rs=tran3.0\\u0026vr=3.0\\u0026originationContext=vendcc\",\"type\":\"fulltext\",\"text\":\"Full text available to UNC-Chapel Hill Law School with password\",\"note\":\"WestlawNext; Coverage varies by publication\",\"restricted\":\"false\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b7278446",
        "available_a":["Available"],
        "frequency_current_a":["Updated periodically"],
        "lang_code_a":["eng"],
        "publisher_a":["Thomson Reuters"],
        "rollup_id":"WLN00347716",
        "title_suggest":["Agriculture industry news."],
        "title_main":"Agriculture industry news.",
        "title_sort_ssort_single":"agriculture industry news",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"[St. Paul, Minnesota] : Thomson Reuters, [2010-]\"}"],
        "note_general_a":["News and information about companies that derive revenue mainly from agriculture, including large domestic and foreign estates that produce agricultural products and that be involved in the cultivation of land (e.g., grains, vegetables, fruits, cotton, sugar, or oil palms) or in raising livestock (e.g., cattle, sheep, or pigs) for use in various industries (e.g., food, clothing, or cosmetics). Also included are companies that perform advanced research and genetic engineering for the agricultural industry."],
        "related_work_a":["{\"title\":[\"WESTLAW (Information retrieval system)\"]}"],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals",
          "Electronic journals"],
        "date_cataloged":"2015-11-24T05:00:00Z",
        "genre_headings_a":["Periodicals",
          "Electronic journals"],
        "subject_suggest":["Periodicals",
          "Electronic journals",
          "Agriculture -- Economic aspects -- Periodicals"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["WLN00347716"],
        "subject_topical_a":["Agriculture",
          "Economic aspects"],
        "publication_year_sort":"2020",
        "subject_headings_a":["Agriculture -- Economic aspects -- Periodicals"],
        "record_data_source_a":["ILSMARC"],
        "origin_place_search_a":["[St. Paul, Minnesota]",
          "Minnesota",
          "United States"]},
      {
        "id":"UNCb7240610",
        "issn_linking_a":["0065-4639"],
        "issn_primary_a":["0065-4639"],
        "items_a":["{\"notes\":[\"For holdings, ask at Davis RefDesk.\"],\"item_id\":\"i9761729\",\"loc_b\":\"dcpfb\",\"loc_n\":\"dcpfb\",\"status\":\"Available\",\"call_no\":\"A 1.75:\",\"cn_scheme\":\"SUDOC\"}"],
        "author_suggest":["United States. Department of Agriculture"],
        "names_a":["{\"name\":\"United States. Department of Agriculture\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 2009254631",
          "GPO Item Number: 0004 (microfiche)",
          "GPO Item Number: 0004-C (microfiche)"],
        "language_a":["English"],
        "local_id":"b7240610",
        "shelfkey":"sudoc:A 1.75:",
        "available_a":["Available"],
        "frequency_current_a":["Irregular"],
        "lang_code_a":["eng"],
        "publisher_a":["U.S. Dept. of Agriculture",
          "For sale by the Supt. of Docs., U.S. G.P.O."],
        "rollup_id":"OCLC8797086",
        "title_suggest":["Agriculture information bulletin.",
          "Economic Research Service report."],
        "title_main":"Agriculture information bulletin.",
        "title_sort_ssort_single":"agriculture information bulletin",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"8797086",
        "series_work_a":["{\"title\":[\"Economic Research Service report.\"]}"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Washington, D.C. : U.S. Dept. of Agriculture : For sale by the Supt. of Docs., U.S. G.P.O., 1949-\"}"],
        "note_general_a":["Title from cover."],
        "related_work_a":["{\"label\":\"Continuously updating online index\",\"title\":[\"Index to USDA Agriculture information bulletins.\"],\"details\":\"[Beltsville, MD] : United States Department of Agriculture, Agricultural Research Service, National Agricultural Library, 2003-\"}"],
        "note_issuance_a":["Prepared by various agencies of the Dept. of Agriculture."],
        "resource_type_a":["Government publication",
          "Journal, Magazine, or Periodical"],
        "title_variant_a":["AIB",
          "Some issues have title: Agricultural information bulletin"],
        "date_cataloged":"2012-10-05T04:00:00Z",
        "note_numbering_a":["Nos. not issued in chronological sequence.",
          "Some vols. issued in revised editions."],
        "physical_media_a":["Microform",
          "Microform > Microfiche"],
        "subject_topical_a":["United States. Department of Agriculture",
          "Research",
          "Agriculture",
          "Economic aspects",
          "Agricultural productivity",
          "Agricultural conservation",
          "Food",
          "Consumer education",
          "Consumers' preferences",
          "Home economics",
          "Rural conditions"],
        "publication_year_sort":"2020",
        "reverse_shelfkey":"sudoc:P~Y}SU~",
        "series_statement_a":["<No. 737->: An Economic Research Service report"],
        "subject_headings_a":["United States. Department of Agriculture -- Research",
          "Agriculture -- United States",
          "Agriculture -- Economic aspects -- United States",
          "Agricultural productivity -- United States",
          "Agricultural conservation -- United States",
          "Food -- United States",
          "Consumer education -- United States",
          "Consumers' preferences -- United States",
          "Home economics -- United States",
          "United States -- Rural conditions"],
        "subject_suggest":["United States. Department of Agriculture -- Research",
          "Agriculture -- United States",
          "Agriculture -- Economic aspects -- United States",
          "Agricultural productivity -- United States",
          "Agricultural conservation -- United States",
          "Food -- United States",
          "Consumer education -- United States",
          "Consumers' preferences -- United States",
          "Home economics -- United States",
          "United States -- Rural conditions"],
        "note_described_by_a":["Indexes: Cumulative title, document number and subject index available online with links to select online titles."],
        "note_reproduction_a":["Microfiche. [Washington, D.C.] : Supt. of Docs., U.S. G.P.O., 1980- microfiches ; 11 x 15 cm."],
        "note_serial_dates_a":["No. 1-"],
        "location_hierarchy_a":["unc",
          "unc:uncdavy",
          "unc:uncdavy:uncdavdoc"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["United States"],
        "call_number_schemes_a":["SUDOC"],
        "origin_place_search_a":["Washington, D.C.",
          "District of Columbia",
          "United States"],
        "physical_description_a":["volumes : illustrations ; 24-28 cm."]},
      {
        "id":"UNCb7241274",
        "url_a":["{\"href\":\"http://purl.fdlp.gov/GPO/gpo27449\",\"type\":\"fulltext\",\"note\":\"Selected issues, \\u003c1990\\u003e-2005\",\"restricted\":\"false\"}"],
        "issn_linking_a":["0065-4639"],
        "issn_primary_a":["0065-4639"],
        "author_suggest":["United States. Department of Agriculture"],
        "names_a":["{\"name\":\"United States. Department of Agriculture\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 2012230788"],
        "language_a":["English"],
        "local_id":"b7241274",
        "available_a":["Available"],
        "frequency_current_a":["Irregular"],
        "lang_code_a":["eng"],
        "publisher_a":["U.S. Dept. of Agriculture"],
        "rollup_id":"OCLC564609668",
        "title_suggest":["Agriculture information bulletin.",
          "Economic Research Service report."],
        "title_main":"Agriculture information bulletin.",
        "title_sort_ssort_single":"agriculture information bulletin",
        "access_type_a":["Online"],
        "institution_a":["unc",
          "duke",
          "nccu",
          "ncsu"],
        "oclc_number":"564609668",
        "series_work_a":["{\"title\":[\"Economic Research Service report.\"]}"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Washington, D.C. : U.S. Dept. of Agriculture, 1949-\"}"],
        "related_work_a":["{\"label\":\"Continuously updating online index\",\"title\":[\"Index to USDA Agriculture information bulletins.\"],\"details\":\"[Beltsville, MD] : United States Department of Agriculture, Agricultural Research Service, National Agricultural Library, 2003-\"}"],
        "note_issuance_a":["Prepared by various agencies of the Dept. of Agriculture."],
        "resource_type_a":["Government publication",
          "Journal, Magazine, or Periodical"],
        "title_variant_a":["AIB",
          "Some issues have title: Agricultural information bulletin"],
        "date_cataloged":"2012-10-05T04:00:00Z",
        "note_numbering_a":["Nos. not issued in chronological sequence."],
        "physical_media_a":["Online"],
        "subject_topical_a":["United States. Department of Agriculture",
          "Research",
          "Agriculture",
          "Economic aspects",
          "Agricultural productivity",
          "Agricultural conservation",
          "Food",
          "Consumer education",
          "Consumers' preferences",
          "Home economics",
          "Rural conditions"],
        "publication_year_sort":"2020",
        "series_statement_a":["<No. 737->: An Economic Research Service report"],
        "subject_headings_a":["United States. Department of Agriculture -- Research",
          "Agriculture -- United States",
          "Agriculture -- Economic aspects -- United States",
          "Agricultural productivity -- United States",
          "Agricultural conservation -- United States",
          "Food -- United States",
          "Consumer education -- United States",
          "Consumers' preferences -- United States",
          "Home economics -- United States",
          "United States -- Rural conditions"],
        "subject_suggest":["United States. Department of Agriculture -- Research",
          "Agriculture -- United States",
          "Agriculture -- Economic aspects -- United States",
          "Agricultural productivity -- United States",
          "Agricultural conservation -- United States",
          "Food -- United States",
          "Consumer education -- United States",
          "Consumers' preferences -- United States",
          "Home economics -- United States",
          "United States -- Rural conditions"],
        "note_described_by_a":["Indexes: Cumulative title, document number and subject index available online with links to select online titles."],
        "note_serial_dates_a":["Print began with: No. 1."],
        "record_data_source_a":["ILSMARC",
          "Shared Records",
          "DWS"],
        "subject_geographic_a":["United States"],
        "virtual_collection_a":["TRLN Shared Records. Documents without shelves."],
        "origin_place_search_a":["Washington, D.C.",
          "District of Columbia",
          "United States"],
        "physical_description_a":["1 online resource."]},
      {
        "id":"UNCb1302201",
        "issn_linking_a":["0065-4639"],
        "issn_primary_a":["0065-4639"],
        "items_a":["{\"notes\":[\"incomplete\"],\"item_id\":\"i1606821\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"In-Library Use Only\",\"vol\":\"no.1-416(1949-1981)\",\"call_no\":\"A 1.75:\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i1606822\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"In-Library Use Only\",\"vol\":\"no.418-(1981-)\",\"call_no\":\"A 1.75:\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i2414208\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.435\",\"call_no\":\"A 1.75:435\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i2979697\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.460\",\"call_no\":\"A 1.75:460\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11325571\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.1\",\"call_no\":\"A 1.75:1\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11325661\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.2\",\"call_no\":\"A 1.75:2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11325670\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.3\",\"call_no\":\"A 1.75:3\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11325678\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.4\",\"call_no\":\"A 1.75:4\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11325680\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.5\",\"call_no\":\"A 1.75:5\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11325683\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.7\",\"call_no\":\"A 1.75:7\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11325700\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.8\",\"call_no\":\"A 1.75:8\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11180422\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.9\",\"call_no\":\"A 1.75:9\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11325709\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.10\",\"call_no\":\"A 1.75:10\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11325715\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.11\",\"call_no\":\"A 1.75:11\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11325655\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.12\",\"call_no\":\"A 1.75:12\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11325725\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.13/2\",\"call_no\":\"A 1.75:13/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11326029\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.14\",\"call_no\":\"A 1.75:14\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11326044\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.15\",\"call_no\":\"A 1.75:15\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11326092\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.17\",\"call_no\":\"A 1.75:17\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11326122\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.18\",\"call_no\":\"A 1.75:18\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11326123\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.19\",\"call_no\":\"A 1.75:19\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11326247\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.20\",\"call_no\":\"A 1.75:20\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11326249\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.21\",\"call_no\":\"A 1.75:21\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11326250\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.22/2\",\"call_no\":\"A 1.75:22/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11326251\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.23\",\"call_no\":\"A 1.75:23\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11326261\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.24\",\"call_no\":\"A 1.75:24\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11326266\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.25\",\"call_no\":\"A 1.75:25\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11326267\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.26\",\"call_no\":\"A 1.75:26\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11326269\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.27/2\",\"call_no\":\"A 1.75:27/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11326278\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.28\",\"call_no\":\"A 1.75:28\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11326314\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.29\",\"call_no\":\"A 1.75:29\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11326319\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.30/2\",\"call_no\":\"A 1.75:30/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11326343\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.31\",\"call_no\":\"A 1.75:31\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11327118\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.32\",\"call_no\":\"A 1.75:32\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11327124\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.33\",\"call_no\":\"A 1.75:33\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11327131\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.34\",\"call_no\":\"A 1.75:34\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11327160\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.35\",\"call_no\":\"A 1.75:35\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11327164\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.36\",\"call_no\":\"A 1.75:36\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11327171\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.37\",\"call_no\":\"A 1.75:37\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11327180\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.38\",\"call_no\":\"A 1.75:38\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11327285\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.39\",\"call_no\":\"A 1.75:39\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11327307\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.40\",\"call_no\":\"A 1.75:40\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11327312\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.41\",\"call_no\":\"A 1.75:41\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11327315\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.42\",\"call_no\":\"A 1.75:42\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11327318\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.43\",\"call_no\":\"A 1.75:43\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11327826\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.44\",\"call_no\":\"A 1.75:44\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11327842\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.45\",\"call_no\":\"A 1.75:45\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11327847\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.46\",\"call_no\":\"A 1.75:46\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11327853\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.47\",\"call_no\":\"A 1.75:47\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11327855\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.48\",\"call_no\":\"A 1.75:48\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11349718\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.49\",\"call_no\":\"A 1.75:49\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11349720\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.50\",\"call_no\":\"A 1.75:50\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11349728\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.51\",\"call_no\":\"A 1.75:51\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11351057\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.52\",\"call_no\":\"A 1.75:52\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11351062\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.53\",\"call_no\":\"A 1.75:53\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11351063\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.54\",\"call_no\":\"A 1.75:54\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11351066\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.55\",\"call_no\":\"A 1.75:55\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11351068\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.56\",\"call_no\":\"A 1.75:56\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11351069\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.57\",\"call_no\":\"A 1.75:57\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11351084\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.58/2\",\"call_no\":\"A 1.75:58/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11351097\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.59\",\"call_no\":\"A 1.75:59\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368206\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.60\",\"call_no\":\"A 1.75:60\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368224\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.61\",\"call_no\":\"A 1.75:61\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368254\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.62\",\"call_no\":\"A 1.75:62\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368255\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.63/2\",\"call_no\":\"A 1.75:63/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368256\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.64\",\"call_no\":\"A 1.75:64\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368257\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.65\",\"call_no\":\"A 1.75:65\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368259\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.66\",\"call_no\":\"A 1.75:66\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368260\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.67\",\"call_no\":\"A 1.75:67\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368262\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.68\",\"call_no\":\"A 1.75:68\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368263\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.69\",\"call_no\":\"A 1.75:69\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368266\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.70\",\"call_no\":\"A 1.75:70\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368460\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.71\",\"call_no\":\"A 1.75:71\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368461\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.72\",\"call_no\":\"A 1.75:72\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368466\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.74\",\"call_no\":\"A 1.75:74\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368473\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.75\",\"call_no\":\"A 1.75:75\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368475\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.76\",\"call_no\":\"A 1.75:76\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368476\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.77\",\"call_no\":\"A 1.75:77\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368478\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.78\",\"call_no\":\"A 1.75:78\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368479\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.79\",\"call_no\":\"A 1.75:79\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368481\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.80\",\"call_no\":\"A 1.75:80\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368488\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.81\",\"call_no\":\"A 1.75:81\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368489\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.82\",\"call_no\":\"A 1.75:82\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368492\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.83/6\",\"call_no\":\"A 1.75:83/6\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368507\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.84/2\",\"call_no\":\"A 1.75:84/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368511\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.85\",\"call_no\":\"A 1.75:85\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368512\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.86\",\"call_no\":\"A 1.75:86\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368514\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.87\",\"call_no\":\"A 1.75:87\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368520\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.88\",\"call_no\":\"A 1.75:88\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368524\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.89\",\"call_no\":\"A 1.75:89\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368527\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.90\",\"call_no\":\"A 1.75:90\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368530\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.91\",\"call_no\":\"A 1.75:91\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368541\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.92\",\"call_no\":\"A 1.75:92\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368549\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.93\",\"call_no\":\"A 1.75:93\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368558\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.94/4\",\"call_no\":\"A 1.75:94/4\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368559\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.95\",\"call_no\":\"A 1.75:95\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368561\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.96\",\"call_no\":\"A 1.75:96\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368565\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.97\",\"call_no\":\"A 1.75:97\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368568\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.98\",\"call_no\":\"A 1.75:98\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368570\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.99\",\"call_no\":\"A 1.75:99\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368571\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.99/2\",\"call_no\":\"A 1.75:99/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368577\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.100\",\"call_no\":\"A 1.75:100\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368578\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.101\",\"call_no\":\"A 1.75:101\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368584\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.102\",\"call_no\":\"A 1.75:102\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368585\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.103\",\"call_no\":\"A 1.75:103\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368587\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.104\",\"call_no\":\"A 1.75:104\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368588\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.105/2\",\"call_no\":\"A 1.75:105/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368591\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.106/4\",\"call_no\":\"A 1.75:106/4\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368772\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.107\",\"call_no\":\"A 1.75:107\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368788\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.108\",\"call_no\":\"A 1.75:108\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368791\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.109\",\"call_no\":\"A 1.75:109\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368793\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.110\",\"call_no\":\"A 1.75:110\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368794\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.111\",\"call_no\":\"A 1.75:111\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368796\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.112\",\"call_no\":\"A 1.75:112\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368798\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.113\",\"call_no\":\"A 1.75:113\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368949\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.114\",\"call_no\":\"A 1.75:114\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11368980\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.115\",\"call_no\":\"A 1.75:115\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11369007\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.116\",\"call_no\":\"A 1.75:116\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11369012\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.117\",\"call_no\":\"A 1.75:117\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11369021\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.118\",\"call_no\":\"A 1.75:118\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11369025\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.119\",\"call_no\":\"A 1.75:119\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11369183\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.120\",\"call_no\":\"A 1.75:120\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11369216\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.121\",\"call_no\":\"A 1.75:121\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11369217\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.122\",\"call_no\":\"A 1.75:122\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11369221\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.123\",\"call_no\":\"A 1.75:123\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11369223\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.124\",\"call_no\":\"A 1.75:124\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11369225\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.125\",\"call_no\":\"A 1.75:125\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11369227\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.126\",\"call_no\":\"A 1.75:126\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11369229\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.127\",\"call_no\":\"A 1.75:127\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11369230\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.128\",\"call_no\":\"A 1.75:128\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11369231\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.129\",\"call_no\":\"A 1.75:129\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11369234\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.130/5\",\"call_no\":\"A 1.75:130/5\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11369235\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.131\",\"call_no\":\"A 1.75:131\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11369239\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.132\",\"call_no\":\"A 1.75:132\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11369242\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.133\",\"call_no\":\"A 1.75:133\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11369245\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.134\",\"call_no\":\"A 1.75:134\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11369248\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.135/2\",\"call_no\":\"A 1.75:135/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11369273\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.136/5\",\"call_no\":\"A 1.75:136/5\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11369279\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.137\",\"call_no\":\"A 1.75:137\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11369281\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.138\",\"call_no\":\"A 1.75:138\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11369283\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.139\",\"call_no\":\"A 1.75:139\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11369287\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.140\",\"call_no\":\"A 1.75:140\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11369288\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.141\",\"call_no\":\"A 1.75:141\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11369292\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.142\",\"call_no\":\"A 1.75:142\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11369484\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.143\",\"call_no\":\"A 1.75:143\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370014\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.144\",\"call_no\":\"A 1.75:144\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370017\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.145\",\"call_no\":\"A 1.75:145\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370018\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.146\",\"call_no\":\"A 1.75:146\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370020\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.147\",\"call_no\":\"A 1.75:147\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370021\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.148\",\"call_no\":\"A 1.75:148\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370022\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.149\",\"call_no\":\"A 1.75:149\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370025\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.150\",\"call_no\":\"A 1.75:150\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370026\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.151\",\"call_no\":\"A 1.75:151\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370028\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.152\",\"call_no\":\"A 1.75:152\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370030\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.153\",\"call_no\":\"A 1.75:153\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370053\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.154\",\"call_no\":\"A 1.75:154\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370054\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.155\",\"call_no\":\"A 1.75:155\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370056\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.156\",\"call_no\":\"A 1.75:156\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370058\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.157\",\"call_no\":\"A 1.75:157\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370060\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.158\",\"call_no\":\"A 1.75:158\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370062\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.159/3\",\"call_no\":\"A 1.75:159/3\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370063\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.160\",\"call_no\":\"A 1.75:160\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370229\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.161\",\"call_no\":\"A 1.75:161\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370230\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.162\",\"call_no\":\"A 1.75:162\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370233\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.163\",\"call_no\":\"A 1.75:163\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370339\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.164\",\"call_no\":\"A 1.75:164\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370352\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.165\",\"call_no\":\"A 1.75:165\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370353\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.166\",\"call_no\":\"A 1.75:166\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370357\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.167\",\"call_no\":\"A 1.75:167\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370358\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.168\",\"call_no\":\"A 1.75:168\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370359\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.169\",\"call_no\":\"A 1.75:169\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370401\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.170\",\"call_no\":\"A 1.75:170\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370404\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.171\",\"call_no\":\"A 1.75:171\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370410\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.172\",\"call_no\":\"A 1.75:172\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370413\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.173/3\",\"call_no\":\"A 1.75:173/3\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370416\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.174\",\"call_no\":\"A 1.75:174\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370427\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.175/4\",\"call_no\":\"A 1.75:175/4\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370879\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.176/3\",\"call_no\":\"A 1.75:176/3\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370430\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.177\",\"call_no\":\"A 1.75:177\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370437\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.178\",\"call_no\":\"A 1.75:178\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370440\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.179\",\"call_no\":\"A 1.75:179\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370443\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.180\",\"call_no\":\"A 1.75:180\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370446\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.181\",\"call_no\":\"A 1.75:181\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370447\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.182\",\"call_no\":\"A 1.75:182\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370448\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.183\",\"call_no\":\"A 1.75:183\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370451\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.184\",\"call_no\":\"A 1.75:184\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370452\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.185\",\"call_no\":\"A 1.75:185\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370453\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.186\",\"call_no\":\"A 1.75:186\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370457\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.187\",\"call_no\":\"A 1.75:187\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i9809982\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.196\",\"call_no\":\"A 1.75:196/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370819\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.188\",\"call_no\":\"A 1.75:188\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370842\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.189/5\",\"call_no\":\"A 1.75:189/5\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370845\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.190\",\"call_no\":\"A 1.75:190\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370846\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.191\",\"call_no\":\"A 1.75:191\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370848\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.192\",\"call_no\":\"A 1.75:192\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370850\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.193/5\",\"call_no\":\"A 1.75:193/5\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370852\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.194\",\"call_no\":\"A 1.75:194\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370855\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.195\",\"call_no\":\"A 1.75:195\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370882\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.197\",\"call_no\":\"A 1.75:197\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370886\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.198\",\"call_no\":\"A 1.75:198\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370890\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.200\",\"call_no\":\"A 1.75:200\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370892\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.201\",\"call_no\":\"A 1.75:201\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370895\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.202\",\"call_no\":\"A 1.75:202\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370898\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.203\",\"call_no\":\"A 1.75:203\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370900\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.204\",\"call_no\":\"A 1.75:204\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370902\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.205\",\"call_no\":\"A 1.75:205\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370905\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.206\",\"call_no\":\"A 1.75:206\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370910\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.207/3\",\"call_no\":\"A 1.75:207/3\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370912\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.207/4\",\"call_no\":\"A 1.75:207/4\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370914\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.208\",\"call_no\":\"A 1.75:208\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370920\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.209\",\"call_no\":\"A 1.75:209\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11370957\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.210\",\"call_no\":\"A 1.75:210\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11371347\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.211\",\"call_no\":\"A 1.75:211\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11371357\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.212/2\",\"call_no\":\"A 1.75:212/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11371358\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.213\",\"call_no\":\"A 1.75:213\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11371516\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.214\",\"call_no\":\"A 1.75:214\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11371519\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.215\",\"call_no\":\"A 1.75:215\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11371520\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.216\",\"call_no\":\"A 1.75:216\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11371521\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.217\",\"call_no\":\"A 1.75:217\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11371523\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.218/2\",\"call_no\":\"A 1.75:218/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11371524\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.219\",\"call_no\":\"A 1.75:219\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11371532\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.220\",\"call_no\":\"A 1.75:220\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11371538\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.221\",\"call_no\":\"A 1.75:221\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11371543\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.222\",\"call_no\":\"A 1.75:222\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11371553\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.223\",\"call_no\":\"A 1.75:223\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11371562\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.224/2\",\"call_no\":\"A 1.75:224/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372754\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.225\",\"call_no\":\"A 1.75:225\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372862\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.226\",\"call_no\":\"A 1.75:226\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372863\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.227\",\"call_no\":\"A 1.75:227\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372864\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.228\",\"call_no\":\"A 1.75:228\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372865\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.229\",\"call_no\":\"A 1.75:229\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372867\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.230\",\"call_no\":\"A 1.75:230\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372868\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.230/2\",\"call_no\":\"A 1.75:230/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372869\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.230/3\",\"call_no\":\"A 1.75:230/3\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372870\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.230/4\",\"call_no\":\"A 1.75:230/4\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372871\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.230/5\",\"call_no\":\"A 1.75:230/5\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372872\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.230/6\",\"call_no\":\"A 1.75:230/6\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372873\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.230/7\",\"call_no\":\"A 1.75:230/7\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372874\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.230/8\",\"call_no\":\"A 1.75:230/8\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372875\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.230/9\",\"call_no\":\"A 1.75:230/9\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372876\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.230/10\",\"call_no\":\"A 1.75:230/10\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372890\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.231\",\"call_no\":\"A 1.75:231\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372891\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.232\",\"call_no\":\"A 1.75:232\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372893\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.233\",\"call_no\":\"A 1.75:233\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372894\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.234\",\"call_no\":\"A 1.75:234\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372897\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.235\",\"call_no\":\"A 1.75:235\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372898\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.236\",\"call_no\":\"A 1.75:236\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372900\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.237/3\",\"call_no\":\"A 1.75:237/3\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372937\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.238\",\"call_no\":\"A 1.75:238\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372939\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.239\",\"call_no\":\"A 1.75:239\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372944\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.240\",\"call_no\":\"A 1.75:240\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372945\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.241\",\"call_no\":\"A 1.75:241\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372949\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.241 supplement.\",\"call_no\":\"A 1.75:241/SUPP\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372953\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.242\",\"call_no\":\"A 1.75:242\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372957\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.243\",\"call_no\":\"A 1.75:243\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372962\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.244/2\",\"call_no\":\"A 1.75:244/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372965\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.245/2\",\"call_no\":\"A 1.75:245/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372969\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.246\",\"call_no\":\"A 1.75:246\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372974\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.247\",\"call_no\":\"A 1.75:247\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372980\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.248\",\"call_no\":\"A 1.75:248\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372982\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.249\",\"call_no\":\"A 1.75:249\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372989\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.250\",\"call_no\":\"A 1.75:250\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372991\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.251\",\"call_no\":\"A 1.75:251\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11372996\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.252\",\"call_no\":\"A 1.75:252\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373005\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.253\",\"call_no\":\"A 1.75:253\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373009\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.254/2\",\"call_no\":\"A 1.75:254/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373011\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.255\",\"call_no\":\"A 1.75:255\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373012\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.256\",\"call_no\":\"A 1.75:256\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373015\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.257\",\"call_no\":\"A 1.75:257\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373017\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.257:supplement\",\"call_no\":\"A 1.75:257/supp\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373020\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.258\",\"call_no\":\"A 1.75:258\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373022\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.259\",\"call_no\":\"A 1.75:259\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373025\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.260/2\",\"call_no\":\"A 1.75:260/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373027\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.261\",\"call_no\":\"A 1.75:261\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373497\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.262\",\"call_no\":\"A 1.75:262\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373503\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.263\",\"call_no\":\"A 1.75:263\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373505\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.264\",\"call_no\":\"A 1.75:264\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373507\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.265\",\"call_no\":\"A 1.75:265\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373508\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.266\",\"call_no\":\"A 1.75:266\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373509\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.267/3\",\"call_no\":\"A 1.75:267/3\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373510\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.268\",\"call_no\":\"A 1.75:268\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373511\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.269\",\"call_no\":\"A 1.75:269\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373512\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.270\",\"call_no\":\"A 1.75:270\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373517\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.271\",\"call_no\":\"A 1.75:271\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373518\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.272\",\"call_no\":\"A 1.75:272\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373520\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.273\",\"call_no\":\"A 1.75:273\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373667\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.274\",\"call_no\":\"A 1.75:274\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373668\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.275/2\",\"call_no\":\"A 1.75:275/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373672\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.276\",\"call_no\":\"A 1.75:276\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373675\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.277\",\"call_no\":\"A 1.75:277\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373677\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.278\",\"call_no\":\"A 1.75:278\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373680\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.279\",\"call_no\":\"A 1.75:279\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373687\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.280\",\"call_no\":\"A 1.75:280\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373689\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.281\",\"call_no\":\"A 1.75:281\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373693\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.282\",\"call_no\":\"A 1.75:282\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373707\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.283\",\"call_no\":\"A 1.75:283\",\"cn_scheme\":\"SUDOC\"}",
          "{\"notes\":[\"includes errata.\"],\"item_id\":\"i11373711\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.284\",\"call_no\":\"A 1.75:284\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373724\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.285\",\"call_no\":\"A 1.75:285\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373727\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.286/3\",\"call_no\":\"A 1.75:286/3\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373739\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.287\",\"call_no\":\"A 1.75:287\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11373746\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.288/4\",\"call_no\":\"A 1.75:288/4\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11375259\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.289\",\"call_no\":\"A 1.75:289\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11375260\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.290/2\",\"call_no\":\"A 1.75:290/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11375261\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.291\",\"call_no\":\"A 1.75:291\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11375263\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.292/2\",\"call_no\":\"A 1.75:292/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11375264\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.293\",\"call_no\":\"A 1.75:293\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11375266\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.294\",\"call_no\":\"A 1.75:294\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11375857\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.295\",\"call_no\":\"A 1.75:295\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11375861\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.296\",\"call_no\":\"A 1.75:296\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11375871\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.297\",\"call_no\":\"A 1.75:297\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11375872\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.298\",\"call_no\":\"A 1.75:298\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11375881\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.299\",\"call_no\":\"A 1.75:299\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378139\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.300\",\"call_no\":\"A 1.75:300\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378150\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.301\",\"call_no\":\"A 1.75:301\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378152\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.302\",\"call_no\":\"A 1.75:302\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378185\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.303\",\"call_no\":\"A 1.75:303\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378208\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.304\",\"call_no\":\"A 1.75:304\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378284\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.305/4\",\"call_no\":\"A 1.75:305/4\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378399\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.306\",\"call_no\":\"A 1.75:306\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378400\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.307\",\"call_no\":\"A 1.75:307\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378402\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.308\",\"call_no\":\"A 1.75:308\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378436\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.309\",\"call_no\":\"A 1.75:309\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378534\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.310\",\"call_no\":\"A 1.75:310\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378566\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.311/2\",\"call_no\":\"A 1.75:311/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378579\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.312/2\",\"call_no\":\"A 1.75:312/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378589\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.313\",\"call_no\":\"A 1.75:313\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378590\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.314\",\"call_no\":\"A 1.75:314\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378606\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.315/2\",\"call_no\":\"A 1.75:315/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378610\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.316/2\",\"call_no\":\"A 1.75:316/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378611\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.317/2\",\"call_no\":\"A 1.75:317/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378613\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.318\",\"call_no\":\"A 1.75:318\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378615\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.319/2\",\"call_no\":\"A 1.75:319/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378627\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.320\",\"call_no\":\"A 1.75:320\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378628\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.321/2\",\"call_no\":\"A 1.75:321/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378629\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.322/2\",\"call_no\":\"A 1.75:322/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378630\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.323/2\",\"call_no\":\"A 1.75:323/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378633\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.324/2\",\"call_no\":\"A 1.75:324/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378636\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.325\",\"call_no\":\"A 1.75:325\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378639\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.326\",\"call_no\":\"A 1.75:326\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378642\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.327\",\"call_no\":\"A 1.75:327\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378644\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.328\",\"call_no\":\"A 1.75:328\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378645\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.329\",\"call_no\":\"A 1.75:329\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378648\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.330\",\"call_no\":\"A 1.75:330\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378651\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.331\",\"call_no\":\"A 1.75:331\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378652\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.332\",\"call_no\":\"A 1.75:332\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378664\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.333/2\",\"call_no\":\"A 1.75:333/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378666\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.334\",\"call_no\":\"A 1.75:334\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378668\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.335\",\"call_no\":\"A 1.75:335\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378671\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.336\",\"call_no\":\"A 1.75:336\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378679\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.337\",\"call_no\":\"A 1.75:337\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378685\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.338\",\"call_no\":\"A 1.75:338\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378692\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.339\",\"call_no\":\"A 1.75:339\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378705\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.340\",\"call_no\":\"A 1.75:340\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378706\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.341/2\",\"call_no\":\"A 1.75:341/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11378708\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.342\",\"call_no\":\"A 1.75:342\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11379777\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.343\",\"call_no\":\"A 1.75:343\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11379778\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.344\",\"call_no\":\"A 1.75:344\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11379780\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.345/4\",\"call_no\":\"A 1.75:345/4\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11379781\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.346\",\"call_no\":\"A 1.75:346\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11379782\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.347\",\"call_no\":\"A 1.75:347\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11379784\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.348\",\"call_no\":\"A 1.75:348\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11379802\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.349\",\"call_no\":\"A 1.75:349\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11379803\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.350\",\"call_no\":\"A 1.75:350\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11379807\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.352\",\"call_no\":\"A 1.75:352\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11379809\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.353\",\"call_no\":\"A 1.75:353\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11380365\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.354/2\",\"call_no\":\"A 1.75:354/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11380493\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.355/2\",\"call_no\":\"A 1.75:355/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11380505\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.356\",\"call_no\":\"A 1.75:356\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11380506\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.359\",\"call_no\":\"A 1.75:359\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11380513\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.357/3\",\"call_no\":\"A 1.75:357/3\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11380514\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.358\",\"call_no\":\"A 1.75:358\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11380534\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.360\",\"call_no\":\"A 1.75:360\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11380539\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.361/3\",\"call_no\":\"A 1.75:361/3\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11380544\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.362/2\",\"call_no\":\"A 1.75:362/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11380554\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.363\",\"call_no\":\"A 1.75:363\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11380555\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.364/990\",\"call_no\":\"A 1.75:364/990\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11380556\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.365\",\"call_no\":\"A 1.75:365\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381428\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.366\",\"call_no\":\"A 1.75:366\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381432\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.367\",\"call_no\":\"A 1.75:367\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381439\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.368\",\"call_no\":\"A 1.75:368\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381440\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.369\",\"call_no\":\"A 1.75:369\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381451\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.370\",\"call_no\":\"A 1.75:370\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381460\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.371\",\"call_no\":\"A 1.75:371\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381462\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.373\",\"call_no\":\"A 1.75:373\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381466\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.374\",\"call_no\":\"A 1.75:374\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381479\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.375\",\"call_no\":\"A 1.75:375\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381481\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.376\",\"call_no\":\"A 1.75:376\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381482\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.376:supplement 1\",\"call_no\":\"A 1.75:376/supp. 1\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381502\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.377\",\"call_no\":\"A 1.75:377\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381506\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.378\",\"call_no\":\"A 1.75:378\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381509\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.379\",\"call_no\":\"A 1.75:379\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381512\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.380/2\",\"call_no\":\"A 1.75:380/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381513\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.364/3\",\"call_no\":\"A 1.75:364/3\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381516\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.381\",\"call_no\":\"A 1.75:381\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381521\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.382\",\"call_no\":\"A 1.75:382\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381551\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.383\",\"call_no\":\"A 1.75:383\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381561\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.384\",\"call_no\":\"A 1.75:384\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381825\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.385\",\"call_no\":\"A 1.75:385\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381826\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.386\",\"call_no\":\"A 1.75:386\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381827\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.387\",\"call_no\":\"A 1.75:387\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381840\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.388\",\"call_no\":\"A 1.75:388\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381842\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.389:supplement 1\",\"call_no\":\"A 1.75:389/supp.1\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381844\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.390\",\"call_no\":\"A 1.75:390\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i4761867\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.391\",\"call_no\":\"A 1.75:391\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381851\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.392\",\"call_no\":\"A 1.75:392\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381852\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.394\",\"call_no\":\"A 1.75:394\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381854\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.397\",\"call_no\":\"A 1.75:397\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381863\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.398\",\"call_no\":\"A 1.75:398\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381867\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.399\",\"call_no\":\"A 1.75:399\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381868\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.400\",\"call_no\":\"A 1.75:400\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381881\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.401\",\"call_no\":\"A 1.75:401\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381917\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.402\",\"call_no\":\"A 1.75:402\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381927\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.403\",\"call_no\":\"A 1.75:403\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11381929\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.403:supplement 1\",\"call_no\":\"A 1.75:403/supp. 1\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i4761876\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.405\",\"call_no\":\"A 1.75:405\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382076\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.406\",\"call_no\":\"A 1.75:406\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382081\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.407\",\"call_no\":\"A 1.75:407\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382082\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.408\",\"call_no\":\"A 1.75:408\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382083\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.409\",\"call_no\":\"A 1.75:409\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382084\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.410\",\"call_no\":\"A 1.75:410\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382086\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.411\",\"call_no\":\"A 1.75:411\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382087\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.412\",\"call_no\":\"A 1.75:412\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382089\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.413\",\"call_no\":\"A 1.75:413\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382091\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.414\",\"call_no\":\"A 1.75:414\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382094\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.415\",\"call_no\":\"A 1.75:415\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382096\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.416\",\"call_no\":\"A 1.75:416\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382099\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.416:supplement 1\",\"call_no\":\"A 1.75:416/supp. 1\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382100\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.418\",\"call_no\":\"A 1.75:418\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382102\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.419\",\"call_no\":\"A 1.75:419\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382117\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.420\",\"call_no\":\"A 1.75:420\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382119\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.421\",\"call_no\":\"A 1.75:421\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382120\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.422\",\"call_no\":\"A 1.75:422\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382121\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.423\",\"call_no\":\"A 1.75:423\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382122\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.424\",\"call_no\":\"A 1.75:424\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382142\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.425/2\",\"call_no\":\"A 1.75:425/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382143\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.426\",\"call_no\":\"A 1.75:426\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382312\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.427\",\"call_no\":\"A 1.75:427\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382323\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.428\",\"call_no\":\"A 1.75:428\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382328\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.429\",\"call_no\":\"A 1.75:429\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382139\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.425/990\",\"call_no\":\"A 1.75:425/990\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382329\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.430:supplement\",\"call_no\":\"A 1.75:430/supp.\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382330\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.431\",\"call_no\":\"A 1.75:431\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382332\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.432\",\"call_no\":\"A 1.75:432\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382334\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.433\",\"call_no\":\"A 1.75:433\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382335\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.434\",\"call_no\":\"A 1.75:434\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382338\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.436\",\"call_no\":\"A 1.75:436\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382340\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.437\",\"call_no\":\"A 1.75:437\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382341\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.438\",\"call_no\":\"A 1.75:438\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382342\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.439\",\"call_no\":\"A 1.75:439\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382345\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.440\",\"call_no\":\"A 1.75:440\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382361\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.441\",\"call_no\":\"A 1.75:441\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382364\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.442\",\"call_no\":\"A 1.75:442\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382365\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.444\",\"call_no\":\"A 1.75:444\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382366\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.445\",\"call_no\":\"A 1.75:445\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i4761913\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.446\",\"call_no\":\"A 1.75:446\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382369\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.448\",\"call_no\":\"A 1.75:448\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11382371\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.449\",\"call_no\":\"A 1.75:449\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11387270\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.430\",\"call_no\":\"A 1.75:430\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11387271\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.450\",\"call_no\":\"A 1.75:450\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11387306\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.451\",\"call_no\":\"A 1.75:451\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11387307\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.452\",\"call_no\":\"A 1.75:452\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11387311\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.453\",\"call_no\":\"A 1.75:453\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11387313\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.454\",\"call_no\":\"A 1.75:454\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11387316\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.455\",\"call_no\":\"A 1.75:455\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11387322\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.456\",\"call_no\":\"A 1.75:456\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11387323\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.457\",\"call_no\":\"A 1.75:457\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11387324\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.458\",\"call_no\":\"A 1.75:458\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11387325\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.459\",\"call_no\":\"A 1.75:459\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11387328\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.461\",\"call_no\":\"A 1.75:461\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11387329\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.462\",\"call_no\":\"A 1.75:462\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11387330\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.463\",\"call_no\":\"A 1.75:463\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11387331\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.464\",\"call_no\":\"A 1.75:464\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11387332\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.465\",\"call_no\":\"A 1.75:465\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11387358\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.466\",\"call_no\":\"A 1.75:466\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11387361\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.467\",\"call_no\":\"A 1.75:467\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11387362\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.468\",\"call_no\":\"A 1.75:468\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11387364\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.469\",\"call_no\":\"A 1.75:469\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11387368\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.470\",\"call_no\":\"A 1.75:470\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11387369\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.471\",\"call_no\":\"A 1.75:471\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11387372\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.472\",\"call_no\":\"A 1.75:472\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11387373\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.473\",\"call_no\":\"A 1.75:473\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11387375\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.474\",\"call_no\":\"A 1.75:474\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11387376\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.475\",\"call_no\":\"A 1.75:475\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11387440\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.476\",\"call_no\":\"A 1.75:476\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11388746\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.477\",\"call_no\":\"A 1.75:477\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11389112\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.478\",\"call_no\":\"A 1.75:478\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11390440\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.480\",\"call_no\":\"A 1.75:480\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11390443\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.480/2\",\"call_no\":\"A 1.75:480/2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11390445\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.481\",\"call_no\":\"A 1.75:481\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11390446\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.482\",\"call_no\":\"A 1.75:482\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394406\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.483\",\"call_no\":\"A 1.75:483\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394415\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.484\",\"call_no\":\"A 1.75:484\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394417\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.485\",\"call_no\":\"A 1.75:485\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394418\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.486\",\"call_no\":\"A 1.75:486\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394420\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.487\",\"call_no\":\"A 1.75:487\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394421\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.488\",\"call_no\":\"A 1.75:488\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394471\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.490\",\"call_no\":\"A 1.75:490\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394479\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.491\",\"call_no\":\"A 1.75:491\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394485\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.492\",\"call_no\":\"A 1.75:492\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394488\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.494\",\"call_no\":\"A 1.75:494\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394528\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.495\",\"call_no\":\"A 1.75:495\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394530\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.496\",\"call_no\":\"A 1.75:496\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394536\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.497\",\"call_no\":\"A 1.75:497\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394740\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.498\",\"call_no\":\"A 1.75:498\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394742\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.499\",\"call_no\":\"A 1.75:499\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394744\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.501\",\"call_no\":\"A 1.75:501\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394745\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.502\",\"call_no\":\"A 1.75:502\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394747\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.503\",\"call_no\":\"A 1.75:503\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i7302857\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.504\",\"call_no\":\"A 1.75:504\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394751\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.505\",\"call_no\":\"A 1.75:505\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394816\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.506\",\"call_no\":\"A 1.75:506\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394954\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.507\",\"call_no\":\"A 1.75:507\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394955\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.508\",\"call_no\":\"A 1.75:508\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394956\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.509\",\"call_no\":\"A 1.75:509\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394958\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.510\",\"call_no\":\"A 1.75:510\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394959\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.511\",\"call_no\":\"A 1.75:511\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394966\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.512\",\"call_no\":\"A 1.75:512\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394974\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.513\",\"call_no\":\"A 1.75:513\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394980\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.514\",\"call_no\":\"A 1.75:514\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394981\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.515\",\"call_no\":\"A 1.75:515\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394982\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.516\",\"call_no\":\"A 1.75:516\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394994\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.517\",\"call_no\":\"A 1.75:517\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11394996\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.518\",\"call_no\":\"A 1.75:518\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395005\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.519\",\"call_no\":\"A 1.75:519\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395007\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.521\",\"call_no\":\"A 1.75:521\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395009\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.522\",\"call_no\":\"A 1.75:522\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395012\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.523\",\"call_no\":\"A 1.75:523\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395023\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.524\",\"call_no\":\"A 1.75:524\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395047\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.527\",\"call_no\":\"A 1.75:527\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395049\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.529\",\"call_no\":\"A 1.75:529\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395059\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.530\",\"call_no\":\"A 1.75:530\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395061\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.531\",\"call_no\":\"A 1.75:531\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395081\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.532\",\"call_no\":\"A 1.75:532\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395085\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.533\",\"call_no\":\"A 1.75:533\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395086\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.534\",\"call_no\":\"A 1.75:534\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395089\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.535\",\"call_no\":\"A 1.75:535\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395101\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.536\",\"call_no\":\"A 1.75:536\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395102\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.537\",\"call_no\":\"A 1.75:537\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395103\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.538\",\"call_no\":\"A 1.75:538\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395104\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.539\",\"call_no\":\"A 1.75:539\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395106\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.539-1\",\"call_no\":\"A 1.75:539-1\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395114\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.540\",\"call_no\":\"A 1.75:540\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395116\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.541\",\"call_no\":\"A 1.75:541\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395118\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.542\",\"call_no\":\"A 1.75:542\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395122\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.543\",\"call_no\":\"A 1.75:543\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395124\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.544\",\"call_no\":\"A 1.75:544\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395127\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.545\",\"call_no\":\"A 1.75:545\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395129\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.546\",\"call_no\":\"A 1.75:546\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395138\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.547\",\"call_no\":\"A 1.75:547\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395139\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.548\",\"call_no\":\"A 1.75:548\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395140\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.549\",\"call_no\":\"A 1.75:549\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395427\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.550\",\"call_no\":\"A 1.75:550\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395428\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.552\",\"call_no\":\"A 1.75:552\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395430\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.553\",\"call_no\":\"A 1.75:553\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395434\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.554\",\"call_no\":\"A 1.75:554\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395437\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.556\",\"call_no\":\"A 1.75:556\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395440\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.557\",\"call_no\":\"A 1.75:557\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395441\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.558\",\"call_no\":\"A 1.75:558\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395442\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.559\",\"call_no\":\"A 1.75:559\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395436\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.555\",\"call_no\":\"A 1.75:555\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395459\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.560\",\"call_no\":\"A 1.75:560\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395462\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.561\",\"call_no\":\"A 1.75:561\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395463\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.562\",\"call_no\":\"A 1.75:562\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395465\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.563\",\"call_no\":\"A 1.75:563\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395468\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.564\",\"call_no\":\"A 1.75:564\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395470\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.565\",\"call_no\":\"A 1.75:565\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395475\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.566\",\"call_no\":\"A 1.75:566\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395477\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.568\",\"call_no\":\"A 1.75:568\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395502\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.570\",\"call_no\":\"A 1.75:570\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395503\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.571\",\"call_no\":\"A 1.75:571\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395504\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.572\",\"call_no\":\"A 1.75:572\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395505\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.573\",\"call_no\":\"A 1.75:573\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395508\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.574\",\"call_no\":\"A 1.75:574\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395509\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.575\",\"call_no\":\"A 1.75:575\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395513\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.576\",\"call_no\":\"A 1.75:576\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395516\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.577\",\"call_no\":\"A 1.75:577\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395518\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.578\",\"call_no\":\"A 1.75:578\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11395609\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.580\",\"call_no\":\"A 1.75:580\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397109\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.581\",\"call_no\":\"A 1.75:581\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397119\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.582\",\"call_no\":\"A 1.75:582\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397144\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.583\",\"call_no\":\"A 1.75:583\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397148\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.584\",\"call_no\":\"A 1.75:584\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397156\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.585\",\"call_no\":\"A 1.75:585\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397161\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.587\",\"call_no\":\"A 1.75:587\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397171\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.588\",\"call_no\":\"A 1.75:588\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397179\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.589\",\"call_no\":\"A 1.75:589\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397181\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.590\",\"call_no\":\"A 1.75:590\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397182\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.591\",\"call_no\":\"A 1.75:591\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397185\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.592\",\"call_no\":\"A 1.75:592\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397186\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.593\",\"call_no\":\"A 1.75:593\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397187\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.594\",\"call_no\":\"A 1.75:594\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397188\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.595\",\"call_no\":\"A 1.75:595\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397190\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.596\",\"call_no\":\"A 1.75:596\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397191\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.597\",\"call_no\":\"A 1.75:597\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397192\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.598\",\"call_no\":\"A 1.75:598\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397194\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.599\",\"call_no\":\"A 1.75:599\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397195\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.601\",\"call_no\":\"A 1.75:601\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397196\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.600\",\"call_no\":\"A 1.75:600\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397198\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.602\",\"call_no\":\"A 1.75:602\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397199\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.603\",\"call_no\":\"A 1.75:603\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397201\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.604\",\"call_no\":\"A 1.75:604\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397203\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.605\",\"call_no\":\"A 1.75:605\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397219\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.606\",\"call_no\":\"A 1.75:606\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397234\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.607\",\"call_no\":\"A 1.75:607\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397246\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.608\",\"call_no\":\"A 1.75:608\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397252\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.609\",\"call_no\":\"A 1.75:609\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397273\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.610\",\"call_no\":\"A 1.75:610\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397276\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.610/corr.\",\"call_no\":\"A 1.75:610/corr.\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397278\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.611\",\"call_no\":\"A 1.75:611\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397280\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.614\",\"call_no\":\"A 1.75:614\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397283\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.615\",\"call_no\":\"A 1.75:615\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397284\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.616\",\"call_no\":\"A 1.75:616\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397286\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.617\",\"call_no\":\"A 1.75:617\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397287\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.618\",\"call_no\":\"A 1.75:618\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397288\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.619\",\"call_no\":\"A 1.75:619\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397302\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.620\",\"call_no\":\"A 1.75:620\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397304\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.620/992\",\"call_no\":\"A 1.75:620/992\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397318\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.621\",\"call_no\":\"A 1.75:621\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397321\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.622\",\"call_no\":\"A 1.75:622\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397322\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.623\",\"call_no\":\"A 1.75:623\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397324\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.624\",\"call_no\":\"A 1.75:624\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397326\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.625\",\"call_no\":\"A 1.75:625\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i4762077\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.627\",\"call_no\":\"A 1.75:627\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i4762076\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.626\",\"call_no\":\"A 1.75:626\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397328\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.628\",\"call_no\":\"A 1.75:628\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397335\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.630\",\"call_no\":\"A 1.75:630\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397336\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.632\",\"call_no\":\"A 1.75:632\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397505\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.633\",\"call_no\":\"A 1.75:633\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397506\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.634\",\"call_no\":\"A 1.75:634\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397507\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.635\",\"call_no\":\"A 1.75:635\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397508\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.636\",\"call_no\":\"A 1.75:636\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397509\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.637\",\"call_no\":\"A 1.75:637\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397510\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.638\",\"call_no\":\"A 1.75:638\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397511\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.639\",\"call_no\":\"A 1.75:639\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397512\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.631\",\"call_no\":\"A 1.75:631\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397514\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.643\",\"call_no\":\"A 1.75:643\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397515\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.649\",\"call_no\":\"A 1.75:649\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397516\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.650\",\"call_no\":\"A 1.75:650\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397518\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.653\",\"call_no\":\"A 1.75:653\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397519\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.656\",\"call_no\":\"A 1.75:656\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397520\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.667\",\"call_no\":\"A 1.75:667\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397521\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.709\",\"call_no\":\"A 1.75:709\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i5997209\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.721\",\"call_no\":\"A 1.75:721\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397640\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.722\",\"call_no\":\"A 1.75:722\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i5418002\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.769\",\"call_no\":\"A 1.75:769\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i6844149\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.788\",\"call_no\":\"A 1.75:788\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397643\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.500\",\"call_no\":\"A 1.75:500\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397645\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.525\",\"call_no\":\"A 1.75:525\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397646\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.551\",\"call_no\":\"A 1.75:551\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397647\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.579\",\"call_no\":\"A 1.75:579\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11397650\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.569\",\"call_no\":\"A 1.75:569\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i11488895\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"vol\":\"no.664-2\",\"call_no\":\"A 1.75:664-2\",\"cn_scheme\":\"SUDOC\"}",
          "{\"item_id\":\"i2414209\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"no.435\",\"call_no\":\"S21 .A74 no. 435\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i3470191\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"no.629\",\"call_no\":\"S21 .A74 no. 629\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i3171647\",\"loc_b\":\"bbla\",\"loc_n\":\"bbla\",\"status\":\"Available\",\"vol\":\"no.63\",\"call_no\":\"S21 .A74 no. 63\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i2960195\",\"loc_b\":\"bbla\",\"loc_n\":\"bbla\",\"status\":\"Available\",\"vol\":\"no.133\",\"call_no\":\"S21 .A74 no. 133\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1104448\",\"loc_b\":\"bbla\",\"loc_n\":\"bbla\",\"status\":\"Available\",\"vol\":\"no.348\",\"call_no\":\"S21 .A74 no. 348\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i2979698\",\"loc_b\":\"bbla\",\"loc_n\":\"bbla\",\"status\":\"Available\",\"vol\":\"no.460\",\"call_no\":\"S21 .A74 no. 460\",\"cn_scheme\":\"LC\"}"],
        "author_suggest":["United States. Department of Agriculture"],
        "names_a":["{\"name\":\"United States. Department of Agriculture\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: agr49000680",
          "CODEN designation: XAAIA7",
          "GPO Item Number: 0004 (microfiche)",
          "GPO Item Number: 0004-C (microfiche)"],
        "barcodes_a":["HAHC-8046-00001",
          "HAHC-8046-00002",
          "00049950980",
          "HAYQ-7788-00001",
          "00051446728",
          "00051446700",
          "00051446693",
          "00051446684",
          "00051446675",
          "00051446666",
          "00051446657",
          "00050895539",
          "00051446773",
          "00051446611",
          "00051446719",
          "00051446746",
          "00049945817",
          "00049945826",
          "00049945835",
          "00049945844",
          "00049945853",
          "00049945880",
          "00049945871",
          "00049945862",
          "00049945764",
          "00049945755",
          "00049945746",
          "00049945737",
          "00049945728",
          "00049945657",
          "00049945666",
          "00049945675",
          "00049945684",
          "00049945693",
          "00049945700",
          "00049945719",
          "00049945416",
          "00049945425",
          "00049945434",
          "00049945443",
          "00049945452",
          "00049945470",
          "00049945461",
          "00049945489",
          "00049945498",
          "00049945568",
          "00049945577",
          "00049945586",
          "00049946601",
          "00049946594",
          "00049946219",
          "00049946013",
          "00049946022",
          "00049946031",
          "00049946040",
          "00049946059",
          "00049946068",
          "00049946077",
          "00049946086",
          "00049946095",
          "00049946102",
          "00051446014",
          "00051446130",
          "00051447807",
          "00051447790",
          "00051447781",
          "00051447772",
          "00051447763",
          "00051447754",
          "00051447638",
          "00051447745",
          "00051447629",
          "00049946111",
          "00049946120",
          "00049947209",
          "00049947192",
          "00049947183",
          "00049947174",
          "00049947165",
          "00049947156",
          "00049947147",
          "00049947138",
          "00049947129",
          "00049947110",
          "00051447219",
          "00051447228",
          "00051447237",
          "00051447692",
          "00051447576",
          "00051447709",
          "00051447585",
          "00051447718",
          "00051447736",
          "00051447727",
          "00051447610",
          "00051447601",
          "00051447594",
          "00051447647",
          "00051447656",
          "00051447665",
          "00051447674",
          "00051447683",
          "00051447451",
          "00051447460",
          "00051447479",
          "00051447488",
          "00051447497",
          "00051447335",
          "00049947101",
          "00049947094",
          "00049946978",
          "00049946987",
          "00049946996",
          "00049947003",
          "00049947012",
          "00049947021",
          "00049947030",
          "00049947049",
          "00049947058",
          "00049947067",
          "00049947076",
          "00049946852",
          "00049946861",
          "00049946870",
          "00049946889",
          "00049946898",
          "00049946905",
          "00049946914",
          "00049946923",
          "00049946932",
          "00049946941",
          "00049946950",
          "00049946969",
          "00049946843",
          "00049946834",
          "00049946825",
          "00049946816",
          "00049946807",
          "00049946790",
          "00049946727",
          "00049946718",
          "00049946709",
          "00049946692",
          "00049946683",
          "00049946674",
          "00049946665",
          "00049946781",
          "00049946656",
          "00049946772",
          "00049946647",
          "00049946763",
          "00049946638",
          "00049946754",
          "00049946629",
          "00049946745",
          "00049946610",
          "00049946736",
          "00049948896",
          "00049948903",
          "00049948912",
          "00049948921",
          "00049948930",
          "00049948949",
          "00049948958",
          "00049948967",
          "00049948976",
          "00049948985",
          "00049948994",
          "00049949001",
          "00049948770",
          "00049948789",
          "00049948798",
          "00049948805",
          "00049948814",
          "00049948823",
          "00049948832",
          "00049948841",
          "00051447567",
          "00049948850",
          "00049948869",
          "00049948878",
          "00049948887",
          "00049948654",
          "00049948663",
          "00049948672",
          "00049948681",
          "00049948690",
          "00049948707",
          "00049948716",
          "00006053478",
          "00051447503",
          "00051447512",
          "00051447521",
          "00051447530",
          "00051447344",
          "00051447549",
          "00051447353",
          "00051447558",
          "00051447362",
          "00051447371",
          "00051447380",
          "00051447399",
          "00051447406",
          "00051447415",
          "00051447291",
          "00051447424",
          "00051447308",
          "00051447246",
          "00051447255",
          "00051447264",
          "00051447282",
          "00051447273",
          "00051829574",
          "00051829440",
          "00051829431",
          "00051829556",
          "00051829422",
          "00051829538",
          "00051829413",
          "00051829547",
          "00049947806",
          "00049947799",
          "00049947780",
          "00049947771",
          "00049947762",
          "00049947753",
          "00049947744",
          "00049947735",
          "00049947726",
          "00049947717",
          "00049947708",
          "00049947691",
          "00049947575",
          "00049947584",
          "00049947593",
          "00049947600",
          "00049947619",
          "00049947628",
          "00049947637",
          "00049947646",
          "00049947655",
          "00049947664",
          "00049947673",
          "00049947682",
          "00049947566",
          "00049947557",
          "00049947548",
          "00049947539",
          "00049947414",
          "00049947441",
          "00049947432",
          "00049947423",
          "00049947218",
          "00049947227",
          "00049947236",
          "00049947245",
          "00049947254",
          "00049947263",
          "00049947272",
          "00049947281",
          "00049947290",
          "00049947307",
          "00049947316",
          "00049947325",
          "00049948404",
          "00049948397",
          "00049948388",
          "00049948379",
          "00049948360",
          "00049948351",
          "00049948342",
          "00049948333",
          "00049948324",
          "00049948315",
          "00049948173",
          "00049948182",
          "00049948191",
          "00049948208",
          "00049948217",
          "00049948226",
          "00049948235",
          "00049948244",
          "00049948253",
          "00049948262",
          "00049948271",
          "00049948280",
          "00049948164",
          "00049948155",
          "00049948146",
          "00049948020",
          "00049948137",
          "00049948128",
          "00049948119",
          "00049948100",
          "00049948093",
          "00049948084",
          "00049948075",
          "00049948066",
          "00049948057",
          "00049948048",
          "00049948039",
          "00049948011",
          "00049947922",
          "00049947913",
          "00049947904",
          "00049947897",
          "00049947888",
          "00049948002",
          "00049947879",
          "00049947995",
          "00049947860",
          "00049947986",
          "00049950454",
          "00049950463",
          "00049950472",
          "00049950481",
          "00049950490",
          "00049950506",
          "00049950515",
          "00049950338",
          "00049950347",
          "00049950356",
          "00049950365",
          "00049950374",
          "00049950383",
          "00049950212",
          "00049950221",
          "00049950230",
          "00049950249",
          "00049950258",
          "00049950267",
          "00049950276",
          "00049950285",
          "00049950294",
          "00049950301",
          "00049950310",
          "00049950329",
          "00049950392",
          "00049950445",
          "00049950436",
          "00049950427",
          "00049950409",
          "00049950418",
          "00049952005",
          "00049951998",
          "00049951989",
          "00049951970",
          "00049951961",
          "00049951952",
          "00049951943",
          "00049951934",
          "00049951925",
          "00049951916",
          "00049951907",
          "00049951890",
          "00049951774",
          "00049951783",
          "00049951792",
          "00049951809",
          "00049951818",
          "00049951827",
          "00049951836",
          "00049951845",
          "00049951854",
          "00049951863",
          "00049951872",
          "00049951881",
          "00049951765",
          "00049951756",
          "00049951747",
          "00049951738",
          "00049951729",
          "00049951710",
          "00049951701",
          "00049951587",
          "00049951649",
          "00049951630",
          "00049951621",
          "00049951612",
          "00049951499",
          "00049951603",
          "00049951596",
          "00049951523",
          "00049951514",
          "00049951505",
          "00049951658",
          "00049951667",
          "00049951676",
          "00049951685",
          "00049951694",
          "00049951532",
          "00049951541",
          "00049951550",
          "00049951569",
          "00049951578",
          "00049951480",
          "00049951417",
          "00049951426",
          "00049951435",
          "00049951444",
          "00049951453",
          "00049951462",
          "00049951471",
          "00020318185",
          "00049951408",
          "00049951391",
          "00049951382",
          "00049951373",
          "00049951364",
          "00049951355",
          "00049951346",
          "00049951337",
          "00049951328",
          "00049951319",
          "00049951300",
          "00049951293",
          "00049951177",
          "00049951186",
          "00049951195",
          "00049951202",
          "00049951211",
          "00049951220",
          "00049951239",
          "00049951248",
          "00049951257",
          "00049951266",
          "00049951275",
          "00049951284",
          "00049951168",
          "00049951159",
          "00049951140",
          "00049951131",
          "00049951122",
          "00049951113",
          "00049951097",
          "00049951088",
          "00049951079",
          "00049951060",
          "00049951051",
          "00049951104",
          "00049950935",
          "00049950944",
          "00049950953",
          "00049950962",
          "00049950971",
          "00049950999",
          "00049951006",
          "00049951042",
          "00049951033",
          "00049951024",
          "00049951015",
          "00049950819",
          "00049950828",
          "00049950837",
          "00049950846",
          "00049950855",
          "00049950864",
          "00049950873",
          "00049950882",
          "00049950891",
          "00049950908",
          "00049950917",
          "00049950926",
          "00051431155",
          "00051431146",
          "00051431137",
          "00051431253",
          "00051431262",
          "00051431271",
          "00051431280",
          "00051431299",
          "00051431360",
          "00051431351",
          "00051431342",
          "00051431333",
          "00051431324",
          "00051431306",
          "00051431315",
          "00051431486",
          "00051431477",
          "00051431592",
          "00051431609",
          "00051431468",
          "00051431459",
          "00051431583",
          "00051431574",
          "00051431440",
          "00051431565",
          "00051431556",
          "00051431431",
          "00051431547",
          "00051431422",
          "00051431538",
          "00051431413",
          "00051431529",
          "00051431404",
          "00051431510",
          "00051431501",
          "00051431495",
          "00051431397",
          "00051431388",
          "00051431379",
          "00049952602",
          "00049952595",
          "00049952586",
          "00049952577",
          "00049952568",
          "00049952559",
          "00049952540",
          "00049952531",
          "00049952522",
          "00049952513",
          "00049952504",
          "00049952498",
          "00049952372",
          "00049952381",
          "00049952390",
          "00049952407",
          "00049952416",
          "00049952425",
          "00049952434",
          "00049952443",
          "00049952452",
          "00049952461",
          "00049952470",
          "00049952489",
          "00049952363",
          "00049952354",
          "00049952345",
          "00049952336",
          "00049952327",
          "00049952318",
          "00049952256",
          "00049952265",
          "00049952274",
          "00049952283",
          "00049952292",
          "00049952309",
          "00049952130",
          "00049952149",
          "00049952158",
          "00049952167",
          "00049952176",
          "00049952185",
          "00049952194",
          "00049952201",
          "00049952210",
          "00049952247",
          "00049952238",
          "00049952229",
          "00049952014",
          "00049952087",
          "00049952096",
          "00049952103",
          "00049952112",
          "00051432323",
          "00051432314",
          "00051432305",
          "00051432298",
          "00049952121",
          "00051432289",
          "00051432270",
          "00051432261",
          "00051432252",
          "00051432243",
          "00051432234",
          "00051432225",
          "00051432216",
          "00051432449",
          "00051432430",
          "00051432421",
          "00051432412",
          "00051432403",
          "00051432396",
          "00051432387",
          "00051432378",
          "00051432369",
          "00051432350",
          "00051432341",
          "00051432332",
          "00051432458",
          "00051432467",
          "00051432476",
          "00051432485",
          "00051432494",
          "00051432500",
          "00051432626",
          "00051432564",
          "00051432555",
          "00051432546",
          "00051432537",
          "00051432528",
          "00051432519",
          "00051432680",
          "00051432671",
          "00051432662",
          "00051432653",
          "00051432644",
          "00051432635",
          "00051432617",
          "00051432573",
          "00051432582",
          "00051432591",
          "00051432608",
          "00051432804",
          "00051432797",
          "00051432788",
          "00051076039",
          "00051432779",
          "00051432760",
          "00051432751",
          "00051432742",
          "00051432733",
          "00051432724",
          "00051432715",
          "00051432706",
          "00051432699",
          "00051431618",
          "00051431627",
          "00051431743",
          "00051431734",
          "00051431636",
          "00022073079",
          "00021300263",
          "00051431752",
          "00051431645",
          "00051431654",
          "00051431663",
          "00051431761",
          "00051431770",
          "00051431789",
          "00051431672",
          "00051431798",
          "00051431681",
          "00051431805",
          "00051431690",
          "00051431707",
          "00051431716",
          "00051431725",
          "00051431814",
          "00051431823",
          "00022506824",
          "00022889867",
          "00022506833",
          "00019575498",
          "00035654274",
          "00051431832",
          "00051431841",
          "00051431958",
          "00051431967",
          "00051431949",
          "00051739840",
          "00008691329",
          "00007497522",
          "00004690739",
          "00004818200",
          "00013297586",
          "00004215548"],
        "holdings_a":["{\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"call_no\":\"A 1.75:\",\"summary\":\"no.418 (1981)\"}",
          "{\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"call_no\":\"S21 .A74\",\"summary\":\"no.435, 629\"}",
          "{\"loc_b\":\"bbla\",\"loc_n\":\"bbla\",\"call_no\":\"S21 .A74\",\"summary\":\"no.63, 133, 348, 460\"}"],
        "language_a":["English"],
        "local_id":"b1302201",
        "shelfkey":"lc:S..0021.A74--NO0435",
        "available_a":["Available"],
        "frequency_current_a":["Irregular"],
        "publisher_a":["U.S. Dept. of Agriculture",
          "For sale by the Supt. of Docs., U.S. G.P.O."],
        "rollup_id":"OCLC1576392",
        "title_suggest":["Agriculture information bulletin.",
          "Economic Research Service report.",
          "Agriculture information bulletin"],
        "title_main":"Agriculture information bulletin.",
        "title_sort_ssort_single":"agriculture information bulletin",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"1576392",
        "series_work_a":["{\"title\":[\"Economic Research Service report.\"]}",
          "{\"title\":[\"Agriculture information bulletin\"],\"details\":\"no. 1.\"}"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Washington, D.C. : U.S. Dept. of Agriculture : For sale by the Supt. of Docs., U.S. G.P.O., 1949-\"}"],
        "note_general_a":["Title from cover.",
          "Latest issue consulted: No. 797, published Mar. 2005."],
        "related_work_a":["{\"label\":\"Continuously updating online index\",\"title\":[\"Index to USDA Agriculture information bulletins.\"],\"details\":\"[Beltsville, MD] : United States Department of Agriculture, Agricultural Research Service, National Agricultural Library, 2003-\"}"],
        "note_issuance_a":["Prepared by various agencies of the Dept. of Agriculture."],
        "resource_type_a":["Government publication",
          "Journal, Magazine, or Periodical"],
        "title_variant_a":["AIB",
          "Some issues have title: Agricultural information bulletin"],
        "date_cataloged":"2012-09-11T04:00:00Z",
        "note_numbering_a":["Nos. not issued in chronological sequence."],
        "physical_media_a":["Print"],
        "subject_topical_a":["United States. Department of Agriculture",
          "Research",
          "Agriculture",
          "Economic aspects",
          "Agricultural productivity",
          "Agricultural conservation",
          "Food",
          "Consumer education",
          "Consumers' preferences",
          "Home economics",
          "Rural conditions"],
        "publication_year_sort":"2020",
        "reverse_shelfkey":"lc:7}}ZZXY}PSV~~CBZVWU",
        "series_statement_a":["<No. 737->: An Economic Research Service report"],
        "subject_headings_a":["United States. Department of Agriculture -- Research",
          "Agriculture -- United States",
          "Agriculture -- Economic aspects -- United States",
          "Agricultural productivity -- United States",
          "Agricultural conservation -- United States",
          "Food -- United States",
          "Consumer education -- United States",
          "Consumers' preferences -- United States",
          "Home economics -- United States",
          "United States -- Rural conditions"],
        "subject_suggest":["United States. Department of Agriculture -- Research",
          "Agriculture -- United States",
          "Agriculture -- Economic aspects -- United States",
          "Agricultural productivity -- United States",
          "Agricultural conservation -- United States",
          "Food -- United States",
          "Consumer education -- United States",
          "Consumers' preferences -- United States",
          "Home economics -- United States",
          "United States -- Rural conditions"],
        "note_described_by_a":["Indexes: Cumulative title, document number and subject index available online with links to select online titles."],
        "note_serial_dates_a":["No. 1-"],
        "lc_call_nos_normed_a":["S..0021.A74--NO0435",
          "S..0021.A74--NO0629",
          "S..0021.A74--NO0063",
          "S..0021.A74--NO0133",
          "S..0021.A74--NO0348",
          "S..0021.A74--NO0460",
          "S..0021.A74"],
        "location_hierarchy_a":["unc",
          "unc:uncdavy",
          "unc:uncdavy:uncdavdoc",
          "unc:unclibr",
          "unc:uncscix"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["United States"],
        "call_number_schemes_a":["SUDOC",
          "LC"],
        "origin_place_search_a":["Washington, D.C.",
          "District of Columbia",
          "United States"],
        "physical_description_a":["volumes : illustrations ; 24-28 cm."],
        "lcc_callnum_classification_a":["S - Agriculture",
          "S - Agriculture|S1 - S946.5 Agriculture (General)",
          "S - Agriculture",
          "S - Agriculture|S1 - S946.5 Agriculture (General)",
          "S - Agriculture",
          "S - Agriculture|S1 - S946.5 Agriculture (General)",
          "S - Agriculture",
          "S - Agriculture|S1 - S946.5 Agriculture (General)",
          "S - Agriculture",
          "S - Agriculture|S1 - S946.5 Agriculture (General)",
          "S - Agriculture",
          "S - Agriculture|S1 - S946.5 Agriculture (General)",
          "S - Agriculture",
          "S - Agriculture|S1 - S946.5 Agriculture (General)"]},
      {
        "id":"UNCb9707599",
        "url_a":["{\"href\":\"http://libproxy.lib.unc.edu/login?url=https://www.taylorfrancis.com/books/9780429264092\",\"type\":\"fulltext\",\"text\":\"Full text available via the UNC-Chapel Hill Libraries\"}"],
        "isbn_number_a":["0429264097",
          "0429554656",
          "0429559127",
          "0429563590",
          "9780429264092",
          "9780429554650",
          "9780429559129",
          "9780429563591",
          "9780367146665"],
        "isbn_qualifying_info_a":["",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""],
        "author_suggest":["Singh, Lakhwinder"],
        "names_a":["{\"name\":\"Singh, Lakhwinder\",\"rel\":\"editor\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b9707599",
        "shelfkey":"lc:S..04945.I5",
        "available_a":["Available"],
        "publisher_a":["Routledge"],
        "rollup_id":"OCLC1110122868",
        "note_local_a":["Content provider: Taylor & Francis.",
          "Vendor-supplied catalog record."],
        "title_suggest":["Agriculture innovation systems in Asia : towards inclusive rural development"],
        "title_main":"Agriculture innovation systems in Asia : towards inclusive rural development",
        "title_sort_ssort_single":"agriculture innovation systems in asia towards inclusive rural development",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "oclc_number":"1110122868",
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"Milton Park, Abingdon, Oxon ; New York : Routledge, 2020.\"}"],
        "note_summary_a":["\"This book looks at agricultural systems and rural economies in Asia through the prism of alternative innovation systems, alternative public policy and institutional changes. The massive shifts within the agricultural economy in Asia, geared towards increasing production, has had a direct effect on the livelihood of a large mass of people in rural societies, causing financial and social distress. This book explores a wide range of solutions like-the role of education, improving technical skills and human capital, along with interactive learning in R&D, harnessing ICTs and institutional innovations, to see how these problems can be alleviated. The volume looks at how these methods can help formulate alternative ways to build sustainable and inclusive agricultural societies, ensure food security, sustainable growth and agricultural productivity. This book, rich in theoretical and empirical matter, will be useful for academics and researchers interested in agricultural innovation, development studies, and agricultural economics. It will also be of interest to policy makers and think-tanks working towards inclusive social development and sustainability in Asia and the Indian sub-continent\" --Provided by publisher."],
        "host_item_work_a":["{\"title\":[\"Taylor \\u0026 Francis e-books\",\"(online collection)\",\".\",\"Evidence-based DDA.\",\"T\\u0026F.\",\"Discovery\"]}"],
        "resource_type_a":["Book"],
        "subject_genre_a":["Nonfiction"],
        "date_cataloged":"2019-10-08T04:00:00Z",
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["TFDDATF9780429264092"],
        "subject_topical_a":["Agricultural innovations",
          "Rural development"],
        "publication_year_sort":"2020",
        "reverse_shelfkey":"lc:7}}ZVQVU}HU",
        "subject_headings_a":["Agricultural innovations -- Asia",
          "Rural development"],
        "subject_suggest":["Agricultural innovations -- Asia",
          "Rural development"],
        "lc_call_nos_normed_a":["S..04945.I5"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["Asia"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["Milton Park, Abingdon, Oxon",
          "New York",
          "England",
          "United Kingdom"],
        "physical_description_a":["1 online resource"],
        "note_access_restrictions_a":["Access limited to UNC Chapel Hill-authenticated users. Unlimited simultaneous users"],
        "lcc_callnum_classification_a":["S - Agriculture",
          "S - Agriculture|S1 - S946.5 Agriculture (General)"],
        "statement_of_responsibility_a":["edited by Lakhwinder Singh and Anita Gill."]},
      {
        "id":"UNCb3937819",
        "items_a":["{\"item_id\":\"i5430648\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.1(2001)\",\"call_no\":\"HD1751 .A38\",\"cn_scheme\":\"LC\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 2001220295"],
        "barcodes_a":["00018414798"],
        "holdings_a":["{\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"call_no\":\"HD1751 .A38\",\"summary\":\"v.1(2001)\"}"],
        "language_a":["English"],
        "local_id":"b3937819",
        "shelfkey":"lc:HD.1751.A38",
        "available_a":["Available"],
        "frequency_current_a":["Irregular"],
        "publisher_a":["Nova Science"],
        "rollup_id":"OCLC47670823",
        "title_suggest":["Agriculture issues & policies."],
        "title_main":"Agriculture issues & policies.",
        "title_sort_ssort_single":"agriculture issues and policies",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"47670823",
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Huntington, N.Y. : Nova Science, c2001-\"}"],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals"],
        "date_cataloged":"2004-10-01T04:00:00Z",
        "genre_headings_a":["Periodicals"],
        "subject_suggest":["Periodicals",
          "Agriculture and state -- United States -- Periodicals",
          "Agriculture -- Economic aspects -- United States -- Periodicals"],
        "physical_media_a":["Print"],
        "subject_topical_a":["Agriculture and state",
          "Agriculture",
          "Economic aspects"],
        "publication_year_sort":"2020",
        "reverse_shelfkey":"lc:IM}YSUY}PWR",
        "subject_headings_a":["Agriculture and state -- United States -- Periodicals",
          "Agriculture -- Economic aspects -- United States -- Periodicals"],
        "note_serial_dates_a":["Vol. 1-"],
        "lc_call_nos_normed_a":["HD.1751.A38"],
        "location_hierarchy_a":["unc",
          "unc:uncdavy"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["United States"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["Huntington, N.Y.",
          "New York (State)",
          "United States"],
        "physical_description_a":["volumes : illustrations ; 26 cm"],
        "lcc_callnum_classification_a":["H - Social sciences",
          "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor",
          "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture"]},
      {
        "id":"UNCb9350087",
        "url_a":["{\"href\":\"https://advance.lexis.com/api/search?q=%20\\u0026origination=lawcc\\u0026source=MTA4NjQ0MA\",\"type\":\"fulltext\",\"text\":\"Full text available to UNC-Chapel Hill Law School with password\",\"note\":\"Coverage: from July 17, 2015 through current\",\"restricted\":\"false\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b9350087",
        "available_a":["Available"],
        "frequency_current_a":["Updated daily"],
        "lang_code_a":["eng"],
        "publisher_a":["Global Data Point",
          "LexisNexis"],
        "rollup_id":"CCN00856377",
        "title_suggest":["Agriculture monitor worldwide."],
        "title_main":"Agriculture monitor worldwide.",
        "title_sort_ssort_single":"agriculture monitor worldwide",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"[Place of publication not identified] : Global Data Point, 2015-\"}"],
        "note_summary_a":["Agriculture monitor worldwide covers hot topics and important political and business developments concerning the agriculture industry, focused on farming, fishing, forestry and logging, hunting and trapping, seeds and support activities for agriculture and much more."],
        "related_work_a":["{\"title\":[\"LEXIS (Information retrieval system)\"]}"],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals",
          "Electronic journals"],
        "date_cataloged":"2018-10-04T04:00:00Z",
        "genre_headings_a":["Periodicals",
          "Electronic journals"],
        "subject_suggest":["Periodicals",
          "Electronic journals",
          "Agriculture -- Economic aspects -- Periodicals"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["CCN00856377"],
        "subject_topical_a":["Agriculture",
          "Economic aspects"],
        "imprint_multiple_a":["{\"type\":\"publication\",\"value\":\"[Place of publication not identified] : Global Data Point, 2015-\"}",
          "{\"type\":\"distribution\",\"value\":\"[Place of distribution not identified] : [LexisNexis], [2017]-\"}"],
        "publication_year_sort":"2020",
        "subject_headings_a":["Agriculture -- Economic aspects -- Periodicals"],
        "record_data_source_a":["ILSMARC"],
        "origin_place_search_a":["[Place of publication not identified]",
          "[Place of distribution not identified]"]},
      {
        "id":"UNCb7278447",
        "url_a":["{\"href\":\"https://www.westlaw.com/Browse/Home/News/NewsbyTopic/AgricultureNews?rs=tran3.0\\u0026vr=3.0\\u0026originationContext=vendcc\",\"type\":\"fulltext\",\"text\":\"Full text available to UNC-Chapel Hill Law School with password\",\"note\":\"WestlawNext; Coverage varies by publication\",\"restricted\":\"false\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b7278447",
        "available_a":["Available"],
        "frequency_current_a":["Updated periodically"],
        "lang_code_a":["eng"],
        "publisher_a":["Thomson Reuters"],
        "rollup_id":"WLN00347717",
        "title_suggest":["Agriculture news."],
        "title_main":"Agriculture news.",
        "title_sort_ssort_single":"agriculture news",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"[St. Paul, Minnesota] : Thomson Reuters, [2010-]\"}"],
        "note_general_a":["News and information about agriculture from newspapers, magazines, journals, newsletters, transcripts, and wires as provided by NewsRoom. Includes news about the Department of Agriculture and the Farm Credit Administration."],
        "related_work_a":["{\"title\":[\"WESTLAW (Information retrieval system)\"]}"],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals",
          "Electronic journals"],
        "date_cataloged":"2015-11-24T05:00:00Z",
        "genre_headings_a":["Periodicals",
          "Electronic journals"],
        "subject_suggest":["Periodicals",
          "Electronic journals",
          "Agriculture -- Economic aspects -- Periodicals"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["WLN00347717"],
        "subject_topical_a":["Agriculture",
          "Economic aspects"],
        "publication_year_sort":"2020",
        "subject_headings_a":["Agriculture -- Economic aspects -- Periodicals"],
        "record_data_source_a":["ILSMARC"],
        "origin_place_search_a":["[St. Paul, Minnesota]",
          "Minnesota",
          "United States"]},
      {
        "id":"UNCb7987003",
        "url_a":["{\"href\":\"http://VB3LK7EB4T.search.serialssolutions.com/?V=1.0\\u0026L=VB3LK7EB4T\\u0026S=JCs\\u0026C=TC0000779027\\u0026T=marc\",\"type\":\"fulltext\",\"text\":\"Full text available via the UNC-Chapel Hill Libraries\",\"restricted\":\"false\"}"],
        "issn_primary_a":["1338-4376"],
        "author_suggest":["Centrum Výskumu Rastlinnej Výroby Piešt'any",
          "National Agricultural and Food Centre"],
        "names_a":["{\"name\":\"Centrum Výskumu Rastlinnej Výroby Piešt'any\"}",
          "{\"name\":\"National Agricultural and Food Centre\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 2012238920"],
        "language_a":["English"],
        "local_id":"b7987003",
        "available_a":["Available"],
        "frequency_current_a":["Four issues a year"],
        "lang_code_a":["eng"],
        "publisher_a":["Versita",
          "De Gruyter Open"],
        "rollup_id":"OCLC794262002",
        "this_work_a":["{\"title\":[\"Agriculture (Nitra, Slovakia : Online)\"]}"],
        "title_suggest":["Agriculture Pol̕nohospodárstvo."],
        "title_main":"Agriculture Pol̕nohospodárstvo.",
        "title_sort_ssort_single":"agriculture polnohospodarstvo",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "oclc_number":"794262002",
        "imprint_main_a":["{\"type\":\"imprint\",\"label\":\"\\u003c2011-\\u003e\",\"value\":\"Warsaw Poland : De Gruyter Open\"}"],
        "note_general_a":["\"Journal for agricultural sciences.\""],
        "earlier_work_a":["{\"label\":\"Continues\",\"title\":[\"Pol̕nohospodárstvo : Online.\"],\"details\":\"Selʹskoe khozi͡a︡ĭstvo. Agriculture\"}"],
        "note_issuance_a":["Issued by: Plant Production Research Center Piešt'any, Slovak Republic.",
          "Vols. for <2011-> issued by National Agricultural and Food Centre."],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals",
          "Electronic journals"],
        "date_cataloged":"2019-01-08T05:00:00Z",
        "genre_headings_a":["Periodicals",
          "Electronic journals"],
        "subject_suggest":["Periodicals",
          "Electronic journals",
          "Agriculture -- Periodicals",
          "Agronomy -- Periodicals",
          "Agriculture",
          "Agronomy"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["SSJ0000779027"],
        "subject_topical_a":["Agriculture",
          "Agronomy"],
        "imprint_multiple_a":["{\"type\":\"imprint\",\"value\":\"Warsaw : Versita\"}",
          "{\"type\":\"imprint\",\"label\":\"\\u003c2011-\\u003e\",\"value\":\"Warsaw Poland : De Gruyter Open\"}"],
        "publication_year_sort":"2020",
        "subject_headings_a":["Agriculture -- Periodicals",
          "Agronomy -- Periodicals",
          "Agriculture",
          "Agronomy"],
        "note_serial_dates_a":["Print began with 2002."],
        "record_data_source_a":["ILSMARC"]},
      {
        "id":"UNCb5927083",
        "url_a":["{\"href\":\"http://VB3LK7EB4T.search.serialssolutions.com/?V=1.0\\u0026L=VB3LK7EB4T\\u0026S=JCs\\u0026C=AGRWE\\u0026T=marc\",\"type\":\"fulltext\",\"text\":\"Full text available via the UNC-Chapel Hill Libraries\",\"restricted\":\"false\"}"],
        "issn_linking_a":["1938-1786"],
        "issn_primary_a":["1938-1794"],
        "author_suggest":["Dow Jones Reuters Business Interactive LLC"],
        "names_a":["{\"name\":\"Dow Jones Reuters Business Interactive LLC\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 2008213534"],
        "language_a":["English"],
        "local_id":"b5927083",
        "available_a":["Available"],
        "frequency_current_a":["Weekly"],
        "lang_code_a":["eng"],
        "publisher_a":["NewsRX"],
        "rollup_id":"OCLC263684724",
        "this_work_a":["{\"title\":[\"Agriculture week (Online)\"]}"],
        "title_suggest":["Agriculture week."],
        "title_main":"Agriculture week.",
        "title_sort_ssort_single":"agriculture week",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "oclc_number":"263684724",
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Atlanta, GA : NewsRX\"}"],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals",
          "Electronic journals"],
        "date_cataloged":"2019-04-08T04:00:00Z",
        "genre_headings_a":["Periodicals",
          "Electronic journals"],
        "subject_suggest":["Periodicals",
          "Electronic journals",
          "Agriculture -- Periodicals",
          "Agriculture"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["SSJ0064559"],
        "subject_topical_a":["Agriculture"],
        "publication_year_sort":"2020",
        "subject_headings_a":["Agriculture -- Periodicals",
          "Agriculture"],
        "note_serial_dates_a":["Began in Jan. 2008."],
        "record_data_source_a":["ILSMARC"]},
      {
        "id":"UNCb6361135",
        "url_a":["{\"href\":\"http://VB3LK7EB4T.search.serialssolutions.com/?V=1.0\\u0026L=VB3LK7EB4T\\u0026S=JCs\\u0026C=TC0000329092\\u0026T=marc\",\"type\":\"fulltext\",\"text\":\"Full text available via the UNC-Chapel Hill Libraries\",\"restricted\":\"false\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b6361135",
        "available_a":["Available"],
        "frequency_current_a":["Two times a year"],
        "lang_code_a":["eng"],
        "publisher_a":["Purdue University College of Agriculture"],
        "rollup_id":"ssj0000329092",
        "this_work_a":["{\"title\":[\"Agricultures magazine (Online)\"]}"],
        "title_suggest":["Agricultures magazine."],
        "title_main":"Agricultures magazine.",
        "title_sort_ssort_single":"agricultures magazine",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Indiana : Purdue University College of Agriculture\"}"],
        "note_general_a":["Description based on: Vol. 1, no. 2 (Spring 1998); title from journal home page (publisher's website, viewed Mar. 3, 2010).",
          "Latest issue consulted: Vol. 13, no. 1 (Summer 2009) (viewed Mar. 3, 2010)."],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "sersol_number_a":["ssj0000329092"],
        "subject_genre_a":["Periodicals",
          "Electronic journals"],
        "date_cataloged":"2010-07-13T04:00:00Z",
        "genre_headings_a":["Periodicals",
          "Electronic journals"],
        "subject_suggest":["Periodicals",
          "Electronic journals",
          "Agriculture -- Indiana -- Periodicals"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["SSJ0000329092"],
        "subject_topical_a":["Agriculture"],
        "publication_year_sort":"2020",
        "subject_headings_a":["Agriculture -- Indiana -- Periodicals"],
        "note_serial_dates_a":["Began in 1998?"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["Indiana"]},
      {
        "id":"UNCb7911481",
        "url_a":["{\"href\":\"http://VB3LK7EB4T.search.serialssolutions.com/?V=1.0\\u0026L=VB3LK7EB4T\\u0026S=JCs\\u0026C=TC0001325229\\u0026T=marc\",\"type\":\"fulltext\",\"text\":\"Full text available via the UNC-Chapel Hill Libraries\",\"restricted\":\"false\"}"],
        "issn_linking_a":["1729-5211"],
        "issn_primary_a":["2304-7321"],
        "author_suggest":["Krishi Foundation"],
        "names_a":["{\"name\":\"Krishi Foundation\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 2014255218"],
        "language_a":["English"],
        "local_id":"b7911481",
        "available_a":["Available"],
        "frequency_current_a":["Twice a year"],
        "lang_code_a":["eng"],
        "publisher_a":["Krishi Foundation"],
        "rollup_id":"OCLC692291276",
        "this_work_a":["{\"title\":[\"Agriculturists (Dhaka, Bangladesh : Online)\"]}"],
        "title_suggest":["The agriculturists."],
        "title_main":"The agriculturists.",
        "title_sort_ssort_single":"agriculturists",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "oclc_number":"692291276",
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Dhaka, Bangladesh : Krishi Foundation\"}"],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals",
          "Electronic journals"],
        "date_cataloged":"2018-06-12T04:00:00Z",
        "genre_headings_a":["Periodicals",
          "Electronic journals"],
        "subject_suggest":["Periodicals",
          "Electronic journals",
          "Agriculture -- Periodicals",
          "Agriculture -- Economic aspects -- Periodicals",
          "Agriculturists -- Periodicals",
          "Agriculture",
          "Agriculture -- Economic aspects",
          "Agriculturists"],
        "note_numbering_a":["Some issues combined."],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["SSJ0001325229"],
        "subject_topical_a":["Agriculture",
          "Economic aspects",
          "Agriculturists"],
        "publication_year_sort":"2020",
        "subject_headings_a":["Agriculture -- Periodicals",
          "Agriculture -- Economic aspects -- Periodicals",
          "Agriculturists -- Periodicals",
          "Agriculture",
          "Agriculture -- Economic aspects",
          "Agriculturists"],
        "note_serial_dates_a":["Print began in 2003."],
        "record_data_source_a":["ILSMARC"]},
      {
        "id":"UNCb9053348",
        "url_a":["{\"href\":\"http://VB3LK7EB4T.search.serialssolutions.com/?V=1.0\\u0026L=VB3LK7EB4T\\u0026S=JCs\\u0026C=TC0001919882\\u0026T=marc\",\"type\":\"fulltext\",\"text\":\"Full text available via the UNC-Chapel Hill Libraries\",\"restricted\":\"false\"}"],
        "issn_linking_a":["2301-9948"],
        "issn_primary_a":["2407-6260"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 2017254010"],
        "language_a":["Indonesian"],
        "local_id":"b9053348",
        "available_a":["Available"],
        "frequency_current_a":["Semiannual"],
        "lang_code_a":["ind"],
        "publisher_a":["Universitas Trunojoyo Madura"],
        "rollup_id":"OCLC947084712",
        "this_work_a":["{\"title\":[\"Agriekonomika (Online)\"]}"],
        "title_suggest":["Agriekonomika."],
        "title_main":"Agriekonomika.",
        "title_sort_ssort_single":"agriekonomika",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "oclc_number":"947084712",
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Madura : Universitas Trunojoyo Madura, 2012-\"}"],
        "note_general_a":["\"Jurnal Sosial Ekonomi dan Kebijakan Pertanian.\""],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals",
          "Electronic journals"],
        "title_variant_a":["Some providers have subtitle: Jurnal Penelitian Sosial Ekonomi dan Kebijakan Pertanian"],
        "date_cataloged":"2018-07-09T04:00:00Z",
        "genre_headings_a":["Periodicals",
          "Electronic journals"],
        "subject_suggest":["Periodicals",
          "Electronic journals",
          "Agriculture -- Indonesia -- Periodicals",
          "Agriculture",
          "Indonesia"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["SSJ0001919882"],
        "subject_topical_a":["Agriculture"],
        "publication_year_sort":"2020",
        "subject_headings_a":["Agriculture -- Indonesia -- Periodicals",
          "Agriculture",
          "Indonesia"],
        "note_serial_dates_a":["Began with Volume 1, nomor 1(April 2012)."],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["Indonesia"]},
      {
        "id":"UNCb8726815",
        "url_a":["{\"href\":\"http://libproxy.lib.unc.edu/login?url=http://dx.doi.org/10.1093/OBO/9780195399301-0116\",\"type\":\"fulltext\",\"text\":\"Available via the UNC-Chapel Hill Libraries\"}"],
        "author_suggest":["Nauert, Charles G., Jr., 1928-2013"],
        "names_a":["{\"name\":\"Nauert, Charles G., Jr., 1928-2013\",\"rel\":\"author, compiler\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b8726815",
        "available_a":["Available"],
        "frequency_current_a":["Frequency of update unknown"],
        "lang_code_a":["eng"],
        "publisher_a":["Oxford University Press"],
        "rollup_id":"OBOEDZ0000128937",
        "note_local_a":["Vendor-supplied catalog record."],
        "title_suggest":["Agrippa von Nettesheim"],
        "title_main":"Agrippa von Nettesheim",
        "title_sort_ssort_single":"agrippa von nettesheim",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "creator_main_a":["Nauert, Charles G., Jr., 1928-2013, author, compiler"],
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"[New York] : Oxford University Press, [2012-]\"}"],
        "host_item_work_a":["{\"title\":[\"Oxford bibliographies online\",\"(online collection)\",\".\",\"Renaissance and Reformation\"]}"],
        "resource_type_a":["Web page or site"],
        "subject_genre_a":["Bibliography",
          "Reference"],
        "date_cataloged":"2017-01-30T05:00:00Z",
        "genre_headings_a":["Bibliography"],
        "subject_suggest":["Bibliography",
          "Agrippa von Nettesheim, Heinrich Cornelius, 1486?-1535 -- Bibliography",
          "Occultists -- Bibliography"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["OBOEDZ0000128937"],
        "subject_topical_a":["Agrippa von Nettesheim, Heinrich Cornelius, 1486?-1535",
          "Occultists"],
        "imprint_multiple_a":["{\"type\":\"publication\",\"value\":\"[New York] : Oxford University Press, [2012-]\"}",
          "{\"type\":\"copyright\",\"value\":\"©2013\"}"],
        "publication_year_sort":"2020",
        "subject_headings_a":["Agrippa von Nettesheim, Heinrich Cornelius, 1486?-1535 -- Bibliography",
          "Occultists -- Bibliography"],
        "record_data_source_a":["ILSMARC"],
        "origin_place_search_a":["[New York]",
          "New York (State)",
          "United States"],
        "physical_description_a":["1 online resource"],
        "note_access_restrictions_a":["Access limited to UNC Chapel Hill-authenticated users. Unlimited simultaneous users"],
        "statement_of_responsibility_a":["Charles G. Nauert."]},
      {
        "id":"UNCb6447916",
        "url_a":["{\"href\":\"http://VB3LK7EB4T.search.serialssolutions.com/?V=1.0\\u0026L=VB3LK7EB4T\\u0026S=JCs\\u0026C=TC0000392394\\u0026T=marc\",\"type\":\"fulltext\",\"text\":\"Full text available via the UNC-Chapel Hill Libraries\",\"restricted\":\"false\"}"],
        "issn_linking_a":["1804-1930"],
        "issn_primary_a":["1804-1930"],
        "author_suggest":["Česká zemědělská univerzita v Praze. Provozně ekonomická fakulta"],
        "names_a":["{\"name\":\"Česká zemědělská univerzita v Praze. Provozně ekonomická fakulta\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 2010254696"],
        "language_a":["English"],
        "local_id":"b6447916",
        "available_a":["Available"],
        "frequency_current_a":["Quarterly"],
        "lang_code_a":["eng"],
        "publisher_a":["Faculty of Economics and Management CULS"],
        "rollup_id":"OCLC664278829",
        "this_work_a":["{\"title\":[\"AGRIS on-line papers in economics and informatics (Online)\"]}"],
        "title_suggest":["AGRIS on-line papers in economics and informatics."],
        "title_main":"AGRIS on-line papers in economics and informatics.",
        "title_sort_ssort_single":"agris on line papers in economics and informatics",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "oclc_number":"664278829",
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Prague : Faculty of Economics and Management CULS, 2009-\"}"],
        "note_general_a":["Text in English, with summaries in Czech or Slovak."],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals",
          "Electronic journals"],
        "date_cataloged":"2019-01-08T05:00:00Z",
        "genre_headings_a":["Periodicals",
          "Electronic journals"],
        "subject_suggest":["Periodicals",
          "Electronic journals",
          "Agriculture -- Economic aspects -- Periodicals",
          "Agricultural informatics -- Periodicals",
          "Agriculture -- Periodicals",
          "Agricultural informatics",
          "Agriculture",
          "Agriculture -- Economic aspects"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["SSJ0000392394"],
        "subject_topical_a":["Agriculture",
          "Economic aspects",
          "Agricultural informatics"],
        "publication_year_sort":"2020",
        "subject_headings_a":["Agriculture -- Economic aspects -- Periodicals",
          "Agricultural informatics -- Periodicals",
          "Agriculture -- Periodicals",
          "Agricultural informatics",
          "Agriculture",
          "Agriculture -- Economic aspects"],
        "note_serial_dates_a":["Began with no. 1 (Sept. 2009)."],
        "record_data_source_a":["ILSMARC"]}]
  },
  "facet_counts":{
    "facet_queries":{
      "date_cataloged_dt:[NOW-7DAY/DAY TO NOW]":10697,
      "date_cataloged_dt:[NOW-1MONTH/DAY TO NOW]":36220,
      "date_cataloged_dt:[NOW-3MONTH/DAY TO NOW]":121551},
    "facet_fields":{
      "access_type_f":[
        "At the Library",4982515,
        "Online",2140362],
      "available_f":[
        "Available",6803837],
      "location_hierarchy_f":[
        "unc",4955910,
        "unc:uncdavy",2331395,
        "unc:unclibr",1455110,
        "unc:uncdavy:uncdavdoc",736300,
        "unc:uncwil",451475,
        "law",215772,
        "law:lawuncw",215772,
        "unc:unclawy",215772,
        "unc:uncmusy",200623,
        "unc:uncrarn",191904,
        "unc:uncwil:uncwilrbc",191904,
        "unc:uncnorn",189598,
        "unc:uncwil:uncwilncc",189598,
        "unc:uncscix",140165,
        "hsl",136134,
        "hsl:hsluncy",136134,
        "unc:unchsl",136134,
        "unc:uncarty",96962,
        "unc:uncul",84282,
        "unc:uncinfy",82097,
        "unc:uncsouz",66876,
        "unc:uncwil:uncwilsfc",66876,
        "unc:uncdavy:uncdavmap",41606,
        "unc:uncmedr",27048,
        "unc:unccarr",15664,
        "unc:uncschy",12164,
        "unc:uncdavy:uncdavref",11497,
        "unc:uncpark",10643,
        "unc:uncstoy",10245,
        "unc:uncdavy:uncstor",9939,
        "unc:uncmusy:uncmusymult",6147,
        "unc:uncsoun",5072,
        "unc:uncwil:uncwilshc",5072,
        "unc:uncnory",4887,
        "unc:uncmary",3062,
        "unc:uncul:unculpop",1775,
        "unc:unclgby",1257,
        "unc:uncmedr:uncmedrmeks",787,
        "unc:unclaty",674,
        "unc:uncdavy:uncdavglo",644,
        "unc:uncherb",584,
        "unc:unchigy",577,
        "unc:uncarchives",456,
        "unc:uncwil:uncwilar",456,
        "unc:unccarn",423,
        "unc:uncmedr:uncmedrmets",173,
        "unc:uncgloy",98,
        "unc:unckeny",68,
        "unc:uncofft",17],
      "resource_type_f":[
        "Book",6025516,
        "Government publication",1277044,
        "Journal, Magazine, or Periodical",402302,
        "Music recording",147461,
        "Thesis/Dissertation",120445,
        "Video",100997,
        "Music score",94077,
        "Map",61806,
        "Web page or site",25408,
        "Newspaper",14908,
        "Dataset -- Statistical",14564],
      "lcc_callnum_classification_f":[
        "P - Language and literature",981574,
        "H - Social sciences",435259,
        "D - History (General) and History of Europe",329149,
        "B - Philosophy. Psychology. Religion",245660,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature",224979,
        "Q - Science",210043,
        "P - Language and literature|PR1 - PR9680 English literature",171358,
        "P - Language and literature|PS1 - PS3626 American literature. Canadian literature",149933,
        "P - Language and literature|PS1 - PS3626 American literature. Canadian literature|PS1 - PS3626 American literature",149933,
        "N - Fine Arts",137132,
        "M - Music",136199,
        "J - Political Science",127682,
        "K - Law in general. Comparative and uniform law. Jurisprudence",122339,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature",109200,
        "P - Language and literature|PN1 - PN6790 Literature (General)",106551,
        "G - Geography. Anthropology. Recreation",92954,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor",92261,
        "Z - Bibliography. Library Science. Information resources (general)",86304,
        "F - America: local history",85892,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia",85157,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language",84715,
        "L - Education",84211,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic",83271,
        "R - Medicine",82684,
        "M - Music|M1 - M5000 Music",75584,
        "T - Technology.",71529,
        "E - History: America",71090,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature",68088,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ7000 - PQ8929 Provincial, local, colonial, etc.",63214,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ7000 - PQ8929 Provincial, local, colonial, etc.|PQ7081 - PQ8560 Spanish America",62633,
        "Q - Science|QA1 - QA939 Mathematics",56858,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature",54853,
        "E - History: America|E151 - E889 United States",53825,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania",51829,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States",51725,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America",51265,
        "M - Music|ML1 - ML3930 Literature on music",50905,
        "H - Social sciences|HC1 - HC1085 Economic history and conditions",50816,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature",49813,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama",49482,
        "D - History (General) and History of Europe|D1 - D2009 History (General)",48305,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women",47874,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology",47459,
        "N - Fine Arts|N1 - N9211 Visual arts",46939,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature",46576,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)",44967,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature",44693,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music",44422,
        "L - Education|LB5 - LB3640 Theory and practice of education",43947,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration",43772,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States",43756,
        "H - Social sciences|HC1 - HC1085 Economic history and conditions|HC94 - HC1085 By region or country",42372,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography",40684,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics",40345,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period",39787,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations",39148,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works",36393,
        "H - Social sciences|HF1 - HF6182 Commerce",35933,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration",35762,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature",35730,
        "A - General Works",35681,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism",34998,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works",33957,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries",33031,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK1001 - JK1443 Congress. Legislative branch",32310,
        "P - Language and literature|PR1 - PR9680 English literature|PR3991 - PR5990 19th century, 1770/1800-1890/1900",32293,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL2250 - PL3208 Chinese literature",32200,
        "R - Medicine|RC31 - RC1245 Internal medicine",31923,
        "F - America: local history|F1 - F975 United States local history",31008,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain",30593,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class",30344,
        "N - Fine Arts|ND25 - ND3416 Painting",30034,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature",29881,
        "P - Language and literature|P1 - P1091 Philology. Linguistics",29729,
        "P - Language and literature|PR1 - PR9680 English literature|PR6000 - PR6049 1900-1960",29325,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography",29014,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology",28893,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B790 - B5802 Modern",28729,
        "N - Fine Arts|N1 - N9211 Visual arts|N5300 - N7418 History",28530,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature",27625,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America",27465,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China",27175,
        "C - Auxiliary Sciences of History",26719,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence",26532,
        "P - Language and literature|PR1 - PR9680 English literature|PR6050 - PR6076 1961-2000",25797,
        "H - Social sciences|HG1 - HG9999 Finance",25505,
        "P - Language and literature|PR1 - PR9680 English literature|PR8309 - PR9680 English literature: Provincial, local, etc.",24750,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1993 - PN1999 Motion pictures",24412,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa",24127,
        "P - Language and literature|PZ1 - PZ90 Fiction and juvenile belles lettres",23833,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music",23723,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B790 - B5802 Modern|B850 - B5739 By region or country",23372,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business",23161,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism",22682,
        "A - General Works|AS1 - AS945 Academies and learned societies",22021,
        "N - Fine Arts|NA1 - NA9428 Architecture",21779,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England",21760,
        "A - General Works|AS1 - AS945 Academies and learned societies|AS11 - AS785 By region or country",21606,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL2250 - PL3208 Chinese literature|PL2661 - PL2979 Individual authors and works",21050,
        "Q - Science|QE1 - QE996.5 Geology",20980,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF0001 - KF999",20979,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science",20750,
        "L - Education|LC8 - LC6691 Special aspects of education",20660,
        "S - Agriculture",20607,
        "Q - Science|QC1 - QC999 Physics",20539,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure",20527,
        "U - Military science (General)",20470,
        "Q - Science|Q1 - Q390 Science (General)",20218,
        "N - Fine Arts|ND25 - ND3416 Painting|ND49 - ND813 History",20204,
        "H - Social sciences|HN1 - HN995 Social history and conditions. Social problems. Social reform",20199,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home",20084,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX800 - BX4795 Catholic Church",19952,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z5051 - Z7999 Subject bibliography. Subjects arranged in alphabetical sequence",19824,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6170 - PQ6269 Collections",19799,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD28 - HD70 Management. Industrial management",19483,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC321 - RC571 Neurosciences. Biological psychiatry. Neuropsychiatry",19428,
        "D - History (General) and History of Europe|DC1 - DC947 History of France",19390,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible",19020,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ2600 - PQ2651 1900-1960",19003,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History",18766,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity",18544,
        "Q - Science|Q1 - Q390 Science (General)|Q1 - Q295 General",18340,
        "Q - Science|QK1 - QK989 Botany",18178,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML385 - ML429 Biography",18140,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature",17851,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology",17490,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater",17309,
        "H - Social sciences|HN1 - HN995 Social history and conditions. Social problems. Social reform|HN50 - HN995 By region or country",17015,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races",16940,
        "Q - Science|QL1 - QL991 Zoology",16914,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music",16744,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades",16591,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany",16575,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description",16557,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature",16524,
        "J - Political Science|JC11 - JC607 Political theory",16507,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state",16507,
        "Q - Science|QA1 - QA939 Mathematics|QA71 - QA90 Instruments and machines",16466,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA28 - DA592 History",16372,
        "Q - Science|QA1 - QA939 Mathematics|QA71 - QA90 Instruments and machines|QA75 - QA76.95 Calculating machines",16352,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration",16324,
        "Q - Science|QA1 - QA939 Mathematics|QA71 - QA90 Instruments and machines|QA75 - QA76.95 Calculating machines|QA75.5 - QA76.95 Electronic computers. Computer science",16300,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1101 - HQ2030.7 Women. Feminism",16174,
        "E - History: America|E11 - E143 America",16121,
        "P - Language and literature|PC1 - PC5498 Romanic languages",16059,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy",15578,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History",15129,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature",15023,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine",14942,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS733 - DS779.32 History",14929,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS101 - DS151 Israel (Palestine). The Jews",14600,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology",14170,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature",14130,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works|PT2600 - PT2653 1860/70-1960",14079,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar",14072,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3477 - PG3490 1961-2000",13751,
        "P - Language and literature|PZ1 - PZ90 Fiction and juvenile belles lettres|PZ1 - PZ4 Fiction in English",13399,
        "Q - Science|QD1 - QD999 Chemistry",13360,
        "Q - Science|QH301 - QH705.5 Biology (General)",13055,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology",12902,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism",12771,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB848 - HB3697 Demography. Population. Vital events",12732,
        "H - Social sciences|HX1 - HX970.7 Socialism. Communism. Anarchism",12703,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2219.3 - PN3030 Special regions or countries",12654,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period",12563,
        "N - Fine Arts|NK1 - NK9990 Decorative arts",12557,
        "E - History: America|E151 - E889 United States|E184 - E185.98 Elements in the population",12540,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA28 - DA592 History|DA129 - DA592 By period",12521,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M6 - M175.5 Solo instruments",12387,
        "H - Social sciences|HE1 - HE9990 Transportation and communications",12190,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.",12019,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.",11918,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1241 - PR1273 Drama",11916,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions",11746,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature",11651,
        "P - Language and literature|PR1 - PR9680 English literature|PR2199 - PR3195 English renaissance (1500-1640)",11583,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city",11498,
        "Q - Science|QP1 - QP801 Physiology",11329,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ2660 - PQ2686 1961-2000",11259,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports",11236,
        "P - Language and literature|PE1 - PE3729 English language",11225,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration",11193,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period|DC110 - DC424 Modern, 1515-",11088,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography",11041,
        "T - Technology.|TR1 - TR1050 Photography",10980,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology",10882,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam",10786,
        "Q - Science|QE1 - QE996.5 Geology|QE1 - QE350.62 General (including geographical divisions)",10550,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ2149 - PQ2551 19th century",10501,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.",10344,
        "R - Medicine|R5 - R920 Medicine (General)",10244,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps",10087,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA28 - DA592 History|DA129 - DA592 By period|DA300 - DA592 Modern, 1485-",10066,
        "H - Social sciences|H1 - H99 Social sciences (General)",10024,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia",9989,
        "L - Education|LA5 - LA2396 History of education",9874,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS401 - DS486.8 India (Bharat)",9773,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country",9700,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology|HV6251 - HV6773.55 Crimes and offenses",9691,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1025 - LB1050.75 Teaching (Principles and practice)",9651,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade",9560,
        "Q - Science|QA1 - QA939 Mathematics|QA299.6 - QA433 Analysis",9548,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9400 - PQ9999 Provincial, local, colonial, etc.",9540,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)",9479,
        "Q - Science|QA1 - QA939 Mathematics|QA1 - QA43 General",9458,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books",9435,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages",9430,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature",9422,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief",9265,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG4001 - PG5146 Czech",9193,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works|PT1799 - PT2592 1700-ca. 1860/70",9192,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature",9153,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula",9080,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD84 - DD257.4 History",9007,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity|BR140 - BR1510 History",9004,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9400 - PQ9999 Provincial, local, colonial, etc.|PQ9500 - PQ9698.43 Brazil",8819,
        "E - History: America|E151 - E889 United States|E456 - E655 Civil War period, 1861-1865",8793,
        "H - Social sciences|HM401 - HM1281 Sociology (General)",8755,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA190 - NA1555.5 History",8709,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization",8685,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages",8681,
        "P - Language and literature|PR1 - PR9680 English literature|PR3291 - PR3785 17th and 18th centuries (1640-1770)",8676,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects",8613,
        "S - Agriculture|SB1 - SB1110 Plant culture",8608,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore",8594,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD2321 - HD4730.9 Industry",8585,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology",8526,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M1000 - M1075 Orchestra",8523,
        "Q - Science|QK1 - QK989 Botany|QK1 - QK474.5 General (including geographical distribution)",8333,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons",8329,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS101 - DS151 Israel (Palestine). The Jews|DS133 - DS151 Jews outside of Palestine",8291,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law",8249,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works|PT2660 - PT2688 1961-2000",8232,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations",8214,
        "P - Language and literature|PE1 - PE3729 English language|PE1001 - PE1693 Modern English",8168,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.|PN4840 - PN5648 By region or country",8154,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries",8152,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy",8087,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6600 - PQ6647 Individual authors, 1868-1960",7991,
        "Q - Science|QH1 - QH278.5 Natural history (General)",7972,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history",7951,
        "N - Fine Arts|NB1 - NB1952 Sculpture",7896,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration",7859,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration",7838,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ12 - HQ449 Sexual life",7811,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD84 - DD257.4 History|DD121 - DD257.4 By period",7738,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN45 - PN57 Theory. Philosophy. Esthetics",7726,
        "E - History: America|E151 - E889 United States|E171 - E183.9 History",7720,
        "T - Technology.|TR1 - TR1050 Photography|TR624 - TR835 Applied photography (Including artistic, commercial, medical photography, photocopying processes)",7689,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine",7687,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK510 - DK651 Russia (Federation). Russian S.F.S.R.",7681,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature|PA6202 - PA6971 Individual authors",7645,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture",7624,
        "E - History: America|E151 - E889 United States|E456 - E655 Civil War period, 1861-1865|E461 - E655 The Civil War, 1861-1865",7612,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography",7581,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B108 - B708 Ancient",7580,
        "Q - Science|QA1 - QA939 Mathematics|QA150 - QA272.5 Algebra",7551,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4800 - PQ4851 Individual authors, 1900-1960",7550,
        "M - Music|MT1 - MT960 Musical instruction and study",7543,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes",7499,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics",7484,
        "Q - Science|QH1 - QH278.5 Natural history (General)|QH1 - QH198 General (including nature conservation, geographical distribution)",7402,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS1901 - BS2970 New Testament",7381,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG6001 - PG7446 Polish",7357,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain",7356,
        "E - History: America|E151 - E889 United States|E184 - E185.98 Elements in the population|E184.5 - E185.98 Afro-Americans",7328,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation",7316,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG11 - DG365 Ancient Italy. Rome to 476",7290,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings",7249,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism",7227,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD84 - DD257.4 History|DD121 - DD257.4 By period|DD175 - DD257.4 Modern, 1519-",7189,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1201 - F1393 Mexico",7185,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use",7173,
        "H - Social sciences|HJ9 - HJ9940 Public finance",7163,
        "T - Technology.|T1 - T995 Technology (General)",7079,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ3800 - PQ3999 Provincial, local, colonial, etc.",7040,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature|PA3818 - PA4505 Individual authors",6940,
        "E - History: America|E11 - E143 America|E75 - E99 Indians of North America",6930,
        "Q - Science|QL1 - QL991 Zoology|QL605 - QL739.8 Chordates. Vertebrates",6892,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental",6831,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music",6831,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education",6801,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF1000 - KF1999",6771,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3320 - PG3447 1800-1870",6723,
        "Q - Science|QB1 - QB991 Astronomy",6712,
        "J - Political Science|JZ2 - JZ6530 International relations",6699,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861",6690,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4860 - PQ4886 Individual authors, 1961-2000",6638,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures",6622,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism",6597,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education",6536,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G3290 - G5668 America. Western Hemisphere",6517,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB60 - NB1115 History. Including collective biography",6509,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P1 - P85 General",6492,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA21 - UA885 By region or country",6491,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KD - Law of the United Kingdom and Ireland",6416,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KD - Law of the United Kingdom and Ireland|KD51 - KD9500 England and Wales",6411,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D1 - D24.5 General",6388,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism",6374,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF309 - BF499 Consciousness. Cognition",6277,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK112.8 - DK264.8 House of Romanov, 1613-1917",6233,
        "D - History (General) and History of Europe|DF10 - DF951 History of Greece",6231,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature",6216,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G3290 - G5668 America. Western Hemisphere|G3300 - G5184 North America",6203,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR99.6 - GR390 By region or country",6116,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6650 - PQ6676 Individual authors, 1961-2000",6086,
        "U - Military science (General)|U1 - U900 Military science (General)",6082,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast",6055,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS701 - BS1830 Old Testament",6054,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF4000 - KF4999",5983,
        "Q - Science|QA1 - QA939 Mathematics|QA273 - QA280 Probabilities. Mathematical statistics",5980,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)",5977,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV8301 - HV9920.7 Penology. Prisons. Corrections",5955,
        "R - Medicine|RJ1 - RJ570 Pediatrics",5935,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX200 - BX756 Orthodox Eastern Church",5910,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1101 - HQ2030.7 Women. Feminism|HQ1451 - HQ1870.7 By region or country",5870,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)",5785,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration",5783,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG1201 - PG1749 Serbo-Croatian",5755,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC501 - JC607 Purpose, functions, and relations of the state",5744,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2801 - F3021 Argentina",5707,
        "N - Fine Arts|NX1 - NX820 Arts in general",5694,
        "J - Political Science|JA1 - JA92 Political science (General)",5692,
        "H - Social sciences|HA1 - HA4737 Statistics",5660,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD101 - HD1395.5 Land use",5579,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine",5483,
        "L - Education|LA5 - LA2396 History of education|LA410 - LA2284 Other regions or countries",5467,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF8000 - KF8999",5429,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.",5416,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX800 - BX4795 Catholic Church|BX4650 - BX4750 Biography and portraits",5379,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL2250 - PL3208 Chinese literature|PL2250 - PL2443 History and criticism",5360,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works",5329,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography",5327,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z729 - Z871 Library reports. History. Statistics",5316,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century",5315,
        "S - Agriculture|S1 - S946.5 Agriculture (General)",5304,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works|AC1 - AC195 Collections of monographs, essays, etc.",5289,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1500 - M1527.8 Dramatic music",5281,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT210 - CT3150 National biography",5274,
        "P - Language and literature|PR1 - PR9680 English literature|PR6100 - PR6126 -2001",5274,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity|BR140 - BR1510 History|BR500 - BR1510 By region or country",5257,
        "Q - Science|QA1 - QA939 Mathematics|QA440 - QA699 Geometry. Trigonometry. Topology",5247,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6271 - PQ6498 Individual authors and works to 1700",5220,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism",5170,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1 - JQ1849 Asia",5159,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK5101 - TK6720 Telecommunication (including telegraphy, telephone, radio, radar, television)",5110,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK266 - DK292 Soviet regime, 1918-1991",5100,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS1901 - BS2970 New Testament|BS2547 - BS2970 Special parts of the New Testament",5083,
        "P - Language and literature|PZ1 - PZ90 Fiction and juvenile belles lettres|PZ5 - PZ90 Juvenile belles lettres",5057,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1611 - M1624.8 Songs",5012,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF3000 - KF3999",4985,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-",4965,
        "C - Auxiliary Sciences of History|CB3 - CB482 History of Civilization",4962,
        "T - Technology.|TX1 - TX1110 Home economics.",4960,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV861 - GV1017 Ball games: Baseball, football, golf, etc.",4946,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P87 - P96 Communication. Mass media",4911,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government",4891,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration",4883,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5410 - HF5417.5 Marketing. Disribution of products",4880,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature",4811,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing",4774,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z8001 - Z8999 Personal bibliography. Names of individuals arranged in alphabetical sequence",4741,
        "N - Fine Arts|NE1 - NE3002 Print media",4727,
        "N - Fine Arts|N1 - N9211 Visual arts|N7560 - N8266 Special subjects of art",4689,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z2000 - Z2959 Europe",4665,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language",4657,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration",4625,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History",4623,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period",4612,
        "M - Music|ML1 - ML3930 Literature on music|ML112.8 - ML158.8 Bibliography",4573,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration",4567,
        "Q - Science|QC1 - QC999 Physics|QC170 - QC197 Atomic physics. Constitution and properties of matter (including molecular physics, relativity, quantum theory, and solid state physics)",4557,
        "T - Technology.|TL1 - TL4050 Motor vehicles. Aeronautics. Astronautics",4549,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography",4548,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking",4525,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1990 - PN1992.92 Broadcasting",4523,
        "P - Language and literature|PF1 - PF5999 West Germanic languages",4519,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period|DC110 - DC424 Modern, 1515-|DC139 - DC249 Revolutionary and Napoleonic period, 1789-1815",4508,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA4170 - NA7020 Public buildings",4506,
        "M - Music|M1 - M5000 Music|M1 - M2.3 Collections",4432,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9000 - HD9495 Agricultural industries",4425,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1555 - LB1602 Elementary or public school education",4424,
        "Q - Science|QL1 - QL991 Zoology|QL360 - QL599.82 Invertebrates",4400,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB2000 - DB3150 Czechoslovakia",4388,
        "Q - Science|QC1 - QC999 Physics|QC1 - QC75 General",4379,
        "Q - Science|QP1 - QP801 Physiology|QP1 - QP345 General (including influence of the environment)",4362,
        "D - History (General) and History of Europe|DF10 - DF951 History of Greece|DF10 - DF289 Ancient Greece",4361,
        "T - Technology.|TN1 - TN997 Mining engineering. Metallurgy.",4350,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1401 - F1419 Latin America (General)",4346,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works|AC1 - AC195 Collections of monographs, essays, etc.|AC9 - AC195 Other languages",4327,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2001 - PG2826 Russian language",4299,
        "M - Music|M1 - M5000 Music|M1 - M2.3 Collections|M2 - M2.3 Collections of musical sources",4290,
        "E - History: America|E151 - E889 United States|E184 - E185.98 Elements in the population|E184.5 - E185.98 Afro-Americans|E185.2 - E185.89 Status and development since emancipation",4260,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B790 - B5802 Modern|B808 - B849 Special topics and schools of philosophy",4253,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961",4229,
        "A - General Works|AP1 - AP230 Periodicals",4219,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS410 - BS680 Works about the Bible",4208,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA900 - DA995 Ireland",4189,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3950 - LC4806.5 Exceptional children and youth. Special education",4156,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL2250 - PL3208 Chinese literature|PL2450 - PL2659 Collections",4112,
        "Q - Science|QD1 - QD999 Chemistry|QD450 - QD801 Physical and theoretical chemistry",4109,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German",4104,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN700 - GN890 Prehistoric archaeology",4083,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French",4060,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ760 - HQ767.7 Family size",4058,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB1 - DB879 Austria. Austro-Hungarian Empire",4048,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1 - RA418.5 Medicine and the state",4048,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism",4044,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ370 - RJ550 Diseases of children and adolescents",4044,
        "T - Technology.|TP1 - TP1185 Chemical technology.",4035,
        "V - Naval science",4015,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG401 - DG583.8 Medieval and modern Italy, 476-",4014,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period",4003,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K1 - K36.5 Periodicals",4003,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary",4000,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1993 - PN1999 Motion pictures|PN1997 - PN1997.85 Plays, scenarios, etc.",3983,
        "H - Social sciences|HC1 - HC1085 Economic history and conditions|HC72 - HC88 Economic growth, development, planning",3961,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9506 - HD9624 Mineral industries. Metal trade",3942,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD6050 - HD6305 Classes of labor (including women, children, students, middle-aged and older persons, minorities)",3941,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2301 - F2349 Venezuela",3940,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB75 - HB130 History of economics",3933,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)",3924,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia",3922,
        "Q - Science|QK1 - QK989 Botany|QK504 - QK635 Cryptogams",3917,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL700 - PL889 Japanese literature",3899,
        "E - History: America|E151 - E889 United States|E151 - E169.13 General",3847,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z662 - Z664 Collections",3847,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC348 - JC497 Forms of the state",3828,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ767.8 - HQ792.2 Children. Child development (including child rearing, child care, child life)",3814,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC3801 - PC3976 Catalan",3803,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD5701 - HD6000.9 Labor market. Labor supply. Labor demand (including unemployment, manpower policy, occupational training, employment agencies)",3780,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF712 - BF724.85 Developmental psychology",3756,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS41 - DS66 Middle East. Southwestern Asia. Ancient Orient. Arab East. Near East",3752,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures|PK2030 - PK2142 Hindi, Hindustani literatures",3746,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z1201 - Z1946 America",3712,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z278 - Z549 Bookselling and publishing",3691,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4265 - PQ4556 Individual authors and works to 1400",3685,
        "H - Social sciences|HG1 - HG9999 Finance|HG201 - HG1496 Money",3684,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern",3676,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1990 - PN1992.92 Broadcasting|PN1992 - PN1992.92 Television broadcasts",3658,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt",3610,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases",3595,
        "Q - Science|QL1 - QL991 Zoology|QL1 - QL355 General (including geographical distribution)",3583,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism",3574,
        "T - Technology.|TS1 - TS2301 Manufactures",3568,
        "N - Fine Arts|N1 - N9211 Visual arts|N7420 - N7525.8 General works",3557,
        "C - Auxiliary Sciences of History|CD1 - CD6471 Diplomatics. Archives. Seals",3552,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5601 - HF5689 Accounting. Bookkeeping",3544,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E740 - E749 General",3521,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages",3518,
        "Q - Science|QP1 - QP801 Physiology|QP501 - QP801 Animal biochemistry",3508,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL1001 - PL1960 Chinese language",3506,
        "F - America: local history|F1001 - F1145.3 British America",3494,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada",3494,
        "R - Medicine|RD1 - RD811 Surgery",3492,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D299 - D472 -1789",3466,
        "N - Fine Arts|N1 - N9211 Visual arts|N400 - N3990 Art museums, galleries, etc.",3464,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes",3462,
        "Q - Science|QP1 - QP801 Physiology|QP351 - QP495 Neurophysiology and neuropsychology",3457,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML1400 - ML3275 Vocal music",3449,
        "Q - Science|QD1 - QD999 Chemistry|QD241 - QD441 Organic chemistry",3445,
        "Q - Science|QC1 - QC999 Physics|QC851 - QC999 Meteorology. Climatology (including the earth's atmosphere)",3429,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH2001 - PH3445 Hungarian",3428,
        "H - Social sciences|HA1 - HA4737 Statistics|HA154 - HA4737 Statistical data",3424,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD6350 - HD6940.7 Trade unions. Labor unions. Worker's associations",3422,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature",3413,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK7800 - TK8360 Electronics",3399,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC4001 - PC4977 Spanish",3391,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT165.5 - HT169.9 City planning",3385,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period",3384,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS801 - DS897 Japan",3379,
        "H - Social sciences|HA1 - HA4737 Statistics|HA154 - HA4737 Statistical data|HA175 - HA4737 By region or country",3373,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations",3353,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN3311 - PN3503 Prose. Prose fiction",3342,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV701 - HV1420.5 Children",3312,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN101 - JN1179 Great Britain",3310,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS401 - DS486.8 India (Bharat)|DS433 - DS481 History",3309,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics",3291,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS781 - DS796 Local history and description",3287,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology",3283,
        "H - Social sciences|HF1 - HF6182 Commerce|HF3000 - HF4055 By region or country",3277,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV85 - HV525 By region or country",3235,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity|BR140 - BR1510 History|BR160 - BR481 By period",3232,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period",3210,
        "R - Medicine|R5 - R920 Medicine (General)|R131 - R687 History of medicine. Medical expeditions",3200,
        "E - History: America|E151 - E889 United States|E171 - E183.9 History|E171 - E180 General",3184,
        "Q - Science|QE1 - QE996.5 Geology|QE500 - QE639.5 Dynamic and structural geology",3184,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN101 - PN245 Authorship",3157,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV4485 - BV5099 Practical religion. The Christian life",3156,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ1947 - PQ2147 18th century",3155,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology|GN537 - GN673 Ethnic groups and races",3129,
        "P - Language and literature|PR1 - PR9680 English literature|PR750 - PR890 Prose",3126,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1627 - M1853 National music",3116,
        "C - Auxiliary Sciences of History|CD1 - CD6471 Diplomatics. Archives. Seals|CD921 - CD4280 Archives",3108,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA670 - DA690 Local history and description",3104,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH540 - QH549.5 Ecology",3099,
        "Q - Science|QR1 - QR502 Microbiology",3096,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators",3090,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX800 - BX4795 Catholic Church|BX2400 - BX4563 Monasticism. Religious orders",3082,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML198 - ML360 By region or country",3078,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6201 - PK6599.7 New Persian",3070,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1580 - GV1799.4 Dancing",3061,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ1305 - JZ2060 Scope of international relations",3043,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4675 - PQ4734 Individual authors, 1701-1900",3040,
        "H - Social sciences|HG1 - HG9999 Finance|HG3810 - HG4000 Foreign exchange. International finance",3006,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry",2980,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences",2975,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina",2975,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.",2966,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3450 - PG3470 1870-1917",2966,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-",2960,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK3700 - NK4695 Ceramics",2956,
        "M - Music|ML1 - ML3930 Literature on music|ML3800 - ML3923 Philosophy and physics of music",2934,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF6000 - KF6999",2932,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew",2919,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature",2916,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3950 - LC4806.5 Exceptional children and youth. Special education|LC4001 - LC4806.5 Children and youth with disabilities. Learning disabled children and youth",2914,
        "G - Geography. Anthropology. Recreation|GE1 - GE350 Environmental sciences",2900,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology|GN406 - GN517 Cultural traits, customs, and institutions",2880,
        "L - Education|LA5 - LA2396 History of education|LA201 - LA398 United States",2880,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL700 - PL889 Japanese literature|PL784 - PL866 Individual authors and works",2880,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC189 - LC214.53 Educational sociology",2873,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX440 - NX632 History of the arts",2870,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ370 - RJ550 Diseases of children and adolescents|RJ499 - RJ507 Mental disorders. Child psychiatry",2837,
        "C - Auxiliary Sciences of History|CS1 - CS3090 Genealogy",2830,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML3469 - ML3541 Popular music",2818,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC50 - NC266 History of drawing",2816,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6201 - PK6599.7 New Persian|PK6400 - PK6599.7 Literature",2809,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology",2802,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism",2790,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9680 - HD9714 Mechanical industries (including electric utilities, electronic industries, and machinery)",2784,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN1 - JN97 Europe (General)",2783,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature",2782,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC600 - DC801 Local history and description",2764,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country",2762,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ1710 - PQ1935 17th century",2748,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB3011 - LB3095 School management and discipline",2725,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2501 - F2659 Brazil",2724,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving",2711,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT198 - BT590 Christology",2706,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country",2702,
        "M - Music|M1 - M5000 Music|M3 - M3.3 Collected works of individual composers",2700,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS401 - DS486.8 India (Bharat)|DS483 - DS486.8 Local history and description",2680,
        "Q - Science|QB1 - QB991 Astronomy|QB495 - QB903 Descriptive astronomy",2678,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery",2667,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC131 - JC273 Modern state",2652,
        "Q - Science|QL1 - QL991 Zoology|QL605 - QL739.8 Chordates. Vertebrates|QL671 - QL699 Birds",2650,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF511 - BF593 Affection. Feeling. Emotion",2648,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1300 - PQ1595 Old French literature (To ca. 1500/1550)",2648,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music",2640,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F3401 - F3619 Peru",2630,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration|JL1850 - JL3899 South America",2626,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia",2623,
        "R - Medicine|RT1 - RT120 Nursing",2612,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F3051 - F3285 Chile",2583,
        "G - Geography. Anthropology. Recreation|GF1 - GF900 Human ecology. Anthropogeography",2579,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P201 - P299 Comparative grammar",2571,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK265 - DK265.95 Revolution, 1917-1921",2569,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ12 - HQ449 Sexual life|HQ75 - HQ76.8 Homosexuality. Lesbianism",2566,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa",2558,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM1001 - HM1281 Social psychology",2558,
        "Q - Science|QD1 - QD999 Chemistry|QD1 - QD65 General (including alchemy)",2555,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages",2528,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States",2516,
        "E - History: America|E151 - E889 United States|E201 - E298 The Revolution, 1775-1783",2501,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA7100 - NA7884 Domestic architecture. Houses. Dwellings",2480,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water",2465,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1170 - PR1228 Poetry",2463,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS901 - DS937 Korea",2449,
        "J - Political Science|JA1 - JA92 Political science (General)|JA71 - JA80.2 Theory. Relations to other subjects",2445,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1 - JQ1849 Asia|JQ1499 - JQ1749 East Asia. Including China, Japan, Korea",2413,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV1551 - HV3024 People with disabilities (including blind, deaf, people with physical and mental disabilities)",2399,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2201 - F2239 General",2396,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government",2392,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5801 - HF6182 Advertising",2389,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9650 - PT9876.36 Individual authors or works",2387,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA28 - DA592 History|DA129 - DA592 By period|DA129 - DA260 Early and medieval to 1485",2381,
        "Q - Science|QC1 - QC999 Physics|QC770 - QC798 Nuclear and particle physics. Atomic energy. Radioactivity",2380,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology",2374,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements",2374,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC254 - RC282 Neoplasms. Tumors. Oncology (including cancer and carcinogens)",2369,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD143 - BD237 Epistomology. Theory of knowledge",2368,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3491.2 - PG3493.96 -2001",2367,
        "Q - Science|QL1 - QL991 Zoology|QL605 - QL739.8 Chordates. Vertebrates|QL700 - QL739.8 Mammals",2365,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA9000 - NA9428 Aesthetics of cities. City planning and beautifying",2360,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS251 - DS326 Iran (Persia)",2359,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering",2359,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity|BR60 - BR67 Early Christian literature. Fathers of the Church, etc.",2357,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D299 - D472 -1789|D410 - D472 20th century",2355,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training",2345,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK2403 - JK9593 State government",2345,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue",2324,
        "U - Military science (General)|UB1 - UB900 Military administration",2322,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD300 - BD450 Ontology",2315,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques",2315,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4601 - PL4890 Dravidian languages",2308,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN3201 - JN4980 Germany",2304,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures|PK2151 - PK2212 Urdu literature",2304,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ226 - PQ310 Modern",2277,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG5201 - PG5546 Slovak",2276,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6201 - PK6599.7 New Persian|PK6400 - PK6599.7 Literature|PK6450.9 - PK6562.35 Individual authors or works",2274,
        "T - Technology.|TX1 - TX1110 Home economics.|TX642 - TX840 Cookery",2267,
        "Q - Science|QL1 - QL991 Zoology|QL360 - QL599.82 Invertebrates|QL461 - QL599.82 Insects",2266,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS556 - DS559.93 Vietnam. Annam",2264,
        "Q - Science|QB1 - QB991 Astronomy|QB1 - QB139 General",2264,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN80 - PN99 Criticism",2253,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG2397 - HG3550 By region or country",2252,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT695 - BT749 Creation",2248,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV2000 - BV3705 Missions",2248,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1050.9 - LB1091 Educational psychology",2245,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey",2243,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH426 - QH470 Genetics",2237,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9720 - HD9975 Manufacturing industries",2232,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL689 - BL980 European. Occidental",2226,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF2000 - KF2999",2224,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P121 - P149 Science of language (Linguistics)",2224,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections",2223,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF5000 - KF5999",2221,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature",2216,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E441 - E453 Slavery in the United States. Antislavery movements",2213,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF1338 - JF2112 Public administration",2211,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland",2201,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law",2201,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography",2199,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA4170 - NA7020 Public buildings|NA4590 - NA5621 Religious architecture",2199,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF173 - BF175.5 Psychoanalysis",2191,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism",2172,
        "C - Auxiliary Sciences of History|CB3 - CB482 History of Civilization|CB305 - CB430 By period",2170,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period|DC110 - DC424 Modern, 1515-|DC361 - DC424 20th century",2169,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education",2164,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism|PG2900 - PG2998 General",2164,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML3544 - ML3775 National music",2155,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ793 - HQ799.2 Youth. Adolescents. Teenagers",2152,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA8001 - PA8595 Medieval and modern Latin literature",2152,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism|PG3001 - PG3026 Special periods",2151,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE400 - NE773 History of printmaking",2113,
        "P - Language and literature|PR1 - PR9680 English literature|PR1803 - PR2165 Anglo-Norman period. Early English. Middle English",2112,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages",2111,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1201 - F1393 Mexico|F1218.5 - F1221 Antiquities. Indians",2107,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS798.92 - DS799.9 Taiwan",2104,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ71 - BJ1185 History and general works",2101,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC321 - RC571 Neurosciences. Biological psychiatry. Neuropsychiatry|RC346 - RC429 Neurology. Diseases of the nervous system",2074,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M1100 - M1160 String orchestra",2064,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1421 - F1440 Central America",2059,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z1201 - Z1946 America|Z1215 - Z1363 United States",2058,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT500 - GT2370 Costume. Dress. Fashion",2054,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2251 - F2299 Colombia",2051,
        "S - Agriculture|SF1 - SF1100 Animal culture",2045,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA1 - PA199 Classical philology",2043,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary|HV8130 - HV8280.7 By region or country",2039,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS67 - DS79.9 Iraq (Assyria, Babylonia, Mesopotamia)",2034,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS300 - JS1583 United States",2034,
        "C - Auxiliary Sciences of History|CS1 - CS3090 Genealogy|CS42 - CS2209 By region or country",2030,
        "M - Music|ML1 - ML3930 Literature on music|ML47 - ML54.8 Librettos. Scenarios",2029,
        "H - Social sciences|HG1 - HG9999 Finance|HG3810 - HG4000 Foreign exchange. International finance|HG3879 - HG3898 International monetary system",2013,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature|PL8035 - PL8844 Special languages (alphabetically)",2004,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX5011 - BX5207 Church of England",2002,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2020 - M2036 Choruses, cantatas, etc.",1995,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1 - PL481 Ural-Altaic languages",1994,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature",1994,
        "H - Social sciences|HG1 - HG9999 Finance|HG4001 - HG4285 Finance management, Business finance. Corporation finance",1991,
        "P - Language and literature|PR1 - PR9680 English literature|PR500 - PR614 Poetry",1991,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML1400 - ML3275 Vocal music|ML1600 - ML2881 Secular vocal music",1990,
        "S - Agriculture|SD1 - SD669.5 Forestry",1987,
        "C - Auxiliary Sciences of History|CJ1 - CJ6661 Numismatics",1986,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1870 - JQ3981 Africa",1980,
        "L - Education|LF14 - LF5627 Individual institutions",1977,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-|DP233 - DP272.4 20th century. 1886-",1966,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel",1964,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG801 - PG1146 Bulgarian",1959,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG3801 - PG3987 Ukrainian",1954,
        "B - Philosophy. Psychology. Religion|BH1 - BH301 Aesthetics",1949,
        "T - Technology.|TS1 - TS2301 Manufactures|TS155 - TS194 Production management. Operations management",1945,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK501 - JK901 Executive branch",1943,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP1 - BP68 General",1941,
        "H - Social sciences|HG1 - HG9999 Finance|HG201 - HG1496 Money|HG451 - HG1496 By region or country",1940,
        "L - Education|LD13 - LD7501 Individual institutions",1939,
        "L - Education|LD13 - LD7501 Individual institutions|LD13 - LD7501 United States",1939,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography",1938,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4561 - PQ4664 Individual authors, 1400-1700",1935,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants",1934,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ1600 - PQ1709 16th century",1933,
        "T - Technology.|TL1 - TL4050 Motor vehicles. Aeronautics. Astronautics|TL500 - TL777 Aeronautics. Aeronautical engineering",1926,
        "E - History: America|E11 - E143 America|E51 - E73 Pre-Columbian America. The Indians",1921,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ755.7 - HQ759.92 Parents. Parenthood",1901,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT17 - DT39 History",1899,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA750 - DA890 Scotland",1897,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT851 - HT1445 Slavery",1888,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN695 - PN779 Modern",1887,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period|DC110 - DC424 Modern, 1515-|DC251 - DC354.9 19th century",1886,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5546 - HF5548.6 Office management",1883,
        "L - Education|LD13 - LD7501 Individual institutions|LD13 - LD7501 United States|LD13 - LD7251 Universities. Colleges",1875,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD701 - DD901 Local history and description",1863,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ1 - PQ150 General",1861,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law",1860,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections",1860,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters",1857,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z3001 - Z3496 Asia",1853,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6500 - PQ6576 Individual authors, 1700-ca. 1868",1851,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK1717 - JK2248 Political rights. Practical politics",1848,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK508 - DK508.95 Ukraine",1847,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH573 - QH671 Cytology",1840,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE1001 - HE5600 Railroads. Rapid transit systems",1835,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA2001 - PA2915 Latin philology and language",1825,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G149 - G180 Travel. Voyages and travels (General)",1823,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5511.2 - JZ6299 Promotion of peace. Peaceful change",1822,
        "C - Auxiliary Sciences of History|CJ1 - CJ6661 Numismatics|CJ1 - CJ4625 Coins",1818,
        "Q - Science|QE1 - QE996.5 Geology|QE760.8 - QE899.2 Paleozoology",1814,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare",1813,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8750 - PT8951.36 Individual authors or works",1806,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV40 - HV69 Social service. Social work. Charity organization and practice (including social case work, private/public relief, institutional care, etc.)",1805,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT2400 - GT3390.5 Customs relative to private life (including children, marriage, eating and drinking, funeral customs, etc.)",1804,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D111 - D203 Medieval history",1797,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK751 - DK781 Siberia",1791,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL51 - BL65 Philosophy of religion. Psychology of religion. Religion in relation to other subjects",1784,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV8301 - HV9920.7 Penology. Prisons. Corrections|HV9441 - HV9920.7 By region or country",1782,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML198 - ML360 By region or country|ML240 - ML325 Europe",1781,
        "R - Medicine|RB1 - RB214 Pathology",1778,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS556 - DS559.93 Vietnam. Annam|DS557 - DS559.9 Vietnamese Conflict",1777,
        "M - Music|ML1 - ML3930 Literature on music|ML112.8 - ML158.8 Bibliography|ML136 - ML158 Catalogs. Discography",1775,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam",1750,
        "B - Philosophy. Psychology. Religion|BC1 - BC199 Logic",1747,
        "Q - Science|Q1 - Q390 Science (General)|Q300 - Q390 Cybernetics",1747,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6400 - PN6525 Proverbs",1743,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica",1740,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP285 - DP402 Local history and description",1739,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects",1735,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9262 - PQ9288 Individual authors, 1961-2000",1728,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments",1726,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education",1721,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS1901 - BS2970 New Testament|BS2280 - BS2545 Works about the New Testament",1709,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling",1703,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB5 - LB45 General",1700,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z693 - Z695.83 Cataloging",1698,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia",1687,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT8050 - PT8176.36 Individual authors or works",1685,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN49 - GN298 Physical anthropology. Somatology",1682,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA401 - TA492 Materials of engineering and construction. Mechanics of materials",1682,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1 - PL481 Ural-Altaic languages|PL21 - PL396 Turkic languages",1672,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases",1672,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD201 - TD500 Water supply for domestic and industrial purposes",1672,
        "Q - Science|QD1 - QD999 Chemistry|QD71 - QD142 Analytical chemistry",1671,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts",1669,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB131 - HB147 Methodology",1668,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1350 - DR2285 Local history and description",1667,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1780 - G2799 Eastern Hemisphere. Eurasia, Africa, etc.",1662,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV5800 - HV5840 Drug habits. Drug abuse",1661,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS801 - DS897 Japan|DS833 - DS891.5 History",1652,
        "Q - Science|QK1 - QK989 Botany|QK710 - QK899 Plant physiology",1650,
        "L - Education|L7 - L991 Education (General)",1646,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G149 - G180 Travel. Voyages and travels (General)|G154.9 - G180 Travel and state, Tourist Trade",1645,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6700 - PN6790 Comic books, strips, etc.",1638,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature|PT236 - PT405 Modern",1625,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC501 - QC718.8 Electricity",1622,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA8001 - PA8595 Medieval and modern Latin literature|PA8200 - PA8595 Individual authors",1619,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ1518 - BJ1697 Individual ethics. Character. Virtue",1611,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX1 - NX260 General",1609,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4001 - PN4355 Oratory. Elocution, etc.",1608,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9502 - HD9502.5 Energy industries. Energy policy. Fuel trade",1603,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM831 - HM901 Social change",1599,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT98 - BT180 God",1590,
        "E - History: America|E11 - E143 America|E101 - E135 Discovery of America and early explorations",1573,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT491 - DT516.9 British West Africa",1568,
        "N - Fine Arts|ND25 - ND3416 Painting|ND2889 - ND3416 Illuminating of manuscripts and books",1568,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia",1556,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA960 - RA1000.5 Medical centers. Hospitals. Dispensaries. Clinics (including ambulance service and nursing homes)",1556,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature",1548,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2060 - M2101.5 Choruses, part-songs, etc., with accompaniment of keyboard or other solo instrument, or unaccompanied",1546,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ5001 - PJ5060 Literature",1539,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada|F1001 - F1035 General",1537,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6146.5 - PN6231 Wit and humor",1537,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics",1536,
        "E - History: America|E151 - E889 United States|E660 - E738 Late nineteenth century, 1865-1900",1532,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK6400 - NK8459 Metalwork",1527,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB3711 - HB3840 Business cycles. Economic fluctuations",1521,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1025 - LB1050.75 Teaching (Principles and practice)|LB1049.9 - LB1050.75 Reading (General)",1517,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP1 - BP68 General|BP50 - BP68 History",1516,
        "B - Philosophy. Psychology. Religion|BF1001 - BF1389 Parapsychology",1514,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC2700 - PC3708 Dialects. Provincialisms",1509,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature",1509,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS901 - DS937 Korea|DS904.8 - DS922.46 History",1507,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature",1503,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology|CC72 - CC81 Philosophy. Theory",1500,
        "Q - Science|QE1 - QE996.5 Geology|QE701 - QE760 Paleontology",1498,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC666 - RC701 Diseases of the circulatory (cardiovascular) system",1498,
        "P - Language and literature|PR1 - PR9680 English literature|PR621 - PR744 Drama",1497,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE5601 - HE5725 Automotive transportation (including trucking, bus lines, and taxicab service)",1493,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV2000 - BV3705 Missions|BV2750 - BV3695 Missions in individual countries",1484,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM1 - BM449 General",1479,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG691 - DG817.3 Central Italy",1479,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period|DC60 - DC109 Early and medieval to 1515",1472,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance",1467,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works|PT1501 - PT1695 Middle High German, ca. 1050-1450/1500",1461,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB51 - LB885 Systems of individual educators and writers",1458,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC1001 - PC1977 Italian",1450,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG1 - PG499 Slavic philology and languages (General)",1449,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania",1447,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL1790 - BL1975 China",1446,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC1300 - NC1766 Pictorial humor, caricature, etc.",1443,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV8301 - HV9920.7 Penology. Prisons. Corrections|HV9051 - HV9230.7 The juvenile offender. Juvenile delinquency. Reform schools, etc.",1440,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History",1439,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing|Z242.9 - Z264.5 Practical printing. Including printing as a business, layout, paper and ink, machinery, type and type founding, electrotyping, desktop publishing",1435,
        "R - Medicine|RK1 - RK715 Dentistry",1434,
        "Q - Science|QC1 - QC999 Physics|QC851 - QC999 Meteorology. Climatology (including the earth's atmosphere)|QC980 - QC999 Climatology and weather",1431,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)",1430,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.|G7400 - G8198.54 Asia",1426,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.",1421,
        "T - Technology.|TN1 - TN997 Mining engineering. Metallurgy.|TN799.5 - TN948 Nonmetallic minerals",1421,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD258 - DD262 West Germany",1420,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology|HV6774 - HV7220.5 Crimes and criminal classes",1418,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH359 - QH425 Evolution",1416,
        "N - Fine Arts|N1 - N9211 Visual arts|N1 - N58 General",1415,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA643 - RA645 Disease (Communicable and noninfectious) and public health",1415,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ241 - HJ1620 By region or country",1411,
        "P - Language and literature|PR1 - PR9680 English literature|PR500 - PR614 Poetry|PR521 - PR614 By period",1408,
        "E - History: America|E151 - E889 United States|E184 - E185.98 Elements in the population|E184.5 - E185.98 Afro-Americans|E185.96 - E185.98 Biography. Genealogy",1397,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4900 - PQ4926 Individual authors, 2001-",1397,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM495 - BM532 Sources of Jewish religion. Rabbinical literature",1394,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B720 - B765 Medieval",1393,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions",1390,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT3400 - GT5090 Customs relative to public and social life (including town life, court life, festivals, holidays, ceremonies of royalty, etc.)",1389,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History",1388,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography",1367,
        "Q - Science|QE1 - QE996.5 Geology|QE640 - QE699 Stratigraphy",1367,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3224 - K3278 Individual and state",1364,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP100 - BP137 Sacred books",1362,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)",1359,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1603 - LB1696.6 Secondary education. High schools",1356,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5549 - HF5549.5 Personnel management. Employment management",1351,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1100 - PQ1297 Collections",1348,
        "Q - Science|QA1 - QA939 Mathematics|QA801 - QA939 Analytic mechanics",1333,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology",1330,
        "M - Music|MT1 - MT960 Musical instruction and study|MT90 - MT146 Analysis and appreciation of musical works",1328,
        "Q - Science|QE1 - QE996.5 Geology|QE420 - QE499 Petrology",1320,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT74 - DT107.87 History",1319,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages",1318,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature",1315,
        "F - America: local history|F1 - F975 United States local history|F590.3 - F596.3 The West. Trans-Mississippi Region. Great Plains",1305,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4201 - PQ4263 Collections",1304,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL175 - BL265 Natural theology",1303,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV7590 - JV8349 Europe",1300,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB450.9 - SB467.8 Gardens and gardening",1300,
        "P - Language and literature|PR1 - PR9680 English literature|PR621 - PR744 Drama|PR641 - PR744 By period",1299,
        "D - History (General) and History of Europe|DE1 - DE100 History of the Greco-Roman world",1292,
        "T - Technology.|TH1 - TH9745 Building construction",1289,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE380.8 - HE971 Water transportation",1287,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS3000 - JS6949.8 Europe",1287,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK2255 - JK2391 Political parties",1286,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT851 - HT1445 Slavery|HT1048 - HT1444 By region or country",1284,
        "F - America: local history|F1 - F975 United States local history|F206 - F220 The South. South Atlantic States",1279,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography",1276,
        "Q - Science|QL1 - QL991 Zoology|QL750 - QL795 Animal behavior",1276,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN661 - PN694 Medieval (to 1500)",1275,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM1001 - HM1281 Social psychology|HM1176 - HM1281 Social influence. Social pressure",1274,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE331 - HE380 Traffic engineering. Roads and highways. Streets",1272,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB901 - DB999 Hungary",1269,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements",1269,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC71 - LC120.4 Education and the state",1269,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature|PA3051 - PA3285 Literary history",1266,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.",1266,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4001 - PQ4063 General",1262,
        "P - Language and literature|PE1 - PE3729 English language|PE1700 - PE3602 Dialects. Provincialisms, etc.",1261,
        "T - Technology.|TL1 - TL4050 Motor vehicles. Aeronautics. Astronautics|TL1 - TL484 Motor vehicles. Cycles",1258,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z699 - Z699.5 Machine methods of information and retrieval. Mechanized bibliographic control",1258,
        "H - Social sciences|HA1 - HA4737 Statistics|HA29 - HA32 Theory and method of social science statistics",1254,
        "Q - Science|QM1 - QM695 Human anatomy",1254,
        "Q - Science|QB1 - QB991 Astronomy|QB495 - QB903 Descriptive astronomy|QB500.5 - QB785 Solar system",1251,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL689 - BL980 European. Occidental|BL700 - BL820 Classical (Etruscan, Greek, Roman)",1246,
        "C - Auxiliary Sciences of History|CN1 - CN1355 Inscriptions. Epigraphy",1239,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1635 - HD1702 Utilization and culture of special classes of lands (including pasture lands, water resources development)",1239,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT3701 - PT3971 Provincial, local, colonial, etc.",1237,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal",1236,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS201 - DS248 Arabian Peninsula. Saudi Arabia",1234,
        "T - Technology.|TL1 - TL4050 Motor vehicles. Aeronautics. Astronautics|TL787 - TL4050 Astronautics. Space travel",1234,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB522 - HB715 Income. Factor shares",1233,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP188 - BP190 Islamic religious life",1229,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS501 - DS518.9 East Asia. The Far East",1228,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML1400 - ML3275 Vocal music|ML2900 - ML3275 Sacred vocal music",1224,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ1305 - JZ2060 Scope of international relations|JZ1464 - JZ2060 By country, territory, or region",1223,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1037 - Z1039 Books for special classes of persons, institutions, etc.",1220,
        "R - Medicine|R5 - R920 Medicine (General)|R735 - R854 Medical education. Medical schools. Research",1219,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV1 - JV5399 Colonies and colonization",1216,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6001 - PQ6056 General",1216,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV5001 - HV5720.5 Alcoholism. Intemperance. Temperance reform",1214,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845",1210,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU520 - DU950 Smaller Island Groups",1209,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry",1200,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria",1198,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1 - PD780 General",1197,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2010 - M2017.6 Services",1194,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV4000 - BV4470 Pastoral theology",1191,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2701 - F2799 Uruguay",1190,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ601 - PQ771 Prose and prose fiction",1187,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG8001 - PG9146 Baltic",1183,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ1188 - BJ1295 Religious ethics",1182,
        "V - Naval science|V1 - V995 Naval science (General)",1180,
        "H - Social sciences|HX1 - HX970.7 Socialism. Communism. Anarchism|HX519 - HX550 Communism/socialism in relation to special topics",1174,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ2700 - PQ2726 -2001",1174,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1547 - M1600 Choruses, part-songs, etc., with accompaniment of keyboard or other solo instrument, or unaccompanied",1171,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC110 - RC216 Infectious and parasitic diseases",1171,
        "M - Music|ML1 - ML3930 Literature on music|ML100 - ML109 Dictionaries. Encyclopedias",1169,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS36 - DS39.2 Arab countries",1168,
        "A - General Works|AM1 - AM401 Museums. Collectors and collecting",1167,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ12 - HQ449 Sexual life|HQ19 - HQ30.7 Sexual behavior and attitudes. Sexuality",1166,
        "Q - Science|QC1 - QC999 Physics|QC350 - QC467 Optics. Light",1159,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ5001 - PJ5060 Literature|PJ5050 - PJ5055.51 Individual authors and works",1157,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2500 - NA2599 General works",1156,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z711 - Z711.92 Reference work. Library service to special groups",1154,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E310 - E337 1789-1809. Constitutional period",1153,
        "P - Language and literature|PR1 - PR9680 English literature|PR1 - PR56 Literary history and criticism",1152,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z716.2 - Z718.8 Libraries in relation to special topics. Including libraries and community, libraries and television, children's libraries, libraries and students",1141,
        "Q - Science|QB1 - QB991 Astronomy|QB495 - QB903 Descriptive astronomy|QB799 - QB903 Stars",1139,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing|Z124 - Z228 History",1139,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV551.2 - HV639 Emergency management",1134,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1031 - PN1049 Theory, philosophy, relations, etc.",1133,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KE - Law of Canada",1127,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KE - Law of Canada|KE1 - KE9450 Federal law. Common and collective provincial law",1127,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF698 - BF698.9 Personality",1125,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC1 - PC400 General",1120,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa",1117,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z881 - Z980 Library catalogs and bulletins",1115,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania",1111,
        "R - Medicine|RD1 - RD811 Surgery|RD520 - RD599.5 Surgery by region, system, or organ",1110,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM711 - HM806 Groups and organizations",1107,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML162 - ML197 Special periods",1107,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z1201 - Z1946 America|Z1411 - Z1939 Latin America",1107,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ1060 - HQ1064 Aged. Gerontology (Social aspects). Retirement",1103,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education",1102,
        "E - History: America|E151 - E889 United States|E456 - E655 Civil War period, 1861-1865|E456 - E459 Lincoln's administrations, 1861-April 15, 1865",1093,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA1501 - TA1820 Applied optics. Photonics",1090,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)",1088,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV6403 - JV7127 United States",1077,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR451 - PR469 19th century",1077,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLB1 - KLB6499 Russia (Federation, 1992",1075,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL2250 - PL3208 Chinese literature|PL3030 - PL3208 Provincial, local, colonial, etc.",1075,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2661 - F2699 Paraguay",1073,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA201 - PA899 Greek philology and language",1073,
        "Q - Science|QK1 - QK989 Botany|QK900 - QK989 Plant ecology",1072,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL1 - BL50 Religion (General)",1070,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM1 - BM449 General|BM150 - BM449 History",1070,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G369 - G503 Special voyages and travels",1069,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM3001 - PM4566 Languages of Mexico and Central America",1069,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD2321 - HD4730.9 Industry|HD2340.8 - HD2346.5 Small and medium-sized businesses, artisans, handicrafts, trades",1065,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT390 - HT395 Regional planning",1063,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD493 - BD701 Cosmology",1060,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL2500 - BL2592 American",1055,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK70 - DK112.42 Early to 1613",1054,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1501 - HD1542 Agricultural classes (including farm tenancy, agricultural laborers",1049,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1865 - PN1988 Special types",1048,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F3301 - F3359 Bolivia",1046,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL950 - PL998 Korean literature",1044,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC5001 - PC5498 Portuguese",1042,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1 - JQ1849 Asia|JQ200 - JQ620 India",1037,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P302 - P302.87 Discourse analysis",1037,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ12 - HQ449 Sexual life|HQ101 - HQ440.7 Prostitution",1036,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC601 - PC872 Romanian",1031,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP191 - BP253 Branches, sects, etc.",1027,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB3011 - LB3095 School management and discipline|LB3050 - LB3060.87 Educational tests, measurements, evaluations and examinations",1027,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject",1025,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1 - PB431 Modern languages",1025,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF38 - BF64 Philosophy. Relation to other topics",1022,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN500 - PN519 Collections",1017,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM300 - RM666 Drugs and their actions",1016,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6500 - JN6598 Soviet Union. Russia. Former Soviet Republics",1013,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN101 - PN245 Authorship|PN172 - PN239 Technique. Literary composition, etc.",1006,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S419 - S482 History",1006,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT3200 - CT9999 Biography. By subject",1004,
        "C - Auxiliary Sciences of History|CB3 - CB482 History of Civilization|CB195 - CB281 Civilization and race",1003,
        "Q - Science|QE1 - QE996.5 Geology|QE351 - QE399.2 Mineralogy",1000,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1100 - G1779 America. Western Hemisphere",998,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN2301 - JN3007 France",991,
        "V - Naval science|VA10 - VA750 Navies: Organization, distribution, naval situation",984,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6700 - PQ6726 Individual authors, 2001-",982,
        "R - Medicine|R5 - R920 Medicine (General)|R723 - R726 Medical philosophy. Medical ethics",978,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E838 - E840.8 General",974,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica",973,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T57 - T57.97 Applied mathematics. Quantitative methods",973,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA773 - RA788 Personal health and hygiene",966,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P118 - P118.75 Language acquisition",965,
        "H - Social sciences|HF1 - HF6182 Commerce|HF1701 - HF2701 Tariff. Free trade. Protectionism",963,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2699 - LC2913 Blacks. African Americans",963,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3000 - PA3049 Classical literature",961,
        "J - Political Science|J1 - J981 General legislative and executive papers",957,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History|DR481 - DR605 By period",956,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM621 - HM656 Culture",956,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6146.5 - PN6231 Wit and humor|PN6157 - PN6222 By region or country",949,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC51 - JC93 Ancient state",944,
        "D - History (General) and History of Europe|DF10 - DF951 History of Greece|DF701 - DF951 Modern Greece",943,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD4909 - HD5100.9 Wages",943,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT641 - DT665 Zaire. Congo (Democratic Republic). Belgian Congo",942,
        "Q - Science|QL1 - QL991 Zoology|QL605 - QL739.8 Chordates. Vertebrates|QL614 - QL639.8 Fishes",941,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1160 - NK1590 Decoration and ornament. Design",927,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL2700 - BL2790 Rationalism",926,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G575 - G890 Arctic and Antarctic regions",925,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ12 - HQ449 Sexual life|HQ31 - HQ64 Sex instruction and sexual ethics",923,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.|G5700 - G6967 Europe",922,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS350 - DS375 Afghanistan",920,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E740 - E749 General|E744 - E744.5 Diplomatic history. Foreign and general relations",920,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1700 - ND2495 Watercolor painting",918,
        "Q - Science|QE1 - QE996.5 Geology|QE500 - QE639.5 Dynamic and structural geology|QE521 - QE545 Volcanoes and earthquakes",917,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3701 - LC3740 Immigrants or ethnic and linguistic minorities. Bilingual schools and bilingual education",916,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5381 - HF5386 Vocational guidance. Career development",915,
        "C - Auxiliary Sciences of History|CN1 - CN1355 Inscriptions. Epigraphy|CN120 - CN740 Ancient inscriptions",914,
        "M - Music|ML1 - ML3930 Literature on music|ML62 - ML90 Special aspects. Including writings of musicians",914,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving",914,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P306 - P310 Translating and interpreting",913,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK8800 - NK9505.5 Textiles",912,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL501 - PL699 Japanese language",912,
        "D - History (General) and History of Europe|DF10 - DF951 History of Greece|DF501 - DF649 Medieval Greece. Byzantine Empire, 323-1453",908,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T57 - T57.97 Applied mathematics. Quantitative methods|T57.6 - T57.97 Operations research. Systems analysis",906,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1101 - LB1139 Child study",905,
        "U - Military science (General)|UG1 - UG620 Military engineering",902,
        "Q - Science|QA1 - QA939 Mathematics|QA299.6 - QA433 Analysis|QA303 - QA316 Calculus",899,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP100 - BP137 Sacred books|BP100 - BP134 Koran",897,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF800 - JF1177 Political rights. Political participation",895,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP188 - BP190 Islamic religious life|BP188.45 - BP189.65 Sufism. Mysticism. Dervishes",887,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9751 - BX9793 Shakers. United Society of Believers. Millennial Church",887,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK1717 - JK2248 Political rights. Practical politics|JK1961 - JK2248 Electoral system",885,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S590 - S599.9 Soils. Soil science (Including soil surveys, soil chemistry, soil structure, soil-plant relationships)",882,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL175 - BL265 Natural theology|BL239 - BL265 Religion and science",880,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D299 - D472 -1789|D351 - D400 19th century. 1801-1914/1920",877,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA5000 - PA5660 Byzantine and modern Greek literature",875,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1100 - G1779 America. Western Hemisphere|G1100 - G1692 North America",866,
        "Q - Science|QR1 - QR502 Microbiology|QR1 - QR74.5 General",866,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP97.3 - DP160.8 711-1516. Moorish domination and the Reconquest",865,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3515 - PG3550 Outside the Russian Federation",865,
        "L - Education|L7 - L991 Education (General)|L7 - L97 Periodicals. Societies",864,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1119 - PR1151 By period",862,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE380.8 - HE971 Water transportation|HE561 - HE971 Shipping",858,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB421 - SB439.8 Classes of plants (including annuals, climbers, ferns, lawns, perennials, shrubs)",856,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG8001 - PG9146 Baltic|PG8801 - PG9146 Latvian",855,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL1790 - BL1975 China|BL1899 - BL1942.85 Taoism",854,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT56.8 - DT69.5 Antiquities",853,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States|DT271 - DT299 Algeria",850,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA600 - DA667 Description and travel. Guidebooks",847,
        "Q - Science|QD1 - QD999 Chemistry|QD146 - QD197 Inorganic chemistry",846,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1811 - HG2351 Special classes of banks and financial institutions",845,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History",844,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature|PT711 - PT871 Prose",843,
        "E - History: America|E151 - E889 United States|E171 - E183.9 History|E171 - E180 General|E176 - E176.8 Biography",842,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV640 - HV645 Refugee problems",842,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History",841,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT1501 - HT1595 Races (including race as a social group and race relations in general)",841,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature|PA6001 - PA6095.5 Literary history",839,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries",837,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K5000 - K5582 Criminal law and procedure",836,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD280 - DD289.5 East Germany",835,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian",835,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM5001 - PM7356 Languages of South America and the West Indies",835,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries",834,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian",833,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK5100 - NK5440 Glass",832,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV551.2 - HV639 Emergency management|HV553 - HV639 Relief in case of disasters",831,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K321 - K474 Schools of legal theory",830,
        "A - General Works|AZ101 - AZ999 History of scholarship and learning. The humanities",829,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH501 - QH531 Life",827,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS651 - DS689 Philippines",823,
        "L - Education|LF14 - LF5627 Individual institutions|LF14 - LF1257 Great Britain",819,
        "N - Fine Arts|N1 - N9211 Visual arts|N61 - N72 Theory. Philosophy. Aesthetics of the visual arts",817,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG133 - RG137.6 Conception. Artificial insemination. Contraception",817,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1530 - M1546.5 Choruses with orchestra or other ensemble",813,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z668 - Z669.7 Library education. Research",808,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1111 - BL1143.2 Sacred books. Sources",807,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC311 - JC314 Nationalism. Nation state",806,
        "U - Military science (General)|U1 - U900 Military science (General)|U21 - U22.3 War. Philosophy. Military sociology",806,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8601 - BX8695 Mormons. Church of Jesus Christ of Latter-Day Saints",805,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3230 - PG3238 Poetry",803,
        "N - Fine Arts|N1 - N9211 Visual arts|N5198 - N5299 Private collections and collectors",802,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z105 - Z115.5 Manuscripts. Paleography",801,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA790 - RA790.95 Mental health. Mental illness prevention",800,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity|BR1690 - BR1725 Biography",797,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ5061 - PJ5192 Other languages used by Jews",796,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN3311 - PN3503 Prose. Prose fiction|PN3355 - PN3383 Technique. Authorship",794,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBP1 - KBP4860 Islamic law. Shari'ah. Fiqh",793,
        "M - Music|ML1 - ML3930 Literature on music|ML3800 - ML3923 Philosophy and physics of music|ML3845 - ML3877 Aesthetics",793,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM1001 - HM1281 Social psychology|HM1106 - HM1171 Interpersonal relations. Social behavior",791,
        "Q - Science|QL1 - QL991 Zoology|QL605 - QL739.8 Chordates. Vertebrates|QL640 - QL669.3 Reptiles and amphibians",791,
        "G - Geography. Anthropology. Recreation|GF1 - GF900 Human ecology. Anthropogeography|GF500 - GF900 By region or country",790,
        "R - Medicine|RE1 - RE994 Opthamology",788,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal|DP535 - DP682.2 History",787,
        "M - Music|MT1 - MT960 Musical instruction and study|MT5.5 - MT7 Music theory",787,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1221 - GV1469.62 Indoor games and amusements",785,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z678 - Z678.88 Library administration and organization. Constitution",785,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN1008.2 - PN1009.5 Juvenile literature",784,
        "H - Social sciences|HX1 - HX970.7 Socialism. Communism. Anarchism|HX821 - HX970.9 Anarchism",783,
        "E - History: America|E11 - E143 America|E101 - E135 Discovery of America and early explorations|E121 - E135 Post-Columbian period. El Dorado",782,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ2361 - HJ3192.7 By region or country",782,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB2000 - DB3150 Czechoslovakia|DB2700 - DB3150 Slovakia",780,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT93 - CT206 General collective biography",777,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV712 - GV725 Athletic contests. Sports Events",777,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2005 - HJ2216 Income and expenditure. Budget",777,
        "L - Education|LA5 - LA2396 History of education|LA2301 - LA2396 Biography",777,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1100 - PT1141 General",777,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS591 - DS599 Malaysia. Malay Peninsula. Straits Settlements",776,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL2390 - BL2490 African",773,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG600 - DG684.72 Northern Italy",771,
        "Q - Science|QM1 - QM695 Human anatomy|QM1 - QM511 General",768,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD878 - TD894 Special types of environmental pollution (including soil, air, and noise pollution)",766,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2341 - LB2341.95 Supervision and administration. Business management",765,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2835 - NA4050 Details and decoration",764,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1 - JQ1849 Asia|JQ1758 - JQ1852 Middle East. Including Turkey, Iran, Israel, Arabian Peninsula",763,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1651 - PK1799 Bengali",763,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV701 - HV1420.5 Children|HV873 - HV887 Destitute, neglected, and abandoned children. Street children",761,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1190 - RA1270 Toxiciology. Poisons",761,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB183 - SB317 Field crops (including cereals, forage crops, grasses, legumes, root crops, sugar plants, textile plants, alkaloidal plants, medicinal plants)",760,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2830 - PG2847 Belarusian",757,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ5061 - PJ5192 Other languages used by Jews|PJ5111 - PJ5192 Yiddish",757,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP160 - BP165 General works on Islam",756,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology|HV6035 - HV6197 Criminal anthropology (including criminal types, criminal psychology, prison psychology, causes of crime)",755,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F3701 - F3799 Ecuador",754,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History|DR1259 - DR1321 By period",753,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9401 - BX9640 Reformed or Calvinistic Churches",749,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law",748,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC1401 - LC2572 Women",747,
        "L - Education|LF14 - LF5627 Individual institutions|LF14 - LF1257 Great Britain|LF14 - LF797 England",742,
        "Q - Science|QD1 - QD999 Chemistry|QD901 - QD999 Crystallography",742,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5511.2 - JZ6299 Promotion of peace. Peaceful change|JZ5586 - JZ6009 International security. Disarmament",739,
        "S - Agriculture|SK1 - SK663 Hunting",737,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)",737,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z696 - Z697 Classification and notation",736,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV1450 - HV1494 Aged",734,
        "P - Language and literature|PR1 - PR9680 English literature|PR1490 - PR1799 Anglo-Saxon literature",734,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History|DR1259 - DR1321 By period|DR1281 - DR1321 -1918",733,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB1775 - LB1785 Professional aspects of teaching and school administrators. Vocational guidance",733,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.|PN4775 - PN4784 Technique. Practical journalism",733,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation",730,
        "T - Technology.|TR1 - TR1050 Photography|TR845 - TR899 Cinematography. Motion pictures",730,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German|PF5000 - PF5951 Dialects. Provincialism, etc.",729,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary|HV8031 - HV8080 Police duty. Methods of protection",728,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD101 - HD1395.5 Land use|HD1361 - HD1395.5 Real estate business",724,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861",722,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1 - PT80 Literary history and criticism",720,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS41 - DS66 Middle East. Southwestern Asia. Ancient Orient. Arab East. Near East|DS51 - DS54.95 Local history and description",719,
        "Q - Science|QA1 - QA939 Mathematics|QA101 - QA141.8 Elementary mathematics. Arithmetic",716,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D51 - D90 Ancient history",714,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV1 - JV5399 Colonies and colonization|JV500 - JV5399 Colonizing nations",714,
        "Q - Science|QR1 - QR502 Microbiology|QR180 - QR189.5 Immunology",713,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T58.5 - T58.64 Information technology",711,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC950 - NC996 Illustration",710,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB1201 - PB1449 Irish",710,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM101 - PM2711 American languages (Aboriginal)",710,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL74 - BL99 Religions of the world",709,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1421 - F1440 Central America|F1435 - F1435.3 Mayas",709,
        "Q - Science|QC1 - QC999 Physics|QC770 - QC798 Nuclear and particle physics. Atomic energy. Radioactivity|QC793 - QC793.5 Elementary particle physics",708,
        "Q - Science|QK1 - QK989 Botany|QK474.8 - QK495 Spermatophyta. Phanerogams",708,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6061 - PQ6073 Modern",705,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL624 - BL629.5 Religious life",703,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL425 - BL490 Religious doctrines (General)",702,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB2832 - LB2844.1 Teaching personnel",701,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control",699,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5437 - HF5444 Purchasing. Selling. Sales personnel. Sales executives",696,
        "M - Music|MT1 - MT960 Musical instruction and study|MT1 - MT5 History and criticism",695,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9650 - PT9876.36 Individual authors or works|PT9725 - PT9850 19th century",694,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML162 - ML197 Special periods|ML169.8 - ML190 Medieval. Renaissance",691,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT491 - DT516.9 British West Africa|DT515 - DT515.9 Nigeria",690,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1780 - G2799 Eastern Hemisphere. Eurasia, Africa, etc.|G1791 - G2082 Europe",688,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD5306 - HD5474 Labor disputes. Strikes and lockouts",688,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC149 - LC161 Literacy. Illiteracy",688,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT1313 - BT1480 History of specific doctrines and movements. Heresies and schisms",687,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1990 - PN1992.92 Broadcasting|PN1991 - PN1991.9 Radio broadcasts",687,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV8301 - HV9920.7 Penology. Prisons. Corrections|HV9261 - HV9430.7 Reformation and reclamation of adult prisoners",686,
        "C - Auxiliary Sciences of History|CS1 - CS3090 Genealogy|CS2300 - CS3090 Personal or family names",685,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT750 - BT811 Salvation. Soteriology",683,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature|PA3300 - PA3516 Collections",683,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBP1 - KBP4860 Islamic law. Shari'ah. Fiqh|KBP173.25 - KBP0.6 Islamic law and other disciplines or subjects",680,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ400 - PQ491 Poetry",680,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB469 - SB476 Landscape gardening. Landscape architecture",680,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law",678,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLA1 - KLA9999 Russia. Soviet Union",678,
        "N - Fine Arts|N1 - N9211 Visual arts|N81 - N390 Study and teaching. Research",677,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z987 - Z997 Private libraries. Book collecting. Including bibliophilism, bookplates",677,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law",675,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK2200 - NK2750 Furniture",675,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1 - RA418.5 Medicine and the state|RA410 - RA410.9 Medical economics. Economics of medical care. Employment",671,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering",671,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT170 - HT178 Urban renewal. Urban redevelopment",670,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ251 - BQ799 History",669,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK70 - DK112.42 Early to 1613|DK70 - DK99.7 Rus'",669,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ9103 - HJ9695 Local finance. Municipal finance (including the revenue, budget, expenditures of counties, boroughs, municipalities, etc.)",667,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG819 - DG875 Southern Italy",664,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1401 - K1578 Intellectual property",663,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8750 - PT8951.36 Individual authors or works|PT8800 - PT8942 19th century",663,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC215 - LC238.4 Community and the school",662,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z719 - Z725 Libraries (General)",660,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ4835 - JZ5490 International organizations and associations",659,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature|PT175 - PT230 Medieval",659,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ1100 - BQ3340 Tripitaka (Canonical literature)",657,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX650 - NX694 Special subjects, characters, persons, religious arts, etc.",656,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z3501 - Z3975 Africa",655,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine",652,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT348 - DT363.3 Central Sub-Saharan Africa",651,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM695 - RM893 Physical medicine. Physical therapy (including massage, exercise, occupational therapy, hydrotherapy, phototherapy, radiotherapy, thermotherapy, elect",651,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS376 - DS392.2 Pakistan",648,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6099 - PN6110 Poetry",648,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS80 - DS90 Lebanon (Phenicia)",647,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ151 - PQ221 Medieval. Old French",646,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR4501 - CR6305 Chivalry and knighthood (Orders, decorations, etc.)",644,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV7200 - JV7539 Canada, Latin America, etc.",644,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD101 - HD1395.5 Land use|HD1241 - HD1339 Land tenure",641,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN3311 - PN3503 Prose. Prose fiction|PN3427 - PN3448 Special kinds of fiction. Fiction genres",641,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR251 - PR369 Medieval. Middle English (1066-1500)",641,
        "V - Naval science|VA10 - VA750 Navies: Organization, distribution, naval situation|VA400 - VA750 Other regions or countries",641,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD301 - DD454 Prussia",640,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN49 - GN298 Physical anthropology. Somatology|GN281 - GN289 Human evolution",639,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE305 - HE311 Urban transportation",639,
        "N - Fine Arts|N1 - N9211 Visual arts|N4390 - N5098 Exhibitions",636,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History",635,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E806 - E813 Franklin Delano Roosevelt's administrations, 1933-April 12, 1945",634,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT339 - MT533 Wind instruments",634,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC189 - LC214.53 Educational sociology|LC213 - LC214.53 Educational equalization. Right to education",633,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1001 - G1046 World atlases",632,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K5000 - K5582 Criminal law and procedure|K5015.4 - K5350 Criminal law",629,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1780 - G2799 Eastern Hemisphere. Eurasia, Africa, etc.|G2200 - G2444.84 Asia",628,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA5000 - PA5660 Byzantine and modern Greek literature|PA5301 - PA5637 Individual authors",628,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC870 - RC923 Diseases of the genitourinary system. Urology",628,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB71 - HB74 Economics as a science. Relation to other subjects",625,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR471 - PR479 20th century",624,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1 - PJ489 General",623,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK30 - DJK51 History",622,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period",622,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT1772 - DT1974 History",620,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism",618,
        "U - Military science (General)|U1 - U900 Military science (General)|U27 - U43 History of military science",618,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS36 - DS39.2 Arab countries|DS37 - DS39.2 History",617,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z682 - Z682.4 Personnel",616,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1099 - LC1099.5 Multicultural education (General)",612,
        "M - Music|MT1 - MT960 Musical instruction and study|MT40 - MT67 Composition. Elements and techniques of music",612,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6131 - PQ6153 Prose",612,
        "U - Military science (General)|U1 - U900 Military science (General)|U400 - U714 Military education and training",610,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation",607,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2331.7 - LB2335.8 Teaching personnel",606,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2102 - M2114.8 Songs",606,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC799 - RC869 Diseases of the digestive system. Gastroenterology",606,
        "H - Social sciences|HG1 - HG9999 Finance|HG3691 - HG3769 Credit. Debt. Loans (including credit institutions, credit instruments, consumer credit, bankruptcy)",605,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works|PT1701 - PT1797 1500-ca. 1700",600,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E841 - E843 Kennedy's administration, 1961-November 22, 1963",599,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL2000 - BL2032 India",598,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1139.2 - LB1139.5 Early childhood education",596,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1110 - PN1279 History and criticism",595,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP166 - BP166.94 Theology (Kalam)",594,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism|PG3041 - PG3065 Poetry",594,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR441 - PR449 18th century",594,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF201 - JF619 Organs and functions of government",592,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9650 - PT9876.36 Individual authors or works|PT9876 - PT9876.36 1961-2000",592,
        "U - Military science (General)|U1 - U900 Military science (General)|U161 - U163 Strategy",592,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing",590,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL950 - PL998 Korean literature|PL986 - PL993 Individual authors and works",589,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1075 - HQ1075.5 Sex role",588,
        "J - Political Science|JA1 - JA92 Political science (General)|JA81 - JA84 History",588,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1 - RA418.5 Medicine and the state|RA418 - RA418.5 Medicine and society. Social medicine. Medical sociology",588,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1 - RA418.5 Medicine and the state|RA407 - RA409.5 Health status indicators. Medical statistics and surveys",585,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members",584,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3950 - LC4806.5 Exceptional children and youth. Special education|LC3991 - LC4000 Gifted children and youth",584,
        "W - Health Sciences",584,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1035 - Z1035.9 Best books",584,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT154.1 - DT159.9 Sudan. Anglo-Egyptian Sudan",583,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G200 - G336 History of discoveries, explorations, and travel",583,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5387 - HF5387.5 Business ethics",583,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5717 - HF5734.7 Business communication",583,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4077 - PQ4088 Modern",582,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology|HV6201 - HV6249 Criminal classes",580,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1300 - ND1337 Portraits",577,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations",576,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT19 - BT37 Doctrine and dogma",575,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2695 - NA2793 Architectural drawing and design",575,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal|DP535 - DP682.2 History|DP558 - DP682.2 By period",574,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium",572,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland",568,
        "T - Technology.|T1 - T995 Technology (General)|T14.7 - T33 History of technology",568,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P901 - P1091 Extinct ancient or medieval languages",567,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1940 - NE2232.5 Etching and aquatint",565,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF231 - BF299 Sensation. Aesthesiology",564,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA565 - RA600 Environmental health (including sewage disposal, air pollution, nuisances, water supply)",564,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS125 - BS355 Modern texts and versions",563,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT697 - TT927 Home arts. Homecrafts (including sewing, embroidery, decorative crafts)",561,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium",559,
        "J - Political Science|J1 - J981 General legislative and executive papers|J100 - J981 Other regions and countries",557,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9191 - PQ9255 Individual authors and works, 1500-1700",553,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1101 - GV1150.9 Fighting sports: Bullfighting, boxing, fencing, etc.",552,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P99 - P99.4 Semiotics. Signs and symbols",552,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B69 - B99 General works",551,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary|HV7935 - HV8025 Administration and organization",551,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS6950 - JS7509 Asia",551,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML198 - ML360 By region or country|ML198 - ML239 America",550,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE9761 - HE9900 Air transportation. Airlines",549,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN451 - PN497 Biography",549,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8201 - BX8495 Methodism",548,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ8001 - HJ8899 Public debts",547,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML198 - ML360 By region or country|ML330 - ML345 Asia",546,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P325 - P325.5 Semantics",546,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6201 - BX6495 Baptists",545,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2061 - PN2071 Art of acting",545,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1160 - NK1590 Decoration and ornament. Design|NK1175 - NK1498 History",544,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology|GB561 - GB649 Other natural landforms: floodplains, caves, deserts, dunes, etc.",543,
        "A - General Works|AE1 - AE88 Encyclopedias",542,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6080 - PN6095 Quotations",539,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4091 - PQ4131 Poetry",538,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR421 - PR429 Elizabethan era (1550-1640)",538,
        "Q - Science|QC1 - QC999 Physics|QC350 - QC467 Optics. Light|QC450 - QC467 Spectroscopy",538,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL300 - BL325 The myth. Comparative mythology",537,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS92 - DS99 Syria",536,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E310 - E337 1789-1809. Constitutional period|E311 - E320 Washington's administrations, 1789-1797",536,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography|GA341 - GA1776 Maps. By region or country",534,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1 - PN9 Periodicals",534,
        "Q - Science|QK1 - QK989 Botany|QK640 - QK673 Plant anatomy",534,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works|AC1 - AC195 Collections of monographs, essays, etc.|AC1 - AC8 American and English",532,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN5201 - JN5690 Italy",530,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL5051 - PL5497 Malayan (Indonesian) languages",528,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV697 - HV700.7 Families. Mothers. Widow's pensions",527,
        "B - Philosophy. Psychology. Religion|BH1 - BH301 Aesthetics|BH81 - BH208 History",524,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS351 - HS929 Freemasons",523,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV4480 - HV4630 Mendicancy. Vagabondism. Tramps. Homelessness",523,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT341 - TT641 Nutrition. Foods and food supply",522,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ4543 - PJ4937 Language (Biblical and modern)",521,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK2901 - PK2979 General",521,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6098.7 - PQ6129 Drama",521,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG1100 - UG1435 Equipment and supplies",521,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1140 - LB1140.5 Preschool education. Nursery schools",520,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM7801 - PM7895 Mixed languages",520,
        "Q - Science|QB1 - QB991 Astronomy|QB980 - QB991 Cosmogony. Cosmology",519,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB2000 - DB3150 Czechoslovakia|DB2300 - DB2650 Local history and description of Czech lands",517,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS31 - DS35.2 History",517,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV4023 - HV4470.7 Poor in cities. Slums",516,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC361 - LC629 Christian education. Church education",516,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1001 - PJ1989 Egyptology",516,
        "E - History: America|E11 - E143 America|E101 - E135 Discovery of America and early explorations|E111 - E120 Columbus",515,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training|GV460 - GV555 Gymnastics. Gymnastic exercises (including calisthenics, heavy exercises, acrobatics, etc.)",515,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism|PG3091 - PG3099 Prose",509,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN851 - PN884 Comparative literature",509,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP600 - BP610 Other beliefs and movements",507,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD84 - DD257.4 History|DD121 - DD257.4 By period|DD125 - DD174.6 Early and medieval to 1519",506,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ4835 - JZ5490 International organizations and associations|JZ4850 - JZ5490 Intergovernmental organizations. IGOs",506,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT8050 - PT8176.36 Individual authors or works|PT8100 - PT8167 19th century",506,
        "R - Medicine|RB1 - RB214 Pathology|RB37 - RB56.5 Clinical pathology. Laboratory technique",506,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK1001 - TK1841 Production of electric energy or power. Powerplants. Central stations",504,
        "Q - Science|QC1 - QC999 Physics|QC81 - QC114 Weights and measures",503,
        "B - Philosophy. Psychology. Religion|BF1001 - BF1389 Parapsychology|BF1001 - BF1045 Psychic research. Psychology of the conscious",502,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL901 - PL949 Korean language",502,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases|SB621 - SB795 Plant pathology",502,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB1001 - GB1199.6 Groundwater. Hydrogeology",501,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6075 - PQ6098 Poetry",501,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD131 - SD247.5 History of forestry. Forest conditions",501,
        "Q - Science|QH1 - QH278.5 Natural history (General)|QH201 - QH278.5 Microscopy",500,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2000 - M2007 Oratorios",499,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC321 - RC571 Neurosciences. Biological psychiatry. Neuropsychiatry|RC346 - RC429 Neurology. Diseases of the nervous system|RC423 - RC429 Speech and language disorders",499,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1501 - LB1547 Primary education",498,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P87 - P96 Communication. Mass media|P95 - P95.6 Oral communication. Speech",498,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS901 - DS937 Korea|DS904.8 - DS922.46 History|DS918 - DS921.8 War and intervention, 1950-1953",497,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G521 - G539 Adventures, shipwrecks, buried treasure, etc.",497,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature|PA3601 - PA3681 Translations",496,
        "Q - Science|QC1 - QC999 Physics|QC251 - QC338.5 Heat",496,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ500 - PQ591 Drama",493,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration|JL1 - JL500 Canada",492,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature|PT605 - PT709 Drama",492,
        "T - Technology.|T1 - T995 Technology (General)|T173.2 - T174.5 Technological change",491,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS13 - DS28 Ethnography",490,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1 - PJ489 General|PJ1 - PJ195 Languages",490,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB2831.6 - LB2831.99 Administrative personnel",489,
        "U - Military science (General)|UF1 - UF910 Artillery",489,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2326.4 - LB2330 Institutions of higher education",488,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT819 - BT891 Eschatology. Last things",487,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1491 - HD1492.5 Cooperative agriculture",487,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1293 - NB1895 Special forms",487,
        "Q - Science|QE1 - QE996.5 Geology|QE901 - QE996.5 Paleobotany",486,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU108 - DU117.2 History",484,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN8101 - JN8399 Spain",484,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes",484,
        "T - Technology.|TX1 - TX1110 Home economics.|TX901 - TX946.5 Hospitality industry. Hotels, clubs, restaurants, food service, etc.",484,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine",482,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1003 - Z1003.5 Choice of books. Books and reading. Book reviews",482,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK3591 - PK4485 Sanskrit",480,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z266 - Z276 Bookbinding. Book decoration",480,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC997 - NC1003 Commercial art. Advertising art",479,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV6201 - JV6348 Immigration",478,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ450 - HQ472 Erotica",477,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation",477,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK7800 - TK8360 Electronics|TK7885 - TK7895 Computer engineering. Computer hardware",475,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT1095 - BT1255 Apologetics. Evidences of Christianity",474,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5428 - HF5429.6 Retail trade",474,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1001 - RA1171 Forensic medicine. Medical jurisprudence. Legal medicine",474,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB2001 - PB3029 Brittanic group",473,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E876 - E880 Reagan's administrations, 1981-1989",472,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK401 - PK976 Sanskrit",472,
        "L - Education|LE3 - LE78 Individual institutions",471,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)",471,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States|DT301 - DT330 Morocco",470,
        "M - Music|MT1 - MT960 Musical instruction and study|MT820 - MT915 Singing and vocal technique",470,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects",470,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1019 - Z1033 Special classes of books. Including prohibited books, rare books, paperbacks, reprints",470,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT3200 - CT9999 Biography. By subject|CT3200 - CT3830 Biography of women (Collective)",469,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU400 - DU430 New Zealand",468,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1562.5 - BF1584 Witchcraft",467,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period",467,
        "R - Medicine|RF1 - RF547 Otorhinolaryngology",465,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9131 - PQ9188 Collections",464,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P501 - P769 Indo-European (Indo-Germanic) philology",463,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC401 - TC506 River, lake, and water-supply engineering (General)",463,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM101 - PM2711 American languages (Aboriginal)|PM549 - PM2711 Special languages of the United States and Canada (alphabetically)",462,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT595 - BT680 Mary, Mother of Jesus Christ. Mariology",461,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden",460,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ4629 - HJ4830 Income tax",459,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement",459,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6690 - JN6699 Russia (Federation)",458,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures|PK1931 - PK1970 Hindi language",458,
        "U - Military science (General)|U1 - U900 Military science (General)|U263 - U264.5 Atomic warfare. Atomic weapons",458,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1088 - HQ1090.7 Men",457,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3260 - PG3299 Prose",457,
        "T - Technology.|TS1 - TS2301 Manufactures|TS200 - TS770 Metal manufactures. Metalworking",457,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS561 - DS589 Thailand (Siam)",456,
        "D - History (General) and History of Europe|DX101 - DX301 History of Gypsies",456,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2155 - F2191 Caribbean area. Caribbean Sea",456,
        "B - Philosophy. Psychology. Religion|BC1 - BC199 Logic|BC171 - BC199 Special topics",454,
        "Q - Science|QR1 - QR502 Microbiology|QR75 - QR99.5 Bacteria",454,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1585 - BF1623 Magic. Hermetics. Necromancy",453,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA700 - DA745 Wales",453,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G80 - G99 History of geography",453,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ8001 - HJ8899 Public debts|HJ8101 - HJ8899 By region or country",453,
        "A - General Works|AG2 - AG600 Dictionaries and other general reference works",452,
        "A - General Works|AY10 - AY2001 Yearbooks. Almanacs. Directories",451,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL550 - BL619 Worship. Cultus",451,
        "E - History: America|E151 - E889 United States|E171 - E183.9 History|E171 - E180 General|E175 - E175.7 Historiography",451,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT220 - MT255 Piano",451,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8001 - BX8080 Lutheran churches",450,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS41 - DS66 Middle East. Southwestern Asia. Ancient Orient. Arab East. Near East|DS51 - DS54.95 Local history and description|DS54 - DS54.95 Cyprus",449,
        "L - Education|LG21 - LG961 Individual institutions",449,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E838 - E840.8 General|E840 - E840.3 Diplomatic history. Foreign and general relations",447,
        "B - Philosophy. Psychology. Religion|BF1001 - BF1389 Parapsychology|BF1048 - BF1108 Hallucinations. Sleep. Dreaming. Visions",446,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D242 - D283.5 1601-1715. 17th century",446,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR4501 - CR6305 Chivalry and knighthood (Orders, decorations, etc.)|CR4651 - CR6305 Orders, etc.",444,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK501 - JK901 Executive branch|JK631 - JK873 Civil Service. Departments and agencies",444,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC2700 - PC3708 Dialects. Provincialisms|PC3201 - PC3366 Provencal (Old)",442,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1 - RA418.5 Medicine and the state|RA411 - RA415 Provisions for personal medical care. Medical care plans",441,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z657 - Z659 Freedom of the press. Censorship",441,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG1801 - PG1962 Slovenian",440,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR32 - DR48.5 History. Balkan War, 1912-1913",439,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5548.7 - HF5548.85 Industrial psychology",439,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC189 - LC214.53 Educational sociology|LC212 - LC212.86 Discrimination in education",439,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP785 - TP869 Clay industries. Ceramics. Glass",439,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV770.3 - GV840 Water sports: Canoeing, sailing, yachting, scuba diving, etc.",438,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)",437,
        "L - Education|L7 - L991 Education (General)|L900 - L991 Directories of educational institutions",436,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP171 - BP173 Relation of Islam to other religions",435,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC71 - RC78.7 Examination. Diagnosis (including radiography)",435,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature|PT500 - PT597 Poetry",434,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS331 - DS349.9 Southern Asia. Indian Ocean Region",433,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF697 - BF697.5 Differential psychology. Individuality. Self",431,
        "Q - Science|QD1 - QD999 Chemistry|QD241 - QD441 Organic chemistry|QD415 - QD436 Biochemistry",429,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments",428,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1340 - ND1367 Landscape painting",428,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP248.13 - TP248.65 Biotechnology",428,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF201 - JF619 Organs and functions of government|JF441 - JF619 Legislation. Legislative process. Law",426,
        "R - Medicine|RD1 - RD811 Surgery|RD701 - RD811 Orthopedic surgery",426,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8901 - BX9225 Presbyterianism. Calvinistic Methodism",425,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA4050 - ZA4750 Information in specific formats or media",425,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE6000 - HE7500 Postal service. Stamps. Philately",424,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC581 - RC607 Immunologic diseases. Allergy",424,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E310 - E337 1789-1809. Constitutional period|E331 - E337 Jefferson's administrations, 1801-1809",421,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL700 - PL889 Japanese literature|PL700 - PL751.5 History and criticism",421,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC1200 - RC1245 Sports medicine",421,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB221 - HB236 Price",420,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB1805 - LB2151 State teachers colleges",420,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS801 - DS897 Japan|DS894.21 - DS897 Local history and description",419,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB3602 - LB3640 School life. Student manners and customs",419,
        "Q - Science|QB1 - QB991 Astronomy|QB460 - QB466 Astrophysics",419,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD95 - BD131 Metaphysics",418,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD172 - TD193.5 Environmental pollution",418,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV800 - BV873 Sacraments. Ordinances",417,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E341 - E370 Madison's administrations, 1809-1817",416,
        "Q - Science|QA1 - QA939 Mathematics|QA71 - QA90 Instruments and machines|QA75 - QA76.95 Calculating machines|QA75.5 - QA76.95 Electronic computers. Computer science|QA76.75 - QA76.76 Computer software",416,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4061 - BQ4570 Doctrinal and systematic Buddhism",414,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV3750 - BV3799 Evangelism. Revivals",414,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ3995 - JQ6651 Australia. New Zealand. Pacific Ocean islands",414,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M1200 - M1269 Band",414,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP500 - TP660 Fermentation industries. Beverages. Alcohol",414,
        "U - Military science (General)|UH20 - UH910 Other services",414,
        "E - History: America|E151 - E889 United States|E186 - E199 Colonial history (1607-1775)",413,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology|GN357 - GN367 Culture and cultural processes",413,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG500 - PG585 Slavic literature (General)",412,
        "T - Technology.|TN1 - TN997 Mining engineering. Metallurgy.|TN600 - TN799 Metallurgy",412,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B770 - B785 Renaissance",411,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z679 - Z680 Library buildings. Library architecture. Including planning, space utilization, security, safety, lighting, etc.",411,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM481 - HM554 Theory. Method. Relations to other subjects",410,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2115 - M2146 Hymnals. Hymn collections",407,
        "R - Medicine|RB1 - RB214 Pathology|RB151 - RB214 Theories of disease. Etiology. Pathogenesis",406,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT371 - DT390 Ethiopia (Abyssinia)",405,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature|PL8009.5 - PL8014 Literature",405,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS901 - DS937 Korea|DS930 - DS937 Democratic People's Republic, 1948-",404,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD240 - BD260 Methodology",403,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History|DR481 - DR605 By period|DR576 - DR605 20th century. Constitutional movement",403,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM661 - HM696 Social control",403,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC251 - LC318 Moral education. Character building",403,
        "R - Medicine|RD1 - RD811 Surgery|RD1 - RD31.7 General works",403,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK9001 - TK9401 Nuclear engineering. Atomic power",403,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA4050 - ZA4750 Information in specific formats or media|ZA4050 - ZA4460 Electronic information resources",403,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX5800 - BX5995 Protestant Episcopal Church in the United States of America",401,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV4701 - HV4890.9 Protection of animals. Animal rights. Animal welfare",401,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK5500 - NK6060 Glyptic arts",401,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration|JL1200 - JL1299 Mexico",400,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD169 - TD171.8 Environmental protection",400,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP70 - BP80 Biography",399,
        "Q - Science|QE1 - QE996.5 Geology|QE500 - QE639.5 Dynamic and structural geology|QE601 - QE613.5 Structural geology",398,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education",397,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG601 - PG716 Church Slavic",397,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8751 - HG9295 Life insurance",396,
        "R - Medicine|RB1 - RB214 Pathology|RB127 - RB150 Manifestation of disease",396,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing|Z240 - Z241.5 Incunabula. Block books. Including broadsides, playing cards",396,
        "Q - Science|QL1 - QL991 Zoology|QL801 - QL950.9 Anatomy",395,
        "Q - Science|QL1 - QL991 Zoology|QL951 - QL991 Embryology",394,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU120 - DU125 Ethnography",393,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM7801 - PM7895 Mixed languages|PM7831 - PM7875 Creole languages",393,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6110.5 - PN6120 Drama",392,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1060.5 - GV1098 Track and field athletics",391,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT561 - DT581 Cameroon (Cameroun, Kamerun)",390,
        "F - America: local history|F1 - F975 United States local history|F786 - F790 New Southwest. Colorado River, Canyon, and Valley",387,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1900 - M1978 Songs (part and solo) of special character",387,
        "B - Philosophy. Psychology. Religion|BC1 - BC199 Logic|BC60 - BC99 General works",386,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK70 - DK112.42 Early to 1613|DK99.8 - DK112.42 Muscovy",386,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE380.8 - HE971 Water transportation|HE380.8 - HE560 Waterways",384,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF7000 - KF7999",384,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK845 - DK860 Soviet Central Asia. West Turkestan",383,
        "N - Fine Arts|N1 - N9211 Visual arts|N8700 - N9165 Art and the state. Public art",383,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4161 - PQ4185 Prose",383,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD783 - TD812.5 Municipal refuse. Solid wastes",383,
        "T - Technology.|TN1 - TN997 Mining engineering. Metallurgy.|TN400 - TN580 Ore deposits and mining of particular metals",383,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z700.9 - Z701.5 Preservation, conservation and restoration of books, etc.",383,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA10 - DA18.2 British Empire. Commonwealth of Nations. The Commonwealth",382,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD4861 - HD4895 Labor systems",381,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN3311 - PN3503 Prose. Prose fiction|PN3329 - PN3352 Philosophy, theory, etc.",381,
        "Q - Science|QC1 - QC999 Physics|QC474 - QC496.9 Radiation physics (General)",381,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM214 - RM258 Diet therapy. Diet and dietetics in disease. Dietary cookbooks",380,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG443 - UG449 Attack and defense. Siege warfare",380,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ807 - TJ830 Renewable energy sources",379,
        "L - Education|LA5 - LA2396 History of education|LA31 - LA135 By period",378,
        "V - Naval science|V1 - V995 Naval science (General)|V750 - V995 War vessels: Construction, armament, etc.",378,
        "A - General Works|AE1 - AE88 Encyclopedias|AE5 - AE88 By language",377,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8750 - PT8951.36 Individual authors or works|PT8951 - PT8951.36 1961-2000",377,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC750 - QC766 Magnetism",376,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU520 - DU950 Smaller Island Groups|DU620 - DU629 Hawaiian Islands. Hawaii",375,
        "U - Military science (General)|UB1 - UB900 Military administration|UB250 - UB271 Intelligence",375,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE380.8 - HE971 Water transportation|HE561 - HE971 Shipping|HE730 - HE943 Merchant marine. Ocean shipping. Coastwise shipping",374,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL700 - PL889 Japanese literature|PL752 - PL783 Collections",373,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1800 - GV1860 Circuses, spectacles, etc. (including rodeos, waxworks, amusement parks, etc.)",372,
        "Q - Science|QC1 - QC999 Physics|QC120 - QC168.85 Descriptive and experimental mechanics",372,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T58.5 - T58.64 Information technology|T58.6 - T58.62 Management information systems",372,
        "A - General Works|AM1 - AM401 Museums. Collectors and collecting|AM10 - AM100 By country",371,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.|G8200 - G8904 Africa",371,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)|BV169 - BV199 Liturgy and ritual",370,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB1805 - LB2151 State teachers colleges|LB1811 - LB1987 United States",370,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG1151 - PG1199 Macedonian",370,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA648.5 - RA767 Epidemics. Epidemology. Quarantine. Disinfection",370,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4600 - DK4800 Local history and description",369,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR700 - GR860 Animals, plants, and minerals",369,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea",369,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3199 - PG3205 General",369,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ212 - TJ225 Control engineering systems. Automatic machinery (General)",369,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1271.2 - BL1295 Modifications. Sects",368,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4430 - K4675 Public finance",368,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3223 - PG3229.2 Special periods",368,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases|SB950 - SB990.5 Pest control and treatment of diseases. Plant protection",368,
        "L - Education|LF14 - LF5627 Individual institutions|LF2402 - LF3197 Germany",367,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3581 - K3598 Environmental law",366,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC648 - RC665 Diseases of the endocrine glands",366,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC705 - RC779 Diseases of the respiratory system",366,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV2000 - BV3705 Missions|BV2123 - BV2595 Special churches",365,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF1338 - JF2112 Public administration|JF2011 - JF2112 Political parties",364,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1030 - NE1196.3 History",364,
        "N - Fine Arts|NE1 - NE3002 Print media|NE2250 - NE2570 Lithography",364,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1700 - NK2195 Interior decoration. House decoration",364,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1151 - PT1241 Poetry",364,
        "F - America: local history|F1 - F975 United States local history|F1 - F15 New England",361,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1720 - PN1861 History",361,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D101 - D110.5 Medieval and modern history, 476-",360,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature|PA6101 - PA6140 Collections",360,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC952 - RC954.6 Geriatrics",360,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-|DP170 - DP189 1516-1700. Hapsburgs",359,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT433.5 - DT434 Kenya",359,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT641 - HT657 Classes arising from birth",359,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB2001 - PB3029 Brittanic group|PB2101 - PB2499 Welsh. Cymric",359,
        "R - Medicine|RL1 - RL803 Dermatology",359,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB320 - SB353.5 Vegetables",359,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal|DP535 - DP682.2 History|DP558 - DP682.2 By period|DP620 - DP682.2 -1580",358,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ840 - BQ999 Biography",356,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT491 - DT516.9 British West Africa|DT509.97 - DT512.9 Ghana (Gold Coast)",355,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1300 - PQ1595 Old French literature (To ca. 1500/1550)|PQ1300 - PQ1391 Collections",355,
        "P - Language and literature|PE1 - PE3729 English language|PE101 - PE458 Anglo-Saxon. Old English",354,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF1 - PF979 Dutch",354,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG940 - RG991 Maternal care. Prenatal care services",353,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR500 - GR615 Supernatural beings, demonology, fairies, ghosts, charms, etc.",352,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History|DR1259 - DR1321 By period|DR1281 - DR1321 -1918|DR1313 - DR1313.8 Yugoslav War, 1991-1995",351,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT591 - DT615.9 Portuguese-speaking West Africa",351,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E885 - E889 Clinton administration, 1993-2001",351,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV9950 - HV9960 By region or country",351,
        "J - Political Science|J1 - J981 General legislative and executive papers|J10 - J98 United States",351,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ163.12 - TJ163.25 Power resources",351,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC633 - RC647.5 Diseases of the blood and blood-forming organs",349,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC925 - RC935 Diseases of the musculoskeletal system",349,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia",348,
        "T - Technology.|TS1 - TS2301 Manufactures|TS1300 - TS1865 Textile industries",348,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV1460 - BV1615 Religious education (General)",347,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK507 - DK507.95 Belarus. Byelorussian S.S.R.  White Russia",347,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR701 - DR741 Local history and description (European Turkey)",347,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E855 - E861 Nixon's administrations, 1969-August 9, 1974",347,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1700 - NK2195 Interior decoration. House decoration|NK1700 - NK2138 General. History, etc.  Including special rooms",347,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF411 - SF459 Pets",347,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB111 - GB398.7 By region or country",346,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF51 - JF56 General works. History",346,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E300 - E302.6 General",345,
        "Q - Science|QR1 - QR502 Microbiology|QR100 - QR130 Microbial ecology",345,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG600 - RG650 The embryo and fetus",345,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA329 - TA348 Engineering mathematics. Engineering analysis",344,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC65 - LC67.68 Economic aspects of education",343,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z689 - Z689.8 Acquisition (selection, purchase, gifts, duplicates)",343,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN3311 - PN3503 Prose. Prose fiction|PN3451 - PN3503 History",342,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM480 - BM488.8 Pre-Talmudic Jewish literature (non-Biblical)",341,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS633 - DS644.46 History",341,
        "B - Philosophy. Psychology. Religion|BF1001 - BF1389 Parapsychology|BF1228 - BF1389 Spiritualism",340,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K625 - K709 Persons",340,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)|BV301 - BV530 Hymnology",339,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX4872 - BX4924 Pre-Reformation",338,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1410 - ND1460 Other subjects",338,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC1 - NC45 General. Including collective biography",337,
        "N - Fine Arts|ND25 - ND3416 Painting|ND2550 - ND2733 Mural painting",337,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ840 - BQ999 Biography|BQ860 - BQ999 Individual",336,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA703 - TA712 Engineering geology. Rock mechanics. Soil mechanics. Underground construction",336,
        "T - Technology.|TS1 - TS2301 Manufactures|TS1080 - TS1268 Paper manufacture and trade",336,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ210.2 - TJ211.47 Mechanical devices and figures. Automata. Ingenious mechanisms. Robots (General)",335,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP70 - BP80 Biography|BP75 - BP77.75 Muhammad, Prophet, d. 632",334,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ125 - RJ145 Physiology of children and adolescents",334,
        "B - Philosophy. Psychology. Religion|BJ1801 - BJ2195 Social usages. Etiquette",333,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML549.8 - ML649 Organ",332,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7601 - BX7795 Friends. Society of Friends. Quakers",331,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology|GN378 - GN396 Collected dthnographies",331,
        "U - Military science (General)|U1 - U900 Military science (General)|U799 - U897 History of arms and armor",331,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB801 - HB843 Consumption. Demand",330,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3310 - PG3319 18th century",330,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9715 - HD9717.5 Construction industry",329,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ4835 - JZ5490 International organizations and associations|JZ4850 - JZ5490 Intergovernmental organizations. IGOs|JZ4935 - JZ5160 The United Nations",329,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA630 - TA695 Structural engineering (General)",329,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E341 - E370 Madison's administrations, 1809-1817|E351.5 - E364.9 War of 1812",328,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3200 - G3202 World maps",328,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS2501 - HS3371 Clubs. Clubs and societies for special classes (including boys' societies, Boy Scouts, girls' societies)",328,
        "H - Social sciences|HX1 - HX970.7 Socialism. Communism. Anarchism|HX806 - HX811 Utopias. The ideal state",327,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK1717 - JK2248 Political rights. Practical politics|JK1846 - JK1936 Suffrage",326,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD10 - BD41 General philosophical works",324,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN661 - PN694 Medieval (to 1500)|PN683 - PN687 Legends",324,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC963 - RC969 Industrial medicine. Industrial hygiene",324,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN49 - GN298 Physical anthropology. Somatology|GN62.8 - GN263 Human variation",322,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT401 - HT485 Rural groups. Rural sociology",322,
        "R - Medicine|R5 - R920 Medicine (General)|R726.5 - R726.8 Medicine and disease in relation to psychology, terminal care, dying",322,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1940 - NE2232.5 Etching and aquatint|NE1980 - NE2055.5 History",321,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC200 - GC376 Dynamics of the ocean",320,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD411 - SD428 Conservation and protection",320,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM1 - BM449 General|BM150 - BM449 History|BM201 - BM449 By region or country",319,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K321 - K474 Schools of legal theory|K366 - K380 Sociology of law. Sociological jurisprudence",319,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT259 - MT338 String instruments",318,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S900 - S946.5 Conservation of natural resources (Including land conservation)",318,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH219 - SH321 By region or country",318,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP368 - TP456 Food processing and manufacture",318,
        "C - Auxiliary Sciences of History|CE1 - CE97 Technical Chronology. Calendar",317,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT361 - HT384 Urbanization. City and country",317,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-|DP201 - DP232.6 1808-1886. 19th century",316,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB1201 - GB1598 Rivers. Stream measurements",316,
        "R - Medicine|RT1 - RT120 Nursing|RT89 - RT120 Specialties in nursing",316,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV551.2 - HV639 Emergency management|HV553 - HV639 Relief in case of disasters|HV599 - HV639 Special types of disasters",315,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC319 - JC323 Political geography",315,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P301 - P301.5 Style. Composition. Rhetoric",315,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1225.2 - BL1243.58 Religious life",313,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D284 - D297 1715-1789. 18th century",313,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF636 - BF637 Applied psychology",311,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF692 - BF692.5 Psychology of sex. Sexual behavior",311,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL425 - BL490 Religious doctrines (General)|BL473 - BL490 Other",311,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4430 - K4675 Public finance|K4453 - K4640 National revenue",311,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML649.8 - ML747 Piano, clavichord, harpsichord, etc.",311,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG633 - UG635 By region or country",311,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL500 - BL547 Eschatology",310,
        "E - History: America|E11 - E143 America|E11 - E29 General",310,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)|BV205 - BV287 Prayer",309,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH101 - PH405 Finnish",308,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ811 - HQ960.7 Divorce",307,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ6360 - JZ6377 Non-military coercion",307,
        "N - Fine Arts|N1 - N9211 Visual arts|N8600 - N8675 Economics of art",307,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History|DR481 - DR605 By period|DR485 - DR555.7 1281/1453-1789. Fall of Constantinople, 1453",305,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ799.5 - HQ799.9 Young men and women",305,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK600 - NK806 History",305,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT546.1 - DT546.49 French-speaking Equatorial Africa",304,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1221 - GV1469.62 Indoor games and amusements|GV1469.15 - GV1469.62 Computer games. Video games. Fantasy games",303,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV701 - HV1420.5 Children|HV888 - HV907 Children with disabilities",303,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD511 - TD780 Sewage collection and disposal systems",303,
        "A - General Works|AZ101 - AZ999 History of scholarship and learning. The humanities|AZ501 - AZ908 By region or country",302,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1444 - BF1486 Ghosts. Apparitions. Hauntings",302,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z4 - Z8 History of books and bookmaking",302,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS527 - DS530.9 Burma",301,
        "V - Naval science|VA10 - VA750 Navies: Organization, distribution, naval situation|VA49 - VA395 United States",301,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KU1 - KU4999 Australia",300,
        "P - Language and literature|PR1 - PR9680 English literature|PR125 - PR138.5 Relations to other literatures and countries",299,
        "R - Medicine|RK1 - RK715 Dentistry|RK301 - RK493 Oral and dental medicine. Pathology. Diseases",299,
        "E - History: America|E151 - E889 United States|E186 - E199 Colonial history (1607-1775)|E186 - E189 General",298,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD5106 - HD5267 Hours of labor (including overtime, shift work, sick leave, vacations)",298,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL2390 - BL2490 African|BL2420 - BL2460 Egyptian",297,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL689 - BL980 European. Occidental|BL900 - BL980 Other European",297,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK3591 - PK4485 Sanskrit|PK3791 - PK3799 Individual authors and works",297,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism|PQ9000 - PQ9034 General",297,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT450 - DT450.49 Rwanda. Ruanda-Urundi",296,
        "E - History: America|E151 - E889 United States|E660 - E738 Late nineteenth century, 1865-1900|E660 - E664 General",296,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1660 - PN1693 Technique of dramatic composition",296,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB354 - SB402 Fruit culture and orchard care",296,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB481 - SB485 Parks and public reservations (including works on theory, management, history)",296,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9665 - HD9675 Pharmaceutical industry",295,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli",295,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT580 - MT599 Guitar",295,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG551 - RG591 Pregnancy",295,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1528 - M1529.5 Duets, trios, etc., for solo voices",294,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT8050 - PT8176.36 Individual authors or works|PT8176 - PT8176.36 1961-2000",294,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology|GB450 - GB460 Coasts",293,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML430 - ML455 Composition",293,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P98 - P98.5 Computational linguistics. Natural language processing",293,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z674.7 - Z674.83 Library information networks",293,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP595 - BP597 Anthroposophy",290,
        "H - Social sciences|HX1 - HX970.7 Socialism. Communism. Anarchism|HX626 - HX696 Communism: Utopian socialism, collective settlements",290,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1041 - LC1048 Vocational education (General)",290,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6000 - PT6466.36 Flemish literature since 1830",290,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC401 - GC881 Oceanography. By region",289,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ221 - KZ1152 By region or country",289,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1560 - PN1590 The performing arts. Show business",289,
        "R - Medicine|R5 - R920 Medicine (General)|R728 - R733 Practice of medicine. Medical practice economics",288,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD201 - TD500 Water supply for domestic and industrial purposes|TD419 - TD428 Water pollution",288,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4850 - KZ5490 Intergovernmental organizations. IGOs",287,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States|DT211 - DT239 Libya",286,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV680 - HV696 Free professional services (including medical charities)",285,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7101 - PT7211 Literary history and criticism",285,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship",284,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH601 - PH671 Estonian",284,
        "A - General Works|AY10 - AY2001 Yearbooks. Almanacs. Directories|AY30 - AY1730 Almanacs",282,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX100 - BX189 Eastern churches. Oriental churches",282,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States|DT241 - DT269 Tunisia (Tunis)",282,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G3290 - G5668 America. Western Hemisphere|G5200 - G5668 South America",282,
        "L - Education|L7 - L991 Education (General)|L111 - L791 Official documents, reports, etc.",282,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT3701 - PT3971 Provincial, local, colonial, etc.|PT3701 - PT3746 East Germany",282,
        "C - Auxiliary Sciences of History|CD1 - CD6471 Diplomatics. Archives. Seals|CD5001 - CD6471 Seals",281,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB3201 - LB3325 School architecture and equipment. School physical facilities. Campus planning",281,
        "Q - Science|QR1 - QR502 Microbiology|QR355 - QR502 Virology",281,
        "R - Medicine|RD1 - RD811 Surgery|RD78.3 - RD87.3 Anesthesiology",280,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1310 - NE1326.5 Japanese prints",279,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1221 - GV1469.62 Indoor games and amusements|GV1312 - GV1469 Board games. Move games",278,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1501 - HS2460.7 Other societies. By classes",278,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT321 - HT325 The city as economic factor. City promotion",278,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG8001 - PG9146 Baltic|PG8501 - PG8772 Lithuanian",278,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1001 - LC1024 Humanistic education. liberal education",277,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD391 - SD410.9 Sylviculture",277,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS161 - DS195.5 Armenia",276,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E740 - E749 General|E743 - E743.5 Political history",276,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1130 - ND1156 General works",276,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK9600 - NK9955 Woodwork",276,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1910 - NB1952 Special subjects",274,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1001 - PJ1989 Egyptology|PJ1481 - PJ1989 Literature. Inscriptions",274,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages",274,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP315 - TP360 Fuel",274,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1651 - BF1729 Astrology",273,
        "E - History: America|E151 - E889 United States|E660 - E738 Late nineteenth century, 1865-1900|E666 - E670 Johnson's administration, April 15, 1865-1869",273,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G100.5 - G108.5 Toponymy",273,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA349 - TA359 Mechanics of engineering. Applied mechanics",273,
        "R - Medicine|RF1 - RF547 Otorhinolaryngology|RF110 - RF320 Otology. Diseases of the ear",272,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History|DK4429 - DK4442 1945-1989. People's Republic",270,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden|DL643 - DL879 History",270,
        "C - Auxiliary Sciences of History|CB3 - CB482 History of Civilization|CB440 - CB482 Relation to special topics",269,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ4113 - HJ4601 Property tax",269,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America",269,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature|PA6155 - PA6191 Translations",268,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR171 - PR236 Anglo-Saxon (Beginnings through 1066)",268,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT115 - DT154 Local history and description",267,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR72 - GR79 Folk literature (General)",267,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC142 - LC148.5 Attendance. Dropouts",267,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC501 - QC718.8 Electricity|QC717.6 - QC718.8 Plasma physics. Ionized gasses",267,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5460 - HF5469.5 Department stores. Mail order business. Supermarkets. Convenience stores",265,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC361 - LC629 Christian education. Church education|LC461 - LC510 Roman Catholic",265,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ5901 - PQ5999 Regional, provincial, local, etc.",265,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS554 - DS554.98 Cambodia",264,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS781 - DS796 Local history and description|DS785 - DS786 Tibet",264,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC165 - LC182 Higher education and the state",264,
        "M - Music|ML1 - ML3930 Literature on music|ML93 - ML96.5 Manuscripts, autographs, etc.",264,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z695.9 - Z695.94 Indexing. Abstracting",263,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology|CC135 - CC137 Preservation, restoration, and conservation of antiquities.  Antiquities and state",261,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG9501 - PG9665 Albanian",261,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6201 - PK6599.7 New Persian|PK6201 - PK6399 Language",261,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4133 - PQ4160 Drama",260,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS488 - DS490 Sri Lanka",259,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6000 - PT6466.36 Flemish literature since 1830|PT6400 - PT6466.36 Individual authors or works",259,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German|PF3801 - PF3991 Old High German",258,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG400 - UG442 Fortification",258,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN9600 - JN9689 Balkan States",257,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K321 - K474 Schools of legal theory|K400 - K474 Natural law",257,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts",257,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA1 - NA60 General",256,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT545 - DT545.9 Cote d'Ivoire. Ivory Coast",255,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2337.2 - LB2340.8 Student financial aid",255,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC86 - RC88.9 Medical emergencies. Critical care. Intensive care. First aid",255,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2351 - LB2359 Admissions and entrance requirements",254,
        "Q - Science|Q1 - Q390 Science (General)|Q300 - Q390 Cybernetics|Q350 - Q390 Information theory",254,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS524 - DS526.7 History",253,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS160 - RS167 Pharmacognosy. Pharmaceutical substances (plant, animal, and inorganic)",253,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ9701 - HJ9940 Public accounting. Auditing",252,
        "R - Medicine|RE1 - RE994 Opthamology|RE91 - RE912 Particular diseases of the eye",252,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K2100 - K2385 Courts. Procedure",251,
        "Q - Science|QC1 - QC999 Physics|QC251 - QC338.5 Heat|QC310.15 - QC319 Thermodynamics",251,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK504 - DK504.95 Latvia",250,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML929 - ML990 Wind instruments",250,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1203 - NB1270 Special materials",250,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1 - NK570 General",250,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK5401 - PK5471 Modern Indo-Aryan literature",250,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS730 - DS731 Ethnography",249,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada|F1060 - F1060.97 Canadian Northwest. Northwest Territories",249,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ801 - HQ801.83 Man-woman relationships. Courtship. Dating",249,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB2165 - LB2278 Teacher training in universities and colleges",249,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS35.3 - DS35.77 The Islamic World",248,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3300 - PG3308 Early to 1700",248,
        "R - Medicine|R5 - R920 Medicine (General)|R858 - R859.7 Computer applications to medicine",248,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K830 - K968 Obligations",247,
        "T - Technology.|T1 - T995 Technology (General)|T175 - T178 Industrial research. Research and development",247,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages",246,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT881 - PT951 Folk literature",246,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF608 - BF635 Will. Volition. Choice. Control",244,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1601 - F1629 West Indies",243,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S530 - S559 Agricultural education",242,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT1754 - DT1770 Ethnography",241,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M1375 - M1420 Instrumental music for children",241,
        "Q - Science|QM1 - QM695 Human anatomy|QM550 - QM577.8 Human and comparative histology",241,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ750 - HQ755.5 Eugenics",240,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML162 - ML197 Special periods|ML193 - ML197 -1601",240,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1293 - NB1895 Special forms|NB1800 - NB1880 Sepulchral monuments",239,
        "Q - Science|QC1 - QC999 Physics|QC801 - QC809 Geophysics. Cosmic physics",239,
        "T - Technology.|T1 - T995 Technology (General)|T61 - T173 Technical education. Technical schools",239,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9650 - HD9663 Chemistry industries",238,
        "L - Education|LF14 - LF5627 Individual institutions|LF4251 - LF4437 Russia (Federation)",238,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6080 - PN6095 Quotations|PN6081 - PN6084 English",238,
        "T - Technology.|T1 - T995 Technology (General)|T201 - T342 Patents. Trademarks",238,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL2195 - BL2228 Japan",237,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV199 - GV199.6 Hiking. Pedestrian tours",237,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN101 - PN245 Authorship|PN241 - PN241.5 Translating as a literary pursuit",237,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KG1 - KG999 Latin America (General)",236,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT339 - MT533 Wind instruments|MT340 - MT359 Flute",236,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages|PL4301 - PL4470 Mon-Khmer (Mon-Anam) languages",236,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA1001 - TA1280 Transportation engineering",236,
        "T - Technology.|TH1 - TH9745 Building construction|TH4021 - TH4977 Buildings: Construction with reference to use (including public buildings, dwellings)",236,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4000 - BQ4060 General works",233,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV840.7 - GV857 Winter sports: Ice hockey, skiing, bobsledding, snowmobiling, etc.",233,
        "H - Social sciences|HN1 - HN995 Social history and conditions. Social problems. Social reform|HN30 - HN39 The church and social problems",233,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E813 - E816 Truman's administrations, April 12, 1945-1953",232,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1700 - K1973 Social legislation",232,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML1200 - ML1270 Orchestra",232,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA1000 - PA1179 Medieval and modern Greek language",232,
        "U - Military science (General)|UH20 - UH910 Other services|UH201 - UH515 Medical and sanitary services",232,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP173.25 - BP173.45 Islamic sociology",231,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ95 - DJ292 History",231,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT549 - DT549.9 Senegal",231,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR431 - PR439 17th century",231,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E838 - E840.8 General|E839.5 - E839.8 Political history",230,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC215 - LC238.4 Community and the school|LC225 - LC226.7 Home and school",230,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1160 - NK1590 Decoration and ornament. Design|NK1505 - NK1535 General works",229,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages|PL3551 - PL4001 Tibeto-Burman languages",229,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL43 - DL87 History",228,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6269 - PN6278 Aphorisms. Apothegms",228,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA4050 - ZA4750 Information in specific formats or media|ZA4050 - ZA4460 Electronic information resources|ZA4150 - ZA4390 Computer network resources",227,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E766 - E783 Wilson's administrations, 1913-1921",226,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN59 - PN72 Study and teaching",226,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature",226,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8101 - BX8144 Mennonites",225,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV8490 - JV8758 Asia",225,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws",225,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH20.3 - SH191 Aquaculture",225,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1040 - GV1060.4 Cycling. Bicycling. Motorcycling",224,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3500 - PG3505 Provincial, local, etc.",224,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E784 - E805 1919-1933. Harding-Coolidge-Hoover era. The twenties",223,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology|HV6250 - HV6250.4 Victims of crimes. Victimology",223,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1301 - PT1360 Prose",223,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1375 - PT1479 Middle High German",223,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA791 - RA954 Medical geography. Climatology. Meteorology",223,
        "T - Technology.|T1 - T995 Technology (General)|T391 - T995 Exhibitions. Trade shows. World's fairs",223,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT160 - DT177 North Africa",222,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV1421 - HV1441 Young Adults. Youth. Teenagers",222,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC5800 - LC5808 Distance education",222,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1065 - PN1085 Relations to, and treatment of, special subjects",222,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7220 - PT7262.5 Collections",222,
        "C - Auxiliary Sciences of History|CN1 - CN1355 Inscriptions. Epigraphy|CN870 - CN1355 By region or country",221,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E401 - E415.3 Mexican War, 1846-1848",221,
        "Q - Science|QB1 - QB991 Astronomy|QB468 - QB480 Non-optical methods of astronomy",221,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration|JL1400 - JL1679 Central America",220,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL5501 - PL6135 Philippine languages",220,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD895 - TD899 Industrial and factory sanitation",220,
        "A - General Works|AM1 - AM401 Museums. Collectors and collecting|AM111 - AM160 Museology. Museum methods, technique, etc.",219,
        "M - Music|ML1 - ML3930 Literature on music|ML112.8 - ML158.8 Bibliography|ML113 - ML118 International",219,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH5001 - PH5490 Basque",219,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2667 - LC2698 Latin Americans. Hispanic Americans",218,
        "P - Language and literature|PR1 - PR9680 English literature|PR111 - PR116 Women authors",218,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC627.5 - RC632 Metabolic diseases",217,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D25 - D27 Military and naval history",216,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal|DP535 - DP682.2 History|DP558 - DP682.2 By period|DP558 - DP618 Early and medieval to 1580",216,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E756 - E760 Theodore Roosevelt's administrations, September 14, 1901-1909",216,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN1601 - JN2191 Austria-Hungary. Austria. Hungary",216,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD895 - TD899 Industrial and factory sanitation|TD896 - TD899 Industrial and factory wastes",216,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS153 - DS154.9 Jordan. Transjordan",215,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS608 - DS610.9 Singapore",215,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT436 - DT449 Tanzania. Tanganyika. German East Africa",215,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K4011 - K4343 Transportation and communication",215,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG51 - LG53 China",214,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases|SB818 - SB945 Economic entomology",214,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1501 - BF1562 Demonology. Satanism. Possession",213,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK901 - DK909.5 Kazakhstan. Kazakh S.S.R.",213,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E835 - E837.7 Eisenhower's administrations, 1953-1961",213,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1401 - K1578 Intellectual property|K1500 - K1578 Industrial property",213,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KDZ1 - KDZ4999 Law of America. North America",212,
        "R - Medicine|RD1 - RD811 Surgery|RD92 - RD97.8 Emergency surgery. Wounds and injuries",212,
        "E - History: America|E151 - E889 United States|E171 - E183.9 History|E183 - E183.3 Political history",211,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM8001 - PM8995 Artificial languages",211,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ251 - RJ325 Newborn infants (including physiology, care, treatment, diseases)",211,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL101 - DL291 Denmark",210,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5469.7 - HF5481 Markets. Fairs",210,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG9969.5 - HG9999 Other insurance (including automobile, burglary, disaster, title, etc.)",210,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN695 - PN779 Modern|PN715 - PN749 Renaissance (1500-1700)",210,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z998 - Z1000.5 Booksellers' catalogs. Book prices",210,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK1001 - JK1443 Congress. Legislative branch|JK1308 - JK1443 House of Representatives",209,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS400 - RS431 Pharmaceutical chemistry",209,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden|DL643 - DL879 History|DL660 - DL879 By period",208,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1 - PL481 Ural-Altaic languages|PL400 - PL431 Mongolian languages",208,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D219 - D234 1453-1648",207,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT655 - MT725 Percussion and other instruments",207,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC306 - RC320.5 Tuberculosis",207,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF191 - SF275 Cattle",207,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions",206,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1470 - ND1625 Technique and materials",206,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z712 - Z714 Circulation. Loans. Charging systems",206,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS541 - DS553.7 History",205,
        "L - Education|LA5 - LA2396 History of education|LA5 - LA25 General",205,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX1 - BX9.5 Church unity. Ecumenical movement. Interdenominational cooperation",204,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ301 - DQ851 Local history and description",204,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z683 - Z683.5 Finance. Insurance",204,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR279 - DR296 Local history and description",203,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD5650 - HD5660 Employee participation in management. Employee ownership. Industrial democracy. Works councils",203,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3092 - KZ3405 20th century",203,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL2000 - BL2032 India|BL2017 - BL2018.7 Sikhism",202,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS781 - DS796 Local history and description|DS781 - DS784.2 Manchuria",201,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E381 - E385 Jackson's administrations, 1829-1837",201,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4850 - KZ5490 Intergovernmental organizations. IGOs|KZ4935 - KZ5275 The United Nations",201,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC1800 - NC1850 Posters",201,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases|SB610 - SB615 Weeds, parasitic plants, etc.",201,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK15 - VK124 History, conditions, etc.",201,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training|GV401 - GV433 Physical education facilities. Sports facilities (including gymnasiums, athletic fields, playgrounds, etc.)",200,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF180 - BF198.7 Experimental psychology",199,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1745 - BF1779 Oracles. Sibyls. Divinations",199,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden|DL643 - DL879 History|DL660 - DL879 By period|DL701 - DL879 Modern, 1523-",199,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z1201 - Z1946 America|Z1365 - Z1401 Canada. British North America",199,
        "A - General Works|AZ101 - AZ999 History of scholarship and learning. The humanities|AZ101 - AZ111 Philosophy. Theory",198,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT621 - DT637 Liberia",198,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1020 - GV1038.2 Automobile travel. Motoring. Automobile racing",198,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1401 - K1578 Intellectual property|K1411 - K1485 Copyright",198,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2361 - LB2365 Curriculum",198,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1200 - LC1203 Inclusive education",198,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1990 - M1998 Secular music for children",198,
        "P - Language and literature|PR1 - PR9680 English literature|PR750 - PR890 Prose|PR767 - PR818 By period",198,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP500 - BP585 Theosophy",197,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK670 - DK679.5 Georgia (Republic). Georgian S.S.R.  Georgian Sakartvelo",197,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB5000 - GB5030 Natural disasters",197,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1281 - PR1309 Prose (General)",197,
        "R - Medicine|R5 - R920 Medicine (General)|R690 - R697 Medicine as a profession. Physicians",197,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF411 - SF459 Pets|SF421 - SF440.2 Dogs. Dog racing",197,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF660 - BF685 Comparative psychology. Animal and human psychology",196,
        "J - Political Science|JA1 - JA92 Political science (General)|JA1 - JA26 Periodicals",194,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian|PD5001 - PD5929 Swedish",194,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering|VM311 - VM466 Special types of vessels",194,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1501 - HS2460.7 Other societies. By classes|HS2301 - HS2460.7 Political and patriotic societies",193,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB409 - SB413 Culture of Individual plants",193,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV659 - BV683 Ministry. Clergy. Religious vocations",192,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB201 - HB206 Value. Utility",192,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC2700 - PC3708 Dialects. Provincialisms|PC2813 - PC2898 Old French",192,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM147 - RM180 Administration of drugs and other therapeutic agents",192,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML475 - ML547 By region or country",191,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE1 - NE90 General",191,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH1 - PH87 General",191,
        "Q - Science|QC1 - QC999 Physics|QC221 - QC246 Acoustics. Sound",191,
        "U - Military science (General)|UB1 - UB900 Military administration|UB356 - UB369.5 Provision for veterans",191,
        "U - Military science (General)|UB1 - UB900 Military administration|UB416 - UB419 Minorities, women, etc. in armed forces",191,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History",190,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC2700 - PC3708 Dialects. Provincialisms|PC3371 - PC3420.5 Modern patois of South France",190,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN801 - PN820 Romance literature",190,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC71 - RC78.7 Examination. Diagnosis (including radiography)|RC78 - RC78.5 Radiography. Roentgenography",190,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA501 - TA625 Surveying",190,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1700 - K1973 Social legislation|K1701 - K1841 Labor law",189,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2561 - PK2579.5 Oriya",189,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2131 - PN2193 By period",189,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD194 - TD195 Environmental effects of industries and plants",189,
        "T - Technology.|TH1 - TH9745 Building construction|TH9025 - TH9745 Protection of fuildings (including protection from dampness, fire, burglary)",189,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB238 - HB251 Competition. Production. Wealth",188,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN597 - PN605 Special relations, movements, and currents of literature",188,
        "A - General Works|AI1 - AI21 Indexes",187,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB846 - HB846.8 Welfare theory",187,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE8701 - HE9680.7 Telephone industry",187,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ6603 - HJ7390 Customs administration",187,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ206 - RJ235 Nutrition and feeding of children and adolescents",187,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K237 - K264 The concept of law",186,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1165 - KZ1208 Trials",186,
        "P - Language and literature|PE1 - PE3729 English language|PE3701 - PE3729 Slang. Argot, etc.",186,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC160 - TC181 Technical hydraulics",186,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9201 - PT9499 Literary history and criticism",185,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP200 - TP248 Manufacture and use of chemicals",185,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3820 - K3836 Economic constitution, policy, planning, and development",184,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4001 - PJ4091 Sumerian",184,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History",183,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU400 - DU430 New Zealand|DU422.5 - DU424.5 Ethnography",183,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2147 - M2188 Liturgy and ritual",183,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E846 - E851 Johnson's administrations, November 22, 1963-1969",182,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1165 - KZ1208 Trials|KZ1168 - KZ1208 War crime trials",182,
        "T - Technology.|TG1 - TG470 Bridge engineering.",182,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8501 - HG8745 By region or country",181,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML749.5 - ML927 Bowed string instruments",181,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN905 - PN1008 Folk literature",181,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE210 - TE228.3 Construction details (including foundations, maintenance, equipment)",181,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF1338 - JF2112 Public administration|JF1411 - JF1521 Civil service",180,
        "Q - Science|QB1 - QB991 Astronomy|QB349 - QB421 Theoretical astronomy and celestial mechanics",179,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF699 - BF711 Genetic psychology",178,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1216 - BL1225 Hindu pantheon. Deities",178,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK26 - DJK28 Ethnography",178,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period|DR84.9 - DR89.8 1878-1944",178,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT713 - HT725 Caste system",178,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ1249 - JZ1254 Relation to other disciplines and topics",178,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK2896 - TK2985 Production of electricity by direct electricity conversion",178,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period|DR81 - DR84 Turkish rule, 1396-1878",177,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica",177,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1090 - LC1091 Political education",176,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA100 - NA130 Architecture and the state",176,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)|BV30 - BV135 Times and seasons. The Church year",175,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK505 - DK505.95 Lithuania",175,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient",175,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3092 - KZ3405 20th century|KZ3110 - KZ3405 Publicists. Writers on public international law",175,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1081 - LC1087.4 Industrial education (General)",175,
        "B - Philosophy. Psychology. Religion|BC1 - BC199 Logic|BC11 - BC39 History",173,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1300 - BL1380 Jainism",173,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History|DK4186 - DK4348 To 1795",173,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1001 - DT1190 Southern Africa",173,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM435 - HM477 History of sociology. History of sociological theory",173,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV3176 - HV3199 Special classes. By race or ethnic group",173,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.|PN4735 - PN4748 Relation to the state. Government and the press. Liberty of the press",173,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH401 - SH691 Angling (including tackle, casting, methods of angling, angling for special kinds of fish)",173,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering|VM15 - VM124 History",172,
        "A - General Works|AN - Newspapers",171,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ5360 - BQ5680 Religious life",171,
        "M - Music|ML1 - ML3930 Literature on music|ML110 - ML111.5 Music librarianship",171,
        "Q - Science|QB1 - QB991 Astronomy|QB140 - QB237 Practical and spherical astronomy",171,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC460 - UC535 Clothing and equipment",171,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z674.2 - Z674.5 Information services. Information centers",171,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1500 - BL1590 Zoroastrianism (Mazdeism). Parseeism",170,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History|DK4397 - DK4420 1918-1945",170,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3476 - K3560 Public property. Public restraint on private property",170,
        "A - General Works|AY10 - AY2001 Yearbooks. Almanacs. Directories|AY10 - AY29 Annuals",169,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC730 - NC758 Technique",169,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature|PL8000 - PL8009 Languages",169,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1011 - Z1017 General bibliographies",169,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF176 - BF176.5 Psychological tests and testing",168,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT2871 - DT3025 Zimbabwe. Southern Rhodesia",168,
        "H - Social sciences|HF1 - HF6182 Commerce|HF1021 - HF1027 Commercial geography. Economic geography",168,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX700 - NX750 Patronage of the arts",168,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S604.8 - S621.5 Melioration: Improvement, reclamation, fertilization, irrigation, etc. of lands",167,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1301 - K1366 Business associations",166,
        "S - Agriculture|SK1 - SK663 Hunting|SK351 - SK579 Wildlife management. Game protection",166,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT7601 - PT7869 Literary history and criticism",165,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1041 - Z1121 Anonyms and pseudonyms",165,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9301 - BX9359 Puritanism",164,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT491 - DT516.9 British West Africa|DT516 - DT516.9 Sierra Leone",164,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4002 - KZ4080 The state",164,
        "U - Military science (General)|UB1 - UB900 Military administration|UB320 - UB338 Enlistment, recruiting, etc.",164,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.|G7000 - G7342 Former Soviet republics. Union of Soviet Socialist Republics.  Russia (Empire)",163,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV701 - HV1420.5 Children|HV959 - HV1420.5 Orphanages. Orphans",163,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC49 - RC52 Psychosomatic medicine",163,
        "R - Medicine|RK1 - RK715 Dentistry|RK641 - RK667 Prosthetic dentistry. Prosthodontics",162,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP300 - BP395 Bahai Faith",161,
        "N - Fine Arts|N1 - N9211 Visual arts|N8350 - N8356 Art as a profession. Artists",161,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF501 - BF505 Motivation",160,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT960 - BT985 Invisible world (Saints, demons, etc.)",160,
        "D - History (General) and History of Europe|DAW1001 - DAW1051 History of Central Europe",160,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS493 - DS495.8 Nepal",160,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL950 - PL998 Korean literature|PL969.8 - PL985 Collections",160,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism",160,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7001 - PT7099 Scandinavian literature",160,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7001 - PT7099 Scandinavian literature|PT7001 - PT7099 General",160,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1251 - DT1465 Angola",159,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB1501 - PB1709 Gaelic (Scottish Gaelic, Erse)",159,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD430 - SD557 Exploitation and utilization",159,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS327 - DS329.4 Central Asia",158,
        "E - History: America|E11 - E143 America|E31 - E49.3 North America",158,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB2401 - GB2598 Ice. Glaciers. Ice sheets. Sea ice",158,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC71 - LC120.4 Education and the state|LC107 - LC120.4 Public school question. Secularization. Religious instruction in the public schools",158,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK2775 - NK2898 Rugs and carpets",158,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages|PL4301 - PL4470 Mon-Khmer (Mon-Anam) languages|PL4371 - PL4379 Vietnamese. Annamese",158,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN3151 - PN3171 Amateur theater",158,
        "Q - Science|QB1 - QB991 Astronomy|QB275 - QB343 Geodesy",158,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP1080 - TP1185 Polymers and polymer manufacture",158,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ3001 - PJ3097 Semitic philology and literature",157,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7101 - BX7260 Congregationalism",156,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT21 - CT22 Biography as an art or literary form",156,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT551 - DT551.9 Mali. Mali Federation. Sudanese Republic. French Sudan",156,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC1000 - GC1023 Marine resources. Applied oceanography",156,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL6191 - PL6341 Micronesian and Melanesian languages",156,
        "S - Agriculture|SK1 - SK663 Hunting|SK40 - SK268 By country",156,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania",155,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN1400 - JN1571.5 Ireland",155,
        "P - Language and literature|PE1 - PE3729 English language|PE501 - PE693 Middle English",155,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway",154,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4001 - PN4355 Oratory. Elocution, etc.|PN4177 - PN4191 Debating",154,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4001 - PN4355 Oratory. Elocution, etc.|PN4199 - PN4321 Recitations (in English)",154,
        "U - Military science (General)|UD1 - UD495 Infantry",154,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT160 - DT177 North Africa|DT167 - DT176 History",153,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV181.35 - GV181.6 Recreation leadership. Administration of recreation services",153,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History|DK4348.5 - DK4395 1795-1918. 19th century (General)",152,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS101 - HS330.7 Secret societies",152,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS2300 - JS2778 South America",152,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ95 - DJ292 History|DJ151 - DJ292 By period",151,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK690 - DK699.5 Azerbaijan. Azerbaijan S.S.R.",151,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL43 - DL87 History|DL61 - DL87 By period",151,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC70 - GC90 Environmental education",151,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1073 - HQ1073.5 Thanatology. Death. Dying",151,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z551 - Z656 Copyright",151,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH95 - DH207 History",150,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ7461 - HJ7980 Expenditures. Government spending",150,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security",150,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX280 - NX410 Study and teaching. Research",150,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ101 - RJ103 Child health. Child health services",150,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT541 - DT541.9 Benin. Dahomey",149,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E872 - E875 Carter's administration, 1977-1981",149,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian|PD2501 - PD2999 Norwegian",149,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z4001 - Z4980 Australia. Oceania",149,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1141 - LB1489 Kindergarten",148,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6120.15 - PN6120.95 Fiction",148,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History|DR481 - DR605 By period|DR568 - DR575 1861-1909. War with Russia, 1877-1878",147,
        "Q - Science|QA1 - QA939 Mathematics|QA47 - QA59 Tables",147,
        "V - Naval science|VB15 - VB345 Naval administration",147,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR191 - CR1020 Public and official heraldry",146,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS393 - DS396.9 Bangladesh. East Pakistan",146,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E337.8 - E340 General",146,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN49 - GN298 Physical anthropology. Somatology|GN51 - GN59 Anthropometry",146,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3941 - K3974 Trade and commerce",146,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2371 - LB2372 Graduate education",146,
        "N - Fine Arts|N1 - N9211 Visual arts|N8554 - N8585 Examination and conservation of works of art",146,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages|PL3551 - PL4001 Tibeto-Burman languages|PL3561 - PL3801 Tibeto-Himalayan languages",146,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2131 - PN2193 By period|PN2181 - PN2193 Modern",146,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9300 - PQ9326 Individual authors, 2001-",146,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD561 - SD669.5 Administration. Policy",146,
        "C - Auxiliary Sciences of History|CD1 - CD6471 Diplomatics. Archives. Seals|CD1 - CD511 Diplomatics",145,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K2400 - K2405 Arbitration and award",145,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA166 - TA167 Human engineering",145,
        "U - Military science (General)|UF1 - UF910 Artillery|UF560 - UF780 Ordnance material (Ordnance proper)",145,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP187 - BP187.9 Shrines, sacred places, etc.",144,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS11 - BS115 Early versions",144,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training|GV346 - GV351.5 School and college athletics. Intramural and interscholastic athletics",144,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV5725 - HV5770 Tobacco habit",144,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC760 - NC825 Special subjects",144,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS125 - RS131.9 Formularies. Collected prescriptions",144,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU400 - DU430 New Zealand|DU419 - DU422 History",143,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5691 - HF5716 Business mathematics. Commercial arithmetic",143,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG9371 - HG9399 Health insurance",143,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM711 - HM806 Groups and organizations|HM756 - HM781 Community",143,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV4997 - HV5000 Substance abuse",143,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2018 - M2019.5 Duets, trios, etc. for solo voices",143,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT259 - MT338 String instruments|MT260 - MT279.7 Violin",143,
        "M - Music|MT1 - MT960 Musical instruction and study|MT820 - MT915 Singing and vocal technique|MT855 - MT883 Special techniques",143,
        "Q - Science|QM1 - QM695 Human anatomy|QM601 - QM695 Human embryology",143,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL689 - BL980 European. Occidental|BL830 - BL875 Germanic and Norse",142,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU28.11 - DU68 History",142,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN2210 - JN2229 Czech Republic. Czechoslovakia",142,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security|KZ5615 - KZ5893 Arms control and disarmament regimes",142,
        "M - Music|ML1 - ML3930 Literature on music|ML35 - ML38 Festivals. Congresses",142,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P321 - P324.5 Etymology",142,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF951 - SF997.5 Diseases of special classes of animals",142,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH20.3 - SH191 Aquaculture|SH151 - SH179 Fish culture",142,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ268 - TJ740 Steam engineering",142,
        "C - Auxiliary Sciences of History|CB3 - CB482 History of Civilization|CB158 - CB161 Forecasts of future progress",141,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History|DH571 - DH694 By period",141,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5400 - PT5547 Collections",141,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX4929 - BX4951 Post-Reformation",140,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8762 - BX8785 Pentecostal churches",140,
        "E - History: America|E11 - E143 America|E141 - E143 Descriptive accounts of America. Earliest to 1810",140,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV8790 - JV9025 Africa",140,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages|PL3551 - PL4001 Tibeto-Burman languages|PL3561 - PL3801 Tibeto-Himalayan languages|PL3601 - PL3775 Tibetan",140,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN905 - PN1008 Folk literature|PN980 - PN995 Fables",140,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism|PQ9035 - PQ9055 Special periods",140,
        "R - Medicine|R5 - R920 Medicine (General)|R856 - R857 Biomedical engineering. Electronics. Instrumentation",140,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-|DP192 - DP200.8 1700-1808. Bourbons",139,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E415.6 - E415.9 General",139,
        "R - Medicine|R5 - R920 Medicine (General)|R895 - R920 Medical physics. Medical radiology. Nuclear medicine",139,
        "V - Naval science|VG20 - VG2029 Minor services of navies",139,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT433.2 - DT433.29 Uganda",138,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS7525 - JS7819 Africa",138,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK3001 - TK3521 Distribution or transmission of electric power",138,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP670 - TP699 Oils, fats, and waxes",138,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC260 - UC267 Supplies and stores",138,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z43 - Z45 Calligraphy. Penmanship",138,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT401 - DT409 Somalia. Somaliland and adjacent territory",137,
        "E - History: America|E11 - E143 America|E101 - E135 Discovery of America and early explorations|E103 - E110 Pre-Columbian period",137,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC501 - QC718.8 Electricity|QC701 - QC715.4 Electric discharge",137,
        "B - Philosophy. Psychology. Religion|BC1 - BC199 Logic|BC11 - BC39 History|BC25 - BC39 By period",136,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF795 - BF839 Temperament. Character",136,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX800 - BX4795 Catholic Church|BX4600 - BX4644 Churches, cathedrals, abbeys (as parish churches), etc.",136,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK502.3 - DK502.75 Baltic States",136,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC6201 - LC6401 University extension",136,
        "T - Technology.|TH1 - TH9745 Building construction|TH7005 - TH7699 Heating and ventilation. Air conditioning",136,
        "U - Military science (General)|UB1 - UB900 Military administration|UB340 - UB345 Compulsory service. Conscription and exemption",136,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period|DR250 - DR266.5 1866/1881-1944",135,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F3031 - F3031.5 Falkland Islands",135,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC203 - TC380 Harbors and coast protective works. Coastal engineering. Lighthouses",135,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP155 - TP156 Chemical engineering",135,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK503 - DK503.95 Estonia",134,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G540 - G550 Seafaring life, ocean travel, etc.",134,
        "H - Social sciences|HF1 - HF6182 Commerce|HF1040 - HF1054 Commodities. Commercial products",134,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5735 - HF5746 Business records management",134,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1625 - M1626 Recitations with music",134,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2147 - M2188 Liturgy and ritual|M2147 - M2155.6 Roman Catholic Church",134,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC1860 - NC1896 Greeting cards, postcards, invitations, book jackets, etc.",134,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG159 - RG208 Functional and systemic disorders. Endocrine gynecology",134,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE830 - NE898 General works",133,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1 - PJ489 General|PJ306 - PJ489 Literature",133,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6500 - PT6592.36 Afrikaans literature",133,
        "R - Medicine|RD1 - RD811 Surgery|RD120.6 - RD129.8 Transplantation of organs, tissues, etc.",133,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1100 - G1779 America. Western Hemisphere|G1445 - G2739 Africa",132,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P375 - P381 Linguistic geography",132,
        "T - Technology.|TR1 - TR1050 Photography|TR287 - TR500 Photographic Processing",132,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal|DP702 - DP802 Local history and description",131,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT421 - DT432.5 East Africa. British East Africa",131,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM1001 - HM1281 Social psychology|HM1041 - HM1101 Social perception. Social cognition (including perception of the self and others, prejudices, stereotype)",131,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1272 - NB1291 Mobiles, color, sculpture gardens, etc.",131,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL950 - PL998 Korean literature|PL950.2 - PL969.5 History and criticism",131,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD5481 - HD5630.7 Industrial arbitration. Mediation and conciliation",130,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German|PF4043 - PF4350 Middle High German",130,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK101 - PK185 General",130,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL6401 - PL6551 Polynesian languages",130,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1361 - PR1369 Essays",130,
        "C - Auxiliary Sciences of History|CE1 - CE97 Technical Chronology. Calendar|CE51 - CE85 Medieval and modern",129,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1101 - HQ2030.7 Women. Feminism|HQ1871 - HQ2030.7 Women's clubs",129,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC3721 - PC3761 Slang. Argot",129,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7001 - PT7099 Scandinavian literature|PT7001 - PT7099 General|PT7001 - PT7087 Literary history and criticism",129,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD201 - TD500 Water supply for domestic and industrial purposes|TD429.5 - TD480.7 Water purification. Water treatment and conditioning. Saline water conversion",129,
        "V - Naval science|V1 - V995 Naval science (General)|V25 - V55 History and antiquities of naval science",129,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH95 - DH207 History|DH141 - DH207 By period",128,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2381 - LB2391 Academic degrees",128,
        "P - Language and literature|PR1 - PR9680 English literature|PR57 - PR78 Criticism",128,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP91 - DP96 Earliest to 711",127,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT7 - DT12.25 Description and travel",127,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E881 - E884 Bush administration, 1989-1993",127,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT495 - GT499 Human body and its parts. Personal beauty",127,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV1 - JV5399 Colonies and colonization|JV61 - JV151 History",127,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6058 - PQ6060 Early to 1500",127,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM182 - RM190 Other therapeutic procedures (including acupuncture, pneumatic aspiration, spinal puncture, pericardial puncture)",127,
        "T - Technology.|TL1 - TL4050 Motor vehicles. Aeronautics. Astronautics|TL780 - TL785.8 Rocket propulsion. Rockets",127,
        "V - Naval science|VE7 - VE500 Marines",127,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT547 - DT547.9 Niger",126,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K50 - K54 Dictionaries. Words and phrases",126,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S622 - S627 Soil conservation and protection",126,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL1790 - BL1975 China|BL1830 - BL1883 Confucianism",125,
        "E - History: America|E151 - E889 United States|E660 - E738 Late nineteenth century, 1865-1900|E671 - E680 Grant's administrations, 1869-1877",125,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN49 - GN298 Physical anthropology. Somatology|GN269 - GN279 Race (General)",125,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT899 - BT940 Future state. Future life",124,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT3200 - CT9999 Biography. By subject|CT9960 - CT9998 Other miscellaneous groups",124,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland",124,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K5000 - K5582 Criminal law and procedure|K5401 - K5570 Criminal procedure",124,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC901 - PC986 Raeto-Romance. Including Romansh",124,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian|PD2201 - PD2393 Old Norse. Old Icelandic and Old Norwegian",124,
        "C - Auxiliary Sciences of History|CJ1 - CJ6661 Numismatics|CJ5501 - CJ6661 Medals and medallions",123,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1621 - HG1638 Interest rates. Interest tables",123,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ199 - KZ218 Judicial decisions and arbitral awards. Law reports",123,
        "M - Music|ML1 - ML3930 Literature on music|ML25 - ML28 Societies and organizations",123,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1780 - G2799 Eastern Hemisphere. Eurasia, Africa, etc.|G2110 - G2196 Former Soviet republics. Union of Soviet Socialist Republics. Russia (Empire)",122,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1470 - GV1511 Parties. Party games and stunts",122,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV199.8 - GV200.3 Mountaineering",122,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K830 - K968 Obligations|K923 - K968 Torts",122,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KJ - Europe",122,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1203 - GV1218 Children's games and amusements",121,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1 - JQ1849 Asia|JQ1070 - JQ1199 Central Asia. Including former republics of the Soviet Union",121,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC601 - TC791 Canals and inland navigation. Waterways",121,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK509.1 - DK509.95 Moldova. Moldovian S.S.R.  Bessarabia",120,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL101 - DL291 Denmark|DL143 - DL263.3 History",120,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1271.2 - BL1295 Modifications. Sects|BL1284.5 - BL1289.59 Vaishnavism",119,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K2100 - K2385 Courts. Procedure|K2201 - K2385 Civil procedure",119,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2601 - LC2611 Education in developing countries",119,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature|PL8024 - PL8027 Special families of languages",119,
        "R - Medicine|RZ201 - RZ999 Other systems of medicine",119,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL301 - DL398 Iceland",118,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT675 - HT690 Classes arising from occupation",118,
        "J - Political Science|JA1 - JA92 Political science (General)|JA86 - JA88 Study and teaching. Research",118,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3842 - K3862 Trade regulations. Control of trade practices",118,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P327 - P327.5 Lexicography",118,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E310 - E337 1789-1809. Constitutional period|E321 - E330 John Adams' administration, 1797-1801",117,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC1080 - GC1581 Marine pollution. Seawater pollution",117,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM1 - PM94 Hyperborean languages of Arctic Asia and America",117,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT990 - BT1010 Creeds, confessions, covenants, etc.",116,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV2000 - BV3705 Missions|BV2610 - BV2695 Special types of missions",116,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic",116,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1841 - PK1870.95 Gujarati",116,
        "Q - Science|QD1 - QD999 Chemistry|QD450 - QD801 Physical and theoretical chemistry|QD701 - QD731 Photochemistry",116,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM711 - HM806 Groups and organizations|HM786 - HM806 Organizational sociology. Organization theory",115,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3171 - K3179 Constitutional principles",115,
        "A - General Works|AZ101 - AZ999 History of scholarship and learning. The humanities|AZ200 - AZ361 History",114,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL175 - BL265 Natural theology|BL175 - BL190 General",114,
        "G - Geography. Anthropology. Recreation|GF1 - GF900 Human ecology. Anthropogeography|GF101 - GF127 Settlements",114,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1641 - HG1643 Bank loans. Bank credit. Commercial loans",114,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1 - NB50 General",114,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1351 - PN1389 Lyric poetry",114,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3670 - KZ3881 Objects of the law of nations. Territory and its different parts",113,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2198 - M2199 Gospel, revival, temperance, etc. songs M5000 Unidentified compositions",113,
        "P - Language and literature|PR1 - PR9680 English literature|PR931 - PR938 Wit and humor",113,
        "U - Military science (General)|UF1 - UF910 Artillery|UF520 - UF537 Ordnance and small arms",113,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S560 - S571.5 Farm economics. Farm management. Agricultural mathematics",112,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S631 - S667 Fertilizers and improvement of the soil",112,
        "U - Military science (General)|U1 - U900 Military science (General)|U750 - U773 Military life, manners and customs, antiquities, etc.",112,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK941 - DK949.5 Uzbekistan. Uzbek S.S.R.",111,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1221 - GV1469.62 Indoor games and amusements|GV1232 - GV1299 Card games: Poker, patience, whist, etc.",111,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7435 - HV7439 Gun control",111,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV6061 - JV6149 Emigration",111,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5511.2 - JZ6299 Promotion of peace. Peaceful change|JZ6010 - JZ6299 Pacific settlement of international disputes",111,
        "L - Education|LA5 - LA2396 History of education|LA173 - LA186 Higher education",111,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML1030 - ML1049 Percussion instruments",111,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism|PG3071 - PG3089 Drama",111,
        "T - Technology.|TH1 - TH9745 Building construction|TH1000 - TH1725 Systems of building construction.",111,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC200 - GC376 Dynamics of the ocean|GC205 - GC226 Waves",110,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1293 - NB1895 Special forms|NB1293 - NB1310 Portrait sculpture",110,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC377 - GC399 Marine sediments",109,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KJ - Europe|KJ2 - KJ1040 History of Law",109,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC901 - LC915 Islamic education",109,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG725 - RG791 Obstetric operations. Operative obstetrics",109,
        "T - Technology.|TS1 - TS2301 Manufactures|TS800 - TS937 Wood technology. Lumber",109,
        "V - Naval science|VE7 - VE500 Marines|VE23 - VE124 By region or country",109,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing|Z231 - Z232 Printers and printing establishments",109,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF839.8 - BF885 Physiognomy. Phrenology",108,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT170 - GT476 Houses. Dwellings",108,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK1001 - JK1443 Congress. Legislative branch|JK1154 - JK1276 Senate",108,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3001 - LC3501 Asians",108,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education|LC37 - LC44.3 Home education",108,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education|LC47 - LC58.7 Private school education",108,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6366 - PN6377 Riddles, acrostics, charades, conundrums, etc.",108,
        "Q - Science|QC1 - QC999 Physics|QC811 - QC849 Geomagnetism",108,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ163.26 - TJ163.5 Energy conservation",108,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL2195 - BL2228 Japan|BL2216 - BL2227.8 Shinto",107,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP1 - BP68 General|BP42 - BP48 Study and teaching",107,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1501 - DT1685 Namibia. South-West Africa",107,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT555 - DT555.9 Burkina Faso. Upper Volta",107,
        "E - History: America|E151 - E889 United States|E186 - E199 Colonial history (1607-1775)|E191 - E199 By period",106,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ4835 - JZ5490 International organizations and associations|JZ4841 - JZ4848 Political non-governmental organizations. NGOs",106,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML1100 - ML1165 Chamber music",106,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML1049.8 - ML1091 Mechanical and other instruments",106,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN3203 - PN3299 Tableaux, pageants, 'Happenings,' etc.",106,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8301 - PT8574 Literary history and criticism",106,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S583 - S587.73 Agricultural chemistry. Agricultural chemicals",106,
        "J - Political Science|JA1 - JA92 Political science (General)|JA60 - JA64 Dictionaries and encyclopedias",105,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)|BV150 - BV168 Christian symbols and symbolism",104,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-|DP161.5 - DP166 1479-1516. Fernando V and Isabel I",104,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History|DQ78 - DQ210 By period",104,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6750 - JN6769 Poland",104,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA8200 - NA8260 Farm architecture",104,
        "R - Medicine|RK1 - RK715 Dentistry|RK501 - RK519 Operative dentistry. Restorative dentistry",104,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ1390 - BJ1390.5 Communist ethics",103,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K115 - K130 The legal profession",103,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ2401 - PJ2594 Cushitic languages",103,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL425 - BL490 Religious doctrines (General)|BL435 - BL457 Nature worship",102,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR1179 - CR3395 Family heraldry",102,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training|GV435 - GV436.7 Physical measurements. Physical tests, etc.",102,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K830 - K968 Obligations|K840 - K917 Contracts",102,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC620 - RC627 Nutritional diseases. Deficiency diseases",102,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX5001 - BX5009 Anglican Communion (General)",101,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS498 - DS498.8 Goa. Portuguese in India",101,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS5.95 - DS10 Description and travel",101,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States|DT331 - DT346 Sahara",101,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT591 - DT615.9 Portuguese-speaking West Africa|DT613 - DT613.9 Guinea-Bissau. Portuguese Guinea",101,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1470 - HD1476 Size of farms",101,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV551.2 - HV639 Emergency management|HV553 - HV639 Relief in case of disasters|HV560 - HV583 Red Cross. Red Crescent",101,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K720 - K792 Property",101,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1329 - KZ3085 Early/Medieval development to ca. 1900. Ius Naturae et Gentium",101,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4112 - KZ4820 By state",101,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1400 - NE1879 Metal engraving",101,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1001 - PJ1989 Egyptology|PJ1111 - PJ1446 Language",101,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG651 - RG721 Labor. Parturition",101,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB1601 - GB1798.9 Lakes. Limnology. Ponds. Lagoons",100,
        "H - Social sciences|HF1 - HF6182 Commerce|HF294 - HF343 Boards of trade. Chambers of commerce. Merchants' associations",100,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ800 - HQ800.4 Single people",100,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S604.8 - S621.5 Melioration: Improvement, reclamation, fertilization, irrigation, etc. of lands|S606 - S621.5 Special classes of lands and reclamation methods (including woodlands, burning of lands, deserts, saline environments, moors)",100,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT546.1 - DT546.49 French-speaking Equatorial Africa|DT546.4 - DT546.49 Chad (Tchad)",99,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ6378 - JZ6405 The armed conflict. War and order",99,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1648 - NK1678 Religious art",99,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism|PQ9061 - PQ9081 Poetry",99,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC501 - QC718.8 Electricity|QC669 - QC675.8 Electromagnetic theory",99,
        "R - Medicine|RK1 - RK715 Dentistry|RK520 - RK528 Orthodontics",99,
        "B - Philosophy. Psychology. Religion|BF1001 - BF1389 Parapsychology|BF1111 - BF1156 Hypnotism. Suggestion. Mesmerism. Subliminal projection",98,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV900 - BV1450 Religious societies, associations, etc.",98,
        "M - Music|MT1 - MT960 Musical instruction and study|MT90 - MT146 Analysis and appreciation of musical works|MT95 - MT100 Opera, ballet, etc.",98,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT8050 - PT8176.36 Individual authors or works|PT8060 - PT8098 16th-18th centuries",98,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC1030 - RC1160 Transportation medicine (including automotive, aviation, and space medicine)",98,
        "R - Medicine|RD1 - RD811 Surgery|RD32 - RD33.9 Operative surgery. Technique of surgical operations",98,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC801 - TC978 Irrigation engineering. Reclamation of wasteland. Drainage",98,
        "A - General Works|AM1 - AM401 Museums. Collectors and collecting|AM200 - AM401 Collectors and collecting",97,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL2600 - BL2630 Pacific Ocean Islands. Oceania",97,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4620 - BQ4905 Buddhist pantheon",97,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9801 - BX9869 Unitarianism",97,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1195 - GV1198.99 Wrestling",97,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT751 - HT815 Serfdom",97,
        "M - Music|ML1 - ML3930 Literature on music|ML112 - ML112.5 Music printing and publishing",97,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML1299 - ML1354 Band",97,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA639 - RA642 Transmission of disease",97,
        "U - Military science (General)|UF1 - UF910 Artillery|UF500 - UF515 Weapons systems",97,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR927 - DR978.52 History",96,
        "L - Education|LJ3 - LJ165 Student fraternities and societies, United States",96,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6259 - PN6268 Anecdotes. Table talk",96,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4064 - PQ4075 Early to 1500",96,
        "C - Auxiliary Sciences of History|CE1 - CE97 Technical Chronology. Calendar|CE21 - CE46 Ancient",95,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT5320 - GT6737 Customs relative to special classes",95,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space",95,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML162 - ML197 Special periods|ML162 - ML169 Ancient",95,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ1125 - TJ1345 Machine shops and machine shops practice",95,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period|DR89.9 - DR93.34 1944-1990",94,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K583 - K591 Legal systems compared",94,
        "M - Music|MT1 - MT960 Musical instruction and study|MT40 - MT67 Composition. Elements and techniques of music|MT58 - MT67 Forms",94,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS155 - DS156 Asia Minor",93,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G2800 - G3064 Oceans (General)",93,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1329 - KZ3085 Early/Medieval development to ca. 1900. Ius Naturae et Gentium|KZ2064 - KZ3085 Publicists. Writers on public international law",93,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1430 - KZA1690 Maritime boundaries",93,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC845 - NC915 Graphic art materials",93,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6500 - PT6592.36 Afrikaans literature|PT6590 - PT6592.36 Individual authors or works",93,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period|DR73.7 - DR80.8 Early and medieval",92,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV1442 - HV1448 Women",92,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6101 - BX6193 Adventists",91,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History",91,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS555 - DS555.98 Laos",91,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT3291 - DT3415 Mozambique",91,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography|GA125 - GA155 Map drawing, modeling, printing, reading, etc.",91,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ2340 - PJ2399 Libyco-Berber languages. Berber languages",91,
        "R - Medicine|RD1 - RD811 Surgery|RD651 - RD678 Neoplasms. Tumors. Oncology",91,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM1 - BM449 General|BM70 - BM135 Study and teaching",90,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History|DK4445 - DK4452 -1989",90,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1710 - HG1710.5 Electronic funds transfers",90,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF201 - JF619 Organs and functions of government|JF251 - JF289 Executive. Heads of state",90,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK1717 - JK2248 Political rights. Practical politics|JK1756 - JK1761 Citizenship",90,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ1305 - JZ2060 Scope of international relations|JZ1400 - JZ1454 Diplomatic and consular service",90,
        "R - Medicine|RD1 - RD811 Surgery|RD118 - RD120.5 Plastic surgery. Reparative surgery",90,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP890 - TP933 Textile bleaching, dyeing, printing, etc.",90,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL4110 - KL4399 Greek law",89,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB3011 - LB3095 School management and discipline|LB3045 - LB3048 Textbooks",89,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4101 - PJ4197 West and North Semitic languages",89,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ840 - BQ999 Biography|BQ860 - BQ999 Individual|BQ860 - BQ939 Gautama Buddha",88,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC71 - LC120.4 Education and the state|LC72 - LC72.5 Academic freedom",88,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1037 - LC1037.8 Career education",88,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK2975 - NK3049 Tapestries",88,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1801 - PK1831.95 Bihari",88,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2591 - PK2610 Pahari",88,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF670 - TF851 Local and light railways",88,
        "T - Technology.|TN1 - TN997 Mining engineering. Metallurgy.|TN950 - TN997 Building and ornamental stones",88,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK61 - DJK77 Local history and description",87,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV182 - GV182.5 Recreational areas and facilities. Recreation centers",87,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3240 - PG3255 Drama",87,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.|PN4832 - PN4836 Magazines and other periodicals",87,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC215 - LC238.4 Community and the school|LC237 - LC238.4 College-university and the community",86,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE175 - TE176.5 Highway design. Interchanges and intersections",86,
        "U - Military science (General)|UG1500 - UG1530 Military astronautics. Space warfare. Space surveillance",86,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT582 - DT582.9 Togo. Togoland",85,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR430 - GR487 Folklore relating to private life (including dreams, love, children, nursery rhymes, etc.)",85,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE199 - HE199.5 Freight (General)",85,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8075 - HG8107 Insurance business. Insurance management",85,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ5309 - HJ5510 Administrative fees. User charges. License fees",85,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN1187 - JN1371 Scotland",85,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6360 - KZ6373 Non-military coercion",85,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE76 - LE78 Venezuela",85,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1293 - NB1895 Special forms|NB1330 - NB1685 Sculptural monuments",85,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures|PK1971 - PK1979.5 Urdu language",85,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB419 - SB419.3 Indoor gardening and houseplants",85,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA926 - UA929 Civil defense",85,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z102.5 - Z104.5 Cryptography. Ciphers. Invisible writing",85,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1243.72 - BL1243.78 Monasteries. Temples, etc.",84,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT15 - DT16 Ethnography",84,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration|JL599.5 - JL839 West Indies. Caribbean Area",84,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1150 - K1231 Maritime law",84,
        "N - Fine Arts|ND25 - ND3416 Painting|ND25 - ND48 General",84,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2085 - PN2091 The stage and accessories",84,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC955 - RC962 Arctic medicine. Tropical medicine",84,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT180 - TT200 Woodworking. Furniture making. Upholstering",84,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT115 - DT154 Local history and description|DT139 - DT153.5 Cairo",83,
        "E - History: America|E151 - E889 United States|E186 - E199 Colonial history (1607-1775)|E191 - E199 By period|E195 - E199 1689-1775",83,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E855 - E861 Nixon's administrations, 1969-August 9, 1974|E860 - E861 Watergate Affair. Resignation",83,
        "S - Agriculture|SK1 - SK663 Hunting|SK311 - SK335 Bird hunting. Fowling",83,
        "T - Technology.|T1 - T995 Technology (General)|T55 - T55.3 Industrial satety. Industrial accident prevention",83,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ95 - DJ292 History|DJ151 - DJ292 By period|DJ154 - DJ210 1555-1795. United provinces",82,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS401 - DS486.8 India (Bharat)|DS430 - DS432 Ethnography. Sects",82,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1635 - PN1650 Relation to, and treatment of, special subjects",82,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z41 - Z42.5 Autographs. Signatures",82,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH801 - DH811 Local history and description",81,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS141 - JS271 Municipal government and local government other than municipal",81,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K140 - K165 History of law",81,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1066 - K1089 Banking",81,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1255 - KZ1273 Theory and principles",81,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2335.95 - LB2337 Endowments, trusts, etc.",81,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB2844.52 - LB2844.63 Trade unions",81,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian|PD3001 - PD3929 Danish",81,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT7945 - PT8046 Collections",81,
        "Q - Science|QM1 - QM695 Human anatomy|QM531 - QM549 Regional anatomy",81,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM260 - RM263 Chemotherapy",81,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS189 - RS190 Assay methods. Standardization. Analysis",81,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB449 - SB450.87 Flower arrangement and decoration",81,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D31 - D34 Political and diplomatic history",80,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT546.1 - DT546.49 French-speaking Equatorial Africa|DT546.2 - DT546.29 Congo (Brazaville). Middle Congo",80,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT554 - DT554.9 Mauritania",80,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1541 - GV1561 Parlor magic and tricks",80,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli|KZ6440 - KZ6530 Humanitarian law",80,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC6501 - LC6560.4 Lyceums and lecture courses. Forums",80,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE7 - LE9 Mexico",80,
        "M - Music|MT1 - MT960 Musical instruction and study|MT70 - MT74 Instrumentation and orchestration",80,
        "N - Fine Arts|N1 - N9211 Visual arts|N8510 - N8553 Art studios, materials, etc.",80,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2000 - NA2320 Study and teaching. Research",80,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1001 - PD1350 Old Germanic dialects",80,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN661 - PN694 Medieval (to 1500)|PN688 - PN691 Poetry",80,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7101 - PT7211 Literary history and criticism|PT7177 - PT7211 Prose",80,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH381 - SH385 Whaling",80,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD920 - TD934 Rural and farm sanitary engineering",80,
        "L - Education|LD13 - LD7501 Individual institutions|LD13 - LD7501 United States|LD13 - LD7251 Universities. Colleges|LD7020 - LD7251 Women's colleges",79,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa",79,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML1400 - ML3275 Vocal music|ML1499 - ML1554 Choral music",79,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8525 - BX8528 Millennial Dawnists. Jehovah's Witnesses",78,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History|DR481 - DR605 By period|DR556 - DR567 1789-1861. 19th century",78,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT391 - DT398 Eritrea",78,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU150 - DU180 New South Wales",78,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2631 - PK2659 Panjabi",78,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP670 - TP699 Oils, fats, and waxes|TP690 - TP692.5 Petroleum refining. Petroleum products",78,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG987 - DG999 Malta. Maltese Islands",77,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period|DR93.4 - DR93.47 -1990",77,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5429.7 - HF5430.6 Shopping centers. Shopping malls",77,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1051 - LC1072 Professional education",77,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P326 - P326.5 Lexicology",77,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1992.93 - PN1992.95 Nonbroadcast video recordings",77,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6279 - PN6288 Epigrams",77,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6348.5 - PN6358 Emblems, devices",77,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ245 - RJ247 Nursing of children. Pediatric nursing",77,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S671 - S760.5 Farm machinery and farm engineering",77,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3870 - K3918 rimary production. Extractive industries",76,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA8300 - NA8480 Outbuildings, gates, fences, etc.",76,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature|PA3520 - PA3564 Criticism, interpretation, etc.",76,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT543 - DT543.9 Guinea",75,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada|F1121 - F1139 Newfoundland and Labrador",75,
        "L - Education|LF14 - LF5627 Individual institutions|LF1711 - LF2397 France",75,
        "P - Language and literature|PR1 - PR9680 English literature|PR951 - PR981 Folk literature",75,
        "U - Military science (General)|UE1 - UE500 Cavalry. Armor. Including horse cavalry, armored cavalry, mechanized cavalry",75,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL443 - DL537 History",74,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ30 - DQ49.5 Antiquities. Social life and customs. Ethnography",74,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E436 - E440.5 Buchanan's administration, 1857-1861",74,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC96 - GC97.8 Estuarine oceanography",74,
        "L - Education|LF14 - LF5627 Individual institutions|LF4610 - LF4827 Spain",74,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT180 - MT198 Organ",74,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB2001 - PB3029 Brittanic group|PB2801 - PB2932 Breton. Armorican",74,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM8001 - PM8995 Artificial languages|PM8201 - PM8298 Esperanto",74,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1301 - PN1333 Epic poetry",74,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ1298 - BJ1335 Evolutionary and genetic ethics",73,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K321 - K474 Schools of legal theory|K330 - K344 Positivism",73,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT259 - MT338 String instruments|MT300 - MT318 Violoncello",73,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB317.5 - SB319.86 Horticulture. Horticultural crops",73,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1212.32 - BL1215 Doctrines. Theology",72,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR95 - DR98 Local history and description",72,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E784 - E805 1919-1933. Harding-Coolidge-Hoover era. The twenties|E801 - E805 Hoover's administration, 1919-1933",72,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV191.68 - GV198.9 Camping",72,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN8701 - JN9599 Switzerland",72,
        "L - Education|LF14 - LF5627 Individual institutions|LF3248 - LF3897 Italy",72,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1251 - PT1299 Drama",72,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7101 - PT7211 Literary history and criticism|PT7177 - PT7211 Prose|PT7181 - PT7193 Sagas",72,
        "T - Technology.|TX1 - TX1110 Home economics.|TX950 - TX953 Taverns, barrooms, saloons",72,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT93 - BT93.6 Judaism",71,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7301 - BX7343 Disciples of Christ. Campbellites",71,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1026 - K1045 Sale of goods",71,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6374 - KZ6377 Threat of force",71,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC361 - LC629 Christian education. Church education|LC531 - LC629 Protestant",71,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1001 - PD1350 Old Germanic dialects|PD1101 - PD1211 Gothic",71,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG5631 - PG5689 Sorbian (Wendic)",71,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4001 - PN4355 Oratory. Elocution, etc.|PN4071 - PN4095 Study and teaching",71,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF756.5 - SF769.5 Special preclinical sciences (including veterinary genetics, ethology, anatomy, physiology, embryology)",71,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK911 - DK919.5 Kyrgyzstan. Kirghiz S.S.R. Kirghizia",70,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT330 - HT334 Metropolitan areas",70,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV9100 - JV9269 Australia. New Zealand",70,
        "L - Education|LF14 - LF5627 Individual institutions|LF1341 - LF1537 Austria",70,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC2700 - PC3708 Dialects. Provincialisms|PC3420.8 - PC3495 Langue d'oc dialects",70,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL7001 - PL7101 Australian languages",70,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD1020 - TD1066 Hazardous substances and their disposal",70,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK1000 - VK1249 Lighthouse service",70,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering|VM595 - VM989 Marine engineering",70,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK921 - DK929.5 Tajikistan. Tajik S.S.R. Tadzhikistan",69,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period|DR267 - DR267.5 1944-1989",69,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E740 - E749 General|E747 - E748 Biography",69,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ799.95 - HQ799.97 Adulthood",69,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC703 - NC725 General works",69,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK4700 - NK4890 Costume",69,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3211 - PG3219 Translations",69,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH471 - QH489 Reproduction",69,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK2000 - TK2891 Dynamoelectric machinery and auxiliaries (including generators, transformers, motors)",69,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP87 - BP89 Islamic literature",68,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History|DH571 - DH694 By period|DH677 - DH694 20th century",68,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History|DL1050 - DL1141.6 By period",68,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History|DL1050 - DL1141.6 By period|DL1055 - DL1141.6 Modern, 1523-",68,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period|DR238 - DR240.5 Early and medieval to 1601. Roman period",68,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT546.1 - DT546.49 French-speaking Equatorial Africa|DT546.1 - DT546.19 Gabon (Gaboon, Gabun)",68,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security|KZ5615 - KZ5893 Arms control and disarmament regimes|KZ5647 - KZ5686 Nuclear (Strategic) arms limitation",68,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE21 - LE23 Argentina",68,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1630 - ND1662 Examination and conservation of paintings",68,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z680.3 - Z680.6 Library communication systems",68,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT31 - CT83 History of biographical literature. Lives of biographers",67,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR927 - DR978.52 History|DR954 - DR978.52 By period",67,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.3 - DS646.34 Borneo. Kalimantan, Indonesia",67,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS901 - DS937 Korea|DS924 - DS925 Local history and description",67,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT351 - HT352 Suburban cities and towns",67,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law",67,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE951 - NE962 Special subjects",67,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ2340 - PJ2399 Libyco-Berber languages. Berber languages|PJ2369 - PJ2399 Berber languages",67,
        "Q - Science|QC1 - QC999 Physics|QC851 - QC999 Meteorology. Climatology (including the earth's atmosphere)|QC980 - QC999 Climatology and weather|QC994.95 - QC999 Weather forecasting",67,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA645.5 - RA645.9 Emergency medical services",67,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH365 - SH380.92 Shellfish fisheries. Shellfish culture",67,
        "A - General Works|AP1 - AP230 Periodicals|AP200 - AP230 Juvenile periodicals",66,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E300 - E302.6 General|E302.5 - E302.6 Biography (Late eighteenth century)",66,
        "F - America: local history|F1 - F975 United States local history|F721 - F723 Rocky Mountains. Yellowstone National Park",66,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1298 - KZ1304 The law of treaties. System of treaty law",66,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML475 - ML547 By region or country|ML489 - ML522 Europe",66,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK201 - PK379 Vedic",66,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6299 - PN6308 Maxims",66,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF521 - SF539.8 Bee culture",66,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T60 - T60.8 Work measurement. Methods engineering",66,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT56.8 - DT69.5 Antiquities|DT63 - DT63.5 Pyramids",65,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM811 - HM821 Deviant behavior. Social deviance",65,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1135 - NK1149.5 Arts and crafts movement",65,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9547 - PT9639 Collections",65,
        "R - Medicine|RB1 - RB214 Pathology|RB24 - RB33 Pathology anatomy and histology",65,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH328 - SH329 Fishery management. Fishery policy",65,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK549 - VK572 Science of navigation",65,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR101 - CR115 Flags, banners, and standards",64,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL101 - DL291 Denmark|DL143 - DL263.3 History|DL160 - DL263.3 By period",64,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden|DL971 - DL991 Local history and description",64,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ1 - DQ20 General",64,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC109 - GC149 Chemical oceanography",64,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K212 - K213 Methodology",64,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K2100 - K2385 Courts. Procedure|K2110 - K2155 Court organization and procedure",64,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KUQ1 - KUQ4990 New Zealand",64,
        "L - Education|LH1 - LH9 College and school magazines and papers",64,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML999 - ML1015 Plucked instruments",64,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP267.5 - TP301 Explosives and pyrotechnics",64,
        "U - Military science (General)|UB1 - UB900 Military administration|UB410 - UB415 Officers",64,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1050 - BL1060 By region",63,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.17 - DS646.29 Java",63,
        "E - History: America|E11 - E143 America|E75 - E99 Indians of North America|E81 - E83 Indian wars",63,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN7721 - JN7997 Sweden",63,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV6001 - JV6006 Periodicals. Serials",63,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K85 - K89 Legal research",63,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1031 - LC1034.5 Competency based education",63,
        "M - Music|MT1 - MT960 Musical instruction and study|MT955 - MT956 Musical theater",63,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF200 - TF320 Railway construction",63,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM435 - HM477 History of sociology. History of sociological theory|HM461 - HM473 Schools of sociology. Schools of social thought",62,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV8290 - HV8291 Private security services",62,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3770 - K3795 Science and arts. Research",62,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC189 - LC214.53 Educational sociology|LC212.9 - LC212.93 Sex differences in education",62,
        "M - Music|MT1 - MT960 Musical instruction and study|MT918 - MT948 School music",62,
        "R - Medicine|RK1 - RK715 Dentistry|RK58 - RK59.3 Practice of dentistry. Dental economics",62,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH20.3 - SH191 Aquaculture|SH151 - SH179 Fish culture|SH171 - SH179 Diseases and adverse factors",62,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL175 - BL265 Natural theology|BL205 - BL216 Nature and attributes of Deity",61,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR3499 - CR4420 Titles of honor, rank, precedence, etc",61,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography|GA300 - GA325 World maps, general atlases, etc.",61,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3601 - K3611 Medical legislation",61,
        "M - Music|MT1 - MT960 Musical instruction and study|MT90 - MT146 Analysis and appreciation of musical works|MT125 - MT130 Orchestral music",61,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6121 - PN6129 Orations",61,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism|PT5121 - PT5185 Special periods",61,
        "R - Medicine|RD1 - RD811 Surgery|RD137 - RD145 Surgery in childhood, adolescence, pregnancy, old age",61,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG211 - RG483 Abnormalities and diseases of the female genital organs",61,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF191 - SF275 Cattle|SF250.5 - SF275 Horse sports. Horse shows",61,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z53 - Z102 Shorthand. Stenography. Phonography",61,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ1001 - BQ1045 Buddhist literature",60,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT95 - BT97.2 Divine law. Moral government",60,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6901 - BX6997 Christian Science",60,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU200 - DU230 Victoria",60,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology|GB500 - GB555 Mountains. Orography",60,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT5320 - GT6737 Customs relative to special classes|GT5750 - GT6390 By occupation",60,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV4905 - HV5959 Animal experimentation. Anti-vivisection",60,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian|PD2401 - PD2446 Modern Icelandic",60,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism|PT5001 - PT5112 General",60,
        "T - Technology.|T1 - T995 Technology (General)|T11.95 - T12.5 Industrial directories",60,
        "T - Technology.|T1 - T995 Technology (General)|T351 - T385 Mechanical drawing. Engineering graphics",60,
        "V - Naval science|VG20 - VG2029 Minor services of navies|VG90 - VG95 Naval aviation",60,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ95 - DJ292 History|DJ151 - DJ292 By period|DJ215 - DJ292 19th-20th centuries",59,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT3031 - DT3145 Zambia. Northern Rhodesia",59,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2366 - LB2367.75 College examinations",59,
        "Q - Science|QC1 - QC999 Physics|QC770 - QC798 Nuclear and particle physics. Atomic energy. Radioactivity|QC794.95 - QC798 Radioactivity and radioactive substances",59,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF411 - SF459 Pets|SF441 - SF450 Cats",59,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF481 - SF507 Poultry. Eggs",59,
        "T - Technology.|TH1 - TH9745 Building construction|TH2025 - TH3000 Details in building design and construction (including walls, roofs)",59,
        "T - Technology.|TS1 - TS2301 Manufactures|TS800 - TS937 Wood technology. Lumber|TS840 - TS915 Wood products. Furniture",59,
        "U - Military science (General)|UD1 - UD495 Infantry|UD380 - UD425 Small arms. Swords, etc.",59,
        "V - Naval science|V1 - V995 Naval science (General)|V400 - V695 Naval education",59,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E303 - E309 1775-1789. The Confederation, 1783-1789",58,
        "F - America: local history|F1 - F975 United States local history|F476 - F485 Old Northwest. Northwest Territory",58,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1483 - HD1486 Agricultural associations, societies, etc.",58,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2667 - LC2698 Latin Americans. Hispanic Americans|LC2680 - LC2688 Mexican Americans. Mexicans in the United States",58,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1160 - NK1590 Decoration and ornament. Design|NK1548 - NK1590 Special subjects for design",58,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB354 - SB402 Fruit culture and orchard care|SB387 - SB399 Grape Culture, Viticulture",58,
        "U - Military science (General)|U1 - U900 Military science (General)|U150 - U155 Military planning",58,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z716 - Z716.1 Library extension. Library commissions. Traveling libraries",58,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1845 - BF1891 Fortune-telling",57,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D299 - D472 -1789|D301 - D309 Period of the French Revolution",57,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS591 - DS599 Malaysia. Malay Peninsula. Straits Settlements|DS597.36 - DS597.39 Sarawak",57,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC109 - JC121 Medieval state",57,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML475 - ML547 By region or country|ML525 - ML541 Asia",57,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF1401 - PF1541 Friesian",57,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8551 - BX8593 Moravian Church. United Brethren. Unitas Fratrum. Herrnhuters",56,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8701 - BX8749 New Jerusalem Church. New Church. Swedenborgianism",56,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT619 - DT620.9 Spanish West Africa",56,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML1091.8 - ML1093 Electronic instruments",56,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4100 - NA4145 Classed by material",56,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6001 - PK6099 General",56,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6329 - PN6338 Thoughts",56,
        "T - Technology.|TS1 - TS2301 Manufactures|TS1870 - TS1935 Rubber industry",56,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E376 - E380 John Quincy Adams' administration, 1825-1829",55,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E865 - E868 Ford's administration, August 9, 1974-1977",55,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5761 - HF5780 Shipment of goods. Delivery of goods",55,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah",55,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC701 - LC775 Jewish education",55,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC540 - TC558 Dams. Barrages",55,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP184 - BP184.9 Religious ceremonies, rites, etc.",54,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period|DR242 - DR249 1822-1881. 19th century",54,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.|G8950 - G9084 Australasia",54,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K100 - K103 Legal education",54,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K600 - K615 Private law",54,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT339 - MT533 Wind instruments|MT380 - MT392 Clarinet (A, Bb, C, Eb, etc.)",54,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6288.5 - PN6298 Epitaphs",54,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA645.3 - RA645.37 Home health care services",54,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK452 - TK454.4 Electric apparatus and materials. Electric circuits. Electric networks",54,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK7800 - TK8360 Electronics|TK8300 - TK8360 Photoelectronic devices (General)",54,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT450.5 - DT450.95 Burundi",53,
        "F - America: local history|F1 - F975 United States local history|F850.5 - F851.5 Pacific States",53,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1151 - GV1190 Shooting. Archery",53,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ836 - TJ927 Hydraulic machinery",53,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT491 - DT516.9 British West Africa|DT509 - DT509.9 Gambia",52,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU250 - DU280 Queensland",52,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC200 - GC376 Dynamics of the ocean|GC229 - GC296.8 Currents",52,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG9651 - HG9899 Fire insurance",52,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT161 - HT165 Garden cities. The 'city beautiful'",52,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV675 - HV677 Accidents. Prevention of accidents",52,
        "T - Technology.|TR1 - TR1050 Photography|TR925 - TR1050 Photomechanical processes",52,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK931 - DK939.5 Turkmenistan. Turkmen S.S.R.  Turkmenia",51,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR927 - DR978.52 History|DR954 - DR978.52 By period|DR969.8 - DR978.52 20th century",51,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ3801 - HJ3844 Revenue from sources other than taxation",51,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN5701 - JN5999 Netherlands",51,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN8423 - JN8661 Portugal",51,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV6021 - JV6032 History",51,
        "M - Music|ML1 - ML3930 Literature on music|ML3800 - ML3923 Philosophy and physics of music|ML3880 - ML3915 Criticism",51,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT740 - MT810 Instrumental techniques for children",51,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG700 - UG705 Tactics",51,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF889 - BF905 Graphology. Study of handwriting",50,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB1805 - LB2151 State teachers colleges|LB1991 - LB2151 Other regions or countries",50,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1390 - ND1393 Still life",50,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1001 - PJ1989 Egyptology|PJ1091 - PJ1109 Egyptian writing and its decipherment",50,
        "R - Medicine|RD1 - RD811 Surgery|RD701 - RD811 Orthopedic surgery|RD792 - RD811 Physical rehabilitation",50,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S600 - S600.7 Agricultural meteorology. Crops and climate",50,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB414.6 - SB417 Greenhouses and greenhouse culture",50,
        "U - Military science (General)|U1 - U900 Military science (General)|U164 - U167.5 Tactics",50,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL101 - DL291 Denmark|DL143 - DL263.3 History|DL160 - DL263.3 By period|DL184 - DL263.3 Modern, 1523-",49,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5.5 - JZ18 Periodicals",49,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3289 - K3367 Organs of government",49,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3978 - K3992 Public utilities",49,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7611 - K7688 Civil procedure. International civil procedure",49,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German|PF4501 - PF4596 Early Modern German",49,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1 - PL481 Ural-Altaic languages|PL450 - PL481 Tungus Manchu languages",49,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9201 - PT9499 Literary history and criticism|PT9320 - PT9370 Special periods",49,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ268 - TJ740 Steam engineering|TJ603 - TJ695 Locomotives",49,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC270 - UC360 Transportation",49,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z681.5 - Z681.7 Trustees. Library boards, committees, etc.",49,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL2230 - BL2240 Korea",48,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE9713 - HE9715 Cellular telephone services industry. Wireless telephone",48,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK1606 - JK1685 Government property, etc.",48,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1112 - K1116 Investments",48,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri",48,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KH1 - KH999 South America (General)",48,
        "M - Music|MT1 - MT960 Musical instruction and study|MT90 - MT146 Analysis and appreciation of musical works|MT140 - MT145 Chamber and solo instrumental music",48,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1135 - NB1150 General works",48,
        "R - Medicine|RZ201 - RZ999 Other systems of medicine|RZ400 - RZ408 Mental healing",48,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP480 - TP498 Low temperature engineering. Cyrogenic engineering. Refrigeration",48,
        "T - Technology.|TR1 - TR1050 Photography|TR590 - TR620 Lighting",48,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT490 - TT695 Clothing manufacture. Dressmaking. Tailoring",48,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA985 - UA997 Military geography",48,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG770 - UG1045 Organization. Personnel management",48,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL443 - DL537 History|DL460 - DL537 By period",47,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E416 - E420 Polk's administration, 1845-1849",47,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ2321 - HJ2323 Tax incidence. Tax shifting. Tax equity",47,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS1701 - JS1800 Canada",47,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3400 - K3431 Administrative law",47,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB1771 - LB1773 Certification of teachers",47,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE3 - LE5 Canada",47,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1160 - NB1195 Designs and technique",47,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX760 - NX770 Administration of the arts",47,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German|PF3992 - PF4010 Old Saxon",47,
        "R - Medicine|RD1 - RD811 Surgery|RD99 - RD99.35 Surgical nursing",47,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD250 - SD363.3 Forestry education",47,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC20 - UC258 Organization of the service. By region or country",47,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL71.5 - BL73 Biography",46,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT2421 - DT2525 Botswana. Bechuanaland",46,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT619 - DT620.9 Spanish West Africa|DT620 - DT620.9 Equatorial Guinea (Spanish Guinea)",46,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML3400 - ML3465 Dance music",46,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT733 - MT733.6 Band",46,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC970 - RC986 Military medicine. Naval medicine",46,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM930 - RM931 Rehabilitation therapy",46,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF371 - SF379 Sheep. Wool",46,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History|DQ78 - DQ210 By period|DQ201 - DQ210 20th century",45,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT201 - HT221 City population (including children in cities, immigration)",45,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K288 - K296 Interpretation and construction of law. Lacunae in law",45,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC129 - LC139 Compulsory education",45,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education|LC25 - LC33 Self-education. Self-culture",45,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE15 - LE17 West Indies",45,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P99.5 - P99.6 Nonverbal communication",45,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature|PA6141 - PA6144 Criticism, interpretation, etc.",45,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ2001 - PJ2199 Coptic",45,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ601 - PJ989 Special groups",45,
        "R - Medicine|RD1 - RD811 Surgery|RD101 - RD104 Fractures (General)",45,
        "R - Medicine|RF1 - RF547 Otorhinolaryngology|RF460 - RF547 Laryngology. Diseases of the throat",45,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK1250 - VK1299 Shipwrecks and fires",45,
        "B - Philosophy. Psychology. Religion|BJ1801 - BJ2195 Social usages. Etiquette|BJ2021 - BJ2078 Etiquette of entertaining",44,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP176 - BP181 The five duties of a Moslem.  Pillars of Islam",44,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History|DQ51 - DQ57 General",44,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1706 - HG1708 Accounting. Bookkeeping",44,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2599.5 - NA2599.9 Architectural criticism",44,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5211 - PJ5289 West Aramaic",44,
        "Q - Science|QK1 - QK989 Botany|QK474.8 - QK495 Spermatophyta. Phanerogams|QK494 - QK494.5 Gymnosperms",44,
        "R - Medicine|RD1 - RD811 Surgery|RD680 - RD688 Diseases of the locomotor system (Surgical treatment)",44,
        "R - Medicine|RE1 - RE994 Opthamology|RE939.2 - RE981 Optometry. Opticians. Eyeglasses",44,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD84 - DD257.4 History|DD121 - DD257.4 By period|DD121 - DD124 Earliest to 481",43,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT546.1 - DT546.49 French-speaking Equatorial Africa|DT546.3 - DT546.39 Central African Republic. Central African Empire. Ubangi-Shari",43,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K37 - K44 Bibliography",43,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3745 - LC3747 Children of immigrants (First generation)",43,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education|LC45 - LC45.8 Nonformal education",43,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH1001 - PH1079 Permic",43,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ601 - PJ989 Special groups|PJ701 - PJ989 Islamic",43,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8650 - PT8733 Collections",43,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ1040 - TJ1119 Machinery exclusive of prime movers",43,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT205 - TT267 Metalworking",43,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering|VM298.5 - VM301 Shipbuilding industry. Shipyards",43,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL175 - BL265 Natural theology|BL224 - BL227 Creation. Theory of the Earth",42,
        "C - Auxiliary Sciences of History|CJ1 - CJ6661 Numismatics|CJ4801 - CJ5450 Tokens",42,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E784 - E805 1919-1933. Harding-Coolidge-Hoover era. The twenties|E791 - E796 Coolidge's administration, August 2, 1923-1929",42,
        "H - Social sciences|HG1 - HG9999 Finance|HG4301 - HG4480.9 Trust services. Trust companies",42,
        "L - Education|LF14 - LF5627 Individual institutions|LF1541 - LF1549 Czech Republic",42,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT560 - MT570 Banjo",42,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German|PF5971 - PF5999 Slang. Argot, etc.",42,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG7900 - PG7925 Lechitic dialects",42,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6101 - PK6119 Avestan",42,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9650 - PT9876.36 Individual authors or works|PT9674 - PT9715 16th-18th centuries",42,
        "R - Medicine|RD1 - RD811 Surgery|RD151 - RD498 Military and naval surgery",42,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS139 - RS141.9 Pharmacopoeias",42,
        "U - Military science (General)|U1 - U900 Military science (General)|U310 - U310.2 War games",42,
        "V - Naval science|V1 - V995 Naval science (General)|V210 - V214.5 Submarine warfare",42,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT3161 - DT3257 Malawi. Nyasaland",41,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC200 - GC376 Dynamics of the ocean|GC228.5 - GC228.6 Ocean circulation",41,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC6601 - LC6660.4 Reading circles and correspondence clubs",41,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL6601 - PL6621 Papuan languages",41,
        "R - Medicine|RD1 - RD811 Surgery|RD49 - RD52 Surgical therapeutics. Preoperative and postoperative care",41,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG104 - RG104.7 Operative gynecology",41,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA177.4 - TA185 Engineering economy",41,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA715 - TA787 Earthwork. Foundations",41,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE279.5 - TE298 Pedestrian facilities",41,
        "U - Military science (General)|UG1500 - UG1530 Military astronautics. Space warfare. Space surveillance|UG1523 - UG1525 By region or country",41,
        "V - Naval science|VC10 - VC580 Naval maintenance",41,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B790 - B5802 Modern|B5800 - B5802 By religion",40,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography|GA192 - GA197.3 Map libraries, collections of maps, globes, etc.",40,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC150 - GC182 Physical oceanography",40,
        "M - Music|MT1 - MT960 Musical instruction and study|MT820 - MT915 Singing and vocal technique|MT825 - MT850 Systems and methods",40,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism|PQ9097 - PQ9119 Prose",40,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG801 - RG871 Puerperal state",40,
        "S - Agriculture|SK1 - SK663 Hunting|SK281 - SK293 Special methods and types of hunting (including bolos, game calling, tracking, trapping, dressing)",40,
        "T - Technology.|TH1 - TH9745 Building construction|TH845 - TH895 Architectural engineering. Structural engineering of buildings",40,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History|DH571 - DH694 By period|DH620 - DH676 1794-1909",39,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E431 - E435 Pierce's administration, 1853-1857",39,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS2101 - JS2143 Mexico",39,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2630 - LC2638 Asian Americans. Asians in the United States",39,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ255 - TJ265 Heat engines",39,
        "T - Technology.|TS1 - TS2301 Manufactures|TS940 - TS1047 Leather industries. Tanning",39,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1783 - BF1815 Seers. Prophets. Prophecies",38,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR51 - CR79 Crests, monograms, devices, badges, mottoes",38,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS491 - DS492.9 Bhutan",38,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary|HV8081 - HV8099 Private detectives. Detective bureaus",38,
        "J - Political Science|J1 - J981 General legislative and executive papers|J10 - J98 United States|J80 - J82 Presidents' messages and other executive papers",38,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6101 - JN6371 Belgium",38,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ118 - KZ194 Treaties and other international agreements",38,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT640 - MT654 Lute, balalaika, etc.",38,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6135 - PK6199.9 Middle Iranian languages",38,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6141 - PN6145 Essays",38,
        "R - Medicine|RD1 - RD811 Surgery|RD63 - RD76 Operating rooms and theaters. Instruments, apparatus, and appliances",38,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF191 - SF275 Cattle|SF221 - SF250 Horses",38,
        "T - Technology.|TR1 - TR1050 Photography|TR510 - TR545 Color Photography",38,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology|CC83 - CC97 Study and teaching. Research",37,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6630 - JN6639 Ukraine",37,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC241 - LC245 Foundations, endowments, funds",37,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1160 - NK1590 Decoration and ornament. Design|NK1160 - NK1174 General",37,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK1 - PK85 General",37,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9201 - PT9499 Literary history and criticism|PT9375 - PT9404 Poetry",37,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM283 - RM298 Endocrinotherapy. Organotherapy",37,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF84.82 - SF85.6 Rangelands. Range management. Grazing",37,
        "T - Technology.|TS1 - TS2301 Manufactures|TS195 - TS198.8 Packaging",37,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1501 - HS2460.7 Other societies. By classes|HS1601 - HS2265 Race socieities",36,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN5001 - JN5191 Greece",36,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN7011 - JN7066 Scandinavia. Northern Europe",36,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6130 - PN6140 Letters",36,
        "R - Medicine|RD1 - RD811 Surgery|RD75 - RD79 Examinations. Diagnosis",36,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ242 - RJ243 Hospital care",36,
        "R - Medicine|RZ201 - RZ999 Other systems of medicine|RZ409.7 - RZ999 Miscellaneous systems and treatments (including magnetotherapy, mesmerism, naturopathy, organomic medicine, phrenology, radiesthesia, etc.)",36,
        "T - Technology.|TC1501 - TC1800 Ocean engineering",36,
        "T - Technology.|TH1 - TH9745 Building construction|TH3301 - TH3411 Maintenance and repair",36,
        "V - Naval science|V1 - V995 Naval science (General)|V160 - V165 Strategy",36,
        "V - Naval science|VF1 - VF580 Naval ordnance",36,
        "A - General Works|AP1 - AP230 Periodicals|AP101 - AP115 Humorous periodicals",35,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF638 - BF648 New Thought. Menticulture, etc.",35,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9701 - BX9743 Salvation Army",35,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK61 - DJK77 Local history and description|DJK61 - DJK66 Black Sea region",35,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK680 - DK689.5 Armenia (Republic). Armenian S.S.R.",35,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.5 - DS646.59 Timor",35,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU350 - DU380 Western Australia",35,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5419 - HF5422 Wholesale trade",35,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBP1 - KBP4860 Islamic law. Shari'ah. Fiqh|KBP50 - KBP69 History, development and application of Islamic law",35,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC390 - NC670 Study and teaching",35,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2351 - PK2418 Marathi",35,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2701 - PK2708.9 Rajasthani",35,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2801 - PK2891 Sinhalese (Singhalese)",35,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages|PL3551 - PL4001 Tibeto-Burman languages|PL3851 - PL4001 Assam and Burma",35,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9547 - PT9639 Collections|PT9580 - PT9599 Poetry",35,
        "Q - Science|QL1 - QL991 Zoology|QL750 - QL795 Animal behavior|QL791 - QL795 Stories and anecdotes",35,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG491 - RG499 Diseases of the breast",35,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC530 - TC537 River protective works. Regulation. Flood control",35,
        "T - Technology.|TS1 - TS2301 Manufactures|TS1950 - TS1982 Animal products",35,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1100 - BL1107.5 General",34,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E838 - E840.8 General|E840.6 - E840.8 Biography (General)",34,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT5220 - GT5286 Customs relative to transportation and travel",34,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE323 - HE328 Transportation geography. Trade routes",34,
        "H - Social sciences|HG1 - HG9999 Finance|HG6105 - HG6270.9 Lotteries",34,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG9956 - HG9969 Casualty insurance",34,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KM - Asia and Eurasia, Africa, Pacific Area, and Antarctica. Asia",34,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1255 - KZ1273 Theory and principles|KZ1267 - KZ1273 Domain of the law of nations",34,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT259 - MT338 String instruments|MT320 - MT334 Double bass",34,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1370 - ND1375 Marine painting",34,
        "N - Fine Arts|NE1 - NE3002 Print media|NE2236 - NE2240.6 Serigraphy",34,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature|PL8015 - PL8021 Languages. By region or country",34,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ250 - RJ250.3 Premature infants",34,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF411 - SF459 Pets|SF456 - SF458.83 Fishes. Aquariums",34,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP934 - TP945 Paints, pigments, varnishes, etc.",34,
        "T - Technology.|TR1 - TR1050 Photography|TR250 - TR265 Cameras",34,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7801 - BX7843 German Baptist Brethren. Church of the Brethren. Dunkards",33,
        "E - History: America|E151 - E889 United States|E660 - E738 Late nineteenth century, 1865-1900|E660 - E664 General|E663 - E664 Biography",33,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1221 - GV1469.62 Indoor games and amusements|GV1301 - GV1311 Gambling. Chance and banking games",33,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K190 - K195 Ethnological jurisprudence. Primitive law",33,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KDZ1 - KDZ4999 Law of America. North America|KDZ1101 - KDZ1199 Organization of American States (OAS)",33,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH1101 - PH1109 Udmurt",33,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1001 - PK1095 Pali",33,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL490 - PL495 Far Eastern languages and literature",33,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1341 - PN1347 Folk poetry",33,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA771 - RA771.7 Rural health and hygiene. Rural health services",33,
        "R - Medicine|RL1 - RL803 Dermatology|RL201 - RL331 Hyperemias, inflammations, and infections of the skin",33,
        "R - Medicine|RX1 - RX681 Homeopathy",33,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S602 - S604.37 Methods and systems of culture. Cropping systems",33,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF405.5 - SF407 Laboratory animals",33,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T59.7 - T59.77 Human engineering in industry. Man-machine systems",33,
        "A - General Works|AZ101 - AZ999 History of scholarship and learning. The humanities|AZ191 - AZ193 Evaluation",32,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF207 - BF209 Psychotropic drugs and other substances",32,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1153.69 - BL1168 By region or country",32,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ20.5 - DQ26 Description and travel",32,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E371 - E375 Monroe's administrations, 1817-1825",32,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC65 - GC78 Underwater exploration",32,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K540 - K546 Trials",32,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7340 - K7512 Commercial law",32,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence",32,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1340 - KZA1417 Concepts and principles",32,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT259 - MT338 String instruments|MT280 - MT298 Viola",32,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT339 - MT533 Wind instruments|MT360 - MT379 Oboe",32,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1400 - NE1879 Metal engraving|NE1850 - NE1879 Color prints",32,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH1201 - PH1409 Ugric languages",32,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2781 - PK2790 Sindhi",32,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN821 - PN840 Germanic literature",32,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6066 - PN6069 Special classes of authors",32,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF670 - TF851 Local and light railways|TF840 - TF851 Elevated railways and subways",32,
        "T - Technology.|TH1 - TH9745 Building construction|TH6014 - TH6081 Environmental engineering of buildings. Sanitary engineering of buildings",32,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period|DR268 - DR269.6 -1989",31,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E386 - E390 Van Buren's administration, 1837-1841",31,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1493 - HD1493.5 Government owned and operated farms. State farms. Sovkhozes",31,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KM - Asia and Eurasia, Africa, Pacific Area, and Antarctica. Asia|KM1 - KM999 General",31,
        "L - Education|LF14 - LF5627 Individual institutions|LF4203 - LF4209 Poland",31,
        "P - Language and literature|PR1 - PR9680 English literature|PR921 - PR928 Essays",31,
        "T - Technology.|TH1 - TH9745 Building construction|TH5011 - TH5701 Construction by phase of work",31,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK4125 - TK4399 Electric lighting",31,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT950 - TT979 Hairdressing. Beauty culture. Barbers' work",31,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG637 - UG639 Education and training",31,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ4965 - BQ5030 Ceremonies and rites. Ceremonial rules",30,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR50 - DR50.84 Thrace",30,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E396 - E400 Tyler's administration, April 4, 1841-1845",30,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E761 - E765 Tafts' administration, 1909-1913",30,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography|GA110 - GA115 Projection",30,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC190 - GC190.5 Ocean-atmosphere interaction",30,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1470 - GV1511 Parties. Party games and stunts|GV1491 - GV1507 Puzzles",30,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1711 - HD1741 Irrigation",30,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC5900 - LC6101 Correspondence schools",30,
        "L - Education|LF14 - LF5627 Individual institutions|LF14 - LF1257 Great Britain|LF800 - LF957 Ireland",30,
        "L - Education|LF14 - LF5627 Individual institutions|LF5051 - LF5627 Turkey and the Baltic states",30,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2335 - NA2360 Competitions",30,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN20 - PN30 Societies",30,
        "P - Language and literature|PR1 - PR9680 English literature|PR911 - PR918 Letters",30,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA601 - RA602 Food and food supply in relation to public health",30,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD159 - TD168 Municipal engineering",30,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ751 - TJ805 Miscellaneous motors and engines (including gas, gasoline, diesel engines)",30,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology|CC200 - CC260 Bells. Campanology. Cowbells",29,
        "G - Geography. Anthropology. Recreation|GF1 - GF900 Human ecology. Anthropogeography|GF53 - GF71 Environmental influences on humans",29,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5484 - HF5495 Warehouses. Storage",29,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ981 - HQ996 Polygamy",29,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV4005 - HV4013 Immigrants",29,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF201 - JF619 Organs and functions of government|JF331 - JF341 Parliamentary government",29,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS8001 - JS8490 Australia. New Zealand. Pacific Ocean islands",29,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1287 - KZ1296 Codification of the law of nations",29,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG55 - LG57 Taiwan",29,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML465 - ML471 By period",29,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1940 - NE2232.5 Etching and aquatint|NE2120 - NE2140 General works",29,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH801 - PH836 Mari",29,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH20.3 - SH191 Aquaculture|SH33 - SH134.6 By region or country",29,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA170 - TA171 Environmental engineering",29,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA190 - TA195 Management of engineering works",29,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ940 - TJ940.5 Vacuum technology",29,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK9900 - TK9971 Electricity for amateurs. Amateur constructors' manuals",29,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK798 - VK997 Sailing directions. Pilot guides",29,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA5050 - ZA5185 Information from specific providers",29,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA5050 - ZA5185 Information from specific providers|ZA5050 - ZA5185 Government information",29,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works|AC901 - AC995 Pamphlet collections",28,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF2050 - BF2055 Human-alien encounters. Contact between humans and extraterrestrials",28,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions|BL1640 - BL1645 Syrian. Palestinian. Samaritan",28,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History|DL1050 - DL1141.6 By period|DL1055 - DL1141.6 Modern, 1523-|DL1090 - DL1105 1939-1945",28,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History|DL1050 - DL1141.6 By period|DL1055 - DL1141.6 Modern, 1523-|DL1090 - DL1105 1939-1945|DL1095 - DL1105 Russo-Finnish War, 1939-1940",28,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1780 - G2799 Eastern Hemisphere. Eurasia, Africa, etc.|G2740 - G2799 Australasia",28,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ998 - HQ999 Illegitimacy. Unmarried mothers",28,
        "J - Political Science|J1 - J981 General legislative and executive papers|J1 - J9 Gazettes",28,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1340 - KZA1417 Concepts and principles|KZA1348 - KZA1405 Mare liberum doctrine",28,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE36 - LE38 Chile",28,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3375 - NK3496.3 Wallpapers",28,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN3175 - PN3191 College and school theatricals",28,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6155 - PQ6167 Folk literature",28,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF391 - SF397.83 Swine",28,
        "T - Technology.|TR1 - TR1050 Photography|TR550 - TR581 Studio and Laboratory",28,
        "T - Technology.|TS1 - TS2301 Manufactures|TS2220 - TS2283 Tobacco industry",28,
        "U - Military science (General)|UD1 - UD495 Infantry|UD157 - UD302 Tactics. Maneuvers. Drill regulations",28,
        "U - Military science (General)|UH20 - UH910 Other services|UH600 - UH629.5 Military hygiene and sanitation",28,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7020 - BX7060 Church of God",27,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ401 - DJ411 Local history and description",27,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE5880 - HE5990 Express service",27,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ1305 - JZ2060 Scope of international relations|JZ1328 - JZ1395 By period",27,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3661 - K3674 Public safety",27,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML475 - ML547 By region or country|ML475 - ML486 America",27,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT339 - MT533 Wind instruments|MT400 - MT415 Bassoon",27,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE218 - NE330 Engraved portraits. Self",27,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3501 - PL3509 Non-Aryan languages of India and Southeastern Asia in general",27,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6080 - PN6095 Quotations|PN6086 - PN6089 French",27,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6080 - PN6095 Quotations|PN6090 - PN6110 German",27,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5901 - PT5980 Provincial, local, foreign",27,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7001 - PT7099 Scandinavian literature|PT7001 - PT7099 General|PT7090 - PT7099 Collections",27,
        "Q - Science|QD1 - QD999 Chemistry|QD450 - QD801 Physical and theoretical chemistry|QD625 - QD655 Radiation chemistry",27,
        "R - Medicine|RK1 - RK715 Dentistry|RK529 - RK535 Oral surgery",27,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF41 - SF55 History",27,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF95 - SF99 Feeds and feeding. Animal nutrition",27,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH346 - SH351 Fishery for individual species",27,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF501 - TF668 Railway operation and management",27,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z49 - Z51 Typewriters. Typewriting. Keyboards. Keyboarding",27,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z681 - Z681.3 Reproduction of library materials. Storage media of library materials",27,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History|DQ78 - DQ210 By period|DQ124 - DQ191 19th century",26,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada|F1121 - F1139 Newfoundland and Labrador|F1135 - F1139 Labrador",26,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA51 - GA87 Surveys (General)",26,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology|GB471 - GB478.99 Islands",26,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB980 - GB992 Watersheds. Runoff. Drainage",26,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3400 - K3431 Administrative law|K3402 - K3417 The administrative process",26,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3625 - K3649 Food. Drugs. Cosmetics",26,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K600 - K615 Private law|K605 - K615 Unification",26,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7120 - K7197 Persons",26,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR27 - KBR41.7 Official acts of the Holy See",26,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2574 - LC2576 Gays. Lesbians. Bisexuals",26,
        "M - Music|ML1 - ML3930 Literature on music|ML40 - ML44 Programs",26,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1550 - PK1569 Assamese",26,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6701 - PK6821 Afghan (Pashto, Pushto, Pushtu, etc.)",26,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6244 - PN6246 Literary extracts. Commonplace books",26,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1341 - PR1349 Letters",26,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7101 - PT7211 Literary history and criticism|PT7170 - PT7176 Poetry",26,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC91 - RC103 Diseases due to physical and chemical agents",26,
        "R - Medicine|RF1 - RF547 Otorhinolaryngology|RF341 - RF437 Rhinology. Diseases of the nose, accessory sinuses, and nasopharynx",26,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S589.75 - S589.76 Agriculture and the environment",26,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB175 - SB177 Food crops",26,
        "S - Agriculture|SK1 - SK663 Hunting|SK281 - SK293 Special methods and types of hunting (including bolos, game calling, tracking, trapping, dressing)|SK284 - SK287 Fox hunting",26,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT174 - TT176 Articles for children",26,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions|BL1620 - BL1625 Assyro-Babylonian",25,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period|DR241 - DR241.5 Phanariote regime, 1601-1822",25,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E391 - E393 William H. Harrison's administration, March 4-April 4, 1841",25,
        "F - America: local history|F1 - F975 United States local history|F296 - F301 Gulf States. West Florida",25,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See",25,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLF1 - KLF490 Belarus (Republic)",25,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1249 - KZ1252 International law and other disciplines",25,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1035 - LC1035.8 Basic education. Basic skills education",25,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1400 - NE1879 Metal engraving|NE1634 - NE1749 History",25,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK4990 - PK5046 Prakrit literature",25,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6135 - PK6199.9 Middle Iranian languages|PK6141 - PK6199.5 Pahlavi",25,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6500 - PT6592.36 Afrikaans literature|PT6500 - PT6530 Literary history and criticism",25,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF781 - SF809 Communicable diseases of animals (General)",25,
        "T - Technology.|TH1 - TH9745 Building construction|TH6101 - TH6887 Plumbing and pipefitting",25,
        "T - Technology.|TH1 - TH9745 Building construction|TH7700 - TH7975 Illumination. Lighting",25,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ241 - TJ254.7 Machine construction (General)",25,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP751 - TP762 Gas industry",25,
        "U - Military science (General)|UB1 - UB900 Military administration|UB275 - UB277 Psychological warfare. Propaganda",25,
        "U - Military science (General)|UB1 - UB900 Military administration|UB370 - UB375 Military pensions, etc.",25,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z52 - Z52.5 Word processing",25,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions|BL1600 - BL1605 General",24,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH901 - DH925 Luxembourg",24,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL443 - DL537 History|DL460 - DL537 By period|DL527 - DL537 20th century. Period of World War II, 1939-1945",24,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT160 - DT177 North Africa|DT167 - DT176 History|DT168 - DT169.5 Carthaginian period",24,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E421 - E423 Taylor's administiration, 1849-July 9, 1850",24,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ809 - HQ809.3 Family violence",24,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV4961 - HV4995 Degeneration",24,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3280 - K3282 Church and state",24,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLN1 - KLN489 Russian S.F.S.R. (to 1991)",24,
        "L - Education|LT6 - LT501 Textbooks",24,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH751 - PH785 Mordvin",24,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK3591 - PK4485 Sanskrit|PK4471 - PK4485 Translations",24,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1371 - PT1374 Early to 1950. Old and Middle High German",24,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7312 - PT7318 Scientific and learned literature",24,
        "Q - Science|QL1 - QL991 Zoology|QL799 - QL799.5 Morphology",24,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA619 - RA637 Disposal of the dead. Undertaking. Burial. Cremation. Cemeteries",24,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS192 - RS199 Pharmaceutical technology",24,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF105 - SF109 Breeding",24,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF811 - SF909 Veterinary medicine of special organs, regions, and systems",24,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE250 - TE278.8 Pavements and paved roads",24,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z703.5 - Z703.6 Moving. Disposition of books on shelves, etc. Including discarding, weeding",24,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF908 - BF940 The hand. Palmistry",23,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology|CC300 - CC350 Crosses",23,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT411 - DT411.9 Djibouti. French Territory of the Afars and Issas. French Somaliland",23,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV1 - JV5399 Colonies and colonization|JV412 - JV461 Administration and organization",23,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1370 - K1395 Insolvency and bankruptcy. Creditors' rights",23,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3566 - K3578 Public health",23,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL700 - KL2215 Mesopotamia. Assyro",23,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE66 - LE68 Peru",23,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2400 - NA2460 Museums. Exhibitions",23,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC1981 - PC1984 Sardinian",23,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages|PL4501 - PL4587 Munda languages (Kolarian languages)",23,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN611 - PN649 Ancient",23,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7450 - PT7495 Collections",23,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8301 - PT8574 Literary history and criticism|PT8420 - PT8456 Special periods",23,
        "R - Medicine|RE1 - RE994 Opthamology|RE925 - RE939 Refraction and errors of refraction and accommodation",23,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ50 - RJ51 Examination. Diagnosis",23,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM265 - RM267 Antibiotic therapy. Antibiotics",23,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA365 - TA367 Acoustics in engineering. Acoustical engineering",23,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD201 - TD500 Water supply for domestic and industrial purposes|TD481 - TD493 Water distribution systems",23,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG590 - UG613.5 Military telegraphy and telephony",23,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9901 - BX9969 Universalism. Universalists",22,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR4501 - CR6305 Chivalry and knighthood (Orders, decorations, etc.)|CR4571 - CR4595 Duels and dueling",22,
        "C - Auxiliary Sciences of History|CS1 - CS3090 Genealogy|CS23 - CS35 Genealogical lists, etc., covering more than one country or continent",22,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS600 - DS605 Malay Archipelago",22,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU300 - DU330 South Australia",22,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7260 - K7338 Obligations",22,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE11 - LE13 Central America",22,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG60 - LG170.2 India. Pakistan. Bangladesh. Burma. Sri Lanka. Nepal",22,
        "P - Language and literature|PE1 - PE3729 English language|PE814 - PE896 Early Modern English",22,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1201 - PK1409.5 Prakrit",22,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL700 - PL889 Japanese literature|PL885 - PL889 Local literature",22,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB418 - SB418.4 Container gardening",22,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP250 - TP261 Industrial electrochemistry",22,
        "T - Technology.|TS1 - TS2301 Manufactures|TS800 - TS937 Wood technology. Lumber|TS920 - TS937 Chemical processing of wood",22,
        "V - Naval science|VB15 - VB345 Naval administration|VB21 - VB124 By region or country",22,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA3150 - ZA3159 Information services. Information centers",22,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL425 - BL490 Religious doctrines (General)|BL465 - BL470 Worship of human beings",21,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1300 - BL1380 Jainism|BL1376 - BL1378.85 Forms of worship",21,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions|BL1615 - BL1616 Sumerian",21,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC941 - DC947 Monaco",21,
        "J - Political Science|JA1 - JA92 Political science (General)|JA27 - JA34 Societies",21,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1118 - KZA1122 Treaties and other international agreements",21,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH501 - PH509 Karelian",21,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2131 - PN2193 By period|PN2152 - PN2160 Medieval",21,
        "R - Medicine|R5 - R920 Medicine (General)|R722 - R722.32 Missionary medicine. Medical missionaries",21,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB992 - SB998 Economic zoology applied to crops. Agricultural zoology (including animals injurious and beneficial to plants)",21,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF855 - TF1127 Electric railways",21,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT300 - TT382.8 Painting. Wood finishing",21,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG470 - UG474 Military surveying, topography, and mapping",21,
        "U - Military science (General)|UH20 - UH910 Other services|UH20 - UH25 Chaplains",21,
        "U - Military science (General)|UH20 - UH910 Other services|UH520 - UH551 Care of sick and wounded. Relief societies",21,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK600 - VK794 Tide and current tables",21,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP186 - BP186.97 Special days and seasons, fasts, feasts, festivals, etc.",20,
        "C - Auxiliary Sciences of History|C1 - C51 Auxiliary Sciences of History (General)",20,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS591 - DS599 Malaysia. Malay Peninsula. Straits Settlements|DS597.33 - DS597.34 Sabah. British North Borneo",20,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT1991 - DT2054 Cape Province. Cape of Good Hope",20,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3260 - G3272 Polar regions",20,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV733 - GV734.5 Professionalism in sports. Professional sports (General)",20,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE9719 - HE9721 Artificial satellite telecommunications",20,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1501 - HS2460.7 Other societies. By classes|HS1501 - HS1510 Benevolent and friendly societies and mutual assessment fraternities",20,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS55 - JS67 History",20,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K280 - K286 Sources of law",20,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB2001 - PB3029 Brittanic group|PB2501 - PB2621 Cornish",20,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2896 - PK2899 Romani",20,
        "R - Medicine|RK1 - RK715 Dentistry|RK60.7 - RK60.8 Preventive dentistry",20,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH327.5 - SH327.7 Fishery resources. Fishery conservation",20,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF340 - TF499 Railway equipment and supplies",20,
        "U - Military science (General)|UE1 - UE500 Cavalry. Armor. Including horse cavalry, armored cavalry, mechanized cavalry|UE157 - UE302 Tactics. Maneuvers. Drill regulations",20,
        "V - Naval science|V1 - V995 Naval science (General)|V390 - V395 Naval research",20,
        "V - Naval science|VC10 - VC580 Naval maintenance|VC260 - VC268 Supplies and stores",20,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z684 - Z685 Supplies. Shelving. Bookstacks",20,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL70 - BL71 Sacred books (General)",19,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU182 - DU198 Tasmania. Van Diemen's Land",19,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3195 - G3199 Moon",19,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR620 - GR640 Cosmic phenomena",19,
        "H - Social sciences|HA1 - HA4737 Statistics|HA36 - HA37 Statistical services. Statistical bureaus",19,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ63 - JZ1153 Sources",19,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K215 - K218 History",19,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K795 - K798 Trusts and trustees",19,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ24 - KZ38 Societies, etc.",19,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli|KZ6540 - KZ6660 Warfare on sea",19,
        "L - Education|LF14 - LF5627 Individual institutions|LF14 - LF1257 Great Britain|LF960 - LF1137 Scotland",19,
        "L - Education|LF14 - LF5627 Individual institutions|LF4831 - LF4887 Portugal",19,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2190 - M2196 Sacred vocal music for children",19,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ991 - PJ995 Afroasiatic languages",19,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures|PK1981 - PK2000 Hindustani language",19,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4186 - PQ4199 Folk literature",19,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9201 - PT9499 Literary history and criticism|PT9460 - PT9499 Prose",19,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC924 - RC924.5 Diseases of the connective tissues",19,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ59 - RJ60 Infant and neonatal morbidity and mortality",19,
        "R - Medicine|RV1 - RV431 Botanic, Thomsonian, and eclectic medicine",19,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF461 - SF473 Birds",19,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF911 - SF914.4 Veterinary surgery",19,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG730 - UG735 Air defenses",19,
        "V - Naval science|VG20 - VG2029 Minor services of navies|VG100 - VG475 Medical service",19,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History|DH571 - DH694 By period|DH585 - DH619 1555-1794. Spanish and Austrian rule",18,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History|DQ78 - DQ210 By period|DQ78 - DQ110 Early and medieval to 1516",18,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS560 - DS560.72 Democratic Republic (North Vietnam), 1945-",18,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS650 - DS650.99 Brunei",18,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU392 - DU398 Northern Territory of Australia",18,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR650 - GR690 Geographical topics",18,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV750 - GV770.27 Air sports: Airplane flying, kiteflying, bungee-jumping, etc.",18,
        "H - Social sciences|HA1 - HA4737 Statistics|HA38 - HA39 Registration of vital events. Vital records",18,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1501 - HS2460.7 Other societies. By classes|HS1525 - HS1560 Religious socieities",18,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN7101 - JN7367 Denmark",18,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ3675 - JZ3875 State territory and its different parts",18,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC5701 - LC5771 Vacation schools. Summer schools",18,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC215 - LC238.4 Community and the school|LC230 - LC235 Parent-teacher associations. Home and school associations",18,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2147 - M2188 Liturgy and ritual|M2161 - M2183 Protestant churches",18,
        "M - Music|MT1 - MT960 Musical instruction and study|MT90 - MT146 Analysis and appreciation of musical works|MT110 - MT115 Oratorios, cantatas, etc.",18,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1290 - ND1293 Human figure",18,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1421 - PK1429.5 Apabhrams'a",18,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism|PQ9083 - PQ9095 Drama",18,
        "Q - Science|QR1 - QR502 Microbiology|QR99.6 - QR99.8 Cyanobacteria",18,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH213 - SH216.55 By oceans and seas",18,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK4001 - TK4102 Applications of electric power",18,
        "T - Technology.|TR1 - TR1050 Photography|TR504 - TR508 Transparencies, Diapositives",18,
        "V - Naval science|VB15 - VB345 Naval administration|VB320 - VB325 Minorities, women, etc. in navies",18,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA3201 - ZA3250 Information superhighway",18,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL443 - DL537 History|DL460 - DL537 By period|DL460 - DL478 Early and medieval to 1387",17,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT2541 - DT2686 Lesotho. Basutoland",17,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E426 - E430 Fillmore's administration, July 9, 1850-1853",17,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1218.5 - GV1220.8 Toys",17,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV200.6 - GV200.66 Caving. Spelunking",17,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD2321 - HD4730.9 Industry|HD2331 - HD2336 Home labor. Home-based businesses",17,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1685 - HG1704 Drafts. Checks",17,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ2042 - HQ2044 Life style",17,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary|HV8031 - HV8080 Police duty. Methods of protection|HV8079.5 - HV8079.55 Traffic control. Traffic accident investigation",17,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN7401 - JN7695 Norway",17,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3700 - K3705 Control of social activities",17,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7120 - K7197 Persons|K7125 - K7140 Natural persons",17,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1040 - KZA1065 Intergovernmental congresses and conferences",17,
        "L - Education|LF14 - LF5627 Individual institutions|LF4539 - LF4607 Sweden",17,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2147 - M2188 Liturgy and ritual|M2156 - M2160.87 Orthodox churches",17,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1220 - NE1233 General works",17,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX420 - NX430 Exhibitions",17,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4101 - PJ4197 West and North Semitic languages|PJ4171 - PJ4197 Phoenician-Punic",17,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1560 - PN1590 The performing arts. Show business|PN1585 - PN1589 Centers for the performing arts",17,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2131 - PN2193 By period|PN2171 - PN2179 Renaissance",17,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5351 - PT5395 Folk literature",17,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6000 - PT6466.36 Flemish literature since 1830|PT6000 - PT6199 Literary history and criticism",17,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7351 - PT7418 Literary history and criticism",17,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS151.2 - RS151.9 Dispensatories",17,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD390 - SD390.43 Forest soils",17,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF541 - SF560 Sericulture. Silk culture",17,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH388.7 - SH391.5 Algae culture. Seaweed",17,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA800 - TA820 Tunneling. Tunnels",17,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ170 - TJ179 Mechanics applied to machinery. Dynamics",17,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG760 - UG765 Aerial reconnaissance",17,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z691 - Z692 Special classes of materials. Including manuscripts, maps, microforms, serials",17,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History|DR1259 - DR1321 By period|DR1273 - DR1280 1800-1918",16,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.6 - DS646.69 Moluccas. Maluku",16,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT367 - DT367.8 Northeast Africa",16,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV743 - GV749 Athletic and sporting goods, supplies, etc.",16,
        "H - Social sciences|HN1 - HN995 Social history and conditions. Social problems. Social reform|HN41 - HN46 Community centers. Social centers",16,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK9663 - JK9993 Confederate States of America",16,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS1840 - JS2058 West Indies. Caribbean Area",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3184 - K3188 Form and structure of government",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3289 - K3367 Organs of government|K3310 - K3329 The legislature",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3289 - K3367 Organs of government|K3332 - K3363 Heads of state and the central government",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K68 - K70 Directories",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLP1 - KLP4989 Ukraine (1919-1991)",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ118 - KZ194 Treaties and other international agreements|KZ184 - KZ194 Peace treaties",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1430 - KZA1690 Maritime boundaries|KZA1630 - KZA1664 Continental shelf",16,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC5451 - LC5493 Aged education",16,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE71 - LE73 Uruguay",16,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG240 - LG277 Japan",16,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH701 - PH735 Sami",16,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM101 - PM2711 American languages (Aboriginal)|PM231 - PM355 American languages of British North America",16,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN661 - PN694 Medieval (to 1500)|PN692 - PN693 Prose. Prose fiction",16,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7326 - PT7338 Individual authors or works before 1540",16,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA604 - RA618 Parks, public baths, public carriers, buildings, etc.",16,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC1000 - RC1020 Submarine medicine",16,
        "S - Agriculture|SK1 - SK663 Hunting|SK295 - SK305 Big game",16,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ181 - TJ210 Mechanical movements",16,
        "T - Technology.|TS1 - TS2301 Manufactures|TS2120 - TS2159 Cereals and grain. Milling industry",16,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC400 - UC440 Barracks. Quarters. Camps",16,
        "U - Military science (General)|UD1 - UD495 Infantry|UD480 - UD485 Airborne troops. Parachute troops",16,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK1300 - VK1491 Saving of life and property",16,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions|BL1670 - BL1672 Canaanite",15,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6195 - BX6197 Arminians. Remonstrants",15,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX800 - BX4795 Catholic Church|BX4716.4 - BX4795 Dissenting sects other than Protestant",15,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E337.8 - E340 General|E339 - E340 Biography",15,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology|GB461 - GB468.99 Reefs",15,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1428 - HD1431 International cooperation",15,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ2035 - HQ2039 Life skills. Coping skills. Everyday living skills",15,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ961 - HQ967 Free love",15,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1241 - K1287 Insurance",15,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K4360 - K4375 Professions and occupations",15,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4720 - K4780 National defense. Military law",15,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT540 - MT557 Harp",15,
        "M - Music|MT1 - MT960 Musical instruction and study|MT20 - MT32 Special methods",15,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism|PT5201 - PT5243 Poetry",15,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6500 - PT6592.36 Afrikaans literature|PT6550 - PT6575 Collections",15,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9950 - PT9999 Provincial, local, foreign",15,
        "R - Medicine|RL1 - RL803 Dermatology|RL130 - RL169 Diseases of the glands, hair, nails",15,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM270 - RM282 Immunotherapy. Serum therapy",15,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF915 - SF919.5 Veterinary pharmacology",15,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE177 - TE178.8 Roadside development. Landscaping",15,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE200 - TE205 Materials for roadmaking",15,
        "T - Technology.|TX1 - TX1110 Home economics.|TX955 - TX985 Building operations and housekeeping",15,
        "U - Military science (General)|UB1 - UB900 Military administration|UB180 - UB197 Civilian personnel departments",15,
        "V - Naval science|V1 - V995 Naval science (General)|V720 - V743 Naval life, manners and customs, antiquities, etc.",15,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing|Z235 - Z236 Printer's marks, mottoes, etc.",15,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL350 - BL385 Classification of religions",14,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ5140 - BQ5355 Buddhist ministry. Priesthood. Organization",14,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT1029 - BT1040 Catechisms",14,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR4480 - CR4485 Royalty. Insignia. Regalia, crown and coronets, etc.",14,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL101 - DL291 Denmark|DL143 - DL263.3 History|DL160 - DL263.3 By period|DL160 - DL183.9 Early and medieval to 1523",14,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT468 - DT469 Islands (East African coast)",14,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT591 - DT615.9 Portuguese-speaking West Africa|DT615 - DT615.9 Sao Tome and Principe",14,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR890 - GR910 Occupations",14,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8053.5 - HG8054.45 Insurance for professions. Malpractice",14,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT251 - HT265 Mental and moral life",14,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5511.2 - JZ6299 Promotion of peace. Peaceful change|JZ5514 - JZ5526 Societies. Associations, etc.",14,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5511.2 - JZ6299 Promotion of peace. Peaceful change|JZ5527 - JZ5532 Congresses and conferences",14,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1700 - K1973 Social legislation|K1861 - K1929 Social insurance",14,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1700 - K1973 Social legislation|K1960 - K1973 Public welfare. Public assistance",14,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3289 - K3367 Organs of government|K3290 - K3304 The people. Election law",14,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7051 - K7054 International unification, approximation, and harmonization",14,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR190 - KBR2154.5 Sources",14,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLR1 - KLR490 Kazakhstan",14,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KWX - Antarctica",14,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2799 - LB2799.3 Educational consultants and consulting",14,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB3497 - LB3499 Hygiene in universities and colleges",14,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3503 - LC3520 Romanies. Gypsies",14,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1049 - LC1049.8 Cooperative education",14,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE31 - LE33 Brazil",14,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE41 - LE43 Colombia",14,
        "L - Education|LF14 - LF5627 Individual institutions|LF4440 - LF4441 Estonia",14,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK4501 - PK4681 Pali literature",14,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3301 - PL3311 Non-Chinese languages of China",14,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages|PL4301 - PL4470 Mon-Khmer (Mon-Anam) languages|PL4423 - PL4470 Bru, Chrau, Khasi, Muong, etc.",14,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6000 - PT6466.36 Flemish literature since 1830|PT6300 - PT6397 Collections",14,
        "R - Medicine|RL1 - RL803 Dermatology|RL110 - RL120 Therapeutics",14,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM671 - RM671.5 Nonprescription drugs. Patent medicines",14,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S604.5 - S604.64 Agricultural conservation",14,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB170 - SB172.5 Tree crops",14,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP875 - TP888 Cement industries",14,
        "U - Military science (General)|UF1 - UF910 Artillery|UF540 - UF545 Arsenals, magazines, armories, etc.",14,
        "V - Naval science|V1 - V995 Naval science (General)|V167 - V178 Tactics",14,
        "V - Naval science|VB15 - VB345 Naval administration|VB310 - VB315 Officers",14,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL576 - DL596 Local history and description",13,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History|DQ78 - DQ210 By period|DQ111 - DQ123 1516-1798",13,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC100 - GC103 Seawater",13,
        "H - Social sciences|HA1 - HA4737 Statistics|HA154 - HA4737 Statistical data|HA154 - HA155 Universal statistics",13,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE5751 - HE5870 Ferries",13,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5446 - HF5459 Canvassing. Peddling",13,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC345 - JC347 Symbolism",13,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K300 - K304 Classification of law. Typology",13,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3921 - K3925 Manufacturing industries",13,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL147 - KL177 Ancient legal systems compared",13,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL2800 - KL3099 Egypt",13,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC6571 - LC6581 Radio and television extension courses. Instruction by radio and television",13,
        "L - Education|LF14 - LF5627 Individual institutions|LF1561 - LF1697 Hungary",13,
        "L - Education|LF14 - LF5627 Individual institutions|LF4901 - LF5047 Switzerland",13,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML3300 - ML3354 Program music",13,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC1280 - NC1284 Printed ephemera. Imagerie populaire",13,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1400 - ND1403 Flowers. Fruit. Trees",13,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX798 - NX820 Arts centers and facilities",13,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6249 - PN6258 Ana",13,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7298 - PT7309 Religious works",13,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases|SB617 - SB618 Poisonous plants",13,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP700 - TP746 Illuminating industries (Nonelectric)",13,
        "U - Military science (General)|UF1 - UF910 Artillery|UF820 - UF830 Ballistics. Velocities and motions of projectiles",13,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG640 - UG645 Military aeronautical research",13,
        "V - Naval science|VF1 - VF580 Naval ordnance|VF346 - VF348 Naval weapons systems",13,
        "W - Health Sciences|W1 - W925 Health Professions",13,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL630 - BL632 Religious organization",12,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History|DH571 - DH694 By period|DH571 - DH584 Early and medieval to 1555",12,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK61 - DJK77 Local history and description|DJK76.2 - DJK76.8 Danube River Valley",12,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ1051 - HQ1057 The church and marriage",12,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ1058 - HQ1058.5 Widows and widowers. Widowhood",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1100 - K1109 Secured transactions",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3740 - K3762 Education",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K805 - K821 Succession upon death",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1234 - KZ1236 Legal research. Legal bibliography",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ24 - KZ38 Societies, etc.|KZ27 - KZ37 National",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4850 - KZ5490 Intergovernmental organizations. IGOs|KZ4853 - KZ4934 The League of Nations",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli|KZ6427 - KZ6437 Warfare on land",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD3489 - KZD4406 Peaceful uses of outer space",12,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC5501 - LC5560 Evening schools",12,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1036 - LC1036.8 Community education",12,
        "L - Education|LF14 - LF5627 Individual institutions|LF3911 - LF4067 Belgium",12,
        "L - Education|LF14 - LF5627 Individual institutions|LF4071 - LF4197 Netherlands",12,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG481 - LG505 West Africa",12,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M1356 - M1356.2 Dance orchestra and instrumental ensembles",12,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1000 - NE1027 General",12,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH91 - PH98.5 Finnic. Baltic-Finnic",12,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5211 - PJ5289 West Aramaic|PJ5211 - PJ5219.5 Biblical (Chaldaic)",12,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT881 - PT951 Folk literature|PT923 - PT937 Faust legend",12,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8301 - PT8574 Literary history and criticism|PT8540 - PT8574 Prose",12,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA646 - RA648.3 War and public health",12,
        "R - Medicine|RZ201 - RZ999 Other systems of medicine|RZ201 - RZ275 Chiropractic",12,
        "R - Medicine|RZ201 - RZ999 Other systems of medicine|RZ301 - RZ397.5 Osteopathy",12,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF84 - SF84.64 Economic zoology",12,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH334.9 - SH336.5 Fishery processing",12,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT161 - TT170.7 Manual training. School shops",12,
        "V - Naval science|VG20 - VG2029 Minor services of navies|VG50 - VG55 Coast guard and coast signal service",12,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works|AC801 - AC895 Inaugural and program dissertations",11,
        "A - General Works|AS1 - AS945 Academies and learned societies|AS2.5 - AS4 International associations, congresses, conferences, etc.",11,
        "C - Auxiliary Sciences of History|CN1 - CN1355 Inscriptions. Epigraphy|CN805 - CN865 By language",11,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK61 - DJK77 Local history and description|DJK71 - DJK76 Carpathian Mountain region",11,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT2181 - DT2278 KwaZulu-Natal. Natal",11,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E784 - E805 1919-1933. Harding-Coolidge-Hoover era. The twenties|E785 - E786 Harding's administration, 1921-August 2, 1923",11,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1059 - G1061 Maritime atlases (General)",11,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR940 - GR941 Mythical places",11,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ3675 - JZ3875 State territory and its different parts|JZ3686 - JZ3875 International waters",11,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ4835 - JZ5490 International organizations and associations|JZ4850 - JZ5490 Intergovernmental organizations. IGOs|JZ4853 - JZ4934 The League of Nations",11,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1094 - K1096 Loan of money",11,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3615 - K3622 Veterinary laws. Veterinary medicine and hygiene. Prevention of cruelty to animals",11,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K5000 - K5582 Criminal law and procedure|K5575 - K5582 Juvenile criminal law and procedure",11,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB162 - KB250 Legal systems compared",11,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2335.86 - LB2335.88 Trade unions",11,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC68 - LC70 Demographic aspects of education",11,
        "L - Education|LF14 - LF5627 Individual institutions|LF4449.2 - LF4449.5 Ukraine",11,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT728 - MT728.3 Chamber music",11,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG8001 - PG9146 Baltic|PG8201 - PG8208 Old Prussian",11,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6121 - PK6129 Old Persian",11,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6233 - PN6238 Anacreontic literature",11,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ781 - PQ841 Folk literature",11,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism|PT5250 - PT5295 Drama",11,
        "R - Medicine|RD1 - RD811 Surgery|RD98 - RD98.4 Surgical complications",11,
        "R - Medicine|RL1 - RL803 Dermatology|RL87 - RL94 Care and hygiene",11,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH344 - SH344.8 Methods and gear. Catching of fish",11,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ1350 - TJ1418 Hoisting and conveying machinery",11,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA940 - UA945 Military communication",11,
        "U - Military science (General)|UB1 - UB900 Military administration|UB440 - UB449.5 Retired military personnel",11,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1300 - BL1380 Jainism|BL1310 - BL1314.2 Sacred books. Sources",10,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions|BL1660 - BL1665 Phoenician. Carthaginian, etc.",10,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV700 - BV707 Parish. Congregation. The local church",10,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9884 - BX9886 United Church of Christ",10,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR927 - DR978.52 History|DR954 - DR978.52 By period|DR961 - DR969 1501-1912. Turkish rule",10,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8111 - HG8123 Government policy. State supervision",10,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT51 - HT65 Human settlements. Communities",10,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT621 - HT635 Orgin of social classes",10,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KQ - Africa",10,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education|LC47 - LC58.7 Private school education|LC58 - LC58.7 Preparatory schools. Preparatory school education",10,
        "M - Music|ML1 - ML3930 Literature on music|ML32 - ML33 Institutions",10,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT600 - MT612 Mandolin",10,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4150 - NA4160 Classed by form",10,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB2001 - PB3029 Brittanic group|PB3001 - PB3029 Gaulish",10,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL6145 - PL6167 Taiwan languages",10,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6319 - PN6328 Sayings, bon mots, etc.",10,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8301 - PT8574 Literary history and criticism|PT8460 - PT8489 Poetry",10,
        "Q - Science|QZ1 - QZ380 Pathology",10,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG484 - RG485 Urogynecology and obstetric urology. Urogynecologic surgery",10,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ52 - RJ53 Therapeutics",10,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS200 - RS201 Pharmaceutical dosage forms",10,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T59 - T59.2 Standardization",10,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF1300 - TF1620 High speed ground transportation",10,
        "U - Military science (General)|UD1 - UD495 Infantry|UD330 - UD335 Firing. Military sharpshooting",10,
        "U - Military science (General)|UF1 - UF910 Artillery|UF157 - UF302 Tactics. Maneuvers. Drill regulations",10,
        "U - Military science (General)|UF1 - UF910 Artillery|UF400 - UF405 Field artillery",10,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG615 - UG620 Military motor vehicles",10,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK321 - VK369.8 Harbors. Ports",10,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4600 - BQ4610 Relation to other religious and philosophical systems",9,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ5130 - BQ5137 Temple. Temple organization",9,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV1620 - BV1652 Social life, recreation, etc. in the church",9,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8799 - BX8809 Plymouth Brethren. Darbyites",9,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden|DL643 - DL879 History|DL660 - DL879 By period|DL660 - DL700.9 Early and medieval to 1523. Union of Kalmar, 1397",9,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT56.8 - DT69.5 Antiquities|DT68 - DT68.8 Religious antiquities",9,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training|GV450 - GV451.4 Nudism. Sunbathing",9,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD2321 - HD4730.9 Industry|HD2337 - HD2339 Sweatshops",9,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE331 - HE380 Traffic engineering. Roads and highways. Streets|HE374 - HE377 Bridges",9,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ4919 - HJ4936 Capitation. Poll tax",9,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7120 - K7197 Persons|K7155 - K7197 Domestic relations. Family law",9,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7260 - K7338 Obligations|K7265 - K7305 Contracts",9,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM531 - KBM619 Domestic relations. Family law",9,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli|KZ6665 - KZ6714 Air warfare",9,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3551 - LC3593 Jews",9,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1330 - NE1336 Linoleum block prints",9,
        "N - Fine Arts|NE1 - NE3002 Print media|NE2242 - NE2246 Monotype (Printmaking)",9,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB1801 - PB1867 Manx",9,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5211 - PJ5289 West Aramaic|PJ5281 - PJ5289 Neo-Aramaic",9,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5301 - PJ5329.5 East Aramaic",9,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4070 - PL4074 Miao-Yao languages",9,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM101 - PM2711 American languages (Aboriginal)|PM401 - PM501 American languages of the United States (and Mexico)",9,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1321 - PR1329 Oratory",9,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT7900 - PT7930 Folk literature",9,
        "Q - Science|QC1 - QC999 Physics|QC851 - QC999 Meteorology. Climatology (including the earth's atmosphere)|QC974.5 - QC976 Meteorological optics",9,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S588.4 - S589.6 Agricultural physics",9,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD813 - TD870 Street cleaning. Litter and its removal",9,
        "U - Military science (General)|U1 - U900 Military science (General)|U250 - U255 Maneuvers (combined arms)",9,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC700 - UC780 Subsistence",9,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ5100 - BQ5125 Symbols and symbolism",8,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR1101 - CR1131 Ecclesiastical and sacred heraldry",8,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G3100 - G3102 Antarctica",8,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR931 - GR935 Signs and symbols",8,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV200.4 - GV200.5 Orienteering. Wilderness survival",8,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5482 - HF5482.4 Secondhand trade",8,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ2336 - HJ2337 Tax exemption",8,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1150 - K1231 Maritime law|K1195 - K1223 Maritime social legislation",8,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7340 - K7512 Commercial law|K7350 - K7444 Commercial contracts",8,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLW1 - KLW490 Uzbekistan",8,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1319 - KZ1327 International legal regimes",8,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ118 - KZ194 Treaties and other international agreements|KZ170 - KZ173 -1920",8,
        "L - Education|L7 - L991 Education (General)|L797 - L898 Educational exhibitions and museums",8,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2667 - LC2698 Latin Americans. Hispanic Americans|LC2690 - LC2698 Puerto Ricans. Puerto Ricans in the United States",8,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE61 - LE63 Paraguay",8,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG200 - LG227 Philippines",8,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG351 - LG357 Lebanon",8,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG481 - LG505 West Africa|LG481 - LG483 Nigeria",8,
        "L - Education|LG21 - LG961 Individual institutions|LG715 - LG720 Australia",8,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2147 - M2188 Liturgy and ritual|M2186 - M2187 Jewish",8,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1199 - NB1200 Restoration of sculptures",8,
        "N - Fine Arts|NE1 - NE3002 Print media|NE2800 - NE2880 Printing of engravings",8,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5211 - PJ5289 West Aramaic|PJ5251 - PJ5259 Jewish Palestinian",8,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6309 - PN6318 Mottoes",8,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism|PT5300 - PT5348 Prose",8,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8600 - PT8637 Folk literature",8,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9547 - PT9639 Collections|PT9626 - PT9639 Prose",8,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC501 - QC718.8 Electricity|QC676 - QC678.6 Radio waves (Theory)",8,
        "Q - Science|QV1 - QV835 Pharmacology",8,
        "Q - Science|QZ1 - QZ380 Pathology|QZ200 - QZ380 Neoplasms. Cysts",8,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM146 - RM146.7 Misues of therapeutic drugs. Medication Errors",8,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD390.5 - SD390.7 Forest meteorology. Forest microclimatology",8,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK401 - VK529 Study and teaching",8,
        "W - Health Sciences|W1 - W925 Health Professions|W1 - W28 Reference Works. General Works",8,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ5035 - BQ5065 Hymns. Chants. Recitations",7,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.4 - DS646.49 Celebes. Sulawesi",7,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E415.6 - E415.9 General|E415.8 - E415.9 Biography",7,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3210 - G3222 Northern and Southern Hemispheres",7,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography|GA260 - GA288 Globe making, globes",7,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8205 - HG8220 Government insurance",7,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6730 - JN6739 Latvia",7,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS2145 - JS2219 Central America",7,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV9290 - JV9470 Pacific Ocean islands",7,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4720 - K4780 National defense. Military law|K4740 - K4760 Military criminal law and procedure",7,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM1 - KBM523.72 Halakah",7,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU3075 - KBU3165 Sacraments. Administration of sacraments. De sacramentis et administratione",7,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB3525 - LB3575 Special days",7,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2580 - LC2582 Student",7,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE46 - LE48 Ecuador",7,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA7910 - NA8125 Clubhouses, guild houses, etc.",7,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3175 - NK3296.3 Upholstery. Drapery",7,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH3801 - PH3820 Samoyedic languages",7,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ4951 - PJ4996 Medieval Hebrew",7,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2461 - PK2479 Marwari",7,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4001 - PN4355 Oratory. Elocution, etc.|PN4331 - PN4355 Recitations in foreign languages",7,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6340 - PN6348 Toasts",7,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR481 - PR488 21st century",7,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB354 - SB402 Fruit culture and orchard care|SB381 - SB386 Berries and Small Fruits",7,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF402 - SF405 Fur-bearing animals",7,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF408 - SF408.6 Zoo animals",7,
        "S - Agriculture|SK1 - SK663 Hunting|SK590 - SK593 Wild animal trade",7,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE206 - TE209.5 Location engineering",7,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ227 - TJ240 Machine design and drawing",7,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK301 - TK399 Electric meters",7,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA910 - UA915 Mobilization",7,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK573 - VK587 Nautical instruments",7,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6551 - BX6593 Catholic Apostolic Church. Irvingites",6,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6801 - BX6843 Christian Reformed Church",6,
        "C - Auxiliary Sciences of History|CN1 - CN1355 Inscriptions. Epigraphy|CN750 - CN753 Early Christian inscriptions",6,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR927 - DR978.52 History|DR954 - DR978.52 By period|DR954 - DR960.5 To 1501",6,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS631 - DS632 Ethnography",6,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.1 - DS646.15 Sumatra",6,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT2701 - DT2825 Swaziland",6,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1000 - G1000.5 Atlases of the moon, planets, etc.",6,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB2801 - GB2998 Hydrometerology",6,
        "J - Political Science|JJ1000 - JJ1019 Political institutions and public administration",6,
        "J - Political Science|JJ1000 - JJ1019 Political institutions and public administration|JJ1000 - JJ1019 North America",6,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ24 - JZ38 Societies. Associations, etc.",6,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ63 - JZ1153 Sources|JZ221 - JZ1153 By region or country",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7200 - K7218 Property",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7260 - K7338 Obligations|K7315 - K7338 Torts",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7340 - K7512 Commercial law|K7510 - K7512 Insolvency and bankruptcy. Creditors' rights",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM524.12 - KBM524.26 The concept of Jewish law",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU3500 - KBU3774 Sanctions in the Church. Criminal law. De sanctionibus in Ecclesia. De lege poenali",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL190 - KL420 Sources",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KQ - Africa|KQ2010 - KQ9000 Law of indigenous peoples",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1284 - KZ1285.5 Methodology",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security|KZ5615 - KZ5893 Arms control and disarmament regimes|KZ5687 - KZ5788.5 Nuclear weapon free zones and zones of peace",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD1118 - KZD1122 Treaties and other international agreements",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD3489 - KZD4406 Peaceful uses of outer space|KZD4030 - KZD4326 Public order in space and outer space",6,
        "L - Education|LF14 - LF5627 Individual institutions|LF3211 - LF3247 Greece",6,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1380 - ND1383 Animals. Birds",6,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1400 - NE1879 Metal engraving|NE1750 - NE1775 Copper engraving",6,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1700 - NK2195 Interior decoration. House decoration|NK2190 - NK2192 Church decoration",6,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF1001 - PF1184 Flemish",6,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5211 - PJ5289 West Aramaic|PJ5271 - PJ5279 Samaritan",6,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7581 - PT7599 Faroese literature",6,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8750 - PT8951.36 Individual authors or works|PT8750 - PT8775 16th-18th centuries",6,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH705 - QH705.5 Economic biology",6,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ47.3 - RJ47.4 Genetic aspects",6,
        "R - Medicine|RL1 - RL803 Dermatology|RL391 - RL489 Atrophies. Hypertrophies",6,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ950 - TJ1030 Pneumatic machinery",6,
        "U - Military science (General)|U1 - U900 Military science (General)|U320 - U325 Physical training of soldiers",6,
        "U - Military science (General)|UB1 - UB900 Military administration|UB160 - UB165 Records, returns, muster rolls, etc.",6,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC600 - UC695 Horses. Mules. Remount service",6,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG500 - UG565 Technical troops and other special corps",6,
        "U - Military science (General)|UH20 - UH910 Other services|UH750 - UH769 Military social work. Social welfare services",6,
        "V - Naval science|VB15 - VB345 Naval administration|VB260 - VB275 Enlisted personnel",6,
        "V - Naval science|VD7 - VD430 Naval seamen",6,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK588 - VK597 Marine hydrography. Hydrographic surveying",6,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP170.3 - BP170.5 Missionary work of Islam",5,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP188 - BP190 Islamic religious life|BP189.68 - BP189.7 Monasticism",5,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9875 - BX9877.1 United Brethren in Christ. Church of the United Brethren in Christ",5,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9881 - BX9882.95 United Church of Canada",5,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB881 - DB898 Liechtenstein",5,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History|DL1050 - DL1141.6 By period|DL1055 - DL1141.6 Modern, 1523-|DL1070 - DL1078 Revolution, 1917-1918. Civil War",5,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL443 - DL537 History|DL460 - DL537 By period|DL503 - DL526 1814-1905. 19th century",5,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT2291 - DT2378 Transvaal. South African Republic",5,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT179.2 - DT179.9 Northwest Africa",5,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G905 - G910 Tropics (General)",5,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1050 - G1052 Northern and Southern Hemispheres",5,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology|GN397 - GN397.5 Applied anthropology",5,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD6941 - HD6948 Employers' associations",5,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K109 - K110 Law societies. International bar associations",5,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM3790 - KBM4855 Criminal law and procedure",5,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4850 - KZ5490 Intergovernmental organizations. IGOs|KZ5330 - KZ5490 Regional organizations",5,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD3489 - KZD4406 Peaceful uses of outer space|KZD4030 - KZD4326 Public order in space and outer space|KZD4080 - KZD4210 Space flight",5,
        "L - Education|LF14 - LF5627 Individual institutions|LF14 - LF1257 Great Britain|LF1140 - LF1257 Wales",5,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG341 - LG345 Israel. Palestine",5,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG421 - LG423 Uganda",5,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG551 - LG552 Senegal",5,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG553 - LG554 Benin",5,
        "M - Music|ML1 - ML3930 Literature on music|ML3928 - ML3930 Literature for children",5,
        "M - Music|MT1 - MT960 Musical instruction and study|MT820 - MT915 Singing and vocal technique|MT898 - MT915 Techniques for children",5,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3475 - PG3476 1917-1960",5,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.|PN4825 - PN4830 Amateur journalism",5,
        "P - Language and literature|PR1 - PR9680 English literature|PR901 - PR907.2 Oratory",5,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9650 - PT9876.36 Individual authors or works|PT9650 - PT9651 Medieval",5,
        "Q - Science|QV1 - QV835 Pharmacology|QV701 - QV835 Pharmacy and Pharmaceutics",5,
        "R - Medicine|RL1 - RL803 Dermatology|RL760 - RL785 Diseases due to parasites",5,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S770 - S790.3 Agricultural structures. Farm buildings",5,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF101 - SF103.5 Brands and branding, and other means of identifying",5,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF114 - SF121 Exhibitions",5,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF411 - SF459 Pets|SF451 - SF455 Rabbits and hares",5,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA2001 - TA2040 Plasma engineering. Applied plasma dynamics",5,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC183 - TC201 General preliminary operations. Dredging. Submarine building",5,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK4601 - TK4661 Electric heating",5,
        "T - Technology.|TX1 - TX1110 Home economics.|TX851 - TX885 Dining-room service",5,
        "U - Military science (General)|UE1 - UE500 Cavalry. Armor. Including horse cavalry, armored cavalry, mechanized cavalry|UE460 - UE475 Horses",5,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG360 - UG390 Field engineering",5,
        "V - Naval science|VC10 - VC580 Naval maintenance|VC280 - VC345 Clothing and equipment",5,
        "V - Naval science|VC10 - VC580 Naval maintenance|VC350 - VC410 Subsistence. Provisioning",5,
        "V - Naval science|VF1 - VF580 Naval ordnance|VF21 - VF124 Naval ordnance",5,
        "V - Naval science|VF1 - VF580 Naval ordnance|VF350 - VF375 Ordnance and arms (General)",5,
        "W - Health Sciences|WZ1 - WZ350 History of Medicine",5,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA4050 - ZA4750 Information in specific formats or media|ZA4050 - ZA4460 Electronic information resources|ZA4450 - ZA4460 Databases",5,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP188 - BP190 Islamic religious life|BP188.2 - BP188.3 Devotional literature",4,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7079 - BX7097 Churches of God",4,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7401 - BX7430 Dowieism. Christian Catholic Church",4,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC921 - DC930 Andorra",4,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR996 - DR998 Local history and description",4,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E310 - E337 1789-1809. Constitutional period|E331 - E337 Jefferson's administrations, 1801-1809|E336 - E336.5 Neutral trade and its restrictions, 1800-1810",4,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB2601 - GB2798 Snow. Snow surveys",4,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV198.94 - GV198.97 Dude ranches",4,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE5746 - HE5749 Stage lines",4,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE9751 - HE9756 Messenger service",4,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5482.6 - HF5482.65 Black market",4,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5520 - HF5541 Office equipment and supplies",4,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ2326 - HJ2327 Progressive taxation",4,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ1001 - HQ1006 The state and marriage",4,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS951 - HS1179 Odd Fellows",4,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV701 - HV1420.5 Children|HV835 - HV847 Foundlings",4,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN7390 - JN7399 Finland",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K270 - K274 Acts and events",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K486 - K487 Relation of law to other topics",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1010 - K1014 The merchant. Business enterprises",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1054 - K1065.5 Negotiable instruments",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3440 - K3460 Civil service. Government officials and employees",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3926 - K3935 Food processing industries",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7060 - K7081 Choice of law",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7550 - K7582 Intellectual property",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB400 - KB4855 Interdisciplinary discussion of subjects",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM3098 - KBM3122 Medical legislation",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF1 - KF9827 Federal law. Common and collective state law",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL2 - KL135 General",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL4700 - KL4999 Hittite law",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA4130 - KZA4205 Public order of the oceans",4,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5161 - LC5163 Fundamental education",4,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG281 - LG285 Korea",4,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG302.2 - LG320 Former Soviet republics in Asia",4,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG471 - LG475 Transvaal",4,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG581 - LG593 German Africa (Former)",4,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT620 - MT634 Zither",4,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1293 - NB1895 Special forms|NB1312 - NB1313 Equestrian statues",4,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1400 - NE1879 Metal engraving|NE1620 - NE1630 General works",4,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1940 - NE2232.5 Etching and aquatint|NE2141 - NE2149 Special subjects",4,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB1101 - PB1200 Goidelic. Gaelic",4,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5301 - PJ5329.5 East Aramaic|PJ5321 - PJ5329.5 Mandaean",4,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK3591 - PK4485 Sanskrit|PK3801 - PK4251 Special subjects",4,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism|PQ9121 - PQ9128 Folk literature",4,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7500 - PT7511 Individual authors or works",4,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9547 - PT9639 Collections|PT9605 - PT9625 Drama",4,
        "R - Medicine|RE1 - RE994 Opthamology|RE986 - RE988 Artificial eyes and other prostheses",4,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS250 - RS252 Commercial preparations. Patent medicines",4,
        "U - Military science (General)|UB1 - UB900 Military administration|UB407 - UB409 Warrant officers. Noncommissioned officers",4,
        "V - Naval science|VD7 - VD430 Naval seamen|VD21 - VD124 By region or country",4,
        "V - Naval science|VG20 - VG2029 Minor services of navies|VG70 - VG85 Naval communication by telegraphy, telephone, etc.",4,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1170 - DL1180 Local history and description",3,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT2075 - DT2145 Orange Free State. Oranje Vrystaat",3,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU400 - DU430 New Zealand|DU428 - DU430 Local history and description",3,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada|F1141 - F1145.3 Nunavut",3,
        "G - Geography. Anthropology. Recreation|G3160 - G3171 Globes",3,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3190 - G3192 Celestial maps",3,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT5320 - GT6737 Customs relative to special classes|GT5320 - GT5690 By birth, rank, etc.",3,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1201 - HS1350 Knights of Pythias",3,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV701 - HV1420.5 Children|HV931 - HV941 Fresh-air funds",3,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6640 - JN6649 Belarus",3,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6680 - JN6689 Moldova",3,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ6422 - JZ6422.5 Neutrality",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1021 - K1022 Commercial agency",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1150 - K1231 Maritime law|K1226 - K1231 Marine insurance",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K578 - K579 Concepts applying to several branches of law",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7120 - K7197 Persons|K7155 - K7197 Domestic relations. Family law|K7181 - K7197 Parent and child. Guardian and ward",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7230 - K7245 Succession upon death",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7340 - K7512 Commercial law|K7449 - K7460 Maritime law",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM1572 - KBM1942 Courts and procedure",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM524.6 - KBM530 Persons",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM639 - KBM1424 Dinei mamonot",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR3077 - KBR3165 Sacraments. Administration of sacraments. De sacramentis et administratione",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL2200 - KL2499 Babylonia",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLM1 - KLM490 Moldova",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLT1 - KLT490 Tadjikistan",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security|KZ5615 - KZ5893 Arms control and disarmament regimes|KZ5870 - KZ5893 Mutual and balanced reduction of armed forces",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli|KZ6730 - KZ6785 The end of war. Armistice. Surrender. Postliminy",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD1340 - KZD1400 Concepts and principles. Theory",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD5614 - KZD6715 Un-peaceful uses of outer space",3,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3530 - LC3540 Lapps",3,
        "L - Education|LF14 - LF5627 Individual institutions|LF1550 - LF1550.8 Slovakia",3,
        "L - Education|LF14 - LF5627 Individual institutions|LF4445 - LF4446 Lithuania",3,
        "L - Education|LF14 - LF5627 Individual institutions|LF4451 - LF4487 Denmark",3,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG171 - LG172 Indochina",3,
        "L - Education|LG21 - LG961 Individual institutions|LG741 - LG745 New Zealand",3,
        "M - Music|ML1 - ML3930 Literature on music|ML112.8 - ML158.8 Bibliography|ML158.4 - ML158.6 Video recordings",3,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE965 - NE965.3 Tradesmen's cards",3,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH551 - PH559 Ingrian",3,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ2340 - PJ2399 Libyco-Berber languages. Berber languages|PJ2353 - PJ2367 Libyan group",3,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2261 - PK2270.9 Lahnda",3,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2892 - PK2892.95 Siraiki",3,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4051 - PL4054 Karen languages",3,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2131 - PN2193 By period|PN2131 - PN2145 Ancient",3,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7001 - PT7099 Scandinavian literature|PT7001 - PT7099 General|PT7088 - PT7089 Folk literature",3,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8301 - PT8574 Literary history and criticism|PT8500 - PT8534 Drama",3,
        "Q - Science|QS1 - QS681 Human Anatomy",3,
        "Q - Science|QV1 - QV835 Pharmacology|QV701 - QV835 Pharmacy and Pharmaceutics|QV738 - QV772 Drug Standardization. Pharmacognosy. Medicinal Plants",3,
        "R - Medicine|RD1 - RD811 Surgery|RD91 - RD91.5 Asepsis and antisepsis. Sterilization (Operative)",3,
        "R - Medicine|RL1 - RL803 Dermatology|RL701 - RL751 Diseases due to psychosomatic and nerve disorders. Dermatoneuroses",3,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS355 - RS356 Pharmaceutical supplies",3,
        "R - Medicine|RX1 - RX681 Homeopathy|RX601 - RX675 Materia medica and therapeutics",3,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB442.8 - SB443.4 Marketing, cut flower industry",3,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB444 - SB446.6 Horticultural service industry",3,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF361 - SF361.73 Donkeys",3,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF380 - SF388 Goats",3,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF511 - SF511.5 Ostrich",3,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH360 - SH363 Seal fisheries. Fur sealing",3,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE279.5 - TE298 Pedestrian facilities|TE280 - TE295 Sidewalks. Footpaths. Flagging",3,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ1501 - TJ1519 Sewing machines",3,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT980 - TT999 Laundry work",3,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA920 - UA925 Plans for attack and defense",3,
        "U - Military science (General)|UB1 - UB900 Military administration|UB380 - UB385 Soldiers' and sailors' homes",3,
        "U - Military science (General)|UE1 - UE500 Cavalry. Armor. Including horse cavalry, armored cavalry, mechanized cavalry|UE144 - UE145 Horse cavalry",3,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG570 - UG582 Military signaling",3,
        "U - Military science (General)|UH20 - UH910 Other services|UH800 - UH910 Recreation and information services",3,
        "V - Naval science|VB15 - VB345 Naval administration|VB170 - VB187 Civil department",3,
        "V - Naval science|VC10 - VC580 Naval maintenance|VC270 - VC279 Equipment of vessels, supplies, allowances, etc.",3,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK1500 - VK1661 Pilots and pilotage",3,
        "W - Health Sciences|W1 - W925 Health Professions|W32 - W64 Law. Ethics. Professional-Patient Relations",3,
        "W - Health Sciences|WX1 - WX225 Hospitals and Other Health Facilities",3,
        "W - Health Sciences|WX1 - WX225 Hospitals and Other Health Facilities|WX1 - WX100 Reference Works. General Works",3,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1108.19 - BL1108.7 Religious education",2,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1300 - BL1380 Jainism|BL1315 - BL1317 Jain literature",2,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ5070 - BQ5075 Altar, liturgical objects, ornaments, memorials, etc.",2,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV895 - BV896 Shrines. Holy places",2,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6051 - BX6093 Reformed Episcopal Church",2,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6751 - BX6793 Christian Church",2,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7451 - BX7493 Evangelical and Reformed Church",2,
        "C - Auxiliary Sciences of History|CS1 - CS3090 Genealogy|CS38 - CS39 Family history covering more than one country",2,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS331 - DS349.9 Southern Asia. Indian Ocean Region|DS349.8 - DS349.9 Islands of the Indian Ocean",2,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT669 - DT671 Islands",2,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3180 - G3182 Universe. Solar system",2,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC170 - GC190 Environmental policy",2,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC200 - GC376 Dynamics of the ocean|GC297 - GC299 Water masses and ocean mixing",2,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ3863 - HJ3925 Direct taxation",2,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV3025 - HV3174 Special classes. By occupation",2,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV3025 - HV3174 Special classes. By occupation|HV3025 - HV3163 Mariners",2,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV9029 - JV9036 Atlantic Ocean islands",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K321 - K474 Schools of legal theory|K325 - K328 Historical jurisprudence",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4720 - K4780 National defense. Military law|K4725 - K4734 The military establishment. Armed forces",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7120 - K7197 Persons|K7155 - K7197 Domestic relations. Family law|K7157 - K7179 Marriage. Husband and wife",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB400 - KB4855 Interdisciplinary discussion of subjects|KB2101 - KB2862 Constitutions and religion. Constitutional and administrative law",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM2070 - KBM2614 Constitutional law. Constitutional principles of the Jewish community",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM632 - KBM636.2 Inheritance and succession",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR2310 - KBR3026 Constitution of the Church",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR4000 - KBR4090 Church and state relationships. De relationibus inter ecclesiam et status. Ius publicum ecclesiae",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU2210 - KBU2212 The codes of canon law",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU3040 - KBU3070 The teaching office of the Church. Magisterium. De ecclesiae munere docendi",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KDZ1 - KDZ4999 Law of America. North America|KDZ2001 - KDZ2499.2 Bermuda",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KDZ1 - KDZ4999 Law of America. North America|KDZ3001 - KDZ3499 Greenland",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL5300 - KL5599 Persia",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLH1 - KLH490 Georgia (Republic)",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KQ - Africa|KQ2 - KQ197 History of law",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1329 - KZ3085 Early/Medieval development to ca. 1900. Ius Naturae et Gentium|KZ1330 - KZ1339 Peace of Westphalia to the French Revolution (1648",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ2 - KZ5.5 Bibliography",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ118 - KZ194 Treaties and other international agreements|KZ176 - KZ182.5 Boundary treaties",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD1420 - KZD1455 Boundaries",2,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1025 - LC1027 Collective education",2,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE27 - LE29 Bolivia",2,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG405 - LG411 South Africa",2,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG431 - LG438 Natal",2,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1293 - NB1895 Special forms|NB1750 - NB1793 Religious monuments and shrines",2,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1115 - ND1120 Study and teaching",2,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1350 - NE1352 Other materials used in relief printing",2,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1400 - NE1879 Metal engraving|NE1400 - NE1422 General",2,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1940 - NE2232.5 Etching and aquatint|NE1940 - NE1975 General",2,
        "N - Fine Arts|NE1 - NE3002 Print media|NE3000 - NE3002 Copying art. Copying machine art",2,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH541 - PH549 Veps",2,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH561 - PH569 Votic",2,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH581 - PH589 Livonian",2,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5211 - PJ5289 West Aramaic|PJ5241 - PJ5249 Christian Palestinian",2,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ601 - PJ989 Special groups|PJ601 - PJ621 Christian Oriental",2,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1471 - PK1490 Middle Indo-Aryan dialects",2,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages|PL3551 - PL4001 Tibeto-Burman languages|PL3561 - PL3801 Tibeto-Himalayan languages|PL3781 - PL3801 Himalayan languages",2,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages|PL4490 - PL4498 Chamic languages",2,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL950 - PL998 Korean literature|PL997 - PL998 Local literature",2,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7520 - PT7550 Provincial, local, foreign",2,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7581 - PT7599 Faroese literature|PT7598 - PT7599 Individual authors or works",2,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9201 - PT9499 Literary history and criticism|PT9415 - PT9449 Drama",2,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9509 - PT9542 Folk literature",2,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9547 - PT9639 Collections|PT9565 - PT9570 Translations",2,
        "Q - Science|QB1 - QB991 Astronomy|QB455 - QB456 Astrogelogy",2,
        "Q - Science|QS1 - QS681 Human Anatomy|QS1 - QS132 Anatomy",2,
        "Q - Science|QV1 - QV835 Pharmacology|QV1 - QV55 Reference Works. General Works",2,
        "Q - Science|QV1 - QV835 Pharmacology|QV701 - QV835 Pharmacy and Pharmaceutics|QV773 - QV835 Pharmaceutical Processes. Packaging. Labeling",2,
        "Q - Science|QW1 - QW949 Microbiology. Immunology",2,
        "R - Medicine|RX1 - RX681 Homeopathy|RX211 - RX581 Diseases, treatment, etc.",2,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S119 - S124 Propagation (including breeding, selection, grafting, air layering)",2,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S71 - S87 History",2,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF111 - SF113 Cost, yield, and profit. Accounting",2,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF780.2 - SF780.7 Veterinary microbiology, bacteriology, virology, mycology",2,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH400 - SH400.8 Seafood gathering",2,
        "S - Agriculture|SK1 - SK663 Hunting|SK650 - SK664 Wildlife-related recreation",2,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T58.7 - T58.8 Production capacity. Manufacturing capacity",2,
        "T - Technology.|TH1 - TH9745 Building construction|TH900 - TH915 Construction equipment in buildings",2,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ1425 - TJ1475 Lifting and pressing machinery",2,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ1480 - TJ1496 Agricultural machinery. Farm machinery",2,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ266 - TJ267.5 Turbines. Turbomachines (General)",2,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT201 - TT203 Lathework. Turning",2,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA929.5 - UA929.95 War damage in industry. Industrial defense",2,
        "U - Military science (General)|UD1 - UD495 Infantry|UD460 - UD464 Mountain troops",2,
        "U - Military science (General)|UF1 - UF910 Artillery|UF460 - UF465 Siege artillery",2,
        "U - Military science (General)|UF1 - UF910 Artillery|UF848 - UF856 Artillery instruments. Fire control, etc.",2,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG160 - UG302 Tactics and regulations",2,
        "U - Military science (General)|UH20 - UH910 Other services|UH700 - UH705 Public relations. Press. War correspondents",2,
        "V - Naval science|V1 - V995 Naval science (General)|V396 - V396.5 Military oceanography",2,
        "V - Naval science|VE7 - VE500 Marines|VE430 - VE435 Training camps",2,
        "V - Naval science|VF1 - VF580 Naval ordnance|VF390 - VF510 Ordnance material (Ordnance proper)",2,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK381 - VK397 Signaling",2,
        "W - Health Sciences|WB1 - WB962 Practice of Medicine",2,
        "W - Health Sciences|WB1 - WB962 Practice of Medicine|WB300 - WB962 Therapeutics",2,
        "W - Health Sciences|WE1 - WE890 Musculoskeletal System",2,
        "W - Health Sciences|WE1 - WE890 Musculoskeletal System|WE500 - WE600 Muscles and Tendons",2,
        "W - Health Sciences|WK1 - WK920 Endocrine System",2,
        "W - Health Sciences|WW1 - WW722.1 Ophthalmology",2,
        "W - Health Sciences|WY1 - WY300 Nursing",2,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ1365 - BJ1385 Positivist ethics",1,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1109.19 - BL1109.7 Antiquities. Archaeology. Inscriptions",1,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1300 - BL1380 Jainism|BL1375.3 - BL1375.7 Jaina pantheon. Deities",1,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX5996 - BX6030 Protestant Episcopal Church outside the United States",1,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6651 - BX6693 Christadelphians. Brothers of Christ",1,
        "C - Auxiliary Sciences of History|CE1 - CE97 Technical Chronology. Calendar|CE91 - CE92 Perpetual calendars. Century calendars, etc.",1,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ95 - DJ292 History|DJ151 - DJ292 By period|DJ151 - DJ152 Early and medieval to 1555",1,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL443 - DL537 History|DL460 - DL537 By period|DL480 - DL502 1387-1814. Union of Kalmar, 1397",1,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History|DR1259 - DR1321 By period|DR1259 - DR1265 Early and medieval to 1500",1,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History|DR1259 - DR1321 By period|DR1266 - DR1272 1500-1800",1,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT2831 - DT2864 British Central Africa. Federation of Rhodesia and Nyasaland",1,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1054 - G1055 Polar regions",1,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR865 - GR874 Transportation, travel, commerce, etc.",1,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1564 - GV1565 Darts",1,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV650 - HV670 Life saving",1,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN7370 - JN7379 Greenland",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1130 - K1132 Carriage of goods and passengers. Carriers",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4430 - K4675 Public finance|K4650 - K4675 State and local finance",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4700 - K4705 Government measures in time of war, national emergency, or economic crisis",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K524 - K525 Treaties and other international agreements",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K592 - K597 Regional divisions. Interregional comparative law",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7340 - K7512 Commercial law|K7485 - K7495 Business associations. Business corporations",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7550 - K7582 Intellectual property|K7555 - K7557 Copyright",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7550 - K7582 Intellectual property|K7570 - K7582 Industrial property",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7585 - K7595 Social legislation",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB400 - KB4855 Interdisciplinary discussion of subjects|KB1572 - KB1690 Courts and procedure",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB400 - KB4855 Interdisciplinary discussion of subjects|KB632 - KB636.2 Inheritance and succession",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM1468 - KBM1547 Social laws and legislation",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBP1 - KBP4860 Islamic law. Shari'ah. Fiqh|KBP100 - KBP136.8 Sources",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBP1 - KBP4860 Islamic law. Shari'ah. Fiqh|KBP70 - KBP75.4 Biography",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR2155 - KBR2157 Canon law and other disciplines or subjects",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR2160 - KBR2204.5 Canonical jurisprudence. Canonical science",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR2224 - KBR2295 Ius ecclesiasticum privatum",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR3500 - KBR3774 Penal (Criminal) law. De lege poenali",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR3780 - KBR3983 Judiciary. Ecclesiastical courts and procedure. De processibus",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU2 - KBU19 Bibliography",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU2160 - KBU2204 Canonical jurisprudence. Theory and science of canon law",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU2310 - KBU3026 Constitution of the Church",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU3780 - KBU3985 Courts and procedure. De processibus",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU4112 - KBU4820 Local Church government",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLS1 - KLS490 Kyrgyzstan",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLV1 - KLV490 Turkmenistan",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KN - South Asia. Southeast Asia. East Asia",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1329 - KZ3085 Early/Medieval development to ca. 1900. Ius Naturae et Gentium|KZ1373 - KZ1387.2 American Civil War to the First Conference of the Hague (1861-1899)",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security|KZ5615 - KZ5893 Arms control and disarmament regimes|KZ5637 - KZ5645 Conventional arms control",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security|KZ5615 - KZ5893 Arms control and disarmament regimes|KZ5834 - KZ5865 Other weapons of mass destruction",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ60 - KZ62.5 Intergovernmental congresses and conferences",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ118 - KZ194 Treaties and other international agreements|KZ119 - KZ165 To 1920",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ118 - KZ194 Treaties and other international agreements|KZ183 - KZ183.5 Treaties of arbitration, investigation, etc.",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA3481 - KZA3900 Marine resources conservation and development",1,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC361 - LC629 Christian education. Church education|LC446 - LC454 Orthodox Eastern Church",1,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1001 - LC1024 Humanistic education. liberal education|LC1022 - LC1022.25 Computer-assisted education",1,
        "L - Education|LF14 - LF5627 Individual institutions|LF1705 - LF1709 Finland",1,
        "L - Education|LF14 - LF5627 Individual institutions|LF4493 - LF4537 Norway",1,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG181 - LG184 Indonesia",1,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG361 - LG367 Syria",1,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG461 - LG462 Zimbabwe",1,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG541 - LG543 Madagascar",1,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG545 - LG547 Rwanda",1,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M1350 - M1353 Reduced orchestra",1,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT200 - MT208 Reed organ",1,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1120 - NB1133 Study and teaching",1,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC673 - NC677 Competitions",1,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE390 - NE395 Collected works",1,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE975 - NE975.4 Competitions",1,
        "N - Fine Arts|NE1 - NE3002 Print media|NE2685 - NE2685.8 Lumiprints",1,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH531 - PH539 Ludic",1,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages|PL4471 - PL4471.5 Nicobarese",1,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM9001 - PM9021 Secret languages",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7420 - PT7438 Folk literature",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7500 - PT7511 Individual authors or works|PT7500 - PT7501 16th-18th centuries",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7500 - PT7511 Individual authors or works|PT7510 - PT7511 19th-20th centuries",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7581 - PT7599 Faroese literature|PT7581 - PT7592 Literary history and criticism",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7581 - PT7599 Faroese literature|PT7593 - PT7596.5 Collections",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT8205 - PT8260 Provincial, local, foreign",1,
        "Q - Science|QS1 - QS681 Human Anatomy|QS604 - QS681 Embryology",1,
        "Q - Science|QT1 - QT275 Physiology",1,
        "Q - Science|QT1 - QT275 Physiology|QT1 - QT33.1 Reference Works. General Works",1,
        "Q - Science|QU1 - QU500 Biochemistry",1,
        "Q - Science|QU1 - QU500 Biochemistry|QU145 - QU220 Vitamins",1,
        "Q - Science|QW1 - QW949 Microbiology. Immunology|QW1 - QW300 Microbiology",1,
        "Q - Science|QW1 - QW949 Microbiology. Immunology|QW1 - QW300 Microbiology|QW55 - QW85 Environmental Microbiology",1,
        "Q - Science|QW1 - QW949 Microbiology. Immunology|QW501 - QW949 Immunology",1,
        "Q - Science|QW1 - QW949 Microbiology. Immunology|QW501 - QW949 Immunology|QW800 - QW949 Immunotherapy and Hypersensitivity",1,
        "Q - Science|QZ1 - QZ380 Pathology|QZ1 - QZ39 Reference Works. General Works",1,
        "Q - Science|QZ1 - QZ380 Pathology|QZ40 - QZ109 Pathogenesis. Etiology",1,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S107 - S109 Economic botany",1,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S113.2 - S118.46 Seeds. Seed technology",1,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S589.8 - S589.87 Plant growing media. Potting soils",1,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB406.7 - SB406.83 Plant propagation",1,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF170 - SF180 Working animals",1,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF911 - SF914.4 Veterinary surgery|SF914.3 - SF914.4 Veterinary traumatology. Veterinary emergencies",1,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH334.5 - SH334.7 Fishery technology",1,
        "S - Agriculture|SK1 - SK663 Hunting|SK281 - SK293 Special methods and types of hunting (including bolos, game calling, tracking, trapping, dressing)|SK291 - SK292 Coursing",1,
        "S - Agriculture|SK1 - SK663 Hunting|SK37 - SK39.5 Shooting",1,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA197 - TA198 Engineering meteorology",1,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD940 - TD949 Low temperature sanitary engineering",1,
        "T - Technology.|TH1 - TH9745 Building construction|TH8001 - TH8581 Decoration and decorative furnishings",1,
        "T - Technology.|TX1 - TX1110 Home economics.|TX1100 - TX1105 Mobile home living",1,
        "U - Military science (General)|UD1 - UD495 Infantry|UD490 - UD495 Airmobile operations",1,
        "U - Military science (General)|UF1 - UF910 Artillery|UF450 - UF455 Seacoast artillery",1,
        "U - Military science (General)|UF1 - UF910 Artillery|UF470 - UF475 Howitzer artillery. Mortar batteries",1,
        "V - Naval science|VB15 - VB345 Naval administration|VB307 - VB309 Warrant officers",1,
        "V - Naval science|VC10 - VC580 Naval maintenance|VC20 - VC258 Organization of service",1,
        "V - Naval science|VC10 - VC580 Naval maintenance|VC412 - VC425 Navy yards and stations. Shore facilities",1,
        "V - Naval science|VD7 - VD430 Naval seamen|VD160 - VD302 Drill regulations",1,
        "V - Naval science|VD7 - VD430 Naval seamen|VD360 - VD390 Small arms",1,
        "V - Naval science|VE7 - VE500 Marines|VE160 - VE302 Drill regulations",1,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering|VM165 - VM276 Study and teaching",1,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering|VM295 - VM296 Contracts and specifications",1,
        "W - Health Sciences|W1 - W925 Health Professions|W601 - W925 Forensic Sciences",1,
        "W - Health Sciences|W1 - W925 Health Professions|W601 - W925 Forensic Sciences|W775 - W867 Medicolegal Examination",1,
        "W - Health Sciences|W1 - W925 Health Professions|W74 - W80 Medical Economics",1,
        "W - Health Sciences|WA1 - WA950 Public Health",1,
        "W - Health Sciences|WA1 - WA950 Public Health|WA108 - WA245 Preventive Medicine",1,
        "W - Health Sciences|WB1 - WB962 Practice of Medicine|WB300 - WB962 Therapeutics|WB700 - WB760 Medical Climatology",1,
        "W - Health Sciences|WB1 - WB962 Practice of Medicine|WB300 - WB962 Therapeutics|WB880 - WB962 Complementary and Alternative Therapies",1,
        "W - Health Sciences|WH1 - WH700 Hemic and Lymphatic Systems",1,
        "W - Health Sciences|WH1 - WH700 Hemic and Lymphatic Systems|WH120 - WH540 Hematologic Diseases. Immunologic Factors. Blood Banks",1,
        "W - Health Sciences|WK1 - WK920 Endocrine System|WK1 - WK148 Reference Works. General Works",1,
        "W - Health Sciences|WK1 - WK920 Endocrine System|WK800 - WK885 Islets of Langerhans",1,
        "W - Health Sciences|WM1 - WM611 Psychiatry",1,
        "W - Health Sciences|WM1 - WM611 Psychiatry|WM400 - WM460.7 Therapies",1,
        "W - Health Sciences|WS1 - WS463 Pediatrics",1,
        "W - Health Sciences|WW1 - WW722.1 Ophthalmology|WW202 - WW290 Eye Structures",1,
        "W - Health Sciences|WY1 - WY300 Nursing|WY1 - WY49 Reference Works",1,
        "W - Health Sciences|WY1 - WY300 Nursing|WY150 - WY164 Nursing Techniques in Special Fields of Medicine",1,
        "W - Health Sciences|WZ1 - WZ350 History of Medicine|WZ1 - WZ40 Reference Works. General Works",1,
        "W - Health Sciences|WZ1 - WZ350 History of Medicine|WZ100 - WZ150 Biography",1],
      "language_f":[
        "English",5370512,
        "French",303671,
        "German",301869,
        "Spanish",290479,
        "Russian",183226,
        "Chinese",117537,
        "Italian",109867,
        "Latin",71053,
        "Portuguese",37427,
        "Czech",25985,
        "Arabic",25065],
      "date_cataloged_dt":[
        "2004-10-01T04:00:00Z",3319845,
        "2011-11-13T05:00:00Z",76005,
        "2017-11-01T04:00:00Z",74639,
        "2002-01-01T05:00:00Z",48156,
        "2017-10-31T04:00:00Z",47403,
        "2017-10-30T04:00:00Z",33733,
        "2016-05-26T04:00:00Z",32739,
        "2011-05-24T04:00:00Z",30316,
        "2019-04-08T04:00:00Z",25560,
        "2011-03-16T04:00:00Z",24969,
        "2010-04-02T04:00:00Z",24105]},
    "facet_ranges":{},
    "facet_intervals":{},
    "facet_heatmaps":{}},
  "stats":{
    "stats_fields":{
      "publication_year_isort":{
        "min":500.0,
        "max":2021.0,
        "count":6866225,
        "missing":176970,
        "sum":1.3425206172E10,
        "sumOfSquares":2.6298421506718E13,
        "mean":1955.2528750514293,
        "stddev":84.26007206982295}}}}

    http_version: 
  recorded_at: Fri, 25 Oct 2019 19:32:07 GMT
recorded_with: VCR 5.0.0
