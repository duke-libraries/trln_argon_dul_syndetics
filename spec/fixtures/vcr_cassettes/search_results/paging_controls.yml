---
http_interactions:
- request:
    method: get
    uri: https://query.discovery.trln.org/trlnbib/select?f.author_facet_f.facet.limit=11&f.available_f.facet.limit=11&f.date_cataloged_dt.facet.limit=11&f.language_f.facet.limit=11&f.lcc_callnum_classification_f.facet.limit=4501&f.location_hierarchy_f.facet.limit=201&f.location_hierarchy_f.facet.sort=count&f.physical_media_f.facet.limit=11&f.resource_type_f.facet.limit=11&f.subject_chronological_f.facet.limit=11&f.subject_genre_f.facet.limit=11&f.subject_geographic_f.facet.limit=11&f.subject_topical_f.facet.limit=11&facet=true&facet.field=date_cataloged_dt&facet.query=date_cataloged_dt:%5BNOW-3MONTH/DAY%20TO%20NOW%5D&fq=institution_f:unc&rows=20&sort=score%20desc,%20publication_year_isort%20desc,%20title_sort_ssort_single%20asc&stats=true&stats.field=publication_year_isort&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 25 Oct 2019 20:00:25 GMT
      Content-Type:
      - application/json;charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - nginx/1.16.1
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {
  "responseHeader":{
    "zkConnected":true,
    "status":0,
    "QTime":3102,
    "params":{
      "f.lcc_callnum_classification_f.facet.limit":"4501",
      "facet.field":["access_type_f",
        "available_f",
        "{!ex=rollup}location_hierarchy_f",
        "resource_type_f",
        "lcc_callnum_classification_f",
        "language_f",
        "date_cataloged_dt"],
      "f.available_f.facet.limit":"11",
      "f.date_cataloged_dt.facet.limit":"11",
      "f.location_hierarchy_f.facet.sort":"count",
      "f.subject_chronological_f.facet.limit":"11",
      "f.subject_genre_f.facet.limit":"11",
      "fq":"institution_f:unc",
      "sort":"score desc, publication_year_isort desc, title_sort_ssort_single asc",
      "rows":"20",
      "f.subject_geographic_f.facet.limit":"11",
      "facet.query":["date_cataloged_dt:[NOW-7DAY/DAY TO NOW]",
        "date_cataloged_dt:[NOW-1MONTH/DAY TO NOW]",
        "date_cataloged_dt:[NOW-3MONTH/DAY TO NOW]"],
      "f.language_f.facet.limit":"11",
      "f.location_hierarchy_f.facet.limit":"201",
      "stats":"true",
      "f.physical_media_f.facet.limit":"11",
      "f.author_facet_f.facet.limit":"11",
      "f.resource_type_f.facet.limit":"11",
      "f.subject_topical_f.facet.limit":"11",
      "facet":"true",
      "wt":"json",
      "stats.field":"publication_year_isort"}},
  "response":{"numFound":7043201,"start":0,"docs":[
      {
        "id":"UNCb8204204",
        "items_a":["{\"item_id\":\"i10853267\",\"loc_b\":\"mmdd\",\"loc_n\":\"mmdd\",\"status\":\"Available\",\"call_no\":\"CD-28,555\",\"cn_scheme\":\"ALPHANUM\"}"],
        "author_suggest":["Stockhausen, Karlheinz, 1928-2007",
          "Lustgarten, Raul",
          "Stump-Linshalm, Petra",
          "Tkatchouk, Anna",
          "Nickel, Hans, 1958-",
          "Gauwerky, Friedrich",
          "Stockhausen, Karlheinz, 1928-2007."],
        "names_a":["{\"name\":\"Stockhausen, Karlheinz, 1928-2007\"}",
          "{\"name\":\"Lustgarten, Raul\",\"rel\":\"instrumentalist\"}",
          "{\"name\":\"Stump-Linshalm, Petra\",\"rel\":\"instrumentalist\"}",
          "{\"name\":\"Tkatchouk, Anna\",\"rel\":\"instrumentalist\"}",
          "{\"name\":\"Nickel, Hans, 1958-\",\"rel\":\"instrumentalist\"}",
          "{\"name\":\"Gauwerky, Friedrich\",\"rel\":\"instrumentalist\"}"],
        "owner_a":["unc"],
        "misc_id_a":["Issue Number: 102 (Stockhausen Verlag)",
          "Issue Number: CD102 (Stockhausen Verlag)"],
        "barcodes_a":["00049257150"],
        "language_a":["German",
          "English"],
        "local_id":"b8204204",
        "note_toc_a":["In Freundschaft (für Violine) (15:18) -- In Freundschaft (für Bassklarinette (16:29) -- In Freundschaft (für Viola) (15:51) -- In Freundschaft (für Tuba) (15:51) -- In Freundschaft (für Violoncello (15:04)."],
        "available_a":["Available"],
        "lang_code_a":["zxx"],
        "publisher_a":["Stockhausen Verlag"],
        "rollup_id":"OCLC881480522",
        "title_suggest":["In Freundschaft",
          "Works. 1991"],
        "title_main":"In Freundschaft",
        "title_sort_ssort_single":"in freundschaft",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"881480522",
        "series_work_a":["{\"author\":\"Stockhausen, Karlheinz, 1928-2007.\",\"title\":[\"Works.\",\"1991\"],\"details\":\"102.\"}"],
        "creator_main_a":["Stockhausen, Karlheinz, 1928-2007"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Kürten : Stockhausen Verlag, [2014]\"}"],
        "note_general_a":["Includes versions for violin, bass clarinet, viola, tuba, and cello.",
          "Compact disc.",
          "Booklet with program notes in German and English (20 pages : color illustrations) inserted in container.",
          "Recorded on violin Dec. 14, 2013, on bass clarinet May 4, 2013, on viola March 30, 2014, on cello March 17, 2012, and on tuba March 24, 2012."],
        "resource_type_a":["Music recording"],
        "subject_genre_a":["Violin",
          "Bass clarinet",
          "Viola",
          "Tuba",
          "Cello",
          "Art music"],
        "date_cataloged":"2015-09-02T04:00:00Z",
        "genre_headings_a":["Violin",
          "Bass clarinet",
          "Viola",
          "Tuba",
          "Cello",
          "Art music"],
        "subject_suggest":["Violin",
          "Bass clarinet",
          "Viola",
          "Tuba",
          "Cello",
          "Art music",
          "Violin music",
          "Bass clarinet music",
          "Viola music",
          "Tuba music",
          "Cello music"],
        "physical_media_a":["CD"],
        "subject_topical_a":["Violin music",
          "Bass clarinet music",
          "Viola music",
          "Tuba music",
          "Cello music"],
        "publication_year_sort":"2021",
        "subject_headings_a":["Violin music",
          "Bass clarinet music",
          "Viola music",
          "Tuba music",
          "Cello music"],
        "location_hierarchy_a":["unc",
          "unc:uncmusy"],
        "record_data_source_a":["ILSMARC"],
        "origin_place_search_a":["Kürten",
          "Germany"],
        "physical_description_a":["1 audio disc (78:30) : digital ; 4 3/4 in."],
        "note_performer_credits_a":["Raul Lustgarten, violin ; Petra Stump, bass clarinet ; Anna Tkatchouk, viola ; Friedrich Gauwerky, cello ; Hans Nickel, tuba."],
        "statement_of_responsibility_a":["Karlheinz Stockhausen."]},
      {
        "id":"UNCb7461492",
        "url_a":["{\"href\":\"http://libproxy.lib.unc.edu/login?url=https://www.aspresolver.com/aspresolver.asp?CLMU;388897\",\"type\":\"fulltext\",\"text\":\"Streaming audio available via the UNC-Chapel Hill Libraries\"}"],
        "author_suggest":["Cage, John",
          "Tan, Margaret Leng"],
        "names_a":["{\"name\":\"Cage, John\"}",
          "{\"name\":\"Tan, Margaret Leng\",\"rel\":\"instrumentalist\"}"],
        "owner_a":["unc"],
        "local_id":"b7461492",
        "note_toc_a":["Chess Pieces ; Sonatas and interludes (for prepared piano) / Cage -- Chess Serenade / Rieti."],
        "available_a":["Available"],
        "lang_code_a":["zxx"],
        "publisher_a":["Mode Records"],
        "rollup_id":"OCLC854881430",
        "this_work_a":["{\"author\":\"Cage, John.\",\"title\":[\"Sonatas and interludes,\",\"piano\"]}"],
        "note_local_a":["Content provider: Alexander Street Press.",
          "Vendor-supplied catalog record."],
        "title_suggest":["Piano works. 7 : Chess pieces, sonatas & interludes"],
        "title_main":"Piano works. 7 : Chess pieces, sonatas & interludes",
        "title_sort_ssort_single":"piano works 7 chess pieces sonatas and interludes",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "oclc_number":"854881430",
        "creator_main_a":["Cage, John"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"[S.l.] : Mode Records, 2021 [A.K.A. 2012]\"}"],
        "note_general_a":["Previously released as a compact disc.",
          "Title from resource description page (viewed Feb. 7, 2013).",
          "Recorded in 2005."],
        "related_work_a":["{\"author\":\"Rieti, Vittorio, 1898-1994.\",\"title\":[\"Chess serenade.\"]}"],
        "host_item_work_a":["{\"title\":[\"Classical music library\",\"(online collection)\"]}"],
        "resource_type_a":["Music recording"],
        "subject_genre_a":["Sound recordings"],
        "date_cataloged":"2014-02-05T05:00:00Z",
        "genre_headings_a":["Sound recordings"],
        "subject_suggest":["Sound recordings",
          "Prepared piano music",
          "Suites (Piano)"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["ASP388897/CLMU"],
        "subject_topical_a":["Prepared piano music",
          "Suites (Piano)"],
        "publication_year_sort":"2021",
        "subject_headings_a":["Prepared piano music",
          "Suites (Piano)"],
        "record_data_source_a":["ILSMARC"],
        "physical_description_a":["1 online resource"],
        "note_performer_credits_a":["Margaret Leng Tan, piano, prepared piano."],
        "note_access_restrictions_a":["Access limited to UNC Chapel Hill-authenticated users. Unlimited simultaneous users"],
        "statement_of_responsibility_a":["Cage. Chess serenade / Rieti."]},
      {
        "id":"UNCb7468809",
        "upc_a":["UPC: 702397764120"],
        "items_a":["{\"item_id\":\"i10222765\",\"loc_b\":\"mmdd\",\"loc_n\":\"mmdd\",\"status\":\"Available\",\"call_no\":\"CD-27,108\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"notes\":[\"Special Collection material:  Use of audio or visual material may require production of listening or viewing copies before use.  Contact wilsonlibrary@unc.edu before visiting reading room for more information.\"],\"item_id\":\"i11502530\",\"loc_b\":\"wadb\",\"loc_n\":\"wadb\",\"status\":\"In-Library Use Only\",\"call_no\":\"CD-16549\",\"cn_scheme\":\"ALPHANUM\"}"],
        "author_suggest":["Frisell, Bill"],
        "names_a":["{\"name\":\"Frisell, Bill\",\"rel\":\"composer, instrumentalist\"}"],
        "owner_a":["unc"],
        "misc_id_a":["Issue Number: TZ 7641 (Tzadik Records)",
          "Issue Number: CD7641 (Tzadik Records)",
          "Issue Number: TZA7641 (Tzadik Records)"],
        "barcodes_a":["00047206316"],
        "local_id":"b7468809",
        "note_toc_a":["Bagatelle (3:11) -- John Goldfarb, please come home! (8:51) -- Babbitt (3:38) -- Silent comedy (2:02) -- Lake Superior (4:34) -- Proof (3:55) -- The road (5:20) -- Leprechaun (3:41) -- Ice cave (6:38) -- Big fish (5:26) -- Lullaby (3:14)."],
        "available_a":["Available"],
        "lang_code_a":["zxx"],
        "publisher_a":["Tzadik Records"],
        "rollup_id":"OCLC827562464",
        "title_suggest":["Silent comedy"],
        "title_main":"Silent comedy",
        "title_sort_ssort_single":"silent comedy",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"827562464",
        "creator_main_a":["Frisell, Bill, composer, instrumentalist"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"New York, NY : Tzadik Records, ℗2013.\"}"],
        "note_general_a":["Special Collection material:  Use of audio or visual material may require production of listening or viewing copies before use.  Contact wilsonlibrary@unc.edu before visiting reading room for more information.",
          "Jazz improvisation.",
          "All music by Bill Frisell; \"improvised in real time with no overdubbing\"--Insert.",
          "Compact disc.",
          "Recorded and mixed Dec. 2, 2012 at EastSide Sound, NYC."],
        "resource_type_a":["Music recording"],
        "date_cataloged":"2014-02-19T05:00:00Z",
        "physical_media_a":["CD"],
        "subject_topical_a":["Electric guitar music (Jazz)",
          "Avant-garde (Music)",
          "Jazz",
          "Improvisation (Music)"],
        "publication_year_sort":"2021",
        "subject_headings_a":["2011 - 2020",
          "Electric guitar music (Jazz)",
          "Avant-garde (Music)",
          "Jazz -- 2011-2020",
          "Improvisation (Music)",
          "Jazz"],
        "subject_suggest":["2011 - 2020",
          "Electric guitar music (Jazz)",
          "Avant-garde (Music)",
          "Jazz -- 2011-2020",
          "Improvisation (Music)",
          "Jazz"],
        "location_hierarchy_a":["unc",
          "unc:uncmusy",
          "unc:uncsouz",
          "unc:uncwil",
          "unc:uncwil:uncwilsfc"],
        "record_data_source_a":["ILSMARC"],
        "origin_place_search_a":["New York, NY",
          "New York (State)",
          "United States"],
        "physical_description_a":["1 audio disc (50 min.) : digital ; 4 3/4 in. + 1 leaflet"],
        "subject_chronological_a":["2011 - 2020",
          "2011-2020"],
        "note_performer_credits_a":["Bill Frisell, electric guitar."],
        "note_production_credits_a":["Produced by John Zorn."],
        "statement_of_responsibility_a":["Bill Frisell."],
        "physical_description_details_a":["Dimensions: 4 3/4 in.",
          "Recording type: digital",
          "File type: audio file",
          "File format: CD audio"]},
      {
        "id":"UNCb7441548",
        "donor_a":["Purchased using funds from the Lucile Turner Music Library Fund."],
        "items_a":["{\"item_id\":\"i10111930\",\"loc_b\":\"mmda\",\"loc_n\":\"mmda\",\"status\":\"In-Library Use Only\",\"call_no\":\"M3.1.K45 O7 2012\",\"cn_scheme\":\"LC\"}"],
        "author_suggest":["Keiser, Reinhard, 1674-1739",
          "Drauschke, Hansjörg",
          "Ihlenfeldt, Thomas",
          "Keiser, Reinhard, 1674-1739.",
          "Keiser, Reinhard, 1674-1739.",
          "Keiser, Reinhard, 1674-1739.",
          "Keiser, Reinhard, 1674-1739."],
        "names_a":["{\"name\":\"Keiser, Reinhard, 1674-1739\",\"rel\":\"composer\"}",
          "{\"name\":\"Drauschke, Hansjörg\",\"rel\":\"editor\"}",
          "{\"name\":\"Ihlenfeldt, Thomas\",\"rel\":\"editor\"}"],
        "owner_a":["unc"],
        "misc_id_a":["International Standard Music Number: 9790700317935",
          "Plate Number: om157/1 (Ortus Musikverlag)"],
        "barcodes_a":["00044944436"],
        "language_a":["German",
          "Italian",
          "English"],
        "local_id":"b7441548",
        "note_toc_a":["Keisers Gemüths-Ergötzung = R. Keiser's amusements of the mind -- Divertimenti serenissimi = Entertainments for Her Highness -- Musicalische Land-Lust = Music for the countryside -- Kayserliche Friedens-Post nebst verschiedenen moralischen Sing-Gedichten und Arien = Imperial message of peace, along with various moral cantatas and arias -- Anhang."],
        "shelfkey":"lc:M..00031.K45.O7--2012",
        "available_a":["Available"],
        "lang_code_a":["ger"],
        "publisher_a":["Ortus Musikverlag"],
        "rollup_id":"OCLC829707625",
        "this_work_a":["{\"author\":\"Keiser, Reinhard, 1674-1739\",\"title\":[\"Vocal music.\",\"Selections\"]}"],
        "note_local_a":["Purchased using funds from the Lucile Turner Music Library Fund."],
        "title_suggest":["Weltliche Kantaten und Arien. Band I, Werke aus gedruckter Überlieferung",
          "Musik zwischen Elbe und Oder",
          "Gemüths-Ergötzung.",
          "Divertimenti serenissimi.",
          "Musicalische Land-Lust.",
          "Kayserliche Friedens-Post."],
        "title_main":"Weltliche Kantaten und Arien. Band I, Werke aus gedruckter Überlieferung",
        "title_sort_ssort_single":"weltliche kantaten und arien band i werke aus gedruckter uberlieferung",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"829707625",
        "series_work_a":["{\"title\":[\"Musik zwischen Elbe und Oder\"],\"details\":\"Bd. 30.\"}"],
        "creator_main_a":["Keiser, Reinhard, 1674-1739, composer"],
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"Beeskow : Ortus Musikverlag, [2012?]\"}"],
        "note_general_a":["With preface in German and English, critical notes in German.",
          "Staff notation.",
          "German or Italian words.",
          "Texts printed separately with English translation: pages xlvii-lxviii."],
        "included_work_a":["{\"label\":\"Contains\",\"author\":\"Keiser, Reinhard, 1674-1739.\",\"title\":[\"Gemüths-Ergötzung.\"]}",
          "{\"label\":\"Contains\",\"author\":\"Keiser, Reinhard, 1674-1739.\",\"title\":[\"Divertimenti serenissimi.\"]}",
          "{\"label\":\"Contains\",\"author\":\"Keiser, Reinhard, 1674-1739.\",\"title\":[\"Musicalische Land-Lust.\"]}",
          "{\"label\":\"Contains\",\"author\":\"Keiser, Reinhard, 1674-1739.\",\"title\":[\"Kayserliche Friedens-Post.\"]}"],
        "resource_type_a":["Music score"],
        "subject_genre_a":["Scores",
          "Songs"],
        "date_cataloged":"2013-09-16T04:00:00Z",
        "genre_headings_a":["Scores",
          "Songs"],
        "subject_suggest":["Scores",
          "Songs",
          "Vocal music -- Scores",
          "Cantatas, Secular -- Scores",
          "Incidental music -- Scores"],
        "physical_media_a":["Print"],
        "subject_topical_a":["Vocal music",
          "Cantatas, Secular",
          "Incidental music"],
        "imprint_multiple_a":["{\"type\":\"publication\",\"value\":\"Beeskow : Ortus Musikverlag, [2012?]\"}",
          "{\"type\":\"copyright\",\"value\":\"©2012\"}"],
        "publication_year_sort":"2021",
        "reverse_shelfkey":"lc:D}}ZZZWY}FVU}BS~~XZYX",
        "series_statement_a":["Musik zwischen Elbe und Oder ; Bd. 30"],
        "subject_headings_a":["Vocal music -- Scores",
          "Cantatas, Secular -- Scores",
          "Incidental music -- Scores"],
        "location_hierarchy_a":["unc",
          "unc:uncmusy"],
        "record_data_source_a":["ILSMARC"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["Beeskow",
          "Germany"],
        "physical_description_a":["1 score (lxviii, 160 pages) : illustrations ; 33 cm."],
        "lcc_callnum_classification_a":["M - Music",
          "M - Music|M1 - M5000 Music",
          "M - Music|M1 - M5000 Music|M3 - M3.3 Collected works of individual composers"],
        "statement_of_responsibility_a":["Reinhard Keiser ; herausgegeben von Hansjörg Drauschke und Thomas Ihlenfeldt."]},
      {
        "id":"UNCb5737093",
        "issn_primary_a":["1021-4054"],
        "items_a":["{\"item_id\":\"i7554229\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.1-9\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7569569\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.10-16\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7592370\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.17-27\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7554238\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.28-32\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7554242\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.33-41\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7569576\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.42-51\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7569577\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.52-61\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7569575\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.62-73\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7554247\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.74-85\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7554250\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.86-97\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7571711\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.98-107\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7571714\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.108-118\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7571712\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.119-124\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7571713\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.125-130\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7569571\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.131-136\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7569573\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.137-142\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7569574\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.143-152\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 92933460",
          "LCCN (canceled or invalid): sn 95017371"],
        "barcodes_a":["00031038074",
          "00031038733",
          "00031046742",
          "00031038109",
          "00031038083",
          "00031038788",
          "00031038797",
          "00031038779",
          "00031038092",
          "00031038118",
          "00031046181",
          "00031046216",
          "00031046190",
          "00031046207",
          "00031038742",
          "00031038751",
          "00031038760"],
        "holdings_a":["{\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"call_no\":\"HQ1735.2 .A48\",\"summary\":\"no.1-no.152\"}"],
        "language_a":["Persian"],
        "local_id":"b5737093",
        "shelfkey":"lc:HQ.17352.A48",
        "available_a":["Available"],
        "frequency_current_a":["Monthly"],
        "publisher_a":["s.n."],
        "rollup_id":"OCLC32658826",
        "title_suggest":["Zanān.",
          "."],
        "title_main":". / Zanān.",
        "title_sort_ssort_single":" zanan",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"32658826",
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Tihrān : [s.n.\"}"],
        "note_general_a":["Description based on: Sāl-i 1., shumārah-i 3 (Mah 1371 [Mārs/Āvrīl 1992]; title from cover."],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals"],
        "title_variant_a":["Zanaan"],
        "date_cataloged":"2008-10-14T04:00:00Z",
        "genre_headings_a":["Periodicals"],
        "subject_suggest":["Periodicals",
          "Women -- Iran -- Periodicals",
          "Women -- Periodicals"],
        "physical_media_a":["Print"],
        "subject_topical_a":["Women"],
        "publication_year_sort":"2020",
        "reverse_shelfkey":"lc:I9}YSWUX}PVR",
        "subject_headings_a":["Women -- Iran -- Periodicals",
          "Women -- Periodicals"],
        "lc_call_nos_normed_a":["HQ.17352.A48"],
        "location_hierarchy_a":["unc",
          "unc:uncdavy"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["Iran"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["Tihrān",
          "Iran"],
        "physical_description_a":["volumes : illustrations ; 30 cm"],
        "lcc_callnum_classification_a":["H - Social sciences",
          "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women",
          "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1101 - HQ2030.7 Women. Feminism",
          "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1101 - HQ2030.7 Women. Feminism|HQ1451 - HQ1870.7 By region or country"]},
      {
        "id":"UNCb9054209",
        "url_a":["{\"href\":\"http://VB3LK7EB4T.search.serialssolutions.com/?V=1.0\\u0026L=VB3LK7EB4T\\u0026S=JCs\\u0026C=TC0001932552\\u0026T=marc\",\"type\":\"fulltext\",\"text\":\"Full text available via the UNC-Chapel Hill Libraries\",\"restricted\":\"false\"}"],
        "issn_linking_a":["2250-4591"],
        "issn_primary_a":["2346-9986"],
        "author_suggest":["Universidad Nacional del Litoral"],
        "names_a":["{\"name\":\"Universidad Nacional del Litoral\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 2018268502"],
        "language_a":["Multiple languages",
          "Portuguese",
          "Spanish"],
        "local_id":"b9054209",
        "available_a":["Available"],
        "frequency_current_a":["Annual"],
        "lang_code_a":["mul"],
        "publisher_a":["Universidad Nacional del Litoral"],
        "rollup_id":"OCLC972080263",
        "this_work_a":["{\"title\":[\"+E (Online)\"]}"],
        "title_suggest":["+E."],
        "title_main":"+E.",
        "title_sort_ssort_single":"+e",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "oclc_number":"972080263",
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Santa Fe, Argentina: Universidad Nacional del Litoral, 2011-\"}"],
        "note_general_a":["Articles in Spanish or Poruguese; abstracts in language of article from 2011-2013 and in Spanish and Portuguese beginning with 2014 issue."],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals",
          "Electronic journals"],
        "title_variant_a":["Revista de Extension Universitaria"],
        "date_cataloged":"2018-03-09T05:00:00Z",
        "genre_headings_a":["Periodicals",
          "Electronic journals"],
        "subject_suggest":["Periodicals",
          "Electronic journals",
          "University extension -- Iberian Peninsula -- Periodicals",
          "University extension -- Latin America -- Periodicals",
          "Universities and colleges -- Research -- Periodicals",
          "Universities and colleges -- Research",
          "University extension",
          "Europe -- Iberian Peninsula",
          "Latin America"],
        "note_numbering_a":["All issues are organized around a specific theme."],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["SSJ0001932552"],
        "subject_topical_a":["University extension",
          "Universities and colleges",
          "Research"],
        "publication_year_sort":"2020",
        "subject_headings_a":["University extension -- Iberian Peninsula -- Periodicals",
          "University extension -- Latin America -- Periodicals",
          "Universities and colleges -- Research -- Periodicals",
          "Universities and colleges -- Research",
          "University extension",
          "Europe -- Iberian Peninsula",
          "Latin America"],
        "note_serial_dates_a":["Began with: Número 1 (enero/noviembre 2011)"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["Iberian Peninsula",
          "Latin America",
          "Europe"]},
      {
        "id":"UNCb1381401",
        "issn_primary_a":["0258-8374"],
        "items_a":["{\"item_id\":\"i1899973\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.1(1962)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899974\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.2(1963)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899975\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.3(1963)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899976\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.4(1964)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899977\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.5(1964)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899978\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.6(1965)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899979\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.7(1965)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899980\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.8(1966)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899981\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.9(1966)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899982\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.10(1967)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899983\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.11(1967)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899984\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.12(1968)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899985\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.13(1968)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899986\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.14(1969)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899987\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.15(1969)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899988\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.16(1970)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899989\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.17:no.98-103(1970)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10096643\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.18:no.104-v.19:no.115(1971)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899990\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.20:no.116-121(1972)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10096645\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.21:no.122-127(1972)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10096646\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.22:no.128-133(1973)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10096647\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.23:no.134-139(1973)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899991\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.24:no.140-145(1974)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10096648\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.25:no.146-151(1974)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899992\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.26:no.152-157(1975)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899993\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.27:no.158-163(1975)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10096652\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.28:no.164-169(1976)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10096653\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.29:no.170-175(1976)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10096654\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.30:no.176-181(1977)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899994\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.31:no.182-187(1977)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899995\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.32:no.188-193(1978)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899996\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.33:no.194-199(1978)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899997\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.34:no.200-205(1979)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899998\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.35:no.206-211(1979)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899999\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.36:no.212-217(1980)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900000\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.37:no.218-223(1980)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900001\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.38:no.224-229(1981)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900002\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.39:no.230-235(1981)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900003\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.40:no.236-241(1982)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900004\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.41:no.242-247(1982)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900005\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.42:no.248-253(1983)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900006\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.43:no.254-256(1983)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900007\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.44:no.260-265(1984)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900008\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.45:no.266-271(1984)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900009\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.46:no.272-277(1984)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900010\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.47:no.278-280,283(1985)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900011\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.48:no.284,286-289(1986)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900012\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.49:no.291-295(1986)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900013\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.50:no.296-301(1987)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900014\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.51:no.302-307(1989)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900015\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.52:no.308-313(1988)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900016\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.53:no.314-319(1988)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900017\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.54:no.320-325(1989)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900018\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.55:no.326-331(1989)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900019\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.56:no.332-337(1990)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900020\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.57:no.338-343(1990)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900021\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.58:no.344-349(1991)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900022\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.59:no.350-355(1991)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900023\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.60:no.356-361(1992)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900024\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.61:no.362-367(1992)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900025\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.62:no.368-373(1993)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900026\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.63:no.374-379(1993)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900027\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.64:no.380-385(1994)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900028\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.65:no.386-391(1994)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900029\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.66:no.392-397(1995)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900030\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.67:no.398-403(1995)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900031\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.68:no.404-409(1996)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900032\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.69:no.410-415(1996)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900033\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.70:no.416-420,422-427(1997)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900034\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.70:no.421(1997)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900035\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.72:no.428-433(1998)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900036\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.73:no.434-439(1998)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900037\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.74:no.440-445(1999)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900038\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.75:no.446-451(1999)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900039\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.76:no.452-457(2000)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900040\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.77:no.459-463(2000)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900041\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.78:no.464-465,467-469(2001)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10097051\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.78:no.466(2001)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900042\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.79:no.470-475(2001)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900043\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.80:no.477-478,480-481(2002)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900044\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.81:no.482-487(2002)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900045\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.82:no.488-493(2003)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900046\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.83:no.494-499(2003)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i6117470\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.84:no.500-505(2004)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i6137688\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.85:no.506-511(2004)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i6295114\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.86:no.512-517(2005)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i6792716\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.87:no.518-523(2005)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i6848935\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.88:no.524-529(2006)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i6848937\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.88:no.530-535(2006)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7043520\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.90:no.536-541(2007)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7521344\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.91:no.542-547(2007)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7682594\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.92:no.548-553(2008)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7957923\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.93:no.554-559(2008)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8011537\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.94 no.560-565(2009)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8224939\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.95:no.566-570(2009)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8858222\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.95:no.571(2009)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8854226\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.96:no.572-577(2010)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i9514827\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.97:no.578-583(2010)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i9515086\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.98:no.584-589(2011)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10332956\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.99:no.590(2011)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10332957\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.99:no.591(2011)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10332961\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.99:no.592(2011)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10202678\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.99:no.593(2011)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10202688\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.99:no.594(2011)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10202691\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.99:no.595(2011)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10202696\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.100:no.597(2012)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10332962\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.100:no.598(2012)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10332963\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.100:no.599(2012)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10332965\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.100:no.600(2012)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10202711\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.100:no.601(2012)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10369700\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.101:no.602(2012)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10369699\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.101:no.603(2012)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10325880\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.101:no.604(2012)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10325882\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.101:no.605(2012)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10325878\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.101:no.606(2012)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10202699\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.101:no.607(2012)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10369701\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.102:no.608(2013)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10202708\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.102:no.609(2013)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10379199\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.102:no.610(2013)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10379206\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.102:no.611(2013)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10379210\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.102:no.612(2013)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10380551\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.103:no.614(2013)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10379222\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.103:no.615(2013)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10220319\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.103:no.616(2013)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10380552\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.103:no.617(2013)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10379223\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.103:no.618(2013)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10325875\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.103:no.619(2013)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10911983\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.105:no.639(2015)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10911984\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.105:no.640(2015)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11317254\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.108:no.648(2016)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11317255\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.108:no.649(2016)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11317256\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.109:no.650(2016)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11268557\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.109:no.651(2016)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11268558\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.109:no.652(2016)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11266748\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.109:no.653(2016)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11317257\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.109:no.654(2016)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11317258\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.109:no.655(2016)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11387371\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.110:no.656(2017)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11387374\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.110:no.657(2017)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11717455\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.112:no.668(2018)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11717450\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.112:no.669(2018)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11839987\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.112:no.670(2018)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11839988\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.112:no.671(2018)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11839989\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.112:no.672(2018)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11839990\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.112:no.673(2018)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11925155\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.113:no.674(2018)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11925156\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.113:no.675(2018)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11925157\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.113:no.676(2018)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11925158\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.113:no.677(2018)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11925159\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.113:no.678(2018)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i12118613\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.114:no.680(2019)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i12118614\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.114:no.681(2019)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i12118615\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.114:no.682(2019)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i12027129\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.114:no.683(2019)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i12027131\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.114:no.684(2019)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i12027126\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.114:no.685(2019)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i12095199\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.114:no.686(2019)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}"],
        "author_suggest":["Zhuan ji wen xue za zhi she"],
        "names_a":["{\"name\":\"Zhuan ji wen xue za zhi she\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: c  68003302",
          "LCCN (canceled or invalid): 88644044",
          "LCCN (canceled or invalid): sn 88022240"],
        "barcodes_a":["00046852912",
          "00046852921",
          "00046852930",
          "00046852949",
          "00046852958",
          "00046852967",
          "00046852976",
          "00046852985",
          "00046852994",
          "00046853001",
          "00046853010",
          "00046853029",
          "00046853038",
          "00046853047",
          "00046853056",
          "00046853065",
          "00046853074",
          "00046853083",
          "00046853092",
          "00046853109",
          "00046853118",
          "00046853127",
          "00046853136",
          "00046853145",
          "00046853154",
          "00046853163",
          "00046853172",
          "00046853181",
          "00046853190",
          "00046853207",
          "00046853216",
          "00046853225",
          "00046853234",
          "00046853243",
          "00046853252",
          "00046853261",
          "00046853270",
          "00046853289",
          "00046853298",
          "00046853305",
          "00046853314",
          "00046853323",
          "00046853332",
          "00046853341",
          "00046853350",
          "00046853369",
          "00046853378",
          "00046853387",
          "00046853396",
          "00046853403",
          "00046853412",
          "00046853421",
          "00046853430",
          "00046853449",
          "00046853458",
          "00046853467",
          "00046853476",
          "00046853485",
          "00046853494",
          "00046853500",
          "00046853519",
          "00046853528",
          "00046853537",
          "00046853546",
          "00046853555",
          "00046853564",
          "00046853573",
          "00046853582",
          "00046853591",
          "00046853608",
          "00046853617",
          "00046853626",
          "00046853635",
          "00046853644",
          "00046853653",
          "00046853662",
          "00046853671",
          "00047055210",
          "00046853680",
          "00046853699",
          "00046853706",
          "00046853715",
          "00046853724",
          "00046853733",
          "00046853742",
          "00046853751",
          "00046853760",
          "00046853779",
          "00046853788",
          "00047057334",
          "00047057343",
          "00047057352",
          "00035094922",
          "00036132586",
          "00037250973",
          "00037945787",
          "00037945581",
          "00022122695",
          "00022122686",
          "00047915568",
          "00047915577",
          "00047915586",
          "00046929635",
          "00046929644",
          "00046929653",
          "00046929662",
          "00047915595",
          "00047915602",
          "00047915611",
          "00046929699",
          "00047914284",
          "00047914293",
          "00047915014",
          "00047915023",
          "00047915005",
          "00046929671",
          "00047914275",
          "00046929680",
          "00048095489",
          "00048095498",
          "00048095504",
          "00048095728",
          "00048095513",
          "00045786194",
          "00048095737",
          "00048095522",
          "00047914998",
          "00049392682",
          "00049392566",
          "00051559124",
          "00051559008",
          "00051558884",
          "00050319314",
          "00050776891",
          "00050319430",
          "00051559375",
          "00051559259",
          "00050405729",
          "00050405710",
          "00053377807",
          "00053377790",
          "00053724969",
          "00053724978",
          "00053724852",
          "00053724736",
          "00053819563",
          "00053816575",
          "00053816584",
          "00053816593",
          "00053816600",
          "00054262643",
          "00054265524",
          "00054265533",
          "00053948987",
          "00053949030",
          "00053948978",
          "00054262518"],
        "holdings_a":["{\"holdings_id\":\"c2786418\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"call_no\":\"CT203.C5 C48\",\"summary\":\"v.1:no.1(1962)- TO DATE, Some issues missing\"}"],
        "language_a":["Chinese"],
        "local_id":"b1381401",
        "shelfkey":"lc:CT.0203.C5.C48",
        "available_a":["Available"],
        "frequency_current_a":["Monthly"],
        "publisher_a":["Zhuan ji wen xue za zhi she"],
        "publisher_vern":["傳記文學雜誌社"],
        "rollup_id":"OCLC2259142",
        "title_suggest":["Zhuan ji wen xue = Biographical literature.",
          "0 傳記文學 = Biographical literature."],
        "title_main_vern":["0 傳記文學 = Biographical literature."],
        "title_main":"0 傳記文學 = Biographical literature. / Zhuan ji wen xue = Biographical literature.",
        "title_sort_ssort_single":"0 傳記文學 = biographical literature zhuan ji wen xue biographical literature",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number_old_a":["1554550",
          "46466148"],
        "oclc_number":"2259142",
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Taibei Shi : Zhuan ji wen xue za zhi she, Minguo 51- [1962]-\"}",
          "{\"type\":\"imprint\",\"value\":\"臺北市 : 傳記文學雜誌社, 民國51- [1962]-\"}"],
        "note_general_a":["Title from cover."],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals",
          "Biography"],
        "date_cataloged":"2017-02-07T05:00:00Z",
        "genre_headings_a":["Periodicals",
          "Biography"],
        "subject_suggest":["Periodicals",
          "Biography",
          "1900-1999",
          "Biography -- Periodicals",
          "Biography as a literary form -- Periodicals",
          "Chinese literature -- 20th century -- Periodicals",
          "Biography",
          "Biography as a literary form",
          "Chinese literature",
          "China -- Biography -- Periodicals",
          "China"],
        "physical_media_a":["Print"],
        "subject_topical_a":["Biography",
          "Biography as a literary form",
          "Chinese literature"],
        "imprint_multiple_a":["{\"type\":\"imprint\",\"value\":\"Taibei Shi : Zhuan ji wen xue za zhi she, Minguo 51- [1962]-\"}",
          "{\"type\":\"imprint\",\"value\":\"臺北市 : 傳記文學雜誌社, 民國51- [1962]-\"}"],
        "publication_year_sort":"2020",
        "reverse_shelfkey":"lc:N6}ZXZW}NU}NVR",
        "subject_headings_a":["1900-1999",
          "Biography -- Periodicals",
          "Biography as a literary form -- Periodicals",
          "Chinese literature -- 20th century -- Periodicals",
          "Biography",
          "Biography as a literary form",
          "Chinese literature",
          "China -- Biography -- Periodicals",
          "China"],
        "note_described_by_a":["Indexes: Vol. 1, no. 1 (June 1962)-v. 44, no. 6 (June 1984). 1 v.; v. 1 (June 1962)-50 (June 1987). 1 v."],
        "note_serial_dates_a":["Di 1 juan di 1 qi (Minguo 51 nian 6 yue [June 1962])-",
          "第1卷第1期(民國51年6月 [June 1962])-"],
        "lc_call_nos_normed_a":["CT.0203.C5.C48"],
        "location_hierarchy_a":["unc",
          "unc:uncdavy"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["China"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["Taibei Shi",
          "China (Republic : 1949- )"],
        "origin_place_search_vern":["臺北市"],
        "physical_description_a":["volumes : illustrations ; 26 cm"],
        "subject_chronological_a":["1900-1999",
          "20th century"],
        "lcc_callnum_classification_a":["C - Auxiliary Sciences of History",
          "C - Auxiliary Sciences of History|CT21 - CT9999 Biography",
          "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT93 - CT206 General collective biography"]},
      {
        "id":"UNCb7636543",
        "url_a":["{\"href\":\"http://VB3LK7EB4T.search.serialssolutions.com/?V=1.0\\u0026L=VB3LK7EB4T\\u0026S=JCs\\u0026C=TC0001034081\\u0026T=marc\",\"type\":\"fulltext\",\"text\":\"Full text available via the UNC-Chapel Hill Libraries\",\"restricted\":\"false\"}"],
        "author_suggest":["Dow Jones Reuters Business Interactive LLC"],
        "names_a":["{\"name\":\"Dow Jones Reuters Business Interactive LLC\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: sn 95021992",
          "CODEN designation: REEAE3"],
        "language_a":["French"],
        "local_id":"b7636543",
        "available_a":["Available"],
        "frequency_current_a":["Eight no. a year"],
        "lang_code_a":["fre"],
        "publisher_a":["Groupe Tests"],
        "rollup_id":"OCLC32126299",
        "this_work_a":["{\"title\":[\"01 réseaux (Online)\"]}"],
        "title_suggest":["01 réseaux."],
        "title_main":"01 réseaux.",
        "title_sort_ssort_single":"01 reseaux",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "oclc_number":"32126299",
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Paris : Groupe Tests, 1994-\"}"],
        "note_general_a":["Title from cover."],
        "related_work_a":["{\"title\":[\"01 informatique.\"]}"],
        "supplement_to_work_a":["{\"title\":[\"01 informatique\"],\"issn\":\"0398-1169\"}"],
        "earlier_work_a":["{\"label\":\"Continues\",\"title\":[\"Télécoms magazine\"]}"],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals",
          "Electronic journals"],
        "date_cataloged":"2019-01-08T05:00:00Z",
        "genre_headings_a":["Periodicals",
          "Electronic journals"],
        "subject_suggest":["Periodicals",
          "Electronic journals",
          "Computer networks -- Periodicals",
          "Telecommunication -- Periodicals",
          "Computer networks",
          "Telecommunication"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["SSJ0001034081"],
        "subject_topical_a":["Computer networks",
          "Telecommunication"],
        "publication_year_sort":"2020",
        "subject_headings_a":["Computer networks -- Periodicals",
          "Telecommunication -- Periodicals",
          "Computer networks",
          "Telecommunication"],
        "note_serial_dates_a":["No 1 (mars 1994)-"],
        "record_data_source_a":["ILSMARC"]},
      {
        "id":"UNCb7911442",
        "url_a":["{\"href\":\"http://VB3LK7EB4T.search.serialssolutions.com/?V=1.0\\u0026L=VB3LK7EB4T\\u0026S=JCs\\u0026C=TC0001325210\\u0026T=marc\",\"type\":\"fulltext\",\"text\":\"Full text available via the UNC-Chapel Hill Libraries\",\"restricted\":\"false\"}"],
        "issn_linking_a":["2296-0597"],
        "issn_primary_a":["2296-0597"],
        "author_suggest":["Universitätsbibliothek Basel"],
        "names_a":["{\"name\":\"Universitätsbibliothek Basel\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 2014256005"],
        "language_a":["German"],
        "local_id":"b7911442",
        "available_a":["Available"],
        "frequency_current_a":["Semiannual"],
        "lang_code_a":["ger"],
        "publisher_a":["Universitätsbibliothek Basel"],
        "rollup_id":"OCLC891466631",
        "this_work_a":["{\"title\":[\"027.7 (Online)\"]}"],
        "title_suggest":["027.7 : Zeitschrift für Bibliothekskultur."],
        "title_main":"027.7 : Zeitschrift für Bibliothekskultur.",
        "title_sort_ssort_single":"0277 zeitschrift fur bibliothekskultur",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "oclc_number":"891466631",
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Basel, Switzerland : Universitätsbibliothek Basel\"}"],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals",
          "Electronic journals"],
        "title_variant_a":["Zeitschrift für Bibliothekskultur"],
        "date_cataloged":"2017-06-08T04:00:00Z",
        "genre_headings_a":["Periodicals",
          "Electronic journals"],
        "subject_suggest":["Periodicals",
          "Electronic journals",
          "Library science -- Periodicals",
          "Libraries -- History -- Periodicals",
          "Libraries",
          "Library science"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["SSJ0001325210"],
        "subject_topical_a":["Library science",
          "Libraries",
          "History"],
        "publication_year_sort":"2020",
        "subject_headings_a":["Library science -- Periodicals",
          "Libraries -- History -- Periodicals",
          "Libraries",
          "Library science"],
        "note_serial_dates_a":["Began with Bd. 2, Nr. 1 (2013)."],
        "record_data_source_a":["ILSMARC"]},
      {
        "id":"UNCb8542341",
        "isbn_number_a":["9789869154529"],
        "isbn_qualifying_info_a":[""],
        "items_a":["{\"status\":\"On Order\",\"loc_b\":\"dd\",\"loc_n\":\"dd\"}"],
        "author_suggest":["John Sisyphus"],
        "names_a":["{\"name\":\"John Sisyphus\"}"],
        "owner_a":["unc"],
        "language_a":["Chinese"],
        "local_id":"b8542341",
        "lang_code_a":["chi"],
        "publisher_a":["Xi Xi Fu Si Wen Hua"],
        "publisher_vern":["西西弗斯文化"],
        "title_suggest":["Mao Ze Dong De Qi Shou Jiang Qing Yu Wen Ge (Xia).",
          "03 毛澤東的旗手 江青與文革(下)."],
        "title_main_vern":["03 毛澤東的旗手 江青與文革(下)."],
        "title_main":"03 毛澤東的旗手 江青與文革(下). / Mao Ze Dong De Qi Shou Jiang Qing Yu Wen Ge (Xia).",
        "title_sort_ssort_single":"03 毛澤東的旗手 江青與文革下 mao ze dong de qi shou jiang qing yu wen ge xia",
        "institution_a":["unc"],
        "creator_main_a":["John Sisyphus"],
        "imprint_main_a":["{\"type\":\"production\",\"value\":\"Xi Xi Fu Si Wen Hua.\"}",
          "{\"type\":\"production\",\"value\":\"西西弗斯文化.\"}"],
        "resource_type_a":["Book"],
        "subject_genre_a":["Nonfiction"],
        "imprint_multiple_a":["{\"type\":\"production\",\"value\":\"Xi Xi Fu Si Wen Hua.\"}",
          "{\"type\":\"production\",\"value\":\"西西弗斯文化.\"}"],
        "publication_year_sort":"2020",
        "location_hierarchy_a":["unc",
          "unc:uncdavy"],
        "record_data_source_a":["ILSMARC"]},
      {
        "id":"UNCb8542343",
        "isbn_number_a":["9789869154536"],
        "isbn_qualifying_info_a":[""],
        "items_a":["{\"status\":\"On Order\",\"loc_b\":\"dd\",\"loc_n\":\"dd\"}"],
        "author_suggest":["John Sisyphus"],
        "names_a":["{\"name\":\"John Sisyphus\"}"],
        "owner_a":["unc"],
        "language_a":["Chinese"],
        "local_id":"b8542343",
        "lang_code_a":["chi"],
        "publisher_a":["Xi Xi Fu Si Wen Hua"],
        "publisher_vern":["西西弗斯文化"],
        "title_suggest":["Mao Ze Dong De Li Lun Jia Zhang Chun Qiao Yu Wen Ge (Shang).",
          "05 毛澤東的理論家 張春橋與文革(上)."],
        "title_main_vern":["05 毛澤東的理論家 張春橋與文革(上)."],
        "title_main":"05 毛澤東的理論家 張春橋與文革(上). / Mao Ze Dong De Li Lun Jia Zhang Chun Qiao Yu Wen Ge (Shang).",
        "title_sort_ssort_single":"05 毛澤東的理論家 張春橋與文革上 mao ze dong de li lun jia zhang chun qiao yu wen ge shang",
        "institution_a":["unc"],
        "creator_main_a":["John Sisyphus"],
        "imprint_main_a":["{\"type\":\"production\",\"value\":\"Xi Xi Fu Si Wen Hua.\"}",
          "{\"type\":\"production\",\"value\":\"西西弗斯文化.\"}"],
        "resource_type_a":["Book"],
        "subject_genre_a":["Nonfiction"],
        "imprint_multiple_a":["{\"type\":\"production\",\"value\":\"Xi Xi Fu Si Wen Hua.\"}",
          "{\"type\":\"production\",\"value\":\"西西弗斯文化.\"}"],
        "publication_year_sort":"2020",
        "location_hierarchy_a":["unc",
          "unc:uncdavy"],
        "record_data_source_a":["ILSMARC"]},
      {
        "id":"UNCb8724941",
        "url_a":["{\"href\":\"http://libproxy.lib.unc.edu/login?url=http://dx.doi.org/10.1093/OBO/9780195393361-0041\",\"type\":\"fulltext\",\"text\":\"Available via the UNC-Chapel Hill Libraries\"}"],
        "author_suggest":["Henten, Jan Willem van, 1955-"],
        "names_a":["{\"name\":\"Henten, Jan Willem van, 1955-\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b8724941",
        "available_a":["Available"],
        "frequency_current_a":["Updated quarterly"],
        "lang_code_a":["eng"],
        "publisher_a":["Oxford University Press"],
        "rollup_id":"OBOEDZ0000050457",
        "note_local_a":["Vendor-supplied catalog record."],
        "title_suggest":["1-4 Maccabees"],
        "title_main":"1-4 Maccabees",
        "title_sort_ssort_single":"1 4 maccabees",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "creator_main_a":["Henten, Jan Willem van, 1955-"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"[New York] : Oxford University Press, 2011-\"}"],
        "host_item_work_a":["{\"title\":[\"Oxford bibliographies online\",\"(online collection)\",\".\",\"Biblical studies\"]}"],
        "resource_type_a":["Web page or site"],
        "subject_genre_a":["Bibliography",
          "Reference"],
        "date_cataloged":"2017-01-30T05:00:00Z",
        "genre_headings_a":["Bibliography"],
        "subject_suggest":["Bibliography",
          "Bible. Maccabees -- Criticism, interpretation, etc -- Bibliography"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["OBOEDZ0000050457"],
        "subject_topical_a":["Bible. Maccabees",
          "Criticism, interpretation, etc"],
        "publication_year_sort":"2020",
        "subject_headings_a":["Bible. Maccabees -- Criticism, interpretation, etc -- Bibliography"],
        "record_data_source_a":["ILSMARC"],
        "origin_place_search_a":["[New York]",
          "New York (State)",
          "United States"],
        "physical_description_a":["1 online resource"],
        "note_access_restrictions_a":["Access limited to UNC Chapel Hill-authenticated users. Unlimited simultaneous users"],
        "statement_of_responsibility_a":["by Jan W. van Henten."]},
      {
        "id":"UNCb8723980",
        "url_a":["{\"href\":\"http://libproxy.lib.unc.edu/login?url=http://dx.doi.org/10.1093/OBO/9780195393361-0021\",\"type\":\"fulltext\",\"text\":\"Available via the UNC-Chapel Hill Libraries\"}"],
        "author_suggest":["Tuell, Steven Shawn"],
        "names_a":["{\"name\":\"Tuell, Steven Shawn\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b8723980",
        "available_a":["Available"],
        "frequency_current_a":["Frequency of update unknown"],
        "lang_code_a":["eng"],
        "publisher_a":["Oxford University Press"],
        "rollup_id":"OBOEDZ0000021379",
        "note_local_a":["Vendor-supplied catalog record."],
        "title_suggest":["1 and 2 Chronicles"],
        "title_main":"1 and 2 Chronicles",
        "title_sort_ssort_single":"1 and 2 chronicles",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "creator_main_a":["Tuell, Steven Shawn"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"[New York] : Oxford University Press, 2010-\"}"],
        "host_item_work_a":["{\"title\":[\"Oxford bibliographies online\",\"(online collection)\",\".\",\"Biblical studies\"]}"],
        "resource_type_a":["Web page or site"],
        "subject_genre_a":["Bibliography",
          "Reference"],
        "date_cataloged":"2017-01-30T05:00:00Z",
        "genre_headings_a":["Bibliography"],
        "subject_suggest":["Bibliography",
          "Bible. Chronicles -- Criticism, interpretation, etc -- Bibliography"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["OBOEDZ0000021379"],
        "subject_topical_a":["Bible. Chronicles",
          "Criticism, interpretation, etc"],
        "publication_year_sort":"2020",
        "subject_headings_a":["Bible. Chronicles -- Criticism, interpretation, etc -- Bibliography"],
        "record_data_source_a":["ILSMARC"],
        "origin_place_search_a":["[New York]",
          "New York (State)",
          "United States"],
        "physical_description_a":["1 online resource"],
        "note_access_restrictions_a":["Access limited to UNC Chapel Hill-authenticated users. Unlimited simultaneous users"],
        "statement_of_responsibility_a":["by Steven Shawn Tuell."]},
      {
        "id":"UNCb8723999",
        "url_a":["{\"href\":\"http://libproxy.lib.unc.edu/login?url=http://dx.doi.org/10.1093/OBO/9780195393361-0071\",\"type\":\"fulltext\",\"text\":\"Available via the UNC-Chapel Hill Libraries\"}"],
        "author_suggest":["Knoppers, Gary N., 1956-",
          "Greer, Jonathan S."],
        "names_a":["{\"name\":\"Knoppers, Gary N., 1956-\"}",
          "{\"name\":\"Greer, Jonathan S.\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b8723999",
        "available_a":["Available"],
        "frequency_current_a":["Frequency of update unknown"],
        "lang_code_a":["eng"],
        "publisher_a":["Oxford University Press"],
        "rollup_id":"OBOEDZ0000021397",
        "note_local_a":["Vendor-supplied catalog record."],
        "title_suggest":["1 and 2 Kings"],
        "title_main":"1 and 2 Kings",
        "title_sort_ssort_single":"1 and 2 kings",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "creator_main_a":["Knoppers, Gary N., 1956-"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"[New York] : Oxford University Press, 2010-\"}"],
        "host_item_work_a":["{\"title\":[\"Oxford bibliographies online\",\"(online collection)\",\".\",\"Biblical studies\"]}"],
        "resource_type_a":["Web page or site"],
        "subject_genre_a":["Bibliography",
          "Reference"],
        "date_cataloged":"2017-01-30T05:00:00Z",
        "genre_headings_a":["Bibliography"],
        "subject_suggest":["Bibliography",
          "Bible. Kings -- Criticism, interpretation, etc -- Bibliography"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["OBOEDZ0000021397"],
        "subject_topical_a":["Bible. Kings",
          "Criticism, interpretation, etc"],
        "publication_year_sort":"2020",
        "subject_headings_a":["Bible. Kings -- Criticism, interpretation, etc -- Bibliography"],
        "record_data_source_a":["ILSMARC"],
        "origin_place_search_a":["[New York]",
          "New York (State)",
          "United States"],
        "physical_description_a":["1 online resource"],
        "note_access_restrictions_a":["Access limited to UNC Chapel Hill-authenticated users. Unlimited simultaneous users"],
        "statement_of_responsibility_a":["by Gary N. Knoppers, Jonathan S. Greer."]},
      {
        "id":"UNCb8724944",
        "url_a":["{\"href\":\"http://libproxy.lib.unc.edu/login?url=http://dx.doi.org/10.1093/OBO/9780195393361-0086\",\"type\":\"fulltext\",\"text\":\"Available via the UNC-Chapel Hill Libraries\"}"],
        "author_suggest":["Auld, A. Graeme"],
        "names_a":["{\"name\":\"Auld, A. Graeme\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b8724944",
        "available_a":["Available"],
        "frequency_current_a":["Updated quarterly"],
        "lang_code_a":["eng"],
        "publisher_a":["Oxford University Press"],
        "rollup_id":"OBOEDZ0000050460",
        "note_local_a":["Vendor-supplied catalog record."],
        "title_suggest":["1 and 2 Samuel"],
        "title_main":"1 and 2 Samuel",
        "title_sort_ssort_single":"1 and 2 samuel",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "creator_main_a":["Auld, A. Graeme"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"[New York] : Oxford University Press, 2011-\"}"],
        "host_item_work_a":["{\"title\":[\"Oxford bibliographies online\",\"(online collection)\",\".\",\"Biblical studies\"]}"],
        "resource_type_a":["Web page or site"],
        "subject_genre_a":["Bibliography",
          "Reference"],
        "date_cataloged":"2017-01-30T05:00:00Z",
        "genre_headings_a":["Bibliography"],
        "subject_suggest":["Bibliography",
          "Bible. Samuel -- Criticism, interpretation, etc -- Bibliography"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["OBOEDZ0000050460"],
        "subject_topical_a":["Bible. Samuel",
          "Criticism, interpretation, etc"],
        "publication_year_sort":"2020",
        "subject_headings_a":["Bible. Samuel -- Criticism, interpretation, etc -- Bibliography"],
        "record_data_source_a":["ILSMARC"],
        "origin_place_search_a":["[New York]",
          "New York (State)",
          "United States"],
        "physical_description_a":["1 online resource"],
        "note_access_restrictions_a":["Access limited to UNC Chapel Hill-authenticated users. Unlimited simultaneous users"],
        "statement_of_responsibility_a":["by Graeme Auld."]},
      {
        "id":"UNCb9520781",
        "url_a":["{\"href\":\"https://purl.fdlp.gov/GPO/gpo117142\",\"type\":\"fulltext\",\"restricted\":\"false\"}"],
        "author_suggest":["Dalaker, Joseph",
          "Library of Congress. Congressional Research Service"],
        "names_a":["{\"name\":\"Dalaker, Joseph\",\"rel\":\"author\"}",
          "{\"name\":\"Library of Congress. Congressional Research Service\",\"rel\":\"issuing body\"}"],
        "owner_a":["unc"],
        "edition_a":["[Library of Congress public edition]."],
        "misc_id_a":["LCCN: 2019230804",
          "GPO Item Number: 0807-A-07 (online)"],
        "language_a":["English"],
        "local_id":"b9520781",
        "shelfkey":"sudoc:LC 14.23:R 45100/",
        "available_a":["Available"],
        "frequency_current_a":["Updated irregularly"],
        "publisher_a":["Congressional Research Service"],
        "rollup_id":"OCLC1089448247",
        "title_suggest":["The 10-20-30 provision : defining persistent poverty counties",
          "CRS report"],
        "title_main":"The 10-20-30 provision : defining persistent poverty counties",
        "title_sort_ssort_single":"10 20 30 provision defining persistent poverty counties",
        "access_type_a":["Online"],
        "institution_a":["unc",
          "duke",
          "nccu",
          "ncsu"],
        "oclc_number":"1089448247",
        "series_work_a":["{\"title\":[\"CRS report\"],\"details\":\"R45100.\"}"],
        "creator_main_a":["Dalaker, Joseph, author"],
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"[Washington, D.C.] : Congressional Research Service, 2018-\"}"],
        "note_general_a":["The CRS report home page provides access to all versions published since 2018 in accordance with P.L. 115-141.",
          "Report includes bibliographical references."],
        "host_item_work_a":["{\"label\":\"In\",\"title\":[\"CRS reports\",\"(Library of Congress. Congressional Research Service)\"]}"],
        "resource_type_a":["Government publication",
          "Web page or site"],
        "subject_genre_a":["Statistics"],
        "title_former_a":["<March 8, 2019>: 10-20-30 plan and persistent poverty counties"],
        "date_cataloged":"2019-09-09T04:00:00Z",
        "genre_headings_a":["Statistics"],
        "subject_suggest":["Statistics",
          "American Community Survey (U.S.)",
          "Small Area Income and Poverty Estimates (Program : U.S.)",
          "Poverty -- United States -- Statistics",
          "Small area statistics -- United States",
          "United States -- Economic conditions -- Regional disparities -- Statistics"],
        "physical_media_a":["Online"],
        "subject_topical_a":["American Community Survey (U.S.)",
          "Small Area Income and Poverty Estimates (Program : U.S.)",
          "Poverty",
          "Small area statistics",
          "Economic conditions",
          "Regional disparities"],
        "publication_year_sort":"2020",
        "reverse_shelfkey":"sudoc:EN~YV}XW~8~VUYZZ~",
        "series_statement_a":["Report / Congressional Research Service ; R45100"],
        "subject_headings_a":["American Community Survey (U.S.)",
          "Small Area Income and Poverty Estimates (Program : U.S.)",
          "Poverty -- United States -- Statistics",
          "Small area statistics -- United States",
          "United States -- Economic conditions -- Regional disparities -- Statistics"],
        "record_data_source_a":["ILSMARC",
          "Shared Records",
          "DWS"],
        "subject_geographic_a":["United States"],
        "virtual_collection_a":["TRLN Shared Records. Documents without shelves."],
        "call_number_schemes_a":["SUDOC"],
        "origin_place_search_a":["[Washington, D.C.]",
          "District of Columbia",
          "United States"],
        "physical_description_a":["1 online resource."],
        "statement_of_responsibility_a":["Joseph Dalaker."]},
      {
        "id":"UNCb9708687",
        "url_a":["{\"href\":\"https://purl.fdlp.gov/GPO/gpo125236\",\"type\":\"fulltext\",\"restricted\":\"false\"}"],
        "author_suggest":["Dalaker, Joseph",
          "Library of Congress. Congressional Research Service"],
        "names_a":["{\"name\":\"Dalaker, Joseph\",\"rel\":\"author\"}",
          "{\"name\":\"Library of Congress. Congressional Research Service\",\"rel\":\"issuing body\"}"],
        "owner_a":["unc"],
        "edition_a":["[Library of Congress public edition]."],
        "misc_id_a":["LCCN: 2019256302",
          "GPO Item Number: 0807-A-07 (online)"],
        "language_a":["English"],
        "local_id":"b9708687",
        "shelfkey":"sudoc:LC 14.23:R 44748/",
        "available_a":["Available"],
        "frequency_current_a":["Updated irregularly"],
        "publisher_a":["Congressional Research Service"],
        "rollup_id":"OCLC1117495328",
        "title_suggest":["The 10-20-30 rule and persistent poverty counties",
          "CRS report"],
        "title_main":"The 10-20-30 rule and persistent poverty counties",
        "title_sort_ssort_single":"10 20 30 rule and persistent poverty counties",
        "access_type_a":["Online"],
        "institution_a":["unc",
          "duke",
          "nccu",
          "ncsu"],
        "oclc_number":"1117495328",
        "series_work_a":["{\"title\":[\"CRS report\"],\"details\":\"R44748.\"}"],
        "creator_main_a":["Dalaker, Joseph, author"],
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"[Washington, D.C.] : Congressional Research Service, 2019-\"}"],
        "note_general_a":["The CRS report home page provides access to all versions published since 2018 in accordance with P.L. 115-141; earliest version dated 2017.",
          "\"January 27, 2017.\"",
          "Report includes color map.",
          "Report includes bibliographical references."],
        "host_item_work_a":["{\"label\":\"In\",\"title\":[\"CRS reports\",\"(Library of Congress. Congressional Research Service)\"]}"],
        "resource_type_a":["Government publication",
          "Web page or site"],
        "date_cataloged":"2019-10-10T04:00:00Z",
        "physical_media_a":["Online"],
        "subject_topical_a":["United States. American Recovery and Reinvestment Act of 2009",
          "Poverty",
          "Rural development",
          "Economic conditions"],
        "publication_year_sort":"2020",
        "reverse_shelfkey":"sudoc:EN~YV}XW~8~VVSVR~",
        "series_statement_a":["Report / Congressional Research Service ; R44748"],
        "subject_headings_a":["United States. American Recovery and Reinvestment Act of 2009",
          "Poverty -- United States",
          "Rural development -- United States",
          "United States -- Economic conditions"],
        "subject_suggest":["United States. American Recovery and Reinvestment Act of 2009",
          "Poverty -- United States",
          "Rural development -- United States",
          "United States -- Economic conditions"],
        "record_data_source_a":["ILSMARC",
          "Shared Records",
          "DWS"],
        "subject_geographic_a":["United States"],
        "virtual_collection_a":["TRLN Shared Records. Documents without shelves."],
        "call_number_schemes_a":["SUDOC"],
        "origin_place_search_a":["[Washington, D.C.]",
          "District of Columbia",
          "United States"],
        "physical_description_a":["1 online resource"],
        "statement_of_responsibility_a":["Joseph Dalaker."]},
      {
        "id":"UNCb9476282",
        "url_a":["{\"href\":\"https://www.westlaw.com/Browse/Home/BusinessLawCenter/10KSectionSearch?rs=tran3.0\\u0026vr=3.0\\u0026originationContext=vendcc\",\"type\":\"fulltext\",\"text\":\"Full text available to UNC-Chapel Hill Law School with password\",\"note\":\"Coverage: 1996 - present\",\"restricted\":\"false\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b9476282",
        "available_a":["Available"],
        "frequency_current_a":["Updated periodically"],
        "lang_code_a":["eng"],
        "publisher_a":["publisher not identified",
          "Thomson Reuters"],
        "rollup_id":"WLN00870102",
        "title_suggest":["10-K Section search."],
        "title_main":"10-K Section search.",
        "title_sort_ssort_single":"10 k section search",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"[Place of publication not identified] : [publisher not identified]\"}"],
        "note_summary_a":["10-K Section search offers users the ability to focus searches on particular sections of Form 10-K. By simply checking a box, users can limit their search to the area(s) of the 10-K most likely to contain what they need. For more targeted results, users can use additional search fields to specify key words or phrases, filing date, period date, company name, ticker symbol, CIK and more."],
        "related_work_a":["{\"title\":[\"WESTLAW (Information retrieval system)\"]}"],
        "resource_type_a":["Web page or site"],
        "subject_genre_a":["Rules and practice",
          "Forms",
          "Electronic books"],
        "date_cataloged":"2019-03-15T04:00:00Z",
        "genre_headings_a":["Rules and practice",
          "Forms",
          "Electronic books"],
        "subject_suggest":["Rules and practice",
          "Forms",
          "Electronic books",
          "United States. Securities and Exchange Commission -- Rules and practice",
          "EDGAR (Information retrieval system)",
          "Corporation reports -- United States",
          "Corporation reports -- United States -- Forms",
          "Disclosure of information -- United States",
          "Disclosure of information -- United States -- Forms",
          "Financial statements -- United States",
          "Financial statements -- United States -- Forms",
          "Securities -- United States",
          "Securities -- United States -- Forms"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["WLN00870102"],
        "subject_topical_a":["United States. Securities and Exchange Commission",
          "EDGAR (Information retrieval system)",
          "Corporation reports",
          "Disclosure of information",
          "Financial statements",
          "Securities"],
        "imprint_multiple_a":["{\"type\":\"publication\",\"value\":\"[Place of publication not identified] : [publisher not identified]\"}",
          "{\"type\":\"distribution\",\"value\":\"[St. Paul, Minnesota] : Thomson Reuters, [2016]-\"}"],
        "publication_year_sort":"2020",
        "subject_headings_a":["United States. Securities and Exchange Commission -- Rules and practice",
          "EDGAR (Information retrieval system)",
          "Corporation reports -- United States",
          "Corporation reports -- United States -- Forms",
          "Disclosure of information -- United States",
          "Disclosure of information -- United States -- Forms",
          "Financial statements -- United States",
          "Financial statements -- United States -- Forms",
          "Securities -- United States",
          "Securities -- United States -- Forms"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["United States"],
        "origin_place_search_a":["[Place of publication not identified]",
          "[St. Paul, Minnesota]"],
        "physical_description_a":["1 online resource"]},
      {
        "id":"UNCb9707573",
        "url_a":["{\"href\":\"http://libproxy.lib.unc.edu/login?url=https://www.taylorfrancis.com/books/9780429199219\",\"type\":\"fulltext\",\"text\":\"Full text available via the UNC-Chapel Hill Libraries\"}"],
        "isbn_number_a":["042919921X",
          "0429579195",
          "0429581416",
          "0429583311",
          "9780429199219",
          "9780429579196",
          "9780429581410",
          "9780429583315",
          "9780367189204",
          "9780367189228"],
        "isbn_qualifying_info_a":["",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""],
        "author_suggest":["Beachboard, Cathleen",
          "Dause, Marynn"],
        "names_a":["{\"name\":\"Beachboard, Cathleen\",\"rel\":\"author\"}",
          "{\"name\":\"Dause, Marynn\",\"rel\":\"author\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b9707573",
        "note_toc_a":["Key one: relationships -- Key two: support -- Key three: strength -- Key four: willpower -- Key five: soft skills -- Key six: service -- Key seven: agency -- Key eight: curiosity -- Key nine: innovation -- Key ten: failure."],
        "shelfkey":"lc:LB.102723",
        "available_a":["Available"],
        "publisher_a":["Routledge"],
        "rollup_id":"OCLC1119979376",
        "note_local_a":["Content provider: Taylor & Francis.",
          "Vendor-supplied catalog record."],
        "title_suggest":["10 keys to student empowerment : unlocking the hero in each child"],
        "title_main":"10 keys to student empowerment : unlocking the hero in each child",
        "title_sort_ssort_single":"10 keys to student empowerment unlocking the hero in each child",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "oclc_number":"1119979376",
        "creator_main_a":["Beachboard, Cathleen, author"],
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"New York, NY : Routledge, [2020]\"}"],
        "note_summary_a":["\"Discover how to work alongside your students to unlock their potential. This powerful book reveals 10 keys to creating a classroom where your students can take ownership of their learning and become heroes in their own lives. You'll learn how to build relationships, support, strength, willpower, soft skills, service, agency, curiosity, innovation, and productive failure. Each key is illustrated in a narrative format, designed with tips and notes to help you make practical changes immediately. By the end of the book, you'll have the foundational pieces you need to create a student-powered classroom where students can learn about themselves, fail forward, and gain courage to face challenges head on\" --Provided by publisher."],
        "host_item_work_a":["{\"title\":[\"Taylor \\u0026 Francis e-books\",\"(online collection)\",\".\",\"Evidence-based DDA.\",\"T\\u0026F.\",\"Discovery\"]}"],
        "resource_type_a":["Book"],
        "subject_genre_a":["Nonfiction"],
        "date_cataloged":"2019-10-08T04:00:00Z",
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["TFDDATF9780429199219"],
        "subject_topical_a":["Motivation in education",
          "Student-centered learning",
          "Teacher-student relationships"],
        "publication_year_sort":"2020",
        "reverse_shelfkey":"lc:EO}YZXSXW",
        "subject_headings_a":["Motivation in education",
          "Student-centered learning",
          "Teacher-student relationships"],
        "subject_suggest":["Motivation in education",
          "Student-centered learning",
          "Teacher-student relationships"],
        "lc_call_nos_normed_a":["LB.102723"],
        "record_data_source_a":["ILSMARC"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["New York, NY",
          "New York (State)",
          "United States"],
        "physical_description_a":["1 online resource"],
        "note_access_restrictions_a":["Access limited to UNC Chapel Hill-authenticated users. Unlimited simultaneous users"],
        "lcc_callnum_classification_a":["L - Education",
          "L - Education|LB5 - LB3640 Theory and practice of education",
          "L - Education|LB5 - LB3640 Theory and practice of education|LB1025 - LB1050.75 Teaching (Principles and practice)"],
        "statement_of_responsibility_a":["Cathleen Beachboard, Marynn Dause."]},
      {
        "id":"UNCb7976745",
        "url_a":["{\"href\":\"http://worldcat.org/oclc/890136221/viewonline\",\"type\":\"fulltext\",\"text\":\"Available via the UNC-Chapel Hill Libraries\",\"restricted\":\"false\"}"],
        "author_suggest":["North Carolina. Division of Public Health",
          "North Carolina. Injury Epidemiology and Surveillance Unit"],
        "names_a":["{\"name\":\"North Carolina. Division of Public Health\"}",
          "{\"name\":\"North Carolina. Injury Epidemiology and Surveillance Unit\",\"rel\":\"issuing body\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b7976745",
        "available_a":["Available"],
        "frequency_current_a":["Annual"],
        "lang_code_a":["eng"],
        "publisher_a":["Division of Public Health, Injury Epidemiology and Surveillance Unit"],
        "rollup_id":"OCLC890136221",
        "title_suggest":["10 leading causes of injury death (all races, both sexes) by age groups, North Carolina"],
        "title_main":"10 leading causes of injury death (all races, both sexes) by age groups, North Carolina",
        "title_sort_ssort_single":"10 leading causes of injury death all races both sexes by age groups north carolina",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "oclc_number":"890136221",
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"[Raleigh, North Carolina] : Division of Public Health, Injury Epidemiology and Surveillance Unit\"}"],
        "resource_type_a":["Government publication",
          "Journal, Magazine, or Periodical"],
        "subject_genre_a":["Statistics",
          "Periodicals"],
        "date_cataloged":"2014-11-25T05:00:00Z",
        "genre_headings_a":["Statistics",
          "Periodicals"],
        "subject_suggest":["Statistics",
          "Periodicals",
          "Death -- North Carolina -- Causes -- Statistics -- Periodicals",
          "Mortality -- North Carolina -- Statistics -- Periodicals",
          "Accidents -- North Carolina -- Statistics -- Periodicals"],
        "physical_media_a":["Online"],
        "subject_topical_a":["Death",
          "Causes",
          "Mortality",
          "Accidents"],
        "publication_year_sort":"2020",
        "subject_headings_a":["Death -- North Carolina -- Causes -- Statistics -- Periodicals",
          "Mortality -- North Carolina -- Statistics -- Periodicals",
          "Accidents -- North Carolina -- Statistics -- Periodicals"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["North Carolina"],
        "note_system_details_a":["System requirements: Adobe Acrobat Reader ; current access available via PURL."],
        "origin_place_search_a":["[Raleigh, North Carolina]",
          "North Carolina",
          "United States"],
        "physical_description_a":["1 online resource (volumes)"],
        "statement_of_responsibility_a":["N.C. Division of Public Health, Injury Epidemiology and Surveillance Unit."],
        "physical_description_details_a":["File type: text file",
          "File format: PDF"]}]
  },
  "facet_counts":{
    "facet_queries":{
      "date_cataloged_dt:[NOW-7DAY/DAY TO NOW]":10701,
      "date_cataloged_dt:[NOW-1MONTH/DAY TO NOW]":36224,
      "date_cataloged_dt:[NOW-3MONTH/DAY TO NOW]":121555},
    "facet_fields":{
      "access_type_f":[
        "At the Library",4982519,
        "Online",2140362],
      "available_f":[
        "Available",6803849],
      "location_hierarchy_f":[
        "unc",4955916,
        "unc:uncdavy",2331386,
        "unc:unclibr",1455110,
        "unc:uncdavy:uncdavdoc",736300,
        "unc:uncwil",451475,
        "law",215772,
        "law:lawuncw",215772,
        "unc:unclawy",215772,
        "unc:uncmusy",200623,
        "unc:uncrarn",191904,
        "unc:uncwil:uncwilrbc",191904,
        "unc:uncnorn",189598,
        "unc:uncwil:uncwilncc",189598,
        "unc:uncscix",140165,
        "hsl",136134,
        "hsl:hsluncy",136134,
        "unc:unchsl",136134,
        "unc:uncarty",96962,
        "unc:uncul",84282,
        "unc:uncinfy",82097,
        "unc:uncsouz",66876,
        "unc:uncwil:uncwilsfc",66876,
        "unc:uncdavy:uncdavmap",41606,
        "unc:uncmedr",27049,
        "unc:unccarr",15664,
        "unc:uncschy",12164,
        "unc:uncdavy:uncdavref",11497,
        "unc:uncpark",10643,
        "unc:uncstoy",10245,
        "unc:uncdavy:uncstor",9939,
        "unc:uncmusy:uncmusymult",6147,
        "unc:uncsoun",5072,
        "unc:uncwil:uncwilshc",5072,
        "unc:uncnory",4887,
        "unc:uncmary",3062,
        "unc:uncul:unculpop",1775,
        "unc:unclgby",1257,
        "unc:uncmedr:uncmedrmeks",787,
        "unc:unclaty",674,
        "unc:uncdavy:uncdavglo",644,
        "unc:uncherb",584,
        "unc:unchigy",577,
        "unc:uncarchives",456,
        "unc:uncwil:uncwilar",456,
        "unc:unccarn",423,
        "unc:uncmedr:uncmedrmets",173,
        "unc:uncgloy",98,
        "unc:unckeny",68,
        "unc:uncofft",17],
      "resource_type_f":[
        "Book",6025518,
        "Government publication",1277045,
        "Journal, Magazine, or Periodical",402302,
        "Music recording",147461,
        "Thesis/Dissertation",120445,
        "Video",101000,
        "Music score",94077,
        "Map",61806,
        "Web page or site",25408,
        "Newspaper",14908,
        "Dataset -- Statistical",14564],
      "lcc_callnum_classification_f":[
        "P - Language and literature",981576,
        "H - Social sciences",435259,
        "D - History (General) and History of Europe",329149,
        "B - Philosophy. Psychology. Religion",245660,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature",224979,
        "Q - Science",210043,
        "P - Language and literature|PR1 - PR9680 English literature",171358,
        "P - Language and literature|PS1 - PS3626 American literature. Canadian literature",149933,
        "P - Language and literature|PS1 - PS3626 American literature. Canadian literature|PS1 - PS3626 American literature",149933,
        "N - Fine Arts",137132,
        "M - Music",136199,
        "J - Political Science",127683,
        "K - Law in general. Comparative and uniform law. Jurisprudence",122339,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature",109200,
        "P - Language and literature|PN1 - PN6790 Literature (General)",106552,
        "G - Geography. Anthropology. Recreation",92954,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor",92261,
        "Z - Bibliography. Library Science. Information resources (general)",86304,
        "F - America: local history",85892,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia",85157,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language",84715,
        "L - Education",84211,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic",83271,
        "R - Medicine",82684,
        "M - Music|M1 - M5000 Music",75584,
        "T - Technology.",71529,
        "E - History: America",71090,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature",68088,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ7000 - PQ8929 Provincial, local, colonial, etc.",63214,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ7000 - PQ8929 Provincial, local, colonial, etc.|PQ7081 - PQ8560 Spanish America",62633,
        "Q - Science|QA1 - QA939 Mathematics",56858,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature",54853,
        "E - History: America|E151 - E889 United States",53825,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania",51829,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States",51725,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America",51265,
        "M - Music|ML1 - ML3930 Literature on music",50905,
        "H - Social sciences|HC1 - HC1085 Economic history and conditions",50816,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature",49813,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama",49483,
        "D - History (General) and History of Europe|D1 - D2009 History (General)",48305,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women",47874,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology",47459,
        "N - Fine Arts|N1 - N9211 Visual arts",46939,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature",46576,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)",44967,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature",44693,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music",44422,
        "L - Education|LB5 - LB3640 Theory and practice of education",43947,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration",43772,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States",43756,
        "H - Social sciences|HC1 - HC1085 Economic history and conditions|HC94 - HC1085 By region or country",42372,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography",40684,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics",40345,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period",39787,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations",39148,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works",36393,
        "H - Social sciences|HF1 - HF6182 Commerce",35933,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration",35762,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature",35730,
        "A - General Works",35681,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism",34998,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works",33957,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries",33031,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK1001 - JK1443 Congress. Legislative branch",32310,
        "P - Language and literature|PR1 - PR9680 English literature|PR3991 - PR5990 19th century, 1770/1800-1890/1900",32293,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL2250 - PL3208 Chinese literature",32200,
        "R - Medicine|RC31 - RC1245 Internal medicine",31923,
        "F - America: local history|F1 - F975 United States local history",31008,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain",30593,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class",30344,
        "N - Fine Arts|ND25 - ND3416 Painting",30034,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature",29881,
        "P - Language and literature|P1 - P1091 Philology. Linguistics",29729,
        "P - Language and literature|PR1 - PR9680 English literature|PR6000 - PR6049 1900-1960",29325,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography",29014,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology",28893,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B790 - B5802 Modern",28729,
        "N - Fine Arts|N1 - N9211 Visual arts|N5300 - N7418 History",28530,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature",27625,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America",27465,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China",27175,
        "C - Auxiliary Sciences of History",26719,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence",26532,
        "P - Language and literature|PR1 - PR9680 English literature|PR6050 - PR6076 1961-2000",25797,
        "H - Social sciences|HG1 - HG9999 Finance",25505,
        "P - Language and literature|PR1 - PR9680 English literature|PR8309 - PR9680 English literature: Provincial, local, etc.",24750,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1993 - PN1999 Motion pictures",24413,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa",24127,
        "P - Language and literature|PZ1 - PZ90 Fiction and juvenile belles lettres",23833,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music",23723,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B790 - B5802 Modern|B850 - B5739 By region or country",23372,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business",23161,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism",22682,
        "A - General Works|AS1 - AS945 Academies and learned societies",22021,
        "N - Fine Arts|NA1 - NA9428 Architecture",21779,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England",21760,
        "A - General Works|AS1 - AS945 Academies and learned societies|AS11 - AS785 By region or country",21606,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL2250 - PL3208 Chinese literature|PL2661 - PL2979 Individual authors and works",21050,
        "Q - Science|QE1 - QE996.5 Geology",20980,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF0001 - KF999",20979,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science",20750,
        "L - Education|LC8 - LC6691 Special aspects of education",20660,
        "S - Agriculture",20613,
        "Q - Science|QC1 - QC999 Physics",20539,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure",20527,
        "U - Military science (General)",20470,
        "Q - Science|Q1 - Q390 Science (General)",20218,
        "N - Fine Arts|ND25 - ND3416 Painting|ND49 - ND813 History",20204,
        "H - Social sciences|HN1 - HN995 Social history and conditions. Social problems. Social reform",20199,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home",20084,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX800 - BX4795 Catholic Church",19952,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z5051 - Z7999 Subject bibliography. Subjects arranged in alphabetical sequence",19824,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6170 - PQ6269 Collections",19799,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD28 - HD70 Management. Industrial management",19483,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC321 - RC571 Neurosciences. Biological psychiatry. Neuropsychiatry",19428,
        "D - History (General) and History of Europe|DC1 - DC947 History of France",19390,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible",19020,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ2600 - PQ2651 1900-1960",19003,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History",18766,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity",18544,
        "Q - Science|Q1 - Q390 Science (General)|Q1 - Q295 General",18340,
        "Q - Science|QK1 - QK989 Botany",18178,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML385 - ML429 Biography",18140,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature",17851,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology",17490,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater",17309,
        "H - Social sciences|HN1 - HN995 Social history and conditions. Social problems. Social reform|HN50 - HN995 By region or country",17015,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races",16940,
        "Q - Science|QL1 - QL991 Zoology",16914,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music",16744,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades",16591,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany",16575,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description",16557,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature",16524,
        "J - Political Science|JC11 - JC607 Political theory",16507,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state",16507,
        "Q - Science|QA1 - QA939 Mathematics|QA71 - QA90 Instruments and machines",16466,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA28 - DA592 History",16372,
        "Q - Science|QA1 - QA939 Mathematics|QA71 - QA90 Instruments and machines|QA75 - QA76.95 Calculating machines",16352,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration",16324,
        "Q - Science|QA1 - QA939 Mathematics|QA71 - QA90 Instruments and machines|QA75 - QA76.95 Calculating machines|QA75.5 - QA76.95 Electronic computers. Computer science",16300,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1101 - HQ2030.7 Women. Feminism",16174,
        "E - History: America|E11 - E143 America",16121,
        "P - Language and literature|PC1 - PC5498 Romanic languages",16059,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy",15578,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History",15129,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature",15024,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine",14942,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS733 - DS779.32 History",14929,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS101 - DS151 Israel (Palestine). The Jews",14600,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology",14170,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature",14130,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works|PT2600 - PT2653 1860/70-1960",14079,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar",14072,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3477 - PG3490 1961-2000",13751,
        "P - Language and literature|PZ1 - PZ90 Fiction and juvenile belles lettres|PZ1 - PZ4 Fiction in English",13399,
        "Q - Science|QD1 - QD999 Chemistry",13360,
        "Q - Science|QH301 - QH705.5 Biology (General)",13055,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology",12902,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism",12771,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB848 - HB3697 Demography. Population. Vital events",12732,
        "H - Social sciences|HX1 - HX970.7 Socialism. Communism. Anarchism",12703,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2219.3 - PN3030 Special regions or countries",12654,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period",12563,
        "N - Fine Arts|NK1 - NK9990 Decorative arts",12557,
        "E - History: America|E151 - E889 United States|E184 - E185.98 Elements in the population",12540,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA28 - DA592 History|DA129 - DA592 By period",12521,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M6 - M175.5 Solo instruments",12387,
        "H - Social sciences|HE1 - HE9990 Transportation and communications",12190,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.",12019,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.",11918,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1241 - PR1273 Drama",11916,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions",11746,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature",11651,
        "P - Language and literature|PR1 - PR9680 English literature|PR2199 - PR3195 English renaissance (1500-1640)",11583,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city",11498,
        "Q - Science|QP1 - QP801 Physiology",11329,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ2660 - PQ2686 1961-2000",11259,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports",11236,
        "P - Language and literature|PE1 - PE3729 English language",11225,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration",11193,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period|DC110 - DC424 Modern, 1515-",11088,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography",11041,
        "T - Technology.|TR1 - TR1050 Photography",10980,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology",10882,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam",10786,
        "Q - Science|QE1 - QE996.5 Geology|QE1 - QE350.62 General (including geographical divisions)",10550,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ2149 - PQ2551 19th century",10501,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.",10344,
        "R - Medicine|R5 - R920 Medicine (General)",10244,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps",10087,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA28 - DA592 History|DA129 - DA592 By period|DA300 - DA592 Modern, 1485-",10066,
        "H - Social sciences|H1 - H99 Social sciences (General)",10024,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia",9989,
        "L - Education|LA5 - LA2396 History of education",9874,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS401 - DS486.8 India (Bharat)",9773,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country",9700,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology|HV6251 - HV6773.55 Crimes and offenses",9691,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1025 - LB1050.75 Teaching (Principles and practice)",9651,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade",9560,
        "Q - Science|QA1 - QA939 Mathematics|QA299.6 - QA433 Analysis",9548,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9400 - PQ9999 Provincial, local, colonial, etc.",9540,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)",9479,
        "Q - Science|QA1 - QA939 Mathematics|QA1 - QA43 General",9458,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books",9435,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages",9431,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature",9422,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief",9265,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG4001 - PG5146 Czech",9193,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works|PT1799 - PT2592 1700-ca. 1860/70",9192,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature",9153,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula",9080,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD84 - DD257.4 History",9007,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity|BR140 - BR1510 History",9004,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9400 - PQ9999 Provincial, local, colonial, etc.|PQ9500 - PQ9698.43 Brazil",8819,
        "E - History: America|E151 - E889 United States|E456 - E655 Civil War period, 1861-1865",8793,
        "H - Social sciences|HM401 - HM1281 Sociology (General)",8755,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA190 - NA1555.5 History",8709,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization",8685,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages",8682,
        "P - Language and literature|PR1 - PR9680 English literature|PR3291 - PR3785 17th and 18th centuries (1640-1770)",8676,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects",8613,
        "S - Agriculture|SB1 - SB1110 Plant culture",8608,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore",8594,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD2321 - HD4730.9 Industry",8585,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology",8526,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M1000 - M1075 Orchestra",8523,
        "Q - Science|QK1 - QK989 Botany|QK1 - QK474.5 General (including geographical distribution)",8333,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons",8329,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS101 - DS151 Israel (Palestine). The Jews|DS133 - DS151 Jews outside of Palestine",8291,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law",8249,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works|PT2660 - PT2688 1961-2000",8232,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations",8214,
        "P - Language and literature|PE1 - PE3729 English language|PE1001 - PE1693 Modern English",8168,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.|PN4840 - PN5648 By region or country",8154,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries",8152,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy",8087,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6600 - PQ6647 Individual authors, 1868-1960",7991,
        "Q - Science|QH1 - QH278.5 Natural history (General)",7972,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history",7951,
        "N - Fine Arts|NB1 - NB1952 Sculpture",7896,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration",7860,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration",7838,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ12 - HQ449 Sexual life",7811,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD84 - DD257.4 History|DD121 - DD257.4 By period",7738,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN45 - PN57 Theory. Philosophy. Esthetics",7726,
        "E - History: America|E151 - E889 United States|E171 - E183.9 History",7720,
        "T - Technology.|TR1 - TR1050 Photography|TR624 - TR835 Applied photography (Including artistic, commercial, medical photography, photocopying processes)",7689,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine",7687,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK510 - DK651 Russia (Federation). Russian S.F.S.R.",7681,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature|PA6202 - PA6971 Individual authors",7645,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture",7624,
        "E - History: America|E151 - E889 United States|E456 - E655 Civil War period, 1861-1865|E461 - E655 The Civil War, 1861-1865",7612,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography",7581,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B108 - B708 Ancient",7580,
        "Q - Science|QA1 - QA939 Mathematics|QA150 - QA272.5 Algebra",7551,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4800 - PQ4851 Individual authors, 1900-1960",7550,
        "M - Music|MT1 - MT960 Musical instruction and study",7543,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes",7499,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics",7484,
        "Q - Science|QH1 - QH278.5 Natural history (General)|QH1 - QH198 General (including nature conservation, geographical distribution)",7402,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS1901 - BS2970 New Testament",7381,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG6001 - PG7446 Polish",7357,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain",7356,
        "E - History: America|E151 - E889 United States|E184 - E185.98 Elements in the population|E184.5 - E185.98 Afro-Americans",7328,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation",7316,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG11 - DG365 Ancient Italy. Rome to 476",7290,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings",7249,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism",7227,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD84 - DD257.4 History|DD121 - DD257.4 By period|DD175 - DD257.4 Modern, 1519-",7189,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1201 - F1393 Mexico",7185,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use",7173,
        "H - Social sciences|HJ9 - HJ9940 Public finance",7163,
        "T - Technology.|T1 - T995 Technology (General)",7079,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ3800 - PQ3999 Provincial, local, colonial, etc.",7040,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature|PA3818 - PA4505 Individual authors",6940,
        "E - History: America|E11 - E143 America|E75 - E99 Indians of North America",6930,
        "Q - Science|QL1 - QL991 Zoology|QL605 - QL739.8 Chordates. Vertebrates",6892,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental",6831,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music",6831,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education",6801,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF1000 - KF1999",6771,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3320 - PG3447 1800-1870",6723,
        "Q - Science|QB1 - QB991 Astronomy",6712,
        "J - Political Science|JZ2 - JZ6530 International relations",6699,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861",6690,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4860 - PQ4886 Individual authors, 1961-2000",6638,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures",6622,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism",6597,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education",6536,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G3290 - G5668 America. Western Hemisphere",6517,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB60 - NB1115 History. Including collective biography",6509,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P1 - P85 General",6492,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA21 - UA885 By region or country",6491,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KD - Law of the United Kingdom and Ireland",6416,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KD - Law of the United Kingdom and Ireland|KD51 - KD9500 England and Wales",6411,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D1 - D24.5 General",6388,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism",6374,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF309 - BF499 Consciousness. Cognition",6277,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK112.8 - DK264.8 House of Romanov, 1613-1917",6233,
        "D - History (General) and History of Europe|DF10 - DF951 History of Greece",6231,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature",6216,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G3290 - G5668 America. Western Hemisphere|G3300 - G5184 North America",6203,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR99.6 - GR390 By region or country",6116,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6650 - PQ6676 Individual authors, 1961-2000",6086,
        "U - Military science (General)|U1 - U900 Military science (General)",6082,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast",6055,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS701 - BS1830 Old Testament",6054,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF4000 - KF4999",5983,
        "Q - Science|QA1 - QA939 Mathematics|QA273 - QA280 Probabilities. Mathematical statistics",5980,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)",5977,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV8301 - HV9920.7 Penology. Prisons. Corrections",5955,
        "R - Medicine|RJ1 - RJ570 Pediatrics",5935,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX200 - BX756 Orthodox Eastern Church",5910,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1101 - HQ2030.7 Women. Feminism|HQ1451 - HQ1870.7 By region or country",5870,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)",5785,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration",5783,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG1201 - PG1749 Serbo-Croatian",5755,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC501 - JC607 Purpose, functions, and relations of the state",5744,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2801 - F3021 Argentina",5707,
        "N - Fine Arts|NX1 - NX820 Arts in general",5694,
        "J - Political Science|JA1 - JA92 Political science (General)",5692,
        "H - Social sciences|HA1 - HA4737 Statistics",5660,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD101 - HD1395.5 Land use",5579,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine",5483,
        "L - Education|LA5 - LA2396 History of education|LA410 - LA2284 Other regions or countries",5467,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF8000 - KF8999",5429,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.",5416,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX800 - BX4795 Catholic Church|BX4650 - BX4750 Biography and portraits",5379,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL2250 - PL3208 Chinese literature|PL2250 - PL2443 History and criticism",5360,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works",5329,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography",5327,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z729 - Z871 Library reports. History. Statistics",5316,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century",5315,
        "S - Agriculture|S1 - S946.5 Agriculture (General)",5304,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works|AC1 - AC195 Collections of monographs, essays, etc.",5289,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1500 - M1527.8 Dramatic music",5281,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT210 - CT3150 National biography",5274,
        "P - Language and literature|PR1 - PR9680 English literature|PR6100 - PR6126 -2001",5274,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity|BR140 - BR1510 History|BR500 - BR1510 By region or country",5257,
        "Q - Science|QA1 - QA939 Mathematics|QA440 - QA699 Geometry. Trigonometry. Topology",5247,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6271 - PQ6498 Individual authors and works to 1700",5220,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism",5170,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1 - JQ1849 Asia",5160,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK5101 - TK6720 Telecommunication (including telegraphy, telephone, radio, radar, television)",5110,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK266 - DK292 Soviet regime, 1918-1991",5100,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS1901 - BS2970 New Testament|BS2547 - BS2970 Special parts of the New Testament",5083,
        "P - Language and literature|PZ1 - PZ90 Fiction and juvenile belles lettres|PZ5 - PZ90 Juvenile belles lettres",5057,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1611 - M1624.8 Songs",5012,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF3000 - KF3999",4985,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-",4965,
        "C - Auxiliary Sciences of History|CB3 - CB482 History of Civilization",4962,
        "T - Technology.|TX1 - TX1110 Home economics.",4960,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV861 - GV1017 Ball games: Baseball, football, golf, etc.",4946,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P87 - P96 Communication. Mass media",4911,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government",4891,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration",4883,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5410 - HF5417.5 Marketing. Disribution of products",4880,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature",4811,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing",4774,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z8001 - Z8999 Personal bibliography. Names of individuals arranged in alphabetical sequence",4741,
        "N - Fine Arts|NE1 - NE3002 Print media",4727,
        "N - Fine Arts|N1 - N9211 Visual arts|N7560 - N8266 Special subjects of art",4689,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z2000 - Z2959 Europe",4665,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language",4657,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration",4625,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History",4623,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period",4612,
        "M - Music|ML1 - ML3930 Literature on music|ML112.8 - ML158.8 Bibliography",4573,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration",4567,
        "Q - Science|QC1 - QC999 Physics|QC170 - QC197 Atomic physics. Constitution and properties of matter (including molecular physics, relativity, quantum theory, and solid state physics)",4557,
        "T - Technology.|TL1 - TL4050 Motor vehicles. Aeronautics. Astronautics",4549,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography",4548,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking",4525,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1990 - PN1992.92 Broadcasting",4523,
        "P - Language and literature|PF1 - PF5999 West Germanic languages",4519,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period|DC110 - DC424 Modern, 1515-|DC139 - DC249 Revolutionary and Napoleonic period, 1789-1815",4508,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA4170 - NA7020 Public buildings",4506,
        "M - Music|M1 - M5000 Music|M1 - M2.3 Collections",4432,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9000 - HD9495 Agricultural industries",4425,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1555 - LB1602 Elementary or public school education",4424,
        "Q - Science|QL1 - QL991 Zoology|QL360 - QL599.82 Invertebrates",4400,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB2000 - DB3150 Czechoslovakia",4388,
        "Q - Science|QC1 - QC999 Physics|QC1 - QC75 General",4379,
        "Q - Science|QP1 - QP801 Physiology|QP1 - QP345 General (including influence of the environment)",4362,
        "D - History (General) and History of Europe|DF10 - DF951 History of Greece|DF10 - DF289 Ancient Greece",4361,
        "T - Technology.|TN1 - TN997 Mining engineering. Metallurgy.",4350,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1401 - F1419 Latin America (General)",4346,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works|AC1 - AC195 Collections of monographs, essays, etc.|AC9 - AC195 Other languages",4327,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2001 - PG2826 Russian language",4299,
        "M - Music|M1 - M5000 Music|M1 - M2.3 Collections|M2 - M2.3 Collections of musical sources",4290,
        "E - History: America|E151 - E889 United States|E184 - E185.98 Elements in the population|E184.5 - E185.98 Afro-Americans|E185.2 - E185.89 Status and development since emancipation",4260,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B790 - B5802 Modern|B808 - B849 Special topics and schools of philosophy",4253,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961",4229,
        "A - General Works|AP1 - AP230 Periodicals",4219,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS410 - BS680 Works about the Bible",4208,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA900 - DA995 Ireland",4189,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3950 - LC4806.5 Exceptional children and youth. Special education",4156,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL2250 - PL3208 Chinese literature|PL2450 - PL2659 Collections",4112,
        "Q - Science|QD1 - QD999 Chemistry|QD450 - QD801 Physical and theoretical chemistry",4109,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German",4104,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN700 - GN890 Prehistoric archaeology",4083,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French",4060,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ760 - HQ767.7 Family size",4058,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB1 - DB879 Austria. Austro-Hungarian Empire",4048,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1 - RA418.5 Medicine and the state",4048,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism",4044,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ370 - RJ550 Diseases of children and adolescents",4044,
        "T - Technology.|TP1 - TP1185 Chemical technology.",4035,
        "V - Naval science",4015,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG401 - DG583.8 Medieval and modern Italy, 476-",4014,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period",4003,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K1 - K36.5 Periodicals",4003,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary",4000,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1993 - PN1999 Motion pictures|PN1997 - PN1997.85 Plays, scenarios, etc.",3984,
        "H - Social sciences|HC1 - HC1085 Economic history and conditions|HC72 - HC88 Economic growth, development, planning",3961,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9506 - HD9624 Mineral industries. Metal trade",3942,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD6050 - HD6305 Classes of labor (including women, children, students, middle-aged and older persons, minorities)",3941,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2301 - F2349 Venezuela",3940,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB75 - HB130 History of economics",3933,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)",3924,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia",3922,
        "Q - Science|QK1 - QK989 Botany|QK504 - QK635 Cryptogams",3917,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL700 - PL889 Japanese literature",3899,
        "E - History: America|E151 - E889 United States|E151 - E169.13 General",3847,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z662 - Z664 Collections",3847,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC348 - JC497 Forms of the state",3828,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ767.8 - HQ792.2 Children. Child development (including child rearing, child care, child life)",3814,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC3801 - PC3976 Catalan",3803,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD5701 - HD6000.9 Labor market. Labor supply. Labor demand (including unemployment, manpower policy, occupational training, employment agencies)",3780,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF712 - BF724.85 Developmental psychology",3756,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS41 - DS66 Middle East. Southwestern Asia. Ancient Orient. Arab East. Near East",3752,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures|PK2030 - PK2142 Hindi, Hindustani literatures",3746,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z1201 - Z1946 America",3712,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z278 - Z549 Bookselling and publishing",3691,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4265 - PQ4556 Individual authors and works to 1400",3685,
        "H - Social sciences|HG1 - HG9999 Finance|HG201 - HG1496 Money",3684,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern",3676,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1990 - PN1992.92 Broadcasting|PN1992 - PN1992.92 Television broadcasts",3658,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt",3610,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases",3595,
        "Q - Science|QL1 - QL991 Zoology|QL1 - QL355 General (including geographical distribution)",3583,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism",3574,
        "T - Technology.|TS1 - TS2301 Manufactures",3568,
        "N - Fine Arts|N1 - N9211 Visual arts|N7420 - N7525.8 General works",3557,
        "C - Auxiliary Sciences of History|CD1 - CD6471 Diplomatics. Archives. Seals",3552,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5601 - HF5689 Accounting. Bookkeeping",3544,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E740 - E749 General",3521,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages",3518,
        "Q - Science|QP1 - QP801 Physiology|QP501 - QP801 Animal biochemistry",3508,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL1001 - PL1960 Chinese language",3506,
        "F - America: local history|F1001 - F1145.3 British America",3494,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada",3494,
        "R - Medicine|RD1 - RD811 Surgery",3492,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D299 - D472 -1789",3466,
        "N - Fine Arts|N1 - N9211 Visual arts|N400 - N3990 Art museums, galleries, etc.",3464,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes",3462,
        "Q - Science|QP1 - QP801 Physiology|QP351 - QP495 Neurophysiology and neuropsychology",3457,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML1400 - ML3275 Vocal music",3449,
        "Q - Science|QD1 - QD999 Chemistry|QD241 - QD441 Organic chemistry",3445,
        "Q - Science|QC1 - QC999 Physics|QC851 - QC999 Meteorology. Climatology (including the earth's atmosphere)",3429,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH2001 - PH3445 Hungarian",3428,
        "H - Social sciences|HA1 - HA4737 Statistics|HA154 - HA4737 Statistical data",3424,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD6350 - HD6940.7 Trade unions. Labor unions. Worker's associations",3422,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature",3413,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK7800 - TK8360 Electronics",3399,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC4001 - PC4977 Spanish",3391,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT165.5 - HT169.9 City planning",3385,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period",3384,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS801 - DS897 Japan",3379,
        "H - Social sciences|HA1 - HA4737 Statistics|HA154 - HA4737 Statistical data|HA175 - HA4737 By region or country",3373,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations",3353,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN3311 - PN3503 Prose. Prose fiction",3342,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV701 - HV1420.5 Children",3312,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN101 - JN1179 Great Britain",3310,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS401 - DS486.8 India (Bharat)|DS433 - DS481 History",3309,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics",3291,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS781 - DS796 Local history and description",3287,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology",3283,
        "H - Social sciences|HF1 - HF6182 Commerce|HF3000 - HF4055 By region or country",3277,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV85 - HV525 By region or country",3235,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity|BR140 - BR1510 History|BR160 - BR481 By period",3232,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period",3210,
        "R - Medicine|R5 - R920 Medicine (General)|R131 - R687 History of medicine. Medical expeditions",3200,
        "E - History: America|E151 - E889 United States|E171 - E183.9 History|E171 - E180 General",3184,
        "Q - Science|QE1 - QE996.5 Geology|QE500 - QE639.5 Dynamic and structural geology",3184,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN101 - PN245 Authorship",3157,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV4485 - BV5099 Practical religion. The Christian life",3156,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ1947 - PQ2147 18th century",3155,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology|GN537 - GN673 Ethnic groups and races",3129,
        "P - Language and literature|PR1 - PR9680 English literature|PR750 - PR890 Prose",3126,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1627 - M1853 National music",3116,
        "C - Auxiliary Sciences of History|CD1 - CD6471 Diplomatics. Archives. Seals|CD921 - CD4280 Archives",3108,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA670 - DA690 Local history and description",3104,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH540 - QH549.5 Ecology",3099,
        "Q - Science|QR1 - QR502 Microbiology",3096,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators",3090,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX800 - BX4795 Catholic Church|BX2400 - BX4563 Monasticism. Religious orders",3082,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML198 - ML360 By region or country",3078,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6201 - PK6599.7 New Persian",3070,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1580 - GV1799.4 Dancing",3061,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ1305 - JZ2060 Scope of international relations",3043,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4675 - PQ4734 Individual authors, 1701-1900",3040,
        "H - Social sciences|HG1 - HG9999 Finance|HG3810 - HG4000 Foreign exchange. International finance",3006,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry",2980,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences",2975,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina",2975,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.",2966,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3450 - PG3470 1870-1917",2966,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-",2960,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK3700 - NK4695 Ceramics",2956,
        "M - Music|ML1 - ML3930 Literature on music|ML3800 - ML3923 Philosophy and physics of music",2934,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF6000 - KF6999",2932,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew",2919,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature",2916,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3950 - LC4806.5 Exceptional children and youth. Special education|LC4001 - LC4806.5 Children and youth with disabilities. Learning disabled children and youth",2914,
        "G - Geography. Anthropology. Recreation|GE1 - GE350 Environmental sciences",2900,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology|GN406 - GN517 Cultural traits, customs, and institutions",2880,
        "L - Education|LA5 - LA2396 History of education|LA201 - LA398 United States",2880,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL700 - PL889 Japanese literature|PL784 - PL866 Individual authors and works",2880,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC189 - LC214.53 Educational sociology",2873,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX440 - NX632 History of the arts",2870,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ370 - RJ550 Diseases of children and adolescents|RJ499 - RJ507 Mental disorders. Child psychiatry",2837,
        "C - Auxiliary Sciences of History|CS1 - CS3090 Genealogy",2830,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML3469 - ML3541 Popular music",2818,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC50 - NC266 History of drawing",2816,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6201 - PK6599.7 New Persian|PK6400 - PK6599.7 Literature",2809,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology",2802,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism",2790,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9680 - HD9714 Mechanical industries (including electric utilities, electronic industries, and machinery)",2784,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN1 - JN97 Europe (General)",2783,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature",2782,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC600 - DC801 Local history and description",2764,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country",2762,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ1710 - PQ1935 17th century",2748,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB3011 - LB3095 School management and discipline",2725,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2501 - F2659 Brazil",2724,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving",2711,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT198 - BT590 Christology",2706,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country",2702,
        "M - Music|M1 - M5000 Music|M3 - M3.3 Collected works of individual composers",2700,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS401 - DS486.8 India (Bharat)|DS483 - DS486.8 Local history and description",2680,
        "Q - Science|QB1 - QB991 Astronomy|QB495 - QB903 Descriptive astronomy",2678,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery",2667,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC131 - JC273 Modern state",2652,
        "Q - Science|QL1 - QL991 Zoology|QL605 - QL739.8 Chordates. Vertebrates|QL671 - QL699 Birds",2650,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF511 - BF593 Affection. Feeling. Emotion",2648,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1300 - PQ1595 Old French literature (To ca. 1500/1550)",2648,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music",2640,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F3401 - F3619 Peru",2630,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration|JL1850 - JL3899 South America",2626,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia",2623,
        "R - Medicine|RT1 - RT120 Nursing",2612,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F3051 - F3285 Chile",2583,
        "G - Geography. Anthropology. Recreation|GF1 - GF900 Human ecology. Anthropogeography",2579,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P201 - P299 Comparative grammar",2571,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK265 - DK265.95 Revolution, 1917-1921",2569,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ12 - HQ449 Sexual life|HQ75 - HQ76.8 Homosexuality. Lesbianism",2566,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa",2558,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM1001 - HM1281 Social psychology",2558,
        "Q - Science|QD1 - QD999 Chemistry|QD1 - QD65 General (including alchemy)",2555,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages",2528,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States",2516,
        "E - History: America|E151 - E889 United States|E201 - E298 The Revolution, 1775-1783",2501,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA7100 - NA7884 Domestic architecture. Houses. Dwellings",2480,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water",2465,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1170 - PR1228 Poetry",2463,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS901 - DS937 Korea",2449,
        "J - Political Science|JA1 - JA92 Political science (General)|JA71 - JA80.2 Theory. Relations to other subjects",2445,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1 - JQ1849 Asia|JQ1499 - JQ1749 East Asia. Including China, Japan, Korea",2413,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV1551 - HV3024 People with disabilities (including blind, deaf, people with physical and mental disabilities)",2399,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2201 - F2239 General",2396,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government",2392,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5801 - HF6182 Advertising",2389,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9650 - PT9876.36 Individual authors or works",2387,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA28 - DA592 History|DA129 - DA592 By period|DA129 - DA260 Early and medieval to 1485",2381,
        "Q - Science|QC1 - QC999 Physics|QC770 - QC798 Nuclear and particle physics. Atomic energy. Radioactivity",2380,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology",2374,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements",2374,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC254 - RC282 Neoplasms. Tumors. Oncology (including cancer and carcinogens)",2369,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD143 - BD237 Epistomology. Theory of knowledge",2368,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3491.2 - PG3493.96 -2001",2367,
        "Q - Science|QL1 - QL991 Zoology|QL605 - QL739.8 Chordates. Vertebrates|QL700 - QL739.8 Mammals",2365,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA9000 - NA9428 Aesthetics of cities. City planning and beautifying",2360,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS251 - DS326 Iran (Persia)",2359,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering",2359,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity|BR60 - BR67 Early Christian literature. Fathers of the Church, etc.",2357,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D299 - D472 -1789|D410 - D472 20th century",2355,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training",2345,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK2403 - JK9593 State government",2345,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue",2324,
        "U - Military science (General)|UB1 - UB900 Military administration",2322,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD300 - BD450 Ontology",2315,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques",2315,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4601 - PL4890 Dravidian languages",2308,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN3201 - JN4980 Germany",2304,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures|PK2151 - PK2212 Urdu literature",2304,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ226 - PQ310 Modern",2277,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG5201 - PG5546 Slovak",2276,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6201 - PK6599.7 New Persian|PK6400 - PK6599.7 Literature|PK6450.9 - PK6562.35 Individual authors or works",2274,
        "T - Technology.|TX1 - TX1110 Home economics.|TX642 - TX840 Cookery",2267,
        "Q - Science|QL1 - QL991 Zoology|QL360 - QL599.82 Invertebrates|QL461 - QL599.82 Insects",2266,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS556 - DS559.93 Vietnam. Annam",2264,
        "Q - Science|QB1 - QB991 Astronomy|QB1 - QB139 General",2264,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN80 - PN99 Criticism",2253,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG2397 - HG3550 By region or country",2252,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT695 - BT749 Creation",2248,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV2000 - BV3705 Missions",2248,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1050.9 - LB1091 Educational psychology",2245,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey",2243,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH426 - QH470 Genetics",2237,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9720 - HD9975 Manufacturing industries",2232,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL689 - BL980 European. Occidental",2226,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF2000 - KF2999",2224,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P121 - P149 Science of language (Linguistics)",2224,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections",2223,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF5000 - KF5999",2221,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature",2216,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E441 - E453 Slavery in the United States. Antislavery movements",2213,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF1338 - JF2112 Public administration",2211,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland",2201,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law",2201,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography",2199,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA4170 - NA7020 Public buildings|NA4590 - NA5621 Religious architecture",2199,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF173 - BF175.5 Psychoanalysis",2191,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism",2172,
        "C - Auxiliary Sciences of History|CB3 - CB482 History of Civilization|CB305 - CB430 By period",2170,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period|DC110 - DC424 Modern, 1515-|DC361 - DC424 20th century",2169,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education",2164,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism|PG2900 - PG2998 General",2164,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML3544 - ML3775 National music",2155,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ793 - HQ799.2 Youth. Adolescents. Teenagers",2152,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA8001 - PA8595 Medieval and modern Latin literature",2152,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism|PG3001 - PG3026 Special periods",2151,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE400 - NE773 History of printmaking",2113,
        "P - Language and literature|PR1 - PR9680 English literature|PR1803 - PR2165 Anglo-Norman period. Early English. Middle English",2112,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages",2111,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1201 - F1393 Mexico|F1218.5 - F1221 Antiquities. Indians",2107,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS798.92 - DS799.9 Taiwan",2104,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ71 - BJ1185 History and general works",2101,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC321 - RC571 Neurosciences. Biological psychiatry. Neuropsychiatry|RC346 - RC429 Neurology. Diseases of the nervous system",2074,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M1100 - M1160 String orchestra",2064,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1421 - F1440 Central America",2059,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z1201 - Z1946 America|Z1215 - Z1363 United States",2058,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT500 - GT2370 Costume. Dress. Fashion",2054,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2251 - F2299 Colombia",2051,
        "S - Agriculture|SF1 - SF1100 Animal culture",2045,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA1 - PA199 Classical philology",2043,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary|HV8130 - HV8280.7 By region or country",2039,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS67 - DS79.9 Iraq (Assyria, Babylonia, Mesopotamia)",2034,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS300 - JS1583 United States",2034,
        "C - Auxiliary Sciences of History|CS1 - CS3090 Genealogy|CS42 - CS2209 By region or country",2030,
        "M - Music|ML1 - ML3930 Literature on music|ML47 - ML54.8 Librettos. Scenarios",2029,
        "H - Social sciences|HG1 - HG9999 Finance|HG3810 - HG4000 Foreign exchange. International finance|HG3879 - HG3898 International monetary system",2013,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature|PL8035 - PL8844 Special languages (alphabetically)",2004,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX5011 - BX5207 Church of England",2002,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2020 - M2036 Choruses, cantatas, etc.",1995,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1 - PL481 Ural-Altaic languages",1994,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature",1994,
        "H - Social sciences|HG1 - HG9999 Finance|HG4001 - HG4285 Finance management, Business finance. Corporation finance",1991,
        "P - Language and literature|PR1 - PR9680 English literature|PR500 - PR614 Poetry",1991,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML1400 - ML3275 Vocal music|ML1600 - ML2881 Secular vocal music",1990,
        "S - Agriculture|SD1 - SD669.5 Forestry",1987,
        "C - Auxiliary Sciences of History|CJ1 - CJ6661 Numismatics",1986,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1870 - JQ3981 Africa",1980,
        "L - Education|LF14 - LF5627 Individual institutions",1977,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-|DP233 - DP272.4 20th century. 1886-",1966,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel",1964,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG801 - PG1146 Bulgarian",1959,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG3801 - PG3987 Ukrainian",1954,
        "B - Philosophy. Psychology. Religion|BH1 - BH301 Aesthetics",1949,
        "T - Technology.|TS1 - TS2301 Manufactures|TS155 - TS194 Production management. Operations management",1945,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK501 - JK901 Executive branch",1943,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP1 - BP68 General",1941,
        "H - Social sciences|HG1 - HG9999 Finance|HG201 - HG1496 Money|HG451 - HG1496 By region or country",1940,
        "L - Education|LD13 - LD7501 Individual institutions",1939,
        "L - Education|LD13 - LD7501 Individual institutions|LD13 - LD7501 United States",1939,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography",1938,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4561 - PQ4664 Individual authors, 1400-1700",1935,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants",1934,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ1600 - PQ1709 16th century",1933,
        "T - Technology.|TL1 - TL4050 Motor vehicles. Aeronautics. Astronautics|TL500 - TL777 Aeronautics. Aeronautical engineering",1926,
        "E - History: America|E11 - E143 America|E51 - E73 Pre-Columbian America. The Indians",1921,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ755.7 - HQ759.92 Parents. Parenthood",1901,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT17 - DT39 History",1899,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA750 - DA890 Scotland",1897,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT851 - HT1445 Slavery",1888,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN695 - PN779 Modern",1887,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period|DC110 - DC424 Modern, 1515-|DC251 - DC354.9 19th century",1886,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5546 - HF5548.6 Office management",1883,
        "L - Education|LD13 - LD7501 Individual institutions|LD13 - LD7501 United States|LD13 - LD7251 Universities. Colleges",1875,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD701 - DD901 Local history and description",1863,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ1 - PQ150 General",1861,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law",1860,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections",1860,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters",1857,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z3001 - Z3496 Asia",1853,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6500 - PQ6576 Individual authors, 1700-ca. 1868",1851,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK1717 - JK2248 Political rights. Practical politics",1848,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK508 - DK508.95 Ukraine",1847,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH573 - QH671 Cytology",1840,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE1001 - HE5600 Railroads. Rapid transit systems",1835,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA2001 - PA2915 Latin philology and language",1825,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G149 - G180 Travel. Voyages and travels (General)",1823,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5511.2 - JZ6299 Promotion of peace. Peaceful change",1822,
        "C - Auxiliary Sciences of History|CJ1 - CJ6661 Numismatics|CJ1 - CJ4625 Coins",1818,
        "Q - Science|QE1 - QE996.5 Geology|QE760.8 - QE899.2 Paleozoology",1814,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare",1813,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8750 - PT8951.36 Individual authors or works",1806,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV40 - HV69 Social service. Social work. Charity organization and practice (including social case work, private/public relief, institutional care, etc.)",1805,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT2400 - GT3390.5 Customs relative to private life (including children, marriage, eating and drinking, funeral customs, etc.)",1804,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D111 - D203 Medieval history",1797,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK751 - DK781 Siberia",1791,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL51 - BL65 Philosophy of religion. Psychology of religion. Religion in relation to other subjects",1784,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV8301 - HV9920.7 Penology. Prisons. Corrections|HV9441 - HV9920.7 By region or country",1782,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML198 - ML360 By region or country|ML240 - ML325 Europe",1781,
        "R - Medicine|RB1 - RB214 Pathology",1778,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS556 - DS559.93 Vietnam. Annam|DS557 - DS559.9 Vietnamese Conflict",1777,
        "M - Music|ML1 - ML3930 Literature on music|ML112.8 - ML158.8 Bibliography|ML136 - ML158 Catalogs. Discography",1775,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam",1750,
        "B - Philosophy. Psychology. Religion|BC1 - BC199 Logic",1747,
        "Q - Science|Q1 - Q390 Science (General)|Q300 - Q390 Cybernetics",1747,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6400 - PN6525 Proverbs",1743,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica",1740,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP285 - DP402 Local history and description",1739,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects",1735,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9262 - PQ9288 Individual authors, 1961-2000",1728,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments",1726,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education",1721,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS1901 - BS2970 New Testament|BS2280 - BS2545 Works about the New Testament",1709,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling",1709,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB5 - LB45 General",1700,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z693 - Z695.83 Cataloging",1698,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia",1687,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT8050 - PT8176.36 Individual authors or works",1685,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN49 - GN298 Physical anthropology. Somatology",1682,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA401 - TA492 Materials of engineering and construction. Mechanics of materials",1682,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1 - PL481 Ural-Altaic languages|PL21 - PL396 Turkic languages",1672,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases",1672,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD201 - TD500 Water supply for domestic and industrial purposes",1672,
        "Q - Science|QD1 - QD999 Chemistry|QD71 - QD142 Analytical chemistry",1671,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts",1669,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB131 - HB147 Methodology",1668,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1350 - DR2285 Local history and description",1667,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1780 - G2799 Eastern Hemisphere. Eurasia, Africa, etc.",1662,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV5800 - HV5840 Drug habits. Drug abuse",1661,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS801 - DS897 Japan|DS833 - DS891.5 History",1652,
        "Q - Science|QK1 - QK989 Botany|QK710 - QK899 Plant physiology",1650,
        "L - Education|L7 - L991 Education (General)",1646,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G149 - G180 Travel. Voyages and travels (General)|G154.9 - G180 Travel and state, Tourist Trade",1645,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6700 - PN6790 Comic books, strips, etc.",1638,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature|PT236 - PT405 Modern",1625,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC501 - QC718.8 Electricity",1622,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA8001 - PA8595 Medieval and modern Latin literature|PA8200 - PA8595 Individual authors",1619,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ1518 - BJ1697 Individual ethics. Character. Virtue",1611,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX1 - NX260 General",1609,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4001 - PN4355 Oratory. Elocution, etc.",1608,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9502 - HD9502.5 Energy industries. Energy policy. Fuel trade",1603,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM831 - HM901 Social change",1599,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT98 - BT180 God",1590,
        "E - History: America|E11 - E143 America|E101 - E135 Discovery of America and early explorations",1573,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT491 - DT516.9 British West Africa",1568,
        "N - Fine Arts|ND25 - ND3416 Painting|ND2889 - ND3416 Illuminating of manuscripts and books",1568,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia",1556,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA960 - RA1000.5 Medical centers. Hospitals. Dispensaries. Clinics (including ambulance service and nursing homes)",1556,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature",1548,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2060 - M2101.5 Choruses, part-songs, etc., with accompaniment of keyboard or other solo instrument, or unaccompanied",1546,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ5001 - PJ5060 Literature",1539,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada|F1001 - F1035 General",1537,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6146.5 - PN6231 Wit and humor",1537,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics",1536,
        "E - History: America|E151 - E889 United States|E660 - E738 Late nineteenth century, 1865-1900",1532,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK6400 - NK8459 Metalwork",1527,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB3711 - HB3840 Business cycles. Economic fluctuations",1521,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1025 - LB1050.75 Teaching (Principles and practice)|LB1049.9 - LB1050.75 Reading (General)",1517,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP1 - BP68 General|BP50 - BP68 History",1516,
        "B - Philosophy. Psychology. Religion|BF1001 - BF1389 Parapsychology",1514,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC2700 - PC3708 Dialects. Provincialisms",1509,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature",1509,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS901 - DS937 Korea|DS904.8 - DS922.46 History",1507,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature",1503,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology|CC72 - CC81 Philosophy. Theory",1500,
        "Q - Science|QE1 - QE996.5 Geology|QE701 - QE760 Paleontology",1498,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC666 - RC701 Diseases of the circulatory (cardiovascular) system",1498,
        "P - Language and literature|PR1 - PR9680 English literature|PR621 - PR744 Drama",1497,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE5601 - HE5725 Automotive transportation (including trucking, bus lines, and taxicab service)",1493,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV2000 - BV3705 Missions|BV2750 - BV3695 Missions in individual countries",1484,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM1 - BM449 General",1479,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG691 - DG817.3 Central Italy",1479,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period|DC60 - DC109 Early and medieval to 1515",1472,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance",1467,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works|PT1501 - PT1695 Middle High German, ca. 1050-1450/1500",1461,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB51 - LB885 Systems of individual educators and writers",1458,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC1001 - PC1977 Italian",1450,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG1 - PG499 Slavic philology and languages (General)",1449,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania",1447,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL1790 - BL1975 China",1446,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC1300 - NC1766 Pictorial humor, caricature, etc.",1443,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV8301 - HV9920.7 Penology. Prisons. Corrections|HV9051 - HV9230.7 The juvenile offender. Juvenile delinquency. Reform schools, etc.",1440,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History",1439,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing|Z242.9 - Z264.5 Practical printing. Including printing as a business, layout, paper and ink, machinery, type and type founding, electrotyping, desktop publishing",1435,
        "R - Medicine|RK1 - RK715 Dentistry",1434,
        "Q - Science|QC1 - QC999 Physics|QC851 - QC999 Meteorology. Climatology (including the earth's atmosphere)|QC980 - QC999 Climatology and weather",1431,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)",1430,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.|G7400 - G8198.54 Asia",1426,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.",1421,
        "T - Technology.|TN1 - TN997 Mining engineering. Metallurgy.|TN799.5 - TN948 Nonmetallic minerals",1421,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD258 - DD262 West Germany",1420,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology|HV6774 - HV7220.5 Crimes and criminal classes",1418,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH359 - QH425 Evolution",1416,
        "N - Fine Arts|N1 - N9211 Visual arts|N1 - N58 General",1415,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA643 - RA645 Disease (Communicable and noninfectious) and public health",1415,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ241 - HJ1620 By region or country",1411,
        "P - Language and literature|PR1 - PR9680 English literature|PR500 - PR614 Poetry|PR521 - PR614 By period",1408,
        "E - History: America|E151 - E889 United States|E184 - E185.98 Elements in the population|E184.5 - E185.98 Afro-Americans|E185.96 - E185.98 Biography. Genealogy",1397,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4900 - PQ4926 Individual authors, 2001-",1397,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM495 - BM532 Sources of Jewish religion. Rabbinical literature",1394,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B720 - B765 Medieval",1393,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions",1390,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT3400 - GT5090 Customs relative to public and social life (including town life, court life, festivals, holidays, ceremonies of royalty, etc.)",1389,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History",1388,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography",1367,
        "Q - Science|QE1 - QE996.5 Geology|QE640 - QE699 Stratigraphy",1367,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3224 - K3278 Individual and state",1364,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP100 - BP137 Sacred books",1362,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)",1359,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1603 - LB1696.6 Secondary education. High schools",1356,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5549 - HF5549.5 Personnel management. Employment management",1351,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1100 - PQ1297 Collections",1348,
        "Q - Science|QA1 - QA939 Mathematics|QA801 - QA939 Analytic mechanics",1333,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology",1330,
        "M - Music|MT1 - MT960 Musical instruction and study|MT90 - MT146 Analysis and appreciation of musical works",1328,
        "Q - Science|QE1 - QE996.5 Geology|QE420 - QE499 Petrology",1320,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT74 - DT107.87 History",1319,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages",1318,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature",1315,
        "F - America: local history|F1 - F975 United States local history|F590.3 - F596.3 The West. Trans-Mississippi Region. Great Plains",1305,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4201 - PQ4263 Collections",1304,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL175 - BL265 Natural theology",1303,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV7590 - JV8349 Europe",1300,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB450.9 - SB467.8 Gardens and gardening",1300,
        "P - Language and literature|PR1 - PR9680 English literature|PR621 - PR744 Drama|PR641 - PR744 By period",1299,
        "D - History (General) and History of Europe|DE1 - DE100 History of the Greco-Roman world",1292,
        "T - Technology.|TH1 - TH9745 Building construction",1289,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE380.8 - HE971 Water transportation",1287,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS3000 - JS6949.8 Europe",1287,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK2255 - JK2391 Political parties",1286,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT851 - HT1445 Slavery|HT1048 - HT1444 By region or country",1284,
        "F - America: local history|F1 - F975 United States local history|F206 - F220 The South. South Atlantic States",1279,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography",1276,
        "Q - Science|QL1 - QL991 Zoology|QL750 - QL795 Animal behavior",1276,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN661 - PN694 Medieval (to 1500)",1275,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM1001 - HM1281 Social psychology|HM1176 - HM1281 Social influence. Social pressure",1274,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE331 - HE380 Traffic engineering. Roads and highways. Streets",1272,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB901 - DB999 Hungary",1269,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements",1269,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC71 - LC120.4 Education and the state",1269,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature|PA3051 - PA3285 Literary history",1266,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.",1266,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4001 - PQ4063 General",1262,
        "P - Language and literature|PE1 - PE3729 English language|PE1700 - PE3602 Dialects. Provincialisms, etc.",1261,
        "T - Technology.|TL1 - TL4050 Motor vehicles. Aeronautics. Astronautics|TL1 - TL484 Motor vehicles. Cycles",1258,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z699 - Z699.5 Machine methods of information and retrieval. Mechanized bibliographic control",1258,
        "H - Social sciences|HA1 - HA4737 Statistics|HA29 - HA32 Theory and method of social science statistics",1254,
        "Q - Science|QM1 - QM695 Human anatomy",1254,
        "Q - Science|QB1 - QB991 Astronomy|QB495 - QB903 Descriptive astronomy|QB500.5 - QB785 Solar system",1251,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL689 - BL980 European. Occidental|BL700 - BL820 Classical (Etruscan, Greek, Roman)",1246,
        "C - Auxiliary Sciences of History|CN1 - CN1355 Inscriptions. Epigraphy",1239,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1635 - HD1702 Utilization and culture of special classes of lands (including pasture lands, water resources development)",1239,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT3701 - PT3971 Provincial, local, colonial, etc.",1237,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal",1236,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS201 - DS248 Arabian Peninsula. Saudi Arabia",1234,
        "T - Technology.|TL1 - TL4050 Motor vehicles. Aeronautics. Astronautics|TL787 - TL4050 Astronautics. Space travel",1234,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB522 - HB715 Income. Factor shares",1233,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP188 - BP190 Islamic religious life",1229,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS501 - DS518.9 East Asia. The Far East",1228,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML1400 - ML3275 Vocal music|ML2900 - ML3275 Sacred vocal music",1224,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ1305 - JZ2060 Scope of international relations|JZ1464 - JZ2060 By country, territory, or region",1223,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1037 - Z1039 Books for special classes of persons, institutions, etc.",1220,
        "R - Medicine|R5 - R920 Medicine (General)|R735 - R854 Medical education. Medical schools. Research",1219,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV1 - JV5399 Colonies and colonization",1216,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6001 - PQ6056 General",1216,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV5001 - HV5720.5 Alcoholism. Intemperance. Temperance reform",1214,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845",1210,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU520 - DU950 Smaller Island Groups",1209,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry",1200,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria",1198,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1 - PD780 General",1197,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2010 - M2017.6 Services",1194,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV4000 - BV4470 Pastoral theology",1191,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2701 - F2799 Uruguay",1190,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ601 - PQ771 Prose and prose fiction",1187,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG8001 - PG9146 Baltic",1183,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ1188 - BJ1295 Religious ethics",1182,
        "V - Naval science|V1 - V995 Naval science (General)",1180,
        "H - Social sciences|HX1 - HX970.7 Socialism. Communism. Anarchism|HX519 - HX550 Communism/socialism in relation to special topics",1174,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ2700 - PQ2726 -2001",1174,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1547 - M1600 Choruses, part-songs, etc., with accompaniment of keyboard or other solo instrument, or unaccompanied",1171,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC110 - RC216 Infectious and parasitic diseases",1171,
        "M - Music|ML1 - ML3930 Literature on music|ML100 - ML109 Dictionaries. Encyclopedias",1169,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS36 - DS39.2 Arab countries",1168,
        "A - General Works|AM1 - AM401 Museums. Collectors and collecting",1167,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ12 - HQ449 Sexual life|HQ19 - HQ30.7 Sexual behavior and attitudes. Sexuality",1166,
        "Q - Science|QC1 - QC999 Physics|QC350 - QC467 Optics. Light",1159,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ5001 - PJ5060 Literature|PJ5050 - PJ5055.51 Individual authors and works",1157,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2500 - NA2599 General works",1156,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z711 - Z711.92 Reference work. Library service to special groups",1154,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E310 - E337 1789-1809. Constitutional period",1153,
        "P - Language and literature|PR1 - PR9680 English literature|PR1 - PR56 Literary history and criticism",1152,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z716.2 - Z718.8 Libraries in relation to special topics. Including libraries and community, libraries and television, children's libraries, libraries and students",1141,
        "Q - Science|QB1 - QB991 Astronomy|QB495 - QB903 Descriptive astronomy|QB799 - QB903 Stars",1139,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing|Z124 - Z228 History",1139,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV551.2 - HV639 Emergency management",1134,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1031 - PN1049 Theory, philosophy, relations, etc.",1133,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KE - Law of Canada",1127,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KE - Law of Canada|KE1 - KE9450 Federal law. Common and collective provincial law",1127,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF698 - BF698.9 Personality",1125,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC1 - PC400 General",1120,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa",1117,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z881 - Z980 Library catalogs and bulletins",1115,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania",1111,
        "R - Medicine|RD1 - RD811 Surgery|RD520 - RD599.5 Surgery by region, system, or organ",1110,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM711 - HM806 Groups and organizations",1107,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML162 - ML197 Special periods",1107,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z1201 - Z1946 America|Z1411 - Z1939 Latin America",1107,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ1060 - HQ1064 Aged. Gerontology (Social aspects). Retirement",1103,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education",1102,
        "E - History: America|E151 - E889 United States|E456 - E655 Civil War period, 1861-1865|E456 - E459 Lincoln's administrations, 1861-April 15, 1865",1093,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA1501 - TA1820 Applied optics. Photonics",1090,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)",1088,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV6403 - JV7127 United States",1077,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR451 - PR469 19th century",1077,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLB1 - KLB6499 Russia (Federation, 1992",1075,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL2250 - PL3208 Chinese literature|PL3030 - PL3208 Provincial, local, colonial, etc.",1075,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2661 - F2699 Paraguay",1073,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA201 - PA899 Greek philology and language",1073,
        "Q - Science|QK1 - QK989 Botany|QK900 - QK989 Plant ecology",1072,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL1 - BL50 Religion (General)",1070,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM1 - BM449 General|BM150 - BM449 History",1070,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G369 - G503 Special voyages and travels",1069,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM3001 - PM4566 Languages of Mexico and Central America",1069,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD2321 - HD4730.9 Industry|HD2340.8 - HD2346.5 Small and medium-sized businesses, artisans, handicrafts, trades",1065,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT390 - HT395 Regional planning",1063,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD493 - BD701 Cosmology",1060,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL2500 - BL2592 American",1055,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK70 - DK112.42 Early to 1613",1054,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1501 - HD1542 Agricultural classes (including farm tenancy, agricultural laborers",1049,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1865 - PN1988 Special types",1048,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F3301 - F3359 Bolivia",1046,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL950 - PL998 Korean literature",1044,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC5001 - PC5498 Portuguese",1042,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1 - JQ1849 Asia|JQ200 - JQ620 India",1038,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P302 - P302.87 Discourse analysis",1037,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ12 - HQ449 Sexual life|HQ101 - HQ440.7 Prostitution",1036,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC601 - PC872 Romanian",1031,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP191 - BP253 Branches, sects, etc.",1027,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB3011 - LB3095 School management and discipline|LB3050 - LB3060.87 Educational tests, measurements, evaluations and examinations",1027,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject",1025,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1 - PB431 Modern languages",1025,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF38 - BF64 Philosophy. Relation to other topics",1022,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN500 - PN519 Collections",1017,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM300 - RM666 Drugs and their actions",1016,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6500 - JN6598 Soviet Union. Russia. Former Soviet Republics",1013,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN101 - PN245 Authorship|PN172 - PN239 Technique. Literary composition, etc.",1006,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S419 - S482 History",1006,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT3200 - CT9999 Biography. By subject",1004,
        "C - Auxiliary Sciences of History|CB3 - CB482 History of Civilization|CB195 - CB281 Civilization and race",1003,
        "Q - Science|QE1 - QE996.5 Geology|QE351 - QE399.2 Mineralogy",1000,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1100 - G1779 America. Western Hemisphere",998,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN2301 - JN3007 France",991,
        "V - Naval science|VA10 - VA750 Navies: Organization, distribution, naval situation",984,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6700 - PQ6726 Individual authors, 2001-",982,
        "R - Medicine|R5 - R920 Medicine (General)|R723 - R726 Medical philosophy. Medical ethics",978,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E838 - E840.8 General",974,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica",973,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T57 - T57.97 Applied mathematics. Quantitative methods",973,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA773 - RA788 Personal health and hygiene",966,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P118 - P118.75 Language acquisition",965,
        "H - Social sciences|HF1 - HF6182 Commerce|HF1701 - HF2701 Tariff. Free trade. Protectionism",963,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2699 - LC2913 Blacks. African Americans",963,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3000 - PA3049 Classical literature",961,
        "J - Political Science|J1 - J981 General legislative and executive papers",957,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History|DR481 - DR605 By period",956,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM621 - HM656 Culture",956,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6146.5 - PN6231 Wit and humor|PN6157 - PN6222 By region or country",949,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC51 - JC93 Ancient state",944,
        "D - History (General) and History of Europe|DF10 - DF951 History of Greece|DF701 - DF951 Modern Greece",943,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD4909 - HD5100.9 Wages",943,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT641 - DT665 Zaire. Congo (Democratic Republic). Belgian Congo",942,
        "Q - Science|QL1 - QL991 Zoology|QL605 - QL739.8 Chordates. Vertebrates|QL614 - QL639.8 Fishes",941,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1160 - NK1590 Decoration and ornament. Design",927,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL2700 - BL2790 Rationalism",926,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G575 - G890 Arctic and Antarctic regions",925,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ12 - HQ449 Sexual life|HQ31 - HQ64 Sex instruction and sexual ethics",923,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.|G5700 - G6967 Europe",922,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS350 - DS375 Afghanistan",920,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E740 - E749 General|E744 - E744.5 Diplomatic history. Foreign and general relations",920,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1700 - ND2495 Watercolor painting",918,
        "Q - Science|QE1 - QE996.5 Geology|QE500 - QE639.5 Dynamic and structural geology|QE521 - QE545 Volcanoes and earthquakes",917,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3701 - LC3740 Immigrants or ethnic and linguistic minorities. Bilingual schools and bilingual education",916,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5381 - HF5386 Vocational guidance. Career development",915,
        "C - Auxiliary Sciences of History|CN1 - CN1355 Inscriptions. Epigraphy|CN120 - CN740 Ancient inscriptions",914,
        "M - Music|ML1 - ML3930 Literature on music|ML62 - ML90 Special aspects. Including writings of musicians",914,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving",914,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P306 - P310 Translating and interpreting",913,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK8800 - NK9505.5 Textiles",912,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL501 - PL699 Japanese language",912,
        "D - History (General) and History of Europe|DF10 - DF951 History of Greece|DF501 - DF649 Medieval Greece. Byzantine Empire, 323-1453",908,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T57 - T57.97 Applied mathematics. Quantitative methods|T57.6 - T57.97 Operations research. Systems analysis",906,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1101 - LB1139 Child study",905,
        "U - Military science (General)|UG1 - UG620 Military engineering",902,
        "Q - Science|QA1 - QA939 Mathematics|QA299.6 - QA433 Analysis|QA303 - QA316 Calculus",899,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP100 - BP137 Sacred books|BP100 - BP134 Koran",897,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF800 - JF1177 Political rights. Political participation",895,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP188 - BP190 Islamic religious life|BP188.45 - BP189.65 Sufism. Mysticism. Dervishes",887,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9751 - BX9793 Shakers. United Society of Believers. Millennial Church",887,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK1717 - JK2248 Political rights. Practical politics|JK1961 - JK2248 Electoral system",885,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S590 - S599.9 Soils. Soil science (Including soil surveys, soil chemistry, soil structure, soil-plant relationships)",882,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL175 - BL265 Natural theology|BL239 - BL265 Religion and science",880,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D299 - D472 -1789|D351 - D400 19th century. 1801-1914/1920",877,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA5000 - PA5660 Byzantine and modern Greek literature",875,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1100 - G1779 America. Western Hemisphere|G1100 - G1692 North America",866,
        "Q - Science|QR1 - QR502 Microbiology|QR1 - QR74.5 General",866,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP97.3 - DP160.8 711-1516. Moorish domination and the Reconquest",865,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3515 - PG3550 Outside the Russian Federation",865,
        "L - Education|L7 - L991 Education (General)|L7 - L97 Periodicals. Societies",864,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1119 - PR1151 By period",862,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE380.8 - HE971 Water transportation|HE561 - HE971 Shipping",858,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB421 - SB439.8 Classes of plants (including annuals, climbers, ferns, lawns, perennials, shrubs)",856,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG8001 - PG9146 Baltic|PG8801 - PG9146 Latvian",855,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL1790 - BL1975 China|BL1899 - BL1942.85 Taoism",854,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT56.8 - DT69.5 Antiquities",853,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States|DT271 - DT299 Algeria",850,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA600 - DA667 Description and travel. Guidebooks",847,
        "Q - Science|QD1 - QD999 Chemistry|QD146 - QD197 Inorganic chemistry",846,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1811 - HG2351 Special classes of banks and financial institutions",845,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History",844,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature|PT711 - PT871 Prose",843,
        "E - History: America|E151 - E889 United States|E171 - E183.9 History|E171 - E180 General|E176 - E176.8 Biography",842,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV640 - HV645 Refugee problems",842,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History",841,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT1501 - HT1595 Races (including race as a social group and race relations in general)",841,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature|PA6001 - PA6095.5 Literary history",839,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries",837,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K5000 - K5582 Criminal law and procedure",836,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD280 - DD289.5 East Germany",835,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian",835,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM5001 - PM7356 Languages of South America and the West Indies",835,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries",834,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian",833,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK5100 - NK5440 Glass",832,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV551.2 - HV639 Emergency management|HV553 - HV639 Relief in case of disasters",831,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K321 - K474 Schools of legal theory",830,
        "A - General Works|AZ101 - AZ999 History of scholarship and learning. The humanities",829,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH501 - QH531 Life",827,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS651 - DS689 Philippines",823,
        "L - Education|LF14 - LF5627 Individual institutions|LF14 - LF1257 Great Britain",819,
        "N - Fine Arts|N1 - N9211 Visual arts|N61 - N72 Theory. Philosophy. Aesthetics of the visual arts",817,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG133 - RG137.6 Conception. Artificial insemination. Contraception",817,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1530 - M1546.5 Choruses with orchestra or other ensemble",813,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z668 - Z669.7 Library education. Research",808,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1111 - BL1143.2 Sacred books. Sources",807,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC311 - JC314 Nationalism. Nation state",806,
        "U - Military science (General)|U1 - U900 Military science (General)|U21 - U22.3 War. Philosophy. Military sociology",806,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8601 - BX8695 Mormons. Church of Jesus Christ of Latter-Day Saints",805,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3230 - PG3238 Poetry",803,
        "N - Fine Arts|N1 - N9211 Visual arts|N5198 - N5299 Private collections and collectors",802,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z105 - Z115.5 Manuscripts. Paleography",801,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA790 - RA790.95 Mental health. Mental illness prevention",800,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity|BR1690 - BR1725 Biography",797,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ5061 - PJ5192 Other languages used by Jews",796,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN3311 - PN3503 Prose. Prose fiction|PN3355 - PN3383 Technique. Authorship",794,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBP1 - KBP4860 Islamic law. Shari'ah. Fiqh",793,
        "M - Music|ML1 - ML3930 Literature on music|ML3800 - ML3923 Philosophy and physics of music|ML3845 - ML3877 Aesthetics",793,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM1001 - HM1281 Social psychology|HM1106 - HM1171 Interpersonal relations. Social behavior",791,
        "Q - Science|QL1 - QL991 Zoology|QL605 - QL739.8 Chordates. Vertebrates|QL640 - QL669.3 Reptiles and amphibians",791,
        "G - Geography. Anthropology. Recreation|GF1 - GF900 Human ecology. Anthropogeography|GF500 - GF900 By region or country",790,
        "R - Medicine|RE1 - RE994 Opthamology",788,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal|DP535 - DP682.2 History",787,
        "M - Music|MT1 - MT960 Musical instruction and study|MT5.5 - MT7 Music theory",787,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1221 - GV1469.62 Indoor games and amusements",785,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z678 - Z678.88 Library administration and organization. Constitution",785,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN1008.2 - PN1009.5 Juvenile literature",784,
        "H - Social sciences|HX1 - HX970.7 Socialism. Communism. Anarchism|HX821 - HX970.9 Anarchism",783,
        "E - History: America|E11 - E143 America|E101 - E135 Discovery of America and early explorations|E121 - E135 Post-Columbian period. El Dorado",782,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ2361 - HJ3192.7 By region or country",782,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB2000 - DB3150 Czechoslovakia|DB2700 - DB3150 Slovakia",780,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT93 - CT206 General collective biography",777,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV712 - GV725 Athletic contests. Sports Events",777,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2005 - HJ2216 Income and expenditure. Budget",777,
        "L - Education|LA5 - LA2396 History of education|LA2301 - LA2396 Biography",777,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1100 - PT1141 General",777,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS591 - DS599 Malaysia. Malay Peninsula. Straits Settlements",776,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL2390 - BL2490 African",773,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG600 - DG684.72 Northern Italy",771,
        "Q - Science|QM1 - QM695 Human anatomy|QM1 - QM511 General",768,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD878 - TD894 Special types of environmental pollution (including soil, air, and noise pollution)",766,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2341 - LB2341.95 Supervision and administration. Business management",765,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2835 - NA4050 Details and decoration",764,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1 - JQ1849 Asia|JQ1758 - JQ1852 Middle East. Including Turkey, Iran, Israel, Arabian Peninsula",763,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1651 - PK1799 Bengali",763,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV701 - HV1420.5 Children|HV873 - HV887 Destitute, neglected, and abandoned children. Street children",761,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1190 - RA1270 Toxiciology. Poisons",761,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB183 - SB317 Field crops (including cereals, forage crops, grasses, legumes, root crops, sugar plants, textile plants, alkaloidal plants, medicinal plants)",760,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2830 - PG2847 Belarusian",757,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ5061 - PJ5192 Other languages used by Jews|PJ5111 - PJ5192 Yiddish",757,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP160 - BP165 General works on Islam",756,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology|HV6035 - HV6197 Criminal anthropology (including criminal types, criminal psychology, prison psychology, causes of crime)",755,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F3701 - F3799 Ecuador",754,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History|DR1259 - DR1321 By period",753,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9401 - BX9640 Reformed or Calvinistic Churches",749,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law",748,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC1401 - LC2572 Women",747,
        "L - Education|LF14 - LF5627 Individual institutions|LF14 - LF1257 Great Britain|LF14 - LF797 England",742,
        "Q - Science|QD1 - QD999 Chemistry|QD901 - QD999 Crystallography",742,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5511.2 - JZ6299 Promotion of peace. Peaceful change|JZ5586 - JZ6009 International security. Disarmament",739,
        "S - Agriculture|SK1 - SK663 Hunting",737,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)",737,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z696 - Z697 Classification and notation",736,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV1450 - HV1494 Aged",734,
        "P - Language and literature|PR1 - PR9680 English literature|PR1490 - PR1799 Anglo-Saxon literature",734,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History|DR1259 - DR1321 By period|DR1281 - DR1321 -1918",733,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB1775 - LB1785 Professional aspects of teaching and school administrators. Vocational guidance",733,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.|PN4775 - PN4784 Technique. Practical journalism",733,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation",730,
        "T - Technology.|TR1 - TR1050 Photography|TR845 - TR899 Cinematography. Motion pictures",730,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German|PF5000 - PF5951 Dialects. Provincialism, etc.",729,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary|HV8031 - HV8080 Police duty. Methods of protection",728,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD101 - HD1395.5 Land use|HD1361 - HD1395.5 Real estate business",724,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861",722,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1 - PT80 Literary history and criticism",720,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS41 - DS66 Middle East. Southwestern Asia. Ancient Orient. Arab East. Near East|DS51 - DS54.95 Local history and description",719,
        "Q - Science|QA1 - QA939 Mathematics|QA101 - QA141.8 Elementary mathematics. Arithmetic",716,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D51 - D90 Ancient history",714,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV1 - JV5399 Colonies and colonization|JV500 - JV5399 Colonizing nations",714,
        "Q - Science|QR1 - QR502 Microbiology|QR180 - QR189.5 Immunology",713,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T58.5 - T58.64 Information technology",711,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC950 - NC996 Illustration",710,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB1201 - PB1449 Irish",710,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM101 - PM2711 American languages (Aboriginal)",710,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL74 - BL99 Religions of the world",709,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1421 - F1440 Central America|F1435 - F1435.3 Mayas",709,
        "Q - Science|QC1 - QC999 Physics|QC770 - QC798 Nuclear and particle physics. Atomic energy. Radioactivity|QC793 - QC793.5 Elementary particle physics",708,
        "Q - Science|QK1 - QK989 Botany|QK474.8 - QK495 Spermatophyta. Phanerogams",708,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6061 - PQ6073 Modern",705,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL624 - BL629.5 Religious life",703,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL425 - BL490 Religious doctrines (General)",702,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB2832 - LB2844.1 Teaching personnel",701,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control",699,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5437 - HF5444 Purchasing. Selling. Sales personnel. Sales executives",696,
        "M - Music|MT1 - MT960 Musical instruction and study|MT1 - MT5 History and criticism",695,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9650 - PT9876.36 Individual authors or works|PT9725 - PT9850 19th century",694,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML162 - ML197 Special periods|ML169.8 - ML190 Medieval. Renaissance",691,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT491 - DT516.9 British West Africa|DT515 - DT515.9 Nigeria",690,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1780 - G2799 Eastern Hemisphere. Eurasia, Africa, etc.|G1791 - G2082 Europe",688,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD5306 - HD5474 Labor disputes. Strikes and lockouts",688,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC149 - LC161 Literacy. Illiteracy",688,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT1313 - BT1480 History of specific doctrines and movements. Heresies and schisms",687,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1990 - PN1992.92 Broadcasting|PN1991 - PN1991.9 Radio broadcasts",687,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV8301 - HV9920.7 Penology. Prisons. Corrections|HV9261 - HV9430.7 Reformation and reclamation of adult prisoners",686,
        "C - Auxiliary Sciences of History|CS1 - CS3090 Genealogy|CS2300 - CS3090 Personal or family names",685,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT750 - BT811 Salvation. Soteriology",683,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature|PA3300 - PA3516 Collections",683,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBP1 - KBP4860 Islamic law. Shari'ah. Fiqh|KBP173.25 - KBP0.6 Islamic law and other disciplines or subjects",680,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ400 - PQ491 Poetry",680,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB469 - SB476 Landscape gardening. Landscape architecture",680,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law",678,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLA1 - KLA9999 Russia. Soviet Union",678,
        "N - Fine Arts|N1 - N9211 Visual arts|N81 - N390 Study and teaching. Research",677,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z987 - Z997 Private libraries. Book collecting. Including bibliophilism, bookplates",677,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law",675,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK2200 - NK2750 Furniture",675,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1 - RA418.5 Medicine and the state|RA410 - RA410.9 Medical economics. Economics of medical care. Employment",671,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering",671,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT170 - HT178 Urban renewal. Urban redevelopment",670,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ251 - BQ799 History",669,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK70 - DK112.42 Early to 1613|DK70 - DK99.7 Rus'",669,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ9103 - HJ9695 Local finance. Municipal finance (including the revenue, budget, expenditures of counties, boroughs, municipalities, etc.)",667,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG819 - DG875 Southern Italy",664,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1401 - K1578 Intellectual property",663,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8750 - PT8951.36 Individual authors or works|PT8800 - PT8942 19th century",663,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC215 - LC238.4 Community and the school",662,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z719 - Z725 Libraries (General)",660,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ4835 - JZ5490 International organizations and associations",659,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature|PT175 - PT230 Medieval",659,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ1100 - BQ3340 Tripitaka (Canonical literature)",657,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX650 - NX694 Special subjects, characters, persons, religious arts, etc.",656,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z3501 - Z3975 Africa",655,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine",652,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT348 - DT363.3 Central Sub-Saharan Africa",651,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM695 - RM893 Physical medicine. Physical therapy (including massage, exercise, occupational therapy, hydrotherapy, phototherapy, radiotherapy, thermotherapy, elect",651,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS376 - DS392.2 Pakistan",648,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6099 - PN6110 Poetry",648,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS80 - DS90 Lebanon (Phenicia)",647,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ151 - PQ221 Medieval. Old French",646,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR4501 - CR6305 Chivalry and knighthood (Orders, decorations, etc.)",644,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV7200 - JV7539 Canada, Latin America, etc.",644,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD101 - HD1395.5 Land use|HD1241 - HD1339 Land tenure",641,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN3311 - PN3503 Prose. Prose fiction|PN3427 - PN3448 Special kinds of fiction. Fiction genres",641,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR251 - PR369 Medieval. Middle English (1066-1500)",641,
        "V - Naval science|VA10 - VA750 Navies: Organization, distribution, naval situation|VA400 - VA750 Other regions or countries",641,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD301 - DD454 Prussia",640,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN49 - GN298 Physical anthropology. Somatology|GN281 - GN289 Human evolution",639,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE305 - HE311 Urban transportation",639,
        "N - Fine Arts|N1 - N9211 Visual arts|N4390 - N5098 Exhibitions",636,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History",635,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E806 - E813 Franklin Delano Roosevelt's administrations, 1933-April 12, 1945",634,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT339 - MT533 Wind instruments",634,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC189 - LC214.53 Educational sociology|LC213 - LC214.53 Educational equalization. Right to education",633,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1001 - G1046 World atlases",632,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K5000 - K5582 Criminal law and procedure|K5015.4 - K5350 Criminal law",629,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1780 - G2799 Eastern Hemisphere. Eurasia, Africa, etc.|G2200 - G2444.84 Asia",628,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA5000 - PA5660 Byzantine and modern Greek literature|PA5301 - PA5637 Individual authors",628,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC870 - RC923 Diseases of the genitourinary system. Urology",628,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB71 - HB74 Economics as a science. Relation to other subjects",625,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR471 - PR479 20th century",624,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1 - PJ489 General",623,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK30 - DJK51 History",622,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period",622,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT1772 - DT1974 History",620,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism",618,
        "U - Military science (General)|U1 - U900 Military science (General)|U27 - U43 History of military science",618,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS36 - DS39.2 Arab countries|DS37 - DS39.2 History",617,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z682 - Z682.4 Personnel",616,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1099 - LC1099.5 Multicultural education (General)",612,
        "M - Music|MT1 - MT960 Musical instruction and study|MT40 - MT67 Composition. Elements and techniques of music",612,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6131 - PQ6153 Prose",612,
        "U - Military science (General)|U1 - U900 Military science (General)|U400 - U714 Military education and training",610,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation",607,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2331.7 - LB2335.8 Teaching personnel",606,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2102 - M2114.8 Songs",606,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC799 - RC869 Diseases of the digestive system. Gastroenterology",606,
        "H - Social sciences|HG1 - HG9999 Finance|HG3691 - HG3769 Credit. Debt. Loans (including credit institutions, credit instruments, consumer credit, bankruptcy)",605,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works|PT1701 - PT1797 1500-ca. 1700",600,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E841 - E843 Kennedy's administration, 1961-November 22, 1963",599,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL2000 - BL2032 India",598,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1139.2 - LB1139.5 Early childhood education",596,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1110 - PN1279 History and criticism",595,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP166 - BP166.94 Theology (Kalam)",594,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism|PG3041 - PG3065 Poetry",594,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR441 - PR449 18th century",594,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF201 - JF619 Organs and functions of government",592,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9650 - PT9876.36 Individual authors or works|PT9876 - PT9876.36 1961-2000",592,
        "U - Military science (General)|U1 - U900 Military science (General)|U161 - U163 Strategy",592,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing",590,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL950 - PL998 Korean literature|PL986 - PL993 Individual authors and works",589,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1075 - HQ1075.5 Sex role",588,
        "J - Political Science|JA1 - JA92 Political science (General)|JA81 - JA84 History",588,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1 - RA418.5 Medicine and the state|RA418 - RA418.5 Medicine and society. Social medicine. Medical sociology",588,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1 - RA418.5 Medicine and the state|RA407 - RA409.5 Health status indicators. Medical statistics and surveys",585,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members",584,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3950 - LC4806.5 Exceptional children and youth. Special education|LC3991 - LC4000 Gifted children and youth",584,
        "W - Health Sciences",584,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1035 - Z1035.9 Best books",584,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT154.1 - DT159.9 Sudan. Anglo-Egyptian Sudan",583,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G200 - G336 History of discoveries, explorations, and travel",583,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5387 - HF5387.5 Business ethics",583,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5717 - HF5734.7 Business communication",583,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4077 - PQ4088 Modern",582,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology|HV6201 - HV6249 Criminal classes",580,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1300 - ND1337 Portraits",577,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations",576,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT19 - BT37 Doctrine and dogma",575,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2695 - NA2793 Architectural drawing and design",575,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal|DP535 - DP682.2 History|DP558 - DP682.2 By period",574,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium",572,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland",568,
        "T - Technology.|T1 - T995 Technology (General)|T14.7 - T33 History of technology",568,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P901 - P1091 Extinct ancient or medieval languages",567,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1940 - NE2232.5 Etching and aquatint",565,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF231 - BF299 Sensation. Aesthesiology",564,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA565 - RA600 Environmental health (including sewage disposal, air pollution, nuisances, water supply)",564,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS125 - BS355 Modern texts and versions",563,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT697 - TT927 Home arts. Homecrafts (including sewing, embroidery, decorative crafts)",561,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium",559,
        "J - Political Science|J1 - J981 General legislative and executive papers|J100 - J981 Other regions and countries",557,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9191 - PQ9255 Individual authors and works, 1500-1700",553,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1101 - GV1150.9 Fighting sports: Bullfighting, boxing, fencing, etc.",552,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P99 - P99.4 Semiotics. Signs and symbols",552,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B69 - B99 General works",551,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary|HV7935 - HV8025 Administration and organization",551,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS6950 - JS7509 Asia",551,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML198 - ML360 By region or country|ML198 - ML239 America",550,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE9761 - HE9900 Air transportation. Airlines",549,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN451 - PN497 Biography",549,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8201 - BX8495 Methodism",548,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ8001 - HJ8899 Public debts",547,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML198 - ML360 By region or country|ML330 - ML345 Asia",546,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P325 - P325.5 Semantics",546,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6201 - BX6495 Baptists",545,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2061 - PN2071 Art of acting",545,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1160 - NK1590 Decoration and ornament. Design|NK1175 - NK1498 History",544,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology|GB561 - GB649 Other natural landforms: floodplains, caves, deserts, dunes, etc.",543,
        "A - General Works|AE1 - AE88 Encyclopedias",542,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6080 - PN6095 Quotations",539,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4091 - PQ4131 Poetry",538,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR421 - PR429 Elizabethan era (1550-1640)",538,
        "Q - Science|QC1 - QC999 Physics|QC350 - QC467 Optics. Light|QC450 - QC467 Spectroscopy",538,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL300 - BL325 The myth. Comparative mythology",537,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS92 - DS99 Syria",536,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E310 - E337 1789-1809. Constitutional period|E311 - E320 Washington's administrations, 1789-1797",536,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography|GA341 - GA1776 Maps. By region or country",534,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1 - PN9 Periodicals",534,
        "Q - Science|QK1 - QK989 Botany|QK640 - QK673 Plant anatomy",534,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works|AC1 - AC195 Collections of monographs, essays, etc.|AC1 - AC8 American and English",532,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN5201 - JN5690 Italy",530,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL5051 - PL5497 Malayan (Indonesian) languages",528,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV697 - HV700.7 Families. Mothers. Widow's pensions",527,
        "B - Philosophy. Psychology. Religion|BH1 - BH301 Aesthetics|BH81 - BH208 History",524,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS351 - HS929 Freemasons",523,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV4480 - HV4630 Mendicancy. Vagabondism. Tramps. Homelessness",523,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT341 - TT641 Nutrition. Foods and food supply",522,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ4543 - PJ4937 Language (Biblical and modern)",521,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK2901 - PK2979 General",521,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6098.7 - PQ6129 Drama",521,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG1100 - UG1435 Equipment and supplies",521,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1140 - LB1140.5 Preschool education. Nursery schools",520,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM7801 - PM7895 Mixed languages",520,
        "Q - Science|QB1 - QB991 Astronomy|QB980 - QB991 Cosmogony. Cosmology",519,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB2000 - DB3150 Czechoslovakia|DB2300 - DB2650 Local history and description of Czech lands",517,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS31 - DS35.2 History",517,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV4023 - HV4470.7 Poor in cities. Slums",516,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC361 - LC629 Christian education. Church education",516,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1001 - PJ1989 Egyptology",516,
        "E - History: America|E11 - E143 America|E101 - E135 Discovery of America and early explorations|E111 - E120 Columbus",515,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training|GV460 - GV555 Gymnastics. Gymnastic exercises (including calisthenics, heavy exercises, acrobatics, etc.)",515,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism|PG3091 - PG3099 Prose",509,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN851 - PN884 Comparative literature",509,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP600 - BP610 Other beliefs and movements",507,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD84 - DD257.4 History|DD121 - DD257.4 By period|DD125 - DD174.6 Early and medieval to 1519",506,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ4835 - JZ5490 International organizations and associations|JZ4850 - JZ5490 Intergovernmental organizations. IGOs",506,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT8050 - PT8176.36 Individual authors or works|PT8100 - PT8167 19th century",506,
        "R - Medicine|RB1 - RB214 Pathology|RB37 - RB56.5 Clinical pathology. Laboratory technique",506,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK1001 - TK1841 Production of electric energy or power. Powerplants. Central stations",504,
        "Q - Science|QC1 - QC999 Physics|QC81 - QC114 Weights and measures",503,
        "B - Philosophy. Psychology. Religion|BF1001 - BF1389 Parapsychology|BF1001 - BF1045 Psychic research. Psychology of the conscious",502,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL901 - PL949 Korean language",502,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases|SB621 - SB795 Plant pathology",502,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB1001 - GB1199.6 Groundwater. Hydrogeology",501,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6075 - PQ6098 Poetry",501,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD131 - SD247.5 History of forestry. Forest conditions",501,
        "Q - Science|QH1 - QH278.5 Natural history (General)|QH201 - QH278.5 Microscopy",500,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2000 - M2007 Oratorios",499,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC321 - RC571 Neurosciences. Biological psychiatry. Neuropsychiatry|RC346 - RC429 Neurology. Diseases of the nervous system|RC423 - RC429 Speech and language disorders",499,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1501 - LB1547 Primary education",498,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P87 - P96 Communication. Mass media|P95 - P95.6 Oral communication. Speech",498,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS901 - DS937 Korea|DS904.8 - DS922.46 History|DS918 - DS921.8 War and intervention, 1950-1953",497,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G521 - G539 Adventures, shipwrecks, buried treasure, etc.",497,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature|PA3601 - PA3681 Translations",496,
        "Q - Science|QC1 - QC999 Physics|QC251 - QC338.5 Heat",496,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ500 - PQ591 Drama",493,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration|JL1 - JL500 Canada",492,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature|PT605 - PT709 Drama",492,
        "T - Technology.|T1 - T995 Technology (General)|T173.2 - T174.5 Technological change",491,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS13 - DS28 Ethnography",490,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1 - PJ489 General|PJ1 - PJ195 Languages",490,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB2831.6 - LB2831.99 Administrative personnel",489,
        "U - Military science (General)|UF1 - UF910 Artillery",489,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2326.4 - LB2330 Institutions of higher education",488,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT819 - BT891 Eschatology. Last things",487,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1491 - HD1492.5 Cooperative agriculture",487,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1293 - NB1895 Special forms",487,
        "Q - Science|QE1 - QE996.5 Geology|QE901 - QE996.5 Paleobotany",486,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU108 - DU117.2 History",484,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN8101 - JN8399 Spain",484,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes",484,
        "T - Technology.|TX1 - TX1110 Home economics.|TX901 - TX946.5 Hospitality industry. Hotels, clubs, restaurants, food service, etc.",484,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine",482,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1003 - Z1003.5 Choice of books. Books and reading. Book reviews",482,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK3591 - PK4485 Sanskrit",480,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z266 - Z276 Bookbinding. Book decoration",480,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC997 - NC1003 Commercial art. Advertising art",479,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV6201 - JV6348 Immigration",478,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ450 - HQ472 Erotica",477,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation",477,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK7800 - TK8360 Electronics|TK7885 - TK7895 Computer engineering. Computer hardware",475,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT1095 - BT1255 Apologetics. Evidences of Christianity",474,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5428 - HF5429.6 Retail trade",474,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1001 - RA1171 Forensic medicine. Medical jurisprudence. Legal medicine",474,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB2001 - PB3029 Brittanic group",473,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E876 - E880 Reagan's administrations, 1981-1989",472,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK401 - PK976 Sanskrit",472,
        "L - Education|LE3 - LE78 Individual institutions",471,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)",471,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States|DT301 - DT330 Morocco",470,
        "M - Music|MT1 - MT960 Musical instruction and study|MT820 - MT915 Singing and vocal technique",470,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects",470,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1019 - Z1033 Special classes of books. Including prohibited books, rare books, paperbacks, reprints",470,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT3200 - CT9999 Biography. By subject|CT3200 - CT3830 Biography of women (Collective)",469,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU400 - DU430 New Zealand",468,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1562.5 - BF1584 Witchcraft",467,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period",467,
        "R - Medicine|RF1 - RF547 Otorhinolaryngology",465,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9131 - PQ9188 Collections",464,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P501 - P769 Indo-European (Indo-Germanic) philology",463,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC401 - TC506 River, lake, and water-supply engineering (General)",463,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM101 - PM2711 American languages (Aboriginal)|PM549 - PM2711 Special languages of the United States and Canada (alphabetically)",462,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT595 - BT680 Mary, Mother of Jesus Christ. Mariology",461,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden",460,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ4629 - HJ4830 Income tax",459,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement",459,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6690 - JN6699 Russia (Federation)",458,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures|PK1931 - PK1970 Hindi language",458,
        "U - Military science (General)|U1 - U900 Military science (General)|U263 - U264.5 Atomic warfare. Atomic weapons",458,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1088 - HQ1090.7 Men",457,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3260 - PG3299 Prose",457,
        "T - Technology.|TS1 - TS2301 Manufactures|TS200 - TS770 Metal manufactures. Metalworking",457,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS561 - DS589 Thailand (Siam)",456,
        "D - History (General) and History of Europe|DX101 - DX301 History of Gypsies",456,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2155 - F2191 Caribbean area. Caribbean Sea",456,
        "B - Philosophy. Psychology. Religion|BC1 - BC199 Logic|BC171 - BC199 Special topics",454,
        "Q - Science|QR1 - QR502 Microbiology|QR75 - QR99.5 Bacteria",454,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1585 - BF1623 Magic. Hermetics. Necromancy",453,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA700 - DA745 Wales",453,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G80 - G99 History of geography",453,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ8001 - HJ8899 Public debts|HJ8101 - HJ8899 By region or country",453,
        "A - General Works|AG2 - AG600 Dictionaries and other general reference works",452,
        "A - General Works|AY10 - AY2001 Yearbooks. Almanacs. Directories",451,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL550 - BL619 Worship. Cultus",451,
        "E - History: America|E151 - E889 United States|E171 - E183.9 History|E171 - E180 General|E175 - E175.7 Historiography",451,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT220 - MT255 Piano",451,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8001 - BX8080 Lutheran churches",450,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS41 - DS66 Middle East. Southwestern Asia. Ancient Orient. Arab East. Near East|DS51 - DS54.95 Local history and description|DS54 - DS54.95 Cyprus",449,
        "L - Education|LG21 - LG961 Individual institutions",449,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E838 - E840.8 General|E840 - E840.3 Diplomatic history. Foreign and general relations",447,
        "B - Philosophy. Psychology. Religion|BF1001 - BF1389 Parapsychology|BF1048 - BF1108 Hallucinations. Sleep. Dreaming. Visions",446,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D242 - D283.5 1601-1715. 17th century",446,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR4501 - CR6305 Chivalry and knighthood (Orders, decorations, etc.)|CR4651 - CR6305 Orders, etc.",444,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK501 - JK901 Executive branch|JK631 - JK873 Civil Service. Departments and agencies",444,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC2700 - PC3708 Dialects. Provincialisms|PC3201 - PC3366 Provencal (Old)",442,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1 - RA418.5 Medicine and the state|RA411 - RA415 Provisions for personal medical care. Medical care plans",441,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z657 - Z659 Freedom of the press. Censorship",441,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG1801 - PG1962 Slovenian",440,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR32 - DR48.5 History. Balkan War, 1912-1913",439,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5548.7 - HF5548.85 Industrial psychology",439,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC189 - LC214.53 Educational sociology|LC212 - LC212.86 Discrimination in education",439,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP785 - TP869 Clay industries. Ceramics. Glass",439,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV770.3 - GV840 Water sports: Canoeing, sailing, yachting, scuba diving, etc.",438,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)",437,
        "L - Education|L7 - L991 Education (General)|L900 - L991 Directories of educational institutions",436,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP171 - BP173 Relation of Islam to other religions",435,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC71 - RC78.7 Examination. Diagnosis (including radiography)",435,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature|PT500 - PT597 Poetry",434,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS331 - DS349.9 Southern Asia. Indian Ocean Region",433,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF697 - BF697.5 Differential psychology. Individuality. Self",431,
        "Q - Science|QD1 - QD999 Chemistry|QD241 - QD441 Organic chemistry|QD415 - QD436 Biochemistry",429,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments",428,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1340 - ND1367 Landscape painting",428,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP248.13 - TP248.65 Biotechnology",428,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF201 - JF619 Organs and functions of government|JF441 - JF619 Legislation. Legislative process. Law",426,
        "R - Medicine|RD1 - RD811 Surgery|RD701 - RD811 Orthopedic surgery",426,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8901 - BX9225 Presbyterianism. Calvinistic Methodism",425,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA4050 - ZA4750 Information in specific formats or media",425,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE6000 - HE7500 Postal service. Stamps. Philately",424,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC581 - RC607 Immunologic diseases. Allergy",424,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E310 - E337 1789-1809. Constitutional period|E331 - E337 Jefferson's administrations, 1801-1809",421,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL700 - PL889 Japanese literature|PL700 - PL751.5 History and criticism",421,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC1200 - RC1245 Sports medicine",421,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB221 - HB236 Price",420,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB1805 - LB2151 State teachers colleges",420,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS801 - DS897 Japan|DS894.21 - DS897 Local history and description",419,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB3602 - LB3640 School life. Student manners and customs",419,
        "Q - Science|QB1 - QB991 Astronomy|QB460 - QB466 Astrophysics",419,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD95 - BD131 Metaphysics",418,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD172 - TD193.5 Environmental pollution",418,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV800 - BV873 Sacraments. Ordinances",417,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E341 - E370 Madison's administrations, 1809-1817",416,
        "Q - Science|QA1 - QA939 Mathematics|QA71 - QA90 Instruments and machines|QA75 - QA76.95 Calculating machines|QA75.5 - QA76.95 Electronic computers. Computer science|QA76.75 - QA76.76 Computer software",416,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4061 - BQ4570 Doctrinal and systematic Buddhism",414,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV3750 - BV3799 Evangelism. Revivals",414,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ3995 - JQ6651 Australia. New Zealand. Pacific Ocean islands",414,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M1200 - M1269 Band",414,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP500 - TP660 Fermentation industries. Beverages. Alcohol",414,
        "U - Military science (General)|UH20 - UH910 Other services",414,
        "E - History: America|E151 - E889 United States|E186 - E199 Colonial history (1607-1775)",413,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology|GN357 - GN367 Culture and cultural processes",413,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG500 - PG585 Slavic literature (General)",412,
        "T - Technology.|TN1 - TN997 Mining engineering. Metallurgy.|TN600 - TN799 Metallurgy",412,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B770 - B785 Renaissance",411,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z679 - Z680 Library buildings. Library architecture. Including planning, space utilization, security, safety, lighting, etc.",411,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM481 - HM554 Theory. Method. Relations to other subjects",410,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2115 - M2146 Hymnals. Hymn collections",407,
        "R - Medicine|RB1 - RB214 Pathology|RB151 - RB214 Theories of disease. Etiology. Pathogenesis",406,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT371 - DT390 Ethiopia (Abyssinia)",405,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature|PL8009.5 - PL8014 Literature",405,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS901 - DS937 Korea|DS930 - DS937 Democratic People's Republic, 1948-",404,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD240 - BD260 Methodology",403,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History|DR481 - DR605 By period|DR576 - DR605 20th century. Constitutional movement",403,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM661 - HM696 Social control",403,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC251 - LC318 Moral education. Character building",403,
        "R - Medicine|RD1 - RD811 Surgery|RD1 - RD31.7 General works",403,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK9001 - TK9401 Nuclear engineering. Atomic power",403,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA4050 - ZA4750 Information in specific formats or media|ZA4050 - ZA4460 Electronic information resources",403,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX5800 - BX5995 Protestant Episcopal Church in the United States of America",401,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV4701 - HV4890.9 Protection of animals. Animal rights. Animal welfare",401,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK5500 - NK6060 Glyptic arts",401,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration|JL1200 - JL1299 Mexico",400,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD169 - TD171.8 Environmental protection",400,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP70 - BP80 Biography",399,
        "Q - Science|QE1 - QE996.5 Geology|QE500 - QE639.5 Dynamic and structural geology|QE601 - QE613.5 Structural geology",398,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education",397,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG601 - PG716 Church Slavic",397,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8751 - HG9295 Life insurance",396,
        "R - Medicine|RB1 - RB214 Pathology|RB127 - RB150 Manifestation of disease",396,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing|Z240 - Z241.5 Incunabula. Block books. Including broadsides, playing cards",396,
        "Q - Science|QL1 - QL991 Zoology|QL801 - QL950.9 Anatomy",395,
        "Q - Science|QL1 - QL991 Zoology|QL951 - QL991 Embryology",394,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU120 - DU125 Ethnography",393,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM7801 - PM7895 Mixed languages|PM7831 - PM7875 Creole languages",393,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6110.5 - PN6120 Drama",392,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1060.5 - GV1098 Track and field athletics",391,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT561 - DT581 Cameroon (Cameroun, Kamerun)",390,
        "F - America: local history|F1 - F975 United States local history|F786 - F790 New Southwest. Colorado River, Canyon, and Valley",387,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1900 - M1978 Songs (part and solo) of special character",387,
        "B - Philosophy. Psychology. Religion|BC1 - BC199 Logic|BC60 - BC99 General works",386,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK70 - DK112.42 Early to 1613|DK99.8 - DK112.42 Muscovy",386,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE380.8 - HE971 Water transportation|HE380.8 - HE560 Waterways",384,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF7000 - KF7999",384,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK845 - DK860 Soviet Central Asia. West Turkestan",383,
        "N - Fine Arts|N1 - N9211 Visual arts|N8700 - N9165 Art and the state. Public art",383,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4161 - PQ4185 Prose",383,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD783 - TD812.5 Municipal refuse. Solid wastes",383,
        "T - Technology.|TN1 - TN997 Mining engineering. Metallurgy.|TN400 - TN580 Ore deposits and mining of particular metals",383,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z700.9 - Z701.5 Preservation, conservation and restoration of books, etc.",383,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA10 - DA18.2 British Empire. Commonwealth of Nations. The Commonwealth",382,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD4861 - HD4895 Labor systems",381,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN3311 - PN3503 Prose. Prose fiction|PN3329 - PN3352 Philosophy, theory, etc.",381,
        "Q - Science|QC1 - QC999 Physics|QC474 - QC496.9 Radiation physics (General)",381,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM214 - RM258 Diet therapy. Diet and dietetics in disease. Dietary cookbooks",380,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG443 - UG449 Attack and defense. Siege warfare",380,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ807 - TJ830 Renewable energy sources",379,
        "L - Education|LA5 - LA2396 History of education|LA31 - LA135 By period",378,
        "V - Naval science|V1 - V995 Naval science (General)|V750 - V995 War vessels: Construction, armament, etc.",378,
        "A - General Works|AE1 - AE88 Encyclopedias|AE5 - AE88 By language",377,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8750 - PT8951.36 Individual authors or works|PT8951 - PT8951.36 1961-2000",377,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC750 - QC766 Magnetism",376,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU520 - DU950 Smaller Island Groups|DU620 - DU629 Hawaiian Islands. Hawaii",375,
        "U - Military science (General)|UB1 - UB900 Military administration|UB250 - UB271 Intelligence",375,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE380.8 - HE971 Water transportation|HE561 - HE971 Shipping|HE730 - HE943 Merchant marine. Ocean shipping. Coastwise shipping",374,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL700 - PL889 Japanese literature|PL752 - PL783 Collections",373,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1800 - GV1860 Circuses, spectacles, etc. (including rodeos, waxworks, amusement parks, etc.)",372,
        "Q - Science|QC1 - QC999 Physics|QC120 - QC168.85 Descriptive and experimental mechanics",372,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T58.5 - T58.64 Information technology|T58.6 - T58.62 Management information systems",372,
        "A - General Works|AM1 - AM401 Museums. Collectors and collecting|AM10 - AM100 By country",371,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.|G8200 - G8904 Africa",371,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)|BV169 - BV199 Liturgy and ritual",370,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB1805 - LB2151 State teachers colleges|LB1811 - LB1987 United States",370,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG1151 - PG1199 Macedonian",370,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA648.5 - RA767 Epidemics. Epidemology. Quarantine. Disinfection",370,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4600 - DK4800 Local history and description",369,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR700 - GR860 Animals, plants, and minerals",369,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea",369,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3199 - PG3205 General",369,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ212 - TJ225 Control engineering systems. Automatic machinery (General)",369,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1271.2 - BL1295 Modifications. Sects",368,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4430 - K4675 Public finance",368,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3223 - PG3229.2 Special periods",368,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases|SB950 - SB990.5 Pest control and treatment of diseases. Plant protection",368,
        "L - Education|LF14 - LF5627 Individual institutions|LF2402 - LF3197 Germany",367,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3581 - K3598 Environmental law",366,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC648 - RC665 Diseases of the endocrine glands",366,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC705 - RC779 Diseases of the respiratory system",366,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV2000 - BV3705 Missions|BV2123 - BV2595 Special churches",365,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF1338 - JF2112 Public administration|JF2011 - JF2112 Political parties",364,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1030 - NE1196.3 History",364,
        "N - Fine Arts|NE1 - NE3002 Print media|NE2250 - NE2570 Lithography",364,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1700 - NK2195 Interior decoration. House decoration",364,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1151 - PT1241 Poetry",364,
        "F - America: local history|F1 - F975 United States local history|F1 - F15 New England",361,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1720 - PN1861 History",361,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D101 - D110.5 Medieval and modern history, 476-",360,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature|PA6101 - PA6140 Collections",360,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC952 - RC954.6 Geriatrics",360,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-|DP170 - DP189 1516-1700. Hapsburgs",359,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT433.5 - DT434 Kenya",359,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT641 - HT657 Classes arising from birth",359,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB2001 - PB3029 Brittanic group|PB2101 - PB2499 Welsh. Cymric",359,
        "R - Medicine|RL1 - RL803 Dermatology",359,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB320 - SB353.5 Vegetables",359,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal|DP535 - DP682.2 History|DP558 - DP682.2 By period|DP620 - DP682.2 -1580",358,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ840 - BQ999 Biography",356,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT491 - DT516.9 British West Africa|DT509.97 - DT512.9 Ghana (Gold Coast)",355,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1300 - PQ1595 Old French literature (To ca. 1500/1550)|PQ1300 - PQ1391 Collections",355,
        "P - Language and literature|PE1 - PE3729 English language|PE101 - PE458 Anglo-Saxon. Old English",354,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF1 - PF979 Dutch",354,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG940 - RG991 Maternal care. Prenatal care services",353,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR500 - GR615 Supernatural beings, demonology, fairies, ghosts, charms, etc.",352,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History|DR1259 - DR1321 By period|DR1281 - DR1321 -1918|DR1313 - DR1313.8 Yugoslav War, 1991-1995",351,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT591 - DT615.9 Portuguese-speaking West Africa",351,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E885 - E889 Clinton administration, 1993-2001",351,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV9950 - HV9960 By region or country",351,
        "J - Political Science|J1 - J981 General legislative and executive papers|J10 - J98 United States",351,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ163.12 - TJ163.25 Power resources",351,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC633 - RC647.5 Diseases of the blood and blood-forming organs",349,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC925 - RC935 Diseases of the musculoskeletal system",349,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia",348,
        "T - Technology.|TS1 - TS2301 Manufactures|TS1300 - TS1865 Textile industries",348,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV1460 - BV1615 Religious education (General)",347,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK507 - DK507.95 Belarus. Byelorussian S.S.R.  White Russia",347,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR701 - DR741 Local history and description (European Turkey)",347,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E855 - E861 Nixon's administrations, 1969-August 9, 1974",347,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1700 - NK2195 Interior decoration. House decoration|NK1700 - NK2138 General. History, etc.  Including special rooms",347,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF411 - SF459 Pets",347,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB111 - GB398.7 By region or country",346,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF51 - JF56 General works. History",346,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E300 - E302.6 General",345,
        "Q - Science|QR1 - QR502 Microbiology|QR100 - QR130 Microbial ecology",345,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG600 - RG650 The embryo and fetus",345,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA329 - TA348 Engineering mathematics. Engineering analysis",344,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC65 - LC67.68 Economic aspects of education",343,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z689 - Z689.8 Acquisition (selection, purchase, gifts, duplicates)",343,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN3311 - PN3503 Prose. Prose fiction|PN3451 - PN3503 History",342,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM480 - BM488.8 Pre-Talmudic Jewish literature (non-Biblical)",341,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS633 - DS644.46 History",341,
        "B - Philosophy. Psychology. Religion|BF1001 - BF1389 Parapsychology|BF1228 - BF1389 Spiritualism",340,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K625 - K709 Persons",340,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)|BV301 - BV530 Hymnology",339,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX4872 - BX4924 Pre-Reformation",338,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1410 - ND1460 Other subjects",338,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC1 - NC45 General. Including collective biography",337,
        "N - Fine Arts|ND25 - ND3416 Painting|ND2550 - ND2733 Mural painting",337,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ840 - BQ999 Biography|BQ860 - BQ999 Individual",336,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA703 - TA712 Engineering geology. Rock mechanics. Soil mechanics. Underground construction",336,
        "T - Technology.|TS1 - TS2301 Manufactures|TS1080 - TS1268 Paper manufacture and trade",336,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ210.2 - TJ211.47 Mechanical devices and figures. Automata. Ingenious mechanisms. Robots (General)",335,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP70 - BP80 Biography|BP75 - BP77.75 Muhammad, Prophet, d. 632",334,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ125 - RJ145 Physiology of children and adolescents",334,
        "B - Philosophy. Psychology. Religion|BJ1801 - BJ2195 Social usages. Etiquette",333,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML549.8 - ML649 Organ",332,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7601 - BX7795 Friends. Society of Friends. Quakers",331,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology|GN378 - GN396 Collected dthnographies",331,
        "U - Military science (General)|U1 - U900 Military science (General)|U799 - U897 History of arms and armor",331,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB801 - HB843 Consumption. Demand",330,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3310 - PG3319 18th century",330,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9715 - HD9717.5 Construction industry",329,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ4835 - JZ5490 International organizations and associations|JZ4850 - JZ5490 Intergovernmental organizations. IGOs|JZ4935 - JZ5160 The United Nations",329,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA630 - TA695 Structural engineering (General)",329,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E341 - E370 Madison's administrations, 1809-1817|E351.5 - E364.9 War of 1812",328,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3200 - G3202 World maps",328,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS2501 - HS3371 Clubs. Clubs and societies for special classes (including boys' societies, Boy Scouts, girls' societies)",328,
        "H - Social sciences|HX1 - HX970.7 Socialism. Communism. Anarchism|HX806 - HX811 Utopias. The ideal state",327,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK1717 - JK2248 Political rights. Practical politics|JK1846 - JK1936 Suffrage",326,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD10 - BD41 General philosophical works",324,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN661 - PN694 Medieval (to 1500)|PN683 - PN687 Legends",324,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC963 - RC969 Industrial medicine. Industrial hygiene",324,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN49 - GN298 Physical anthropology. Somatology|GN62.8 - GN263 Human variation",322,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT401 - HT485 Rural groups. Rural sociology",322,
        "R - Medicine|R5 - R920 Medicine (General)|R726.5 - R726.8 Medicine and disease in relation to psychology, terminal care, dying",322,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1940 - NE2232.5 Etching and aquatint|NE1980 - NE2055.5 History",321,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC200 - GC376 Dynamics of the ocean",320,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD411 - SD428 Conservation and protection",320,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM1 - BM449 General|BM150 - BM449 History|BM201 - BM449 By region or country",319,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K321 - K474 Schools of legal theory|K366 - K380 Sociology of law. Sociological jurisprudence",319,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT259 - MT338 String instruments",318,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S900 - S946.5 Conservation of natural resources (Including land conservation)",318,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH219 - SH321 By region or country",318,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP368 - TP456 Food processing and manufacture",318,
        "C - Auxiliary Sciences of History|CE1 - CE97 Technical Chronology. Calendar",317,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT361 - HT384 Urbanization. City and country",317,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-|DP201 - DP232.6 1808-1886. 19th century",316,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB1201 - GB1598 Rivers. Stream measurements",316,
        "R - Medicine|RT1 - RT120 Nursing|RT89 - RT120 Specialties in nursing",316,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV551.2 - HV639 Emergency management|HV553 - HV639 Relief in case of disasters|HV599 - HV639 Special types of disasters",315,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC319 - JC323 Political geography",315,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P301 - P301.5 Style. Composition. Rhetoric",315,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1225.2 - BL1243.58 Religious life",313,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D284 - D297 1715-1789. 18th century",313,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF636 - BF637 Applied psychology",311,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF692 - BF692.5 Psychology of sex. Sexual behavior",311,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL425 - BL490 Religious doctrines (General)|BL473 - BL490 Other",311,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4430 - K4675 Public finance|K4453 - K4640 National revenue",311,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML649.8 - ML747 Piano, clavichord, harpsichord, etc.",311,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG633 - UG635 By region or country",311,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL500 - BL547 Eschatology",310,
        "E - History: America|E11 - E143 America|E11 - E29 General",310,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)|BV205 - BV287 Prayer",309,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH101 - PH405 Finnish",308,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ811 - HQ960.7 Divorce",307,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ6360 - JZ6377 Non-military coercion",307,
        "N - Fine Arts|N1 - N9211 Visual arts|N8600 - N8675 Economics of art",307,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History|DR481 - DR605 By period|DR485 - DR555.7 1281/1453-1789. Fall of Constantinople, 1453",305,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ799.5 - HQ799.9 Young men and women",305,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK600 - NK806 History",305,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT546.1 - DT546.49 French-speaking Equatorial Africa",304,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1221 - GV1469.62 Indoor games and amusements|GV1469.15 - GV1469.62 Computer games. Video games. Fantasy games",303,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV701 - HV1420.5 Children|HV888 - HV907 Children with disabilities",303,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD511 - TD780 Sewage collection and disposal systems",303,
        "A - General Works|AZ101 - AZ999 History of scholarship and learning. The humanities|AZ501 - AZ908 By region or country",302,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1444 - BF1486 Ghosts. Apparitions. Hauntings",302,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z4 - Z8 History of books and bookmaking",302,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS527 - DS530.9 Burma",301,
        "V - Naval science|VA10 - VA750 Navies: Organization, distribution, naval situation|VA49 - VA395 United States",301,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KU1 - KU4999 Australia",300,
        "P - Language and literature|PR1 - PR9680 English literature|PR125 - PR138.5 Relations to other literatures and countries",299,
        "R - Medicine|RK1 - RK715 Dentistry|RK301 - RK493 Oral and dental medicine. Pathology. Diseases",299,
        "E - History: America|E151 - E889 United States|E186 - E199 Colonial history (1607-1775)|E186 - E189 General",298,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD5106 - HD5267 Hours of labor (including overtime, shift work, sick leave, vacations)",298,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL2390 - BL2490 African|BL2420 - BL2460 Egyptian",297,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL689 - BL980 European. Occidental|BL900 - BL980 Other European",297,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK3591 - PK4485 Sanskrit|PK3791 - PK3799 Individual authors and works",297,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism|PQ9000 - PQ9034 General",297,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT450 - DT450.49 Rwanda. Ruanda-Urundi",296,
        "E - History: America|E151 - E889 United States|E660 - E738 Late nineteenth century, 1865-1900|E660 - E664 General",296,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1660 - PN1693 Technique of dramatic composition",296,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB354 - SB402 Fruit culture and orchard care",296,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB481 - SB485 Parks and public reservations (including works on theory, management, history)",296,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9665 - HD9675 Pharmaceutical industry",295,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli",295,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT580 - MT599 Guitar",295,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG551 - RG591 Pregnancy",295,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1528 - M1529.5 Duets, trios, etc., for solo voices",294,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT8050 - PT8176.36 Individual authors or works|PT8176 - PT8176.36 1961-2000",294,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology|GB450 - GB460 Coasts",293,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML430 - ML455 Composition",293,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P98 - P98.5 Computational linguistics. Natural language processing",293,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z674.7 - Z674.83 Library information networks",293,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP595 - BP597 Anthroposophy",290,
        "H - Social sciences|HX1 - HX970.7 Socialism. Communism. Anarchism|HX626 - HX696 Communism: Utopian socialism, collective settlements",290,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1041 - LC1048 Vocational education (General)",290,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6000 - PT6466.36 Flemish literature since 1830",290,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC401 - GC881 Oceanography. By region",289,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ221 - KZ1152 By region or country",289,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1560 - PN1590 The performing arts. Show business",289,
        "R - Medicine|R5 - R920 Medicine (General)|R728 - R733 Practice of medicine. Medical practice economics",288,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD201 - TD500 Water supply for domestic and industrial purposes|TD419 - TD428 Water pollution",288,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4850 - KZ5490 Intergovernmental organizations. IGOs",287,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States|DT211 - DT239 Libya",286,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV680 - HV696 Free professional services (including medical charities)",285,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7101 - PT7211 Literary history and criticism",285,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship",284,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH601 - PH671 Estonian",284,
        "A - General Works|AY10 - AY2001 Yearbooks. Almanacs. Directories|AY30 - AY1730 Almanacs",282,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX100 - BX189 Eastern churches. Oriental churches",282,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States|DT241 - DT269 Tunisia (Tunis)",282,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G3290 - G5668 America. Western Hemisphere|G5200 - G5668 South America",282,
        "L - Education|L7 - L991 Education (General)|L111 - L791 Official documents, reports, etc.",282,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT3701 - PT3971 Provincial, local, colonial, etc.|PT3701 - PT3746 East Germany",282,
        "C - Auxiliary Sciences of History|CD1 - CD6471 Diplomatics. Archives. Seals|CD5001 - CD6471 Seals",281,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB3201 - LB3325 School architecture and equipment. School physical facilities. Campus planning",281,
        "Q - Science|QR1 - QR502 Microbiology|QR355 - QR502 Virology",281,
        "R - Medicine|RD1 - RD811 Surgery|RD78.3 - RD87.3 Anesthesiology",280,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1310 - NE1326.5 Japanese prints",279,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1221 - GV1469.62 Indoor games and amusements|GV1312 - GV1469 Board games. Move games",278,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1501 - HS2460.7 Other societies. By classes",278,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT321 - HT325 The city as economic factor. City promotion",278,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG8001 - PG9146 Baltic|PG8501 - PG8772 Lithuanian",278,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1001 - LC1024 Humanistic education. liberal education",277,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD391 - SD410.9 Sylviculture",277,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS161 - DS195.5 Armenia",276,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E740 - E749 General|E743 - E743.5 Political history",276,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1130 - ND1156 General works",276,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK9600 - NK9955 Woodwork",276,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1910 - NB1952 Special subjects",274,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1001 - PJ1989 Egyptology|PJ1481 - PJ1989 Literature. Inscriptions",274,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages",274,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP315 - TP360 Fuel",274,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1651 - BF1729 Astrology",273,
        "E - History: America|E151 - E889 United States|E660 - E738 Late nineteenth century, 1865-1900|E666 - E670 Johnson's administration, April 15, 1865-1869",273,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G100.5 - G108.5 Toponymy",273,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA349 - TA359 Mechanics of engineering. Applied mechanics",273,
        "R - Medicine|RF1 - RF547 Otorhinolaryngology|RF110 - RF320 Otology. Diseases of the ear",272,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History|DK4429 - DK4442 1945-1989. People's Republic",270,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden|DL643 - DL879 History",270,
        "C - Auxiliary Sciences of History|CB3 - CB482 History of Civilization|CB440 - CB482 Relation to special topics",269,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ4113 - HJ4601 Property tax",269,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America",269,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature|PA6155 - PA6191 Translations",268,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR171 - PR236 Anglo-Saxon (Beginnings through 1066)",268,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT115 - DT154 Local history and description",267,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR72 - GR79 Folk literature (General)",267,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC142 - LC148.5 Attendance. Dropouts",267,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC501 - QC718.8 Electricity|QC717.6 - QC718.8 Plasma physics. Ionized gasses",267,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5460 - HF5469.5 Department stores. Mail order business. Supermarkets. Convenience stores",265,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC361 - LC629 Christian education. Church education|LC461 - LC510 Roman Catholic",265,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ5901 - PQ5999 Regional, provincial, local, etc.",265,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS554 - DS554.98 Cambodia",264,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS781 - DS796 Local history and description|DS785 - DS786 Tibet",264,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC165 - LC182 Higher education and the state",264,
        "M - Music|ML1 - ML3930 Literature on music|ML93 - ML96.5 Manuscripts, autographs, etc.",264,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z695.9 - Z695.94 Indexing. Abstracting",263,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology|CC135 - CC137 Preservation, restoration, and conservation of antiquities.  Antiquities and state",261,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG9501 - PG9665 Albanian",261,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6201 - PK6599.7 New Persian|PK6201 - PK6399 Language",261,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4133 - PQ4160 Drama",260,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS488 - DS490 Sri Lanka",259,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6000 - PT6466.36 Flemish literature since 1830|PT6400 - PT6466.36 Individual authors or works",259,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German|PF3801 - PF3991 Old High German",258,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG400 - UG442 Fortification",258,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN9600 - JN9689 Balkan States",257,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K321 - K474 Schools of legal theory|K400 - K474 Natural law",257,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts",257,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA1 - NA60 General",256,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT545 - DT545.9 Cote d'Ivoire. Ivory Coast",255,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2337.2 - LB2340.8 Student financial aid",255,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC86 - RC88.9 Medical emergencies. Critical care. Intensive care. First aid",255,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2351 - LB2359 Admissions and entrance requirements",254,
        "Q - Science|Q1 - Q390 Science (General)|Q300 - Q390 Cybernetics|Q350 - Q390 Information theory",254,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS524 - DS526.7 History",253,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS160 - RS167 Pharmacognosy. Pharmaceutical substances (plant, animal, and inorganic)",253,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ9701 - HJ9940 Public accounting. Auditing",252,
        "R - Medicine|RE1 - RE994 Opthamology|RE91 - RE912 Particular diseases of the eye",252,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K2100 - K2385 Courts. Procedure",251,
        "Q - Science|QC1 - QC999 Physics|QC251 - QC338.5 Heat|QC310.15 - QC319 Thermodynamics",251,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK504 - DK504.95 Latvia",250,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML929 - ML990 Wind instruments",250,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1203 - NB1270 Special materials",250,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1 - NK570 General",250,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK5401 - PK5471 Modern Indo-Aryan literature",250,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS730 - DS731 Ethnography",249,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada|F1060 - F1060.97 Canadian Northwest. Northwest Territories",249,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ801 - HQ801.83 Man-woman relationships. Courtship. Dating",249,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB2165 - LB2278 Teacher training in universities and colleges",249,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS35.3 - DS35.77 The Islamic World",248,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3300 - PG3308 Early to 1700",248,
        "R - Medicine|R5 - R920 Medicine (General)|R858 - R859.7 Computer applications to medicine",248,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K830 - K968 Obligations",247,
        "T - Technology.|T1 - T995 Technology (General)|T175 - T178 Industrial research. Research and development",247,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages",246,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT881 - PT951 Folk literature",246,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF608 - BF635 Will. Volition. Choice. Control",244,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1601 - F1629 West Indies",243,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S530 - S559 Agricultural education",242,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT1754 - DT1770 Ethnography",241,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M1375 - M1420 Instrumental music for children",241,
        "Q - Science|QM1 - QM695 Human anatomy|QM550 - QM577.8 Human and comparative histology",241,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ750 - HQ755.5 Eugenics",240,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML162 - ML197 Special periods|ML193 - ML197 -1601",240,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1293 - NB1895 Special forms|NB1800 - NB1880 Sepulchral monuments",239,
        "Q - Science|QC1 - QC999 Physics|QC801 - QC809 Geophysics. Cosmic physics",239,
        "T - Technology.|T1 - T995 Technology (General)|T61 - T173 Technical education. Technical schools",239,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9650 - HD9663 Chemistry industries",238,
        "L - Education|LF14 - LF5627 Individual institutions|LF4251 - LF4437 Russia (Federation)",238,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6080 - PN6095 Quotations|PN6081 - PN6084 English",238,
        "T - Technology.|T1 - T995 Technology (General)|T201 - T342 Patents. Trademarks",238,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL2195 - BL2228 Japan",237,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV199 - GV199.6 Hiking. Pedestrian tours",237,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN101 - PN245 Authorship|PN241 - PN241.5 Translating as a literary pursuit",237,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KG1 - KG999 Latin America (General)",236,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT339 - MT533 Wind instruments|MT340 - MT359 Flute",236,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages|PL4301 - PL4470 Mon-Khmer (Mon-Anam) languages",236,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA1001 - TA1280 Transportation engineering",236,
        "T - Technology.|TH1 - TH9745 Building construction|TH4021 - TH4977 Buildings: Construction with reference to use (including public buildings, dwellings)",236,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4000 - BQ4060 General works",233,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV840.7 - GV857 Winter sports: Ice hockey, skiing, bobsledding, snowmobiling, etc.",233,
        "H - Social sciences|HN1 - HN995 Social history and conditions. Social problems. Social reform|HN30 - HN39 The church and social problems",233,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E813 - E816 Truman's administrations, April 12, 1945-1953",232,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1700 - K1973 Social legislation",232,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML1200 - ML1270 Orchestra",232,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA1000 - PA1179 Medieval and modern Greek language",232,
        "U - Military science (General)|UH20 - UH910 Other services|UH201 - UH515 Medical and sanitary services",232,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP173.25 - BP173.45 Islamic sociology",231,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ95 - DJ292 History",231,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT549 - DT549.9 Senegal",231,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR431 - PR439 17th century",231,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E838 - E840.8 General|E839.5 - E839.8 Political history",230,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC215 - LC238.4 Community and the school|LC225 - LC226.7 Home and school",230,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1160 - NK1590 Decoration and ornament. Design|NK1505 - NK1535 General works",229,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages|PL3551 - PL4001 Tibeto-Burman languages",229,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL43 - DL87 History",228,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6269 - PN6278 Aphorisms. Apothegms",228,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA4050 - ZA4750 Information in specific formats or media|ZA4050 - ZA4460 Electronic information resources|ZA4150 - ZA4390 Computer network resources",227,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E766 - E783 Wilson's administrations, 1913-1921",226,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN59 - PN72 Study and teaching",226,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature",226,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8101 - BX8144 Mennonites",225,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV8490 - JV8758 Asia",225,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws",225,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH20.3 - SH191 Aquaculture",225,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1040 - GV1060.4 Cycling. Bicycling. Motorcycling",224,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3500 - PG3505 Provincial, local, etc.",224,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E784 - E805 1919-1933. Harding-Coolidge-Hoover era. The twenties",223,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology|HV6250 - HV6250.4 Victims of crimes. Victimology",223,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1301 - PT1360 Prose",223,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1375 - PT1479 Middle High German",223,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA791 - RA954 Medical geography. Climatology. Meteorology",223,
        "T - Technology.|T1 - T995 Technology (General)|T391 - T995 Exhibitions. Trade shows. World's fairs",223,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT160 - DT177 North Africa",222,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV1421 - HV1441 Young Adults. Youth. Teenagers",222,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC5800 - LC5808 Distance education",222,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1065 - PN1085 Relations to, and treatment of, special subjects",222,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7220 - PT7262.5 Collections",222,
        "C - Auxiliary Sciences of History|CN1 - CN1355 Inscriptions. Epigraphy|CN870 - CN1355 By region or country",221,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E401 - E415.3 Mexican War, 1846-1848",221,
        "Q - Science|QB1 - QB991 Astronomy|QB468 - QB480 Non-optical methods of astronomy",221,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration|JL1400 - JL1679 Central America",220,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL5501 - PL6135 Philippine languages",220,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD895 - TD899 Industrial and factory sanitation",220,
        "A - General Works|AM1 - AM401 Museums. Collectors and collecting|AM111 - AM160 Museology. Museum methods, technique, etc.",219,
        "M - Music|ML1 - ML3930 Literature on music|ML112.8 - ML158.8 Bibliography|ML113 - ML118 International",219,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH5001 - PH5490 Basque",219,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2667 - LC2698 Latin Americans. Hispanic Americans",218,
        "P - Language and literature|PR1 - PR9680 English literature|PR111 - PR116 Women authors",218,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC627.5 - RC632 Metabolic diseases",217,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D25 - D27 Military and naval history",216,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal|DP535 - DP682.2 History|DP558 - DP682.2 By period|DP558 - DP618 Early and medieval to 1580",216,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E756 - E760 Theodore Roosevelt's administrations, September 14, 1901-1909",216,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN1601 - JN2191 Austria-Hungary. Austria. Hungary",216,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD895 - TD899 Industrial and factory sanitation|TD896 - TD899 Industrial and factory wastes",216,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS153 - DS154.9 Jordan. Transjordan",215,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS608 - DS610.9 Singapore",215,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT436 - DT449 Tanzania. Tanganyika. German East Africa",215,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K4011 - K4343 Transportation and communication",215,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG51 - LG53 China",214,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases|SB818 - SB945 Economic entomology",214,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1501 - BF1562 Demonology. Satanism. Possession",213,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK901 - DK909.5 Kazakhstan. Kazakh S.S.R.",213,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E835 - E837.7 Eisenhower's administrations, 1953-1961",213,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1401 - K1578 Intellectual property|K1500 - K1578 Industrial property",213,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KDZ1 - KDZ4999 Law of America. North America",212,
        "R - Medicine|RD1 - RD811 Surgery|RD92 - RD97.8 Emergency surgery. Wounds and injuries",212,
        "E - History: America|E151 - E889 United States|E171 - E183.9 History|E183 - E183.3 Political history",211,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM8001 - PM8995 Artificial languages",211,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ251 - RJ325 Newborn infants (including physiology, care, treatment, diseases)",211,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL101 - DL291 Denmark",210,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5469.7 - HF5481 Markets. Fairs",210,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG9969.5 - HG9999 Other insurance (including automobile, burglary, disaster, title, etc.)",210,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN695 - PN779 Modern|PN715 - PN749 Renaissance (1500-1700)",210,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z998 - Z1000.5 Booksellers' catalogs. Book prices",210,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK1001 - JK1443 Congress. Legislative branch|JK1308 - JK1443 House of Representatives",209,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS400 - RS431 Pharmaceutical chemistry",209,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden|DL643 - DL879 History|DL660 - DL879 By period",208,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1 - PL481 Ural-Altaic languages|PL400 - PL431 Mongolian languages",208,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D219 - D234 1453-1648",207,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT655 - MT725 Percussion and other instruments",207,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC306 - RC320.5 Tuberculosis",207,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF191 - SF275 Cattle",207,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions",206,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1470 - ND1625 Technique and materials",206,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z712 - Z714 Circulation. Loans. Charging systems",206,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS541 - DS553.7 History",205,
        "L - Education|LA5 - LA2396 History of education|LA5 - LA25 General",205,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX1 - BX9.5 Church unity. Ecumenical movement. Interdenominational cooperation",204,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ301 - DQ851 Local history and description",204,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z683 - Z683.5 Finance. Insurance",204,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR279 - DR296 Local history and description",203,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD5650 - HD5660 Employee participation in management. Employee ownership. Industrial democracy. Works councils",203,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3092 - KZ3405 20th century",203,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL2000 - BL2032 India|BL2017 - BL2018.7 Sikhism",202,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS781 - DS796 Local history and description|DS781 - DS784.2 Manchuria",201,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E381 - E385 Jackson's administrations, 1829-1837",201,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4850 - KZ5490 Intergovernmental organizations. IGOs|KZ4935 - KZ5275 The United Nations",201,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC1800 - NC1850 Posters",201,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases|SB610 - SB615 Weeds, parasitic plants, etc.",201,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK15 - VK124 History, conditions, etc.",201,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training|GV401 - GV433 Physical education facilities. Sports facilities (including gymnasiums, athletic fields, playgrounds, etc.)",200,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF180 - BF198.7 Experimental psychology",199,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1745 - BF1779 Oracles. Sibyls. Divinations",199,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden|DL643 - DL879 History|DL660 - DL879 By period|DL701 - DL879 Modern, 1523-",199,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z1201 - Z1946 America|Z1365 - Z1401 Canada. British North America",199,
        "A - General Works|AZ101 - AZ999 History of scholarship and learning. The humanities|AZ101 - AZ111 Philosophy. Theory",198,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT621 - DT637 Liberia",198,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1020 - GV1038.2 Automobile travel. Motoring. Automobile racing",198,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1401 - K1578 Intellectual property|K1411 - K1485 Copyright",198,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2361 - LB2365 Curriculum",198,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1200 - LC1203 Inclusive education",198,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1990 - M1998 Secular music for children",198,
        "P - Language and literature|PR1 - PR9680 English literature|PR750 - PR890 Prose|PR767 - PR818 By period",198,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP500 - BP585 Theosophy",197,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK670 - DK679.5 Georgia (Republic). Georgian S.S.R.  Georgian Sakartvelo",197,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB5000 - GB5030 Natural disasters",197,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1281 - PR1309 Prose (General)",197,
        "R - Medicine|R5 - R920 Medicine (General)|R690 - R697 Medicine as a profession. Physicians",197,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF411 - SF459 Pets|SF421 - SF440.2 Dogs. Dog racing",197,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF660 - BF685 Comparative psychology. Animal and human psychology",196,
        "J - Political Science|JA1 - JA92 Political science (General)|JA1 - JA26 Periodicals",194,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian|PD5001 - PD5929 Swedish",194,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering|VM311 - VM466 Special types of vessels",194,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1501 - HS2460.7 Other societies. By classes|HS2301 - HS2460.7 Political and patriotic societies",193,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB409 - SB413 Culture of Individual plants",193,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV659 - BV683 Ministry. Clergy. Religious vocations",192,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB201 - HB206 Value. Utility",192,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC2700 - PC3708 Dialects. Provincialisms|PC2813 - PC2898 Old French",192,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM147 - RM180 Administration of drugs and other therapeutic agents",192,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML475 - ML547 By region or country",191,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE1 - NE90 General",191,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH1 - PH87 General",191,
        "Q - Science|QC1 - QC999 Physics|QC221 - QC246 Acoustics. Sound",191,
        "U - Military science (General)|UB1 - UB900 Military administration|UB356 - UB369.5 Provision for veterans",191,
        "U - Military science (General)|UB1 - UB900 Military administration|UB416 - UB419 Minorities, women, etc. in armed forces",191,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History",190,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC2700 - PC3708 Dialects. Provincialisms|PC3371 - PC3420.5 Modern patois of South France",190,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN801 - PN820 Romance literature",190,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC71 - RC78.7 Examination. Diagnosis (including radiography)|RC78 - RC78.5 Radiography. Roentgenography",190,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA501 - TA625 Surveying",190,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1700 - K1973 Social legislation|K1701 - K1841 Labor law",189,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2561 - PK2579.5 Oriya",189,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2131 - PN2193 By period",189,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD194 - TD195 Environmental effects of industries and plants",189,
        "T - Technology.|TH1 - TH9745 Building construction|TH9025 - TH9745 Protection of fuildings (including protection from dampness, fire, burglary)",189,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB238 - HB251 Competition. Production. Wealth",188,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN597 - PN605 Special relations, movements, and currents of literature",188,
        "A - General Works|AI1 - AI21 Indexes",187,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB846 - HB846.8 Welfare theory",187,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE8701 - HE9680.7 Telephone industry",187,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ6603 - HJ7390 Customs administration",187,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ206 - RJ235 Nutrition and feeding of children and adolescents",187,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K237 - K264 The concept of law",186,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1165 - KZ1208 Trials",186,
        "P - Language and literature|PE1 - PE3729 English language|PE3701 - PE3729 Slang. Argot, etc.",186,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC160 - TC181 Technical hydraulics",186,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9201 - PT9499 Literary history and criticism",185,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP200 - TP248 Manufacture and use of chemicals",185,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3820 - K3836 Economic constitution, policy, planning, and development",184,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4001 - PJ4091 Sumerian",184,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History",183,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU400 - DU430 New Zealand|DU422.5 - DU424.5 Ethnography",183,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2147 - M2188 Liturgy and ritual",183,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E846 - E851 Johnson's administrations, November 22, 1963-1969",182,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1165 - KZ1208 Trials|KZ1168 - KZ1208 War crime trials",182,
        "T - Technology.|TG1 - TG470 Bridge engineering.",182,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8501 - HG8745 By region or country",181,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML749.5 - ML927 Bowed string instruments",181,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN905 - PN1008 Folk literature",181,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE210 - TE228.3 Construction details (including foundations, maintenance, equipment)",181,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF1338 - JF2112 Public administration|JF1411 - JF1521 Civil service",180,
        "Q - Science|QB1 - QB991 Astronomy|QB349 - QB421 Theoretical astronomy and celestial mechanics",179,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF699 - BF711 Genetic psychology",178,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1216 - BL1225 Hindu pantheon. Deities",178,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK26 - DJK28 Ethnography",178,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period|DR84.9 - DR89.8 1878-1944",178,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT713 - HT725 Caste system",178,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ1249 - JZ1254 Relation to other disciplines and topics",178,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK2896 - TK2985 Production of electricity by direct electricity conversion",178,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period|DR81 - DR84 Turkish rule, 1396-1878",177,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica",177,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1090 - LC1091 Political education",176,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA100 - NA130 Architecture and the state",176,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)|BV30 - BV135 Times and seasons. The Church year",175,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK505 - DK505.95 Lithuania",175,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient",175,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3092 - KZ3405 20th century|KZ3110 - KZ3405 Publicists. Writers on public international law",175,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1081 - LC1087.4 Industrial education (General)",175,
        "B - Philosophy. Psychology. Religion|BC1 - BC199 Logic|BC11 - BC39 History",173,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1300 - BL1380 Jainism",173,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History|DK4186 - DK4348 To 1795",173,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1001 - DT1190 Southern Africa",173,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM435 - HM477 History of sociology. History of sociological theory",173,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV3176 - HV3199 Special classes. By race or ethnic group",173,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.|PN4735 - PN4748 Relation to the state. Government and the press. Liberty of the press",173,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH401 - SH691 Angling (including tackle, casting, methods of angling, angling for special kinds of fish)",173,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering|VM15 - VM124 History",172,
        "A - General Works|AN - Newspapers",171,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ5360 - BQ5680 Religious life",171,
        "M - Music|ML1 - ML3930 Literature on music|ML110 - ML111.5 Music librarianship",171,
        "Q - Science|QB1 - QB991 Astronomy|QB140 - QB237 Practical and spherical astronomy",171,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC460 - UC535 Clothing and equipment",171,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z674.2 - Z674.5 Information services. Information centers",171,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1500 - BL1590 Zoroastrianism (Mazdeism). Parseeism",170,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History|DK4397 - DK4420 1918-1945",170,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3476 - K3560 Public property. Public restraint on private property",170,
        "A - General Works|AY10 - AY2001 Yearbooks. Almanacs. Directories|AY10 - AY29 Annuals",169,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC730 - NC758 Technique",169,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature|PL8000 - PL8009 Languages",169,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1011 - Z1017 General bibliographies",169,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF176 - BF176.5 Psychological tests and testing",168,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT2871 - DT3025 Zimbabwe. Southern Rhodesia",168,
        "H - Social sciences|HF1 - HF6182 Commerce|HF1021 - HF1027 Commercial geography. Economic geography",168,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX700 - NX750 Patronage of the arts",168,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S604.8 - S621.5 Melioration: Improvement, reclamation, fertilization, irrigation, etc. of lands",167,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1301 - K1366 Business associations",166,
        "S - Agriculture|SK1 - SK663 Hunting|SK351 - SK579 Wildlife management. Game protection",166,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT7601 - PT7869 Literary history and criticism",165,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1041 - Z1121 Anonyms and pseudonyms",165,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9301 - BX9359 Puritanism",164,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT491 - DT516.9 British West Africa|DT516 - DT516.9 Sierra Leone",164,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4002 - KZ4080 The state",164,
        "U - Military science (General)|UB1 - UB900 Military administration|UB320 - UB338 Enlistment, recruiting, etc.",164,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.|G7000 - G7342 Former Soviet republics. Union of Soviet Socialist Republics.  Russia (Empire)",163,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV701 - HV1420.5 Children|HV959 - HV1420.5 Orphanages. Orphans",163,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC49 - RC52 Psychosomatic medicine",163,
        "R - Medicine|RK1 - RK715 Dentistry|RK641 - RK667 Prosthetic dentistry. Prosthodontics",162,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP300 - BP395 Bahai Faith",161,
        "N - Fine Arts|N1 - N9211 Visual arts|N8350 - N8356 Art as a profession. Artists",161,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF501 - BF505 Motivation",160,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT960 - BT985 Invisible world (Saints, demons, etc.)",160,
        "D - History (General) and History of Europe|DAW1001 - DAW1051 History of Central Europe",160,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS493 - DS495.8 Nepal",160,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL950 - PL998 Korean literature|PL969.8 - PL985 Collections",160,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism",160,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7001 - PT7099 Scandinavian literature",160,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7001 - PT7099 Scandinavian literature|PT7001 - PT7099 General",160,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1251 - DT1465 Angola",159,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB1501 - PB1709 Gaelic (Scottish Gaelic, Erse)",159,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD430 - SD557 Exploitation and utilization",159,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS327 - DS329.4 Central Asia",158,
        "E - History: America|E11 - E143 America|E31 - E49.3 North America",158,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB2401 - GB2598 Ice. Glaciers. Ice sheets. Sea ice",158,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC71 - LC120.4 Education and the state|LC107 - LC120.4 Public school question. Secularization. Religious instruction in the public schools",158,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK2775 - NK2898 Rugs and carpets",158,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages|PL4301 - PL4470 Mon-Khmer (Mon-Anam) languages|PL4371 - PL4379 Vietnamese. Annamese",158,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN3151 - PN3171 Amateur theater",158,
        "Q - Science|QB1 - QB991 Astronomy|QB275 - QB343 Geodesy",158,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP1080 - TP1185 Polymers and polymer manufacture",158,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ3001 - PJ3097 Semitic philology and literature",157,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7101 - BX7260 Congregationalism",156,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT21 - CT22 Biography as an art or literary form",156,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT551 - DT551.9 Mali. Mali Federation. Sudanese Republic. French Sudan",156,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC1000 - GC1023 Marine resources. Applied oceanography",156,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL6191 - PL6341 Micronesian and Melanesian languages",156,
        "S - Agriculture|SK1 - SK663 Hunting|SK40 - SK268 By country",156,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania",155,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN1400 - JN1571.5 Ireland",155,
        "P - Language and literature|PE1 - PE3729 English language|PE501 - PE693 Middle English",155,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway",154,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4001 - PN4355 Oratory. Elocution, etc.|PN4177 - PN4191 Debating",154,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4001 - PN4355 Oratory. Elocution, etc.|PN4199 - PN4321 Recitations (in English)",154,
        "U - Military science (General)|UD1 - UD495 Infantry",154,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT160 - DT177 North Africa|DT167 - DT176 History",153,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV181.35 - GV181.6 Recreation leadership. Administration of recreation services",153,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History|DK4348.5 - DK4395 1795-1918. 19th century (General)",152,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS101 - HS330.7 Secret societies",152,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS2300 - JS2778 South America",152,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ95 - DJ292 History|DJ151 - DJ292 By period",151,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK690 - DK699.5 Azerbaijan. Azerbaijan S.S.R.",151,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL43 - DL87 History|DL61 - DL87 By period",151,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC70 - GC90 Environmental education",151,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1073 - HQ1073.5 Thanatology. Death. Dying",151,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z551 - Z656 Copyright",151,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH95 - DH207 History",150,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ7461 - HJ7980 Expenditures. Government spending",150,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security",150,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX280 - NX410 Study and teaching. Research",150,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ101 - RJ103 Child health. Child health services",150,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT541 - DT541.9 Benin. Dahomey",149,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E872 - E875 Carter's administration, 1977-1981",149,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian|PD2501 - PD2999 Norwegian",149,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z4001 - Z4980 Australia. Oceania",149,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1141 - LB1489 Kindergarten",148,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6120.15 - PN6120.95 Fiction",148,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History|DR481 - DR605 By period|DR568 - DR575 1861-1909. War with Russia, 1877-1878",147,
        "Q - Science|QA1 - QA939 Mathematics|QA47 - QA59 Tables",147,
        "V - Naval science|VB15 - VB345 Naval administration",147,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR191 - CR1020 Public and official heraldry",146,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS393 - DS396.9 Bangladesh. East Pakistan",146,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E337.8 - E340 General",146,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN49 - GN298 Physical anthropology. Somatology|GN51 - GN59 Anthropometry",146,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3941 - K3974 Trade and commerce",146,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2371 - LB2372 Graduate education",146,
        "N - Fine Arts|N1 - N9211 Visual arts|N8554 - N8585 Examination and conservation of works of art",146,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages|PL3551 - PL4001 Tibeto-Burman languages|PL3561 - PL3801 Tibeto-Himalayan languages",146,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2131 - PN2193 By period|PN2181 - PN2193 Modern",146,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9300 - PQ9326 Individual authors, 2001-",146,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD561 - SD669.5 Administration. Policy",146,
        "C - Auxiliary Sciences of History|CD1 - CD6471 Diplomatics. Archives. Seals|CD1 - CD511 Diplomatics",145,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K2400 - K2405 Arbitration and award",145,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA166 - TA167 Human engineering",145,
        "U - Military science (General)|UF1 - UF910 Artillery|UF560 - UF780 Ordnance material (Ordnance proper)",145,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP187 - BP187.9 Shrines, sacred places, etc.",144,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS11 - BS115 Early versions",144,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training|GV346 - GV351.5 School and college athletics. Intramural and interscholastic athletics",144,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV5725 - HV5770 Tobacco habit",144,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC760 - NC825 Special subjects",144,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS125 - RS131.9 Formularies. Collected prescriptions",144,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU400 - DU430 New Zealand|DU419 - DU422 History",143,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5691 - HF5716 Business mathematics. Commercial arithmetic",143,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG9371 - HG9399 Health insurance",143,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM711 - HM806 Groups and organizations|HM756 - HM781 Community",143,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV4997 - HV5000 Substance abuse",143,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2018 - M2019.5 Duets, trios, etc. for solo voices",143,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT259 - MT338 String instruments|MT260 - MT279.7 Violin",143,
        "M - Music|MT1 - MT960 Musical instruction and study|MT820 - MT915 Singing and vocal technique|MT855 - MT883 Special techniques",143,
        "Q - Science|QM1 - QM695 Human anatomy|QM601 - QM695 Human embryology",143,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL689 - BL980 European. Occidental|BL830 - BL875 Germanic and Norse",142,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU28.11 - DU68 History",142,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN2210 - JN2229 Czech Republic. Czechoslovakia",142,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security|KZ5615 - KZ5893 Arms control and disarmament regimes",142,
        "M - Music|ML1 - ML3930 Literature on music|ML35 - ML38 Festivals. Congresses",142,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P321 - P324.5 Etymology",142,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF951 - SF997.5 Diseases of special classes of animals",142,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH20.3 - SH191 Aquaculture|SH151 - SH179 Fish culture",142,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ268 - TJ740 Steam engineering",142,
        "C - Auxiliary Sciences of History|CB3 - CB482 History of Civilization|CB158 - CB161 Forecasts of future progress",141,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History|DH571 - DH694 By period",141,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5400 - PT5547 Collections",141,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX4929 - BX4951 Post-Reformation",140,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8762 - BX8785 Pentecostal churches",140,
        "E - History: America|E11 - E143 America|E141 - E143 Descriptive accounts of America. Earliest to 1810",140,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV8790 - JV9025 Africa",140,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages|PL3551 - PL4001 Tibeto-Burman languages|PL3561 - PL3801 Tibeto-Himalayan languages|PL3601 - PL3775 Tibetan",140,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN905 - PN1008 Folk literature|PN980 - PN995 Fables",140,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism|PQ9035 - PQ9055 Special periods",140,
        "R - Medicine|R5 - R920 Medicine (General)|R856 - R857 Biomedical engineering. Electronics. Instrumentation",140,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-|DP192 - DP200.8 1700-1808. Bourbons",139,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E415.6 - E415.9 General",139,
        "R - Medicine|R5 - R920 Medicine (General)|R895 - R920 Medical physics. Medical radiology. Nuclear medicine",139,
        "V - Naval science|VG20 - VG2029 Minor services of navies",139,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT433.2 - DT433.29 Uganda",138,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS7525 - JS7819 Africa",138,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK3001 - TK3521 Distribution or transmission of electric power",138,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP670 - TP699 Oils, fats, and waxes",138,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC260 - UC267 Supplies and stores",138,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z43 - Z45 Calligraphy. Penmanship",138,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT401 - DT409 Somalia. Somaliland and adjacent territory",137,
        "E - History: America|E11 - E143 America|E101 - E135 Discovery of America and early explorations|E103 - E110 Pre-Columbian period",137,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC501 - QC718.8 Electricity|QC701 - QC715.4 Electric discharge",137,
        "B - Philosophy. Psychology. Religion|BC1 - BC199 Logic|BC11 - BC39 History|BC25 - BC39 By period",136,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF795 - BF839 Temperament. Character",136,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX800 - BX4795 Catholic Church|BX4600 - BX4644 Churches, cathedrals, abbeys (as parish churches), etc.",136,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK502.3 - DK502.75 Baltic States",136,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC6201 - LC6401 University extension",136,
        "T - Technology.|TH1 - TH9745 Building construction|TH7005 - TH7699 Heating and ventilation. Air conditioning",136,
        "U - Military science (General)|UB1 - UB900 Military administration|UB340 - UB345 Compulsory service. Conscription and exemption",136,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period|DR250 - DR266.5 1866/1881-1944",135,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F3031 - F3031.5 Falkland Islands",135,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC203 - TC380 Harbors and coast protective works. Coastal engineering. Lighthouses",135,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP155 - TP156 Chemical engineering",135,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK503 - DK503.95 Estonia",134,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G540 - G550 Seafaring life, ocean travel, etc.",134,
        "H - Social sciences|HF1 - HF6182 Commerce|HF1040 - HF1054 Commodities. Commercial products",134,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5735 - HF5746 Business records management",134,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1625 - M1626 Recitations with music",134,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2147 - M2188 Liturgy and ritual|M2147 - M2155.6 Roman Catholic Church",134,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC1860 - NC1896 Greeting cards, postcards, invitations, book jackets, etc.",134,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG159 - RG208 Functional and systemic disorders. Endocrine gynecology",134,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE830 - NE898 General works",133,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1 - PJ489 General|PJ306 - PJ489 Literature",133,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6500 - PT6592.36 Afrikaans literature",133,
        "R - Medicine|RD1 - RD811 Surgery|RD120.6 - RD129.8 Transplantation of organs, tissues, etc.",133,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1100 - G1779 America. Western Hemisphere|G1445 - G2739 Africa",132,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P375 - P381 Linguistic geography",132,
        "T - Technology.|TR1 - TR1050 Photography|TR287 - TR500 Photographic Processing",132,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal|DP702 - DP802 Local history and description",131,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT421 - DT432.5 East Africa. British East Africa",131,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM1001 - HM1281 Social psychology|HM1041 - HM1101 Social perception. Social cognition (including perception of the self and others, prejudices, stereotype)",131,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1272 - NB1291 Mobiles, color, sculpture gardens, etc.",131,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL950 - PL998 Korean literature|PL950.2 - PL969.5 History and criticism",131,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD5481 - HD5630.7 Industrial arbitration. Mediation and conciliation",130,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German|PF4043 - PF4350 Middle High German",130,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK101 - PK185 General",130,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL6401 - PL6551 Polynesian languages",130,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1361 - PR1369 Essays",130,
        "C - Auxiliary Sciences of History|CE1 - CE97 Technical Chronology. Calendar|CE51 - CE85 Medieval and modern",129,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1101 - HQ2030.7 Women. Feminism|HQ1871 - HQ2030.7 Women's clubs",129,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC3721 - PC3761 Slang. Argot",129,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7001 - PT7099 Scandinavian literature|PT7001 - PT7099 General|PT7001 - PT7087 Literary history and criticism",129,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD201 - TD500 Water supply for domestic and industrial purposes|TD429.5 - TD480.7 Water purification. Water treatment and conditioning. Saline water conversion",129,
        "V - Naval science|V1 - V995 Naval science (General)|V25 - V55 History and antiquities of naval science",129,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH95 - DH207 History|DH141 - DH207 By period",128,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2381 - LB2391 Academic degrees",128,
        "P - Language and literature|PR1 - PR9680 English literature|PR57 - PR78 Criticism",128,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP91 - DP96 Earliest to 711",127,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT7 - DT12.25 Description and travel",127,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E881 - E884 Bush administration, 1989-1993",127,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT495 - GT499 Human body and its parts. Personal beauty",127,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV1 - JV5399 Colonies and colonization|JV61 - JV151 History",127,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6058 - PQ6060 Early to 1500",127,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM182 - RM190 Other therapeutic procedures (including acupuncture, pneumatic aspiration, spinal puncture, pericardial puncture)",127,
        "T - Technology.|TL1 - TL4050 Motor vehicles. Aeronautics. Astronautics|TL780 - TL785.8 Rocket propulsion. Rockets",127,
        "V - Naval science|VE7 - VE500 Marines",127,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT547 - DT547.9 Niger",126,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K50 - K54 Dictionaries. Words and phrases",126,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S622 - S627 Soil conservation and protection",126,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL1790 - BL1975 China|BL1830 - BL1883 Confucianism",125,
        "E - History: America|E151 - E889 United States|E660 - E738 Late nineteenth century, 1865-1900|E671 - E680 Grant's administrations, 1869-1877",125,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN49 - GN298 Physical anthropology. Somatology|GN269 - GN279 Race (General)",125,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT899 - BT940 Future state. Future life",124,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT3200 - CT9999 Biography. By subject|CT9960 - CT9998 Other miscellaneous groups",124,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland",124,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K5000 - K5582 Criminal law and procedure|K5401 - K5570 Criminal procedure",124,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC901 - PC986 Raeto-Romance. Including Romansh",124,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian|PD2201 - PD2393 Old Norse. Old Icelandic and Old Norwegian",124,
        "C - Auxiliary Sciences of History|CJ1 - CJ6661 Numismatics|CJ5501 - CJ6661 Medals and medallions",123,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1621 - HG1638 Interest rates. Interest tables",123,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ199 - KZ218 Judicial decisions and arbitral awards. Law reports",123,
        "M - Music|ML1 - ML3930 Literature on music|ML25 - ML28 Societies and organizations",123,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1780 - G2799 Eastern Hemisphere. Eurasia, Africa, etc.|G2110 - G2196 Former Soviet republics. Union of Soviet Socialist Republics. Russia (Empire)",122,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1470 - GV1511 Parties. Party games and stunts",122,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV199.8 - GV200.3 Mountaineering",122,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K830 - K968 Obligations|K923 - K968 Torts",122,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KJ - Europe",122,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1203 - GV1218 Children's games and amusements",121,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1 - JQ1849 Asia|JQ1070 - JQ1199 Central Asia. Including former republics of the Soviet Union",121,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC601 - TC791 Canals and inland navigation. Waterways",121,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK509.1 - DK509.95 Moldova. Moldovian S.S.R.  Bessarabia",120,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL101 - DL291 Denmark|DL143 - DL263.3 History",120,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1271.2 - BL1295 Modifications. Sects|BL1284.5 - BL1289.59 Vaishnavism",119,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K2100 - K2385 Courts. Procedure|K2201 - K2385 Civil procedure",119,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2601 - LC2611 Education in developing countries",119,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature|PL8024 - PL8027 Special families of languages",119,
        "R - Medicine|RZ201 - RZ999 Other systems of medicine",119,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL301 - DL398 Iceland",118,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT675 - HT690 Classes arising from occupation",118,
        "J - Political Science|JA1 - JA92 Political science (General)|JA86 - JA88 Study and teaching. Research",118,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3842 - K3862 Trade regulations. Control of trade practices",118,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P327 - P327.5 Lexicography",118,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E310 - E337 1789-1809. Constitutional period|E321 - E330 John Adams' administration, 1797-1801",117,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC1080 - GC1581 Marine pollution. Seawater pollution",117,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM1 - PM94 Hyperborean languages of Arctic Asia and America",117,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT990 - BT1010 Creeds, confessions, covenants, etc.",116,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV2000 - BV3705 Missions|BV2610 - BV2695 Special types of missions",116,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic",116,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1841 - PK1870.95 Gujarati",116,
        "Q - Science|QD1 - QD999 Chemistry|QD450 - QD801 Physical and theoretical chemistry|QD701 - QD731 Photochemistry",116,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM711 - HM806 Groups and organizations|HM786 - HM806 Organizational sociology. Organization theory",115,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3171 - K3179 Constitutional principles",115,
        "A - General Works|AZ101 - AZ999 History of scholarship and learning. The humanities|AZ200 - AZ361 History",114,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL175 - BL265 Natural theology|BL175 - BL190 General",114,
        "G - Geography. Anthropology. Recreation|GF1 - GF900 Human ecology. Anthropogeography|GF101 - GF127 Settlements",114,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1641 - HG1643 Bank loans. Bank credit. Commercial loans",114,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1 - NB50 General",114,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1351 - PN1389 Lyric poetry",114,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3670 - KZ3881 Objects of the law of nations. Territory and its different parts",113,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2198 - M2199 Gospel, revival, temperance, etc. songs M5000 Unidentified compositions",113,
        "P - Language and literature|PR1 - PR9680 English literature|PR931 - PR938 Wit and humor",113,
        "U - Military science (General)|UF1 - UF910 Artillery|UF520 - UF537 Ordnance and small arms",113,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S560 - S571.5 Farm economics. Farm management. Agricultural mathematics",112,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S631 - S667 Fertilizers and improvement of the soil",112,
        "U - Military science (General)|U1 - U900 Military science (General)|U750 - U773 Military life, manners and customs, antiquities, etc.",112,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK941 - DK949.5 Uzbekistan. Uzbek S.S.R.",111,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1221 - GV1469.62 Indoor games and amusements|GV1232 - GV1299 Card games: Poker, patience, whist, etc.",111,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7435 - HV7439 Gun control",111,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV6061 - JV6149 Emigration",111,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5511.2 - JZ6299 Promotion of peace. Peaceful change|JZ6010 - JZ6299 Pacific settlement of international disputes",111,
        "L - Education|LA5 - LA2396 History of education|LA173 - LA186 Higher education",111,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML1030 - ML1049 Percussion instruments",111,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism|PG3071 - PG3089 Drama",111,
        "T - Technology.|TH1 - TH9745 Building construction|TH1000 - TH1725 Systems of building construction.",111,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC200 - GC376 Dynamics of the ocean|GC205 - GC226 Waves",110,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1293 - NB1895 Special forms|NB1293 - NB1310 Portrait sculpture",110,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC377 - GC399 Marine sediments",109,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KJ - Europe|KJ2 - KJ1040 History of Law",109,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC901 - LC915 Islamic education",109,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG725 - RG791 Obstetric operations. Operative obstetrics",109,
        "T - Technology.|TS1 - TS2301 Manufactures|TS800 - TS937 Wood technology. Lumber",109,
        "V - Naval science|VE7 - VE500 Marines|VE23 - VE124 By region or country",109,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing|Z231 - Z232 Printers and printing establishments",109,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF839.8 - BF885 Physiognomy. Phrenology",108,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT170 - GT476 Houses. Dwellings",108,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK1001 - JK1443 Congress. Legislative branch|JK1154 - JK1276 Senate",108,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3001 - LC3501 Asians",108,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education|LC37 - LC44.3 Home education",108,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education|LC47 - LC58.7 Private school education",108,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6366 - PN6377 Riddles, acrostics, charades, conundrums, etc.",108,
        "Q - Science|QC1 - QC999 Physics|QC811 - QC849 Geomagnetism",108,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ163.26 - TJ163.5 Energy conservation",108,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL2195 - BL2228 Japan|BL2216 - BL2227.8 Shinto",107,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP1 - BP68 General|BP42 - BP48 Study and teaching",107,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1501 - DT1685 Namibia. South-West Africa",107,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT555 - DT555.9 Burkina Faso. Upper Volta",107,
        "E - History: America|E151 - E889 United States|E186 - E199 Colonial history (1607-1775)|E191 - E199 By period",106,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ4835 - JZ5490 International organizations and associations|JZ4841 - JZ4848 Political non-governmental organizations. NGOs",106,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML1100 - ML1165 Chamber music",106,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML1049.8 - ML1091 Mechanical and other instruments",106,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN3203 - PN3299 Tableaux, pageants, 'Happenings,' etc.",106,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8301 - PT8574 Literary history and criticism",106,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S583 - S587.73 Agricultural chemistry. Agricultural chemicals",106,
        "J - Political Science|JA1 - JA92 Political science (General)|JA60 - JA64 Dictionaries and encyclopedias",105,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)|BV150 - BV168 Christian symbols and symbolism",104,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-|DP161.5 - DP166 1479-1516. Fernando V and Isabel I",104,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History|DQ78 - DQ210 By period",104,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6750 - JN6769 Poland",104,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA8200 - NA8260 Farm architecture",104,
        "R - Medicine|RK1 - RK715 Dentistry|RK501 - RK519 Operative dentistry. Restorative dentistry",104,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ1390 - BJ1390.5 Communist ethics",103,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K115 - K130 The legal profession",103,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ2401 - PJ2594 Cushitic languages",103,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL425 - BL490 Religious doctrines (General)|BL435 - BL457 Nature worship",102,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR1179 - CR3395 Family heraldry",102,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training|GV435 - GV436.7 Physical measurements. Physical tests, etc.",102,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K830 - K968 Obligations|K840 - K917 Contracts",102,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC620 - RC627 Nutritional diseases. Deficiency diseases",102,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX5001 - BX5009 Anglican Communion (General)",101,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS498 - DS498.8 Goa. Portuguese in India",101,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS5.95 - DS10 Description and travel",101,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States|DT331 - DT346 Sahara",101,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT591 - DT615.9 Portuguese-speaking West Africa|DT613 - DT613.9 Guinea-Bissau. Portuguese Guinea",101,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1470 - HD1476 Size of farms",101,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV551.2 - HV639 Emergency management|HV553 - HV639 Relief in case of disasters|HV560 - HV583 Red Cross. Red Crescent",101,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K720 - K792 Property",101,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1329 - KZ3085 Early/Medieval development to ca. 1900. Ius Naturae et Gentium",101,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4112 - KZ4820 By state",101,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1400 - NE1879 Metal engraving",101,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1001 - PJ1989 Egyptology|PJ1111 - PJ1446 Language",101,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG651 - RG721 Labor. Parturition",101,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB1601 - GB1798.9 Lakes. Limnology. Ponds. Lagoons",100,
        "H - Social sciences|HF1 - HF6182 Commerce|HF294 - HF343 Boards of trade. Chambers of commerce. Merchants' associations",100,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ800 - HQ800.4 Single people",100,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S604.8 - S621.5 Melioration: Improvement, reclamation, fertilization, irrigation, etc. of lands|S606 - S621.5 Special classes of lands and reclamation methods (including woodlands, burning of lands, deserts, saline environments, moors)",100,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT546.1 - DT546.49 French-speaking Equatorial Africa|DT546.4 - DT546.49 Chad (Tchad)",99,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ6378 - JZ6405 The armed conflict. War and order",99,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1648 - NK1678 Religious art",99,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism|PQ9061 - PQ9081 Poetry",99,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC501 - QC718.8 Electricity|QC669 - QC675.8 Electromagnetic theory",99,
        "R - Medicine|RK1 - RK715 Dentistry|RK520 - RK528 Orthodontics",99,
        "B - Philosophy. Psychology. Religion|BF1001 - BF1389 Parapsychology|BF1111 - BF1156 Hypnotism. Suggestion. Mesmerism. Subliminal projection",98,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV900 - BV1450 Religious societies, associations, etc.",98,
        "M - Music|MT1 - MT960 Musical instruction and study|MT90 - MT146 Analysis and appreciation of musical works|MT95 - MT100 Opera, ballet, etc.",98,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT8050 - PT8176.36 Individual authors or works|PT8060 - PT8098 16th-18th centuries",98,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC1030 - RC1160 Transportation medicine (including automotive, aviation, and space medicine)",98,
        "R - Medicine|RD1 - RD811 Surgery|RD32 - RD33.9 Operative surgery. Technique of surgical operations",98,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC801 - TC978 Irrigation engineering. Reclamation of wasteland. Drainage",98,
        "A - General Works|AM1 - AM401 Museums. Collectors and collecting|AM200 - AM401 Collectors and collecting",97,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL2600 - BL2630 Pacific Ocean Islands. Oceania",97,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4620 - BQ4905 Buddhist pantheon",97,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9801 - BX9869 Unitarianism",97,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1195 - GV1198.99 Wrestling",97,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT751 - HT815 Serfdom",97,
        "M - Music|ML1 - ML3930 Literature on music|ML112 - ML112.5 Music printing and publishing",97,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML1299 - ML1354 Band",97,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA639 - RA642 Transmission of disease",97,
        "U - Military science (General)|UF1 - UF910 Artillery|UF500 - UF515 Weapons systems",97,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR927 - DR978.52 History",96,
        "L - Education|LJ3 - LJ165 Student fraternities and societies, United States",96,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6259 - PN6268 Anecdotes. Table talk",96,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4064 - PQ4075 Early to 1500",96,
        "C - Auxiliary Sciences of History|CE1 - CE97 Technical Chronology. Calendar|CE21 - CE46 Ancient",95,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT5320 - GT6737 Customs relative to special classes",95,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space",95,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML162 - ML197 Special periods|ML162 - ML169 Ancient",95,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ1125 - TJ1345 Machine shops and machine shops practice",95,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period|DR89.9 - DR93.34 1944-1990",94,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K583 - K591 Legal systems compared",94,
        "M - Music|MT1 - MT960 Musical instruction and study|MT40 - MT67 Composition. Elements and techniques of music|MT58 - MT67 Forms",94,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS155 - DS156 Asia Minor",93,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G2800 - G3064 Oceans (General)",93,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1329 - KZ3085 Early/Medieval development to ca. 1900. Ius Naturae et Gentium|KZ2064 - KZ3085 Publicists. Writers on public international law",93,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1430 - KZA1690 Maritime boundaries",93,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC845 - NC915 Graphic art materials",93,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6500 - PT6592.36 Afrikaans literature|PT6590 - PT6592.36 Individual authors or works",93,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period|DR73.7 - DR80.8 Early and medieval",92,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV1442 - HV1448 Women",92,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6101 - BX6193 Adventists",91,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History",91,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS555 - DS555.98 Laos",91,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT3291 - DT3415 Mozambique",91,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography|GA125 - GA155 Map drawing, modeling, printing, reading, etc.",91,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ2340 - PJ2399 Libyco-Berber languages. Berber languages",91,
        "R - Medicine|RD1 - RD811 Surgery|RD651 - RD678 Neoplasms. Tumors. Oncology",91,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM1 - BM449 General|BM70 - BM135 Study and teaching",90,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History|DK4445 - DK4452 -1989",90,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1710 - HG1710.5 Electronic funds transfers",90,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF201 - JF619 Organs and functions of government|JF251 - JF289 Executive. Heads of state",90,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK1717 - JK2248 Political rights. Practical politics|JK1756 - JK1761 Citizenship",90,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ1305 - JZ2060 Scope of international relations|JZ1400 - JZ1454 Diplomatic and consular service",90,
        "R - Medicine|RD1 - RD811 Surgery|RD118 - RD120.5 Plastic surgery. Reparative surgery",90,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP890 - TP933 Textile bleaching, dyeing, printing, etc.",90,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL4110 - KL4399 Greek law",89,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB3011 - LB3095 School management and discipline|LB3045 - LB3048 Textbooks",89,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4101 - PJ4197 West and North Semitic languages",89,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ840 - BQ999 Biography|BQ860 - BQ999 Individual|BQ860 - BQ939 Gautama Buddha",88,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC71 - LC120.4 Education and the state|LC72 - LC72.5 Academic freedom",88,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1037 - LC1037.8 Career education",88,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK2975 - NK3049 Tapestries",88,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1801 - PK1831.95 Bihari",88,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2591 - PK2610 Pahari",88,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF670 - TF851 Local and light railways",88,
        "T - Technology.|TN1 - TN997 Mining engineering. Metallurgy.|TN950 - TN997 Building and ornamental stones",88,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK61 - DJK77 Local history and description",87,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV182 - GV182.5 Recreational areas and facilities. Recreation centers",87,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3240 - PG3255 Drama",87,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.|PN4832 - PN4836 Magazines and other periodicals",87,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC215 - LC238.4 Community and the school|LC237 - LC238.4 College-university and the community",86,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE175 - TE176.5 Highway design. Interchanges and intersections",86,
        "U - Military science (General)|UG1500 - UG1530 Military astronautics. Space warfare. Space surveillance",86,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT582 - DT582.9 Togo. Togoland",85,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR430 - GR487 Folklore relating to private life (including dreams, love, children, nursery rhymes, etc.)",85,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE199 - HE199.5 Freight (General)",85,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8075 - HG8107 Insurance business. Insurance management",85,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ5309 - HJ5510 Administrative fees. User charges. License fees",85,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN1187 - JN1371 Scotland",85,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6360 - KZ6373 Non-military coercion",85,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE76 - LE78 Venezuela",85,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1293 - NB1895 Special forms|NB1330 - NB1685 Sculptural monuments",85,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures|PK1971 - PK1979.5 Urdu language",85,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB419 - SB419.3 Indoor gardening and houseplants",85,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA926 - UA929 Civil defense",85,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z102.5 - Z104.5 Cryptography. Ciphers. Invisible writing",85,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1243.72 - BL1243.78 Monasteries. Temples, etc.",84,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT15 - DT16 Ethnography",84,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration|JL599.5 - JL839 West Indies. Caribbean Area",84,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1150 - K1231 Maritime law",84,
        "N - Fine Arts|ND25 - ND3416 Painting|ND25 - ND48 General",84,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2085 - PN2091 The stage and accessories",84,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC955 - RC962 Arctic medicine. Tropical medicine",84,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT180 - TT200 Woodworking. Furniture making. Upholstering",84,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT115 - DT154 Local history and description|DT139 - DT153.5 Cairo",83,
        "E - History: America|E151 - E889 United States|E186 - E199 Colonial history (1607-1775)|E191 - E199 By period|E195 - E199 1689-1775",83,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E855 - E861 Nixon's administrations, 1969-August 9, 1974|E860 - E861 Watergate Affair. Resignation",83,
        "S - Agriculture|SK1 - SK663 Hunting|SK311 - SK335 Bird hunting. Fowling",83,
        "T - Technology.|T1 - T995 Technology (General)|T55 - T55.3 Industrial satety. Industrial accident prevention",83,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ95 - DJ292 History|DJ151 - DJ292 By period|DJ154 - DJ210 1555-1795. United provinces",82,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS401 - DS486.8 India (Bharat)|DS430 - DS432 Ethnography. Sects",82,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1635 - PN1650 Relation to, and treatment of, special subjects",82,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z41 - Z42.5 Autographs. Signatures",82,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH801 - DH811 Local history and description",81,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS141 - JS271 Municipal government and local government other than municipal",81,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K140 - K165 History of law",81,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1066 - K1089 Banking",81,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1255 - KZ1273 Theory and principles",81,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2335.95 - LB2337 Endowments, trusts, etc.",81,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB2844.52 - LB2844.63 Trade unions",81,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian|PD3001 - PD3929 Danish",81,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT7945 - PT8046 Collections",81,
        "Q - Science|QM1 - QM695 Human anatomy|QM531 - QM549 Regional anatomy",81,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM260 - RM263 Chemotherapy",81,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS189 - RS190 Assay methods. Standardization. Analysis",81,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB449 - SB450.87 Flower arrangement and decoration",81,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D31 - D34 Political and diplomatic history",80,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT546.1 - DT546.49 French-speaking Equatorial Africa|DT546.2 - DT546.29 Congo (Brazaville). Middle Congo",80,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT554 - DT554.9 Mauritania",80,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1541 - GV1561 Parlor magic and tricks",80,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli|KZ6440 - KZ6530 Humanitarian law",80,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC6501 - LC6560.4 Lyceums and lecture courses. Forums",80,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE7 - LE9 Mexico",80,
        "M - Music|MT1 - MT960 Musical instruction and study|MT70 - MT74 Instrumentation and orchestration",80,
        "N - Fine Arts|N1 - N9211 Visual arts|N8510 - N8553 Art studios, materials, etc.",80,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2000 - NA2320 Study and teaching. Research",80,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1001 - PD1350 Old Germanic dialects",80,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN661 - PN694 Medieval (to 1500)|PN688 - PN691 Poetry",80,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7101 - PT7211 Literary history and criticism|PT7177 - PT7211 Prose",80,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH381 - SH385 Whaling",80,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD920 - TD934 Rural and farm sanitary engineering",80,
        "L - Education|LD13 - LD7501 Individual institutions|LD13 - LD7501 United States|LD13 - LD7251 Universities. Colleges|LD7020 - LD7251 Women's colleges",79,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa",79,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML1400 - ML3275 Vocal music|ML1499 - ML1554 Choral music",79,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8525 - BX8528 Millennial Dawnists. Jehovah's Witnesses",78,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History|DR481 - DR605 By period|DR556 - DR567 1789-1861. 19th century",78,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT391 - DT398 Eritrea",78,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU150 - DU180 New South Wales",78,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2631 - PK2659 Panjabi",78,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP670 - TP699 Oils, fats, and waxes|TP690 - TP692.5 Petroleum refining. Petroleum products",78,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG987 - DG999 Malta. Maltese Islands",77,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period|DR93.4 - DR93.47 -1990",77,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5429.7 - HF5430.6 Shopping centers. Shopping malls",77,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1051 - LC1072 Professional education",77,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P326 - P326.5 Lexicology",77,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1992.93 - PN1992.95 Nonbroadcast video recordings",77,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6279 - PN6288 Epigrams",77,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6348.5 - PN6358 Emblems, devices",77,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ245 - RJ247 Nursing of children. Pediatric nursing",77,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S671 - S760.5 Farm machinery and farm engineering",77,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3870 - K3918 rimary production. Extractive industries",76,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA8300 - NA8480 Outbuildings, gates, fences, etc.",76,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature|PA3520 - PA3564 Criticism, interpretation, etc.",76,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT543 - DT543.9 Guinea",75,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada|F1121 - F1139 Newfoundland and Labrador",75,
        "L - Education|LF14 - LF5627 Individual institutions|LF1711 - LF2397 France",75,
        "P - Language and literature|PR1 - PR9680 English literature|PR951 - PR981 Folk literature",75,
        "U - Military science (General)|UE1 - UE500 Cavalry. Armor. Including horse cavalry, armored cavalry, mechanized cavalry",75,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL443 - DL537 History",74,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ30 - DQ49.5 Antiquities. Social life and customs. Ethnography",74,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E436 - E440.5 Buchanan's administration, 1857-1861",74,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC96 - GC97.8 Estuarine oceanography",74,
        "L - Education|LF14 - LF5627 Individual institutions|LF4610 - LF4827 Spain",74,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT180 - MT198 Organ",74,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB2001 - PB3029 Brittanic group|PB2801 - PB2932 Breton. Armorican",74,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM8001 - PM8995 Artificial languages|PM8201 - PM8298 Esperanto",74,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1301 - PN1333 Epic poetry",74,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ1298 - BJ1335 Evolutionary and genetic ethics",73,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K321 - K474 Schools of legal theory|K330 - K344 Positivism",73,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT259 - MT338 String instruments|MT300 - MT318 Violoncello",73,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB317.5 - SB319.86 Horticulture. Horticultural crops",73,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1212.32 - BL1215 Doctrines. Theology",72,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR95 - DR98 Local history and description",72,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E784 - E805 1919-1933. Harding-Coolidge-Hoover era. The twenties|E801 - E805 Hoover's administration, 1919-1933",72,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV191.68 - GV198.9 Camping",72,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN8701 - JN9599 Switzerland",72,
        "L - Education|LF14 - LF5627 Individual institutions|LF3248 - LF3897 Italy",72,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1251 - PT1299 Drama",72,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7101 - PT7211 Literary history and criticism|PT7177 - PT7211 Prose|PT7181 - PT7193 Sagas",72,
        "T - Technology.|TX1 - TX1110 Home economics.|TX950 - TX953 Taverns, barrooms, saloons",72,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT93 - BT93.6 Judaism",71,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7301 - BX7343 Disciples of Christ. Campbellites",71,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1026 - K1045 Sale of goods",71,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6374 - KZ6377 Threat of force",71,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC361 - LC629 Christian education. Church education|LC531 - LC629 Protestant",71,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1001 - PD1350 Old Germanic dialects|PD1101 - PD1211 Gothic",71,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG5631 - PG5689 Sorbian (Wendic)",71,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4001 - PN4355 Oratory. Elocution, etc.|PN4071 - PN4095 Study and teaching",71,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF756.5 - SF769.5 Special preclinical sciences (including veterinary genetics, ethology, anatomy, physiology, embryology)",71,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK911 - DK919.5 Kyrgyzstan. Kirghiz S.S.R. Kirghizia",70,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT330 - HT334 Metropolitan areas",70,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV9100 - JV9269 Australia. New Zealand",70,
        "L - Education|LF14 - LF5627 Individual institutions|LF1341 - LF1537 Austria",70,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC2700 - PC3708 Dialects. Provincialisms|PC3420.8 - PC3495 Langue d'oc dialects",70,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL7001 - PL7101 Australian languages",70,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD1020 - TD1066 Hazardous substances and their disposal",70,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK1000 - VK1249 Lighthouse service",70,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering|VM595 - VM989 Marine engineering",70,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK921 - DK929.5 Tajikistan. Tajik S.S.R. Tadzhikistan",69,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period|DR267 - DR267.5 1944-1989",69,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E740 - E749 General|E747 - E748 Biography",69,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ799.95 - HQ799.97 Adulthood",69,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC703 - NC725 General works",69,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK4700 - NK4890 Costume",69,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3211 - PG3219 Translations",69,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH471 - QH489 Reproduction",69,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK2000 - TK2891 Dynamoelectric machinery and auxiliaries (including generators, transformers, motors)",69,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP87 - BP89 Islamic literature",68,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History|DH571 - DH694 By period|DH677 - DH694 20th century",68,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History|DL1050 - DL1141.6 By period",68,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History|DL1050 - DL1141.6 By period|DL1055 - DL1141.6 Modern, 1523-",68,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period|DR238 - DR240.5 Early and medieval to 1601. Roman period",68,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT546.1 - DT546.49 French-speaking Equatorial Africa|DT546.1 - DT546.19 Gabon (Gaboon, Gabun)",68,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security|KZ5615 - KZ5893 Arms control and disarmament regimes|KZ5647 - KZ5686 Nuclear (Strategic) arms limitation",68,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE21 - LE23 Argentina",68,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1630 - ND1662 Examination and conservation of paintings",68,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z680.3 - Z680.6 Library communication systems",68,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT31 - CT83 History of biographical literature. Lives of biographers",67,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR927 - DR978.52 History|DR954 - DR978.52 By period",67,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.3 - DS646.34 Borneo. Kalimantan, Indonesia",67,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS901 - DS937 Korea|DS924 - DS925 Local history and description",67,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT351 - HT352 Suburban cities and towns",67,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law",67,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE951 - NE962 Special subjects",67,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ2340 - PJ2399 Libyco-Berber languages. Berber languages|PJ2369 - PJ2399 Berber languages",67,
        "Q - Science|QC1 - QC999 Physics|QC851 - QC999 Meteorology. Climatology (including the earth's atmosphere)|QC980 - QC999 Climatology and weather|QC994.95 - QC999 Weather forecasting",67,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA645.5 - RA645.9 Emergency medical services",67,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH365 - SH380.92 Shellfish fisheries. Shellfish culture",67,
        "A - General Works|AP1 - AP230 Periodicals|AP200 - AP230 Juvenile periodicals",66,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E300 - E302.6 General|E302.5 - E302.6 Biography (Late eighteenth century)",66,
        "F - America: local history|F1 - F975 United States local history|F721 - F723 Rocky Mountains. Yellowstone National Park",66,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1298 - KZ1304 The law of treaties. System of treaty law",66,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML475 - ML547 By region or country|ML489 - ML522 Europe",66,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK201 - PK379 Vedic",66,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6299 - PN6308 Maxims",66,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF521 - SF539.8 Bee culture",66,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T60 - T60.8 Work measurement. Methods engineering",66,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT56.8 - DT69.5 Antiquities|DT63 - DT63.5 Pyramids",65,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM811 - HM821 Deviant behavior. Social deviance",65,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1135 - NK1149.5 Arts and crafts movement",65,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9547 - PT9639 Collections",65,
        "R - Medicine|RB1 - RB214 Pathology|RB24 - RB33 Pathology anatomy and histology",65,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH328 - SH329 Fishery management. Fishery policy",65,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK549 - VK572 Science of navigation",65,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR101 - CR115 Flags, banners, and standards",64,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL101 - DL291 Denmark|DL143 - DL263.3 History|DL160 - DL263.3 By period",64,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden|DL971 - DL991 Local history and description",64,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ1 - DQ20 General",64,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC109 - GC149 Chemical oceanography",64,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K212 - K213 Methodology",64,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K2100 - K2385 Courts. Procedure|K2110 - K2155 Court organization and procedure",64,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KUQ1 - KUQ4990 New Zealand",64,
        "L - Education|LH1 - LH9 College and school magazines and papers",64,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML999 - ML1015 Plucked instruments",64,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP267.5 - TP301 Explosives and pyrotechnics",64,
        "U - Military science (General)|UB1 - UB900 Military administration|UB410 - UB415 Officers",64,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1050 - BL1060 By region",63,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.17 - DS646.29 Java",63,
        "E - History: America|E11 - E143 America|E75 - E99 Indians of North America|E81 - E83 Indian wars",63,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN7721 - JN7997 Sweden",63,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV6001 - JV6006 Periodicals. Serials",63,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K85 - K89 Legal research",63,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1031 - LC1034.5 Competency based education",63,
        "M - Music|MT1 - MT960 Musical instruction and study|MT955 - MT956 Musical theater",63,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF200 - TF320 Railway construction",63,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM435 - HM477 History of sociology. History of sociological theory|HM461 - HM473 Schools of sociology. Schools of social thought",62,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV8290 - HV8291 Private security services",62,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3770 - K3795 Science and arts. Research",62,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC189 - LC214.53 Educational sociology|LC212.9 - LC212.93 Sex differences in education",62,
        "M - Music|MT1 - MT960 Musical instruction and study|MT918 - MT948 School music",62,
        "R - Medicine|RK1 - RK715 Dentistry|RK58 - RK59.3 Practice of dentistry. Dental economics",62,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH20.3 - SH191 Aquaculture|SH151 - SH179 Fish culture|SH171 - SH179 Diseases and adverse factors",62,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL175 - BL265 Natural theology|BL205 - BL216 Nature and attributes of Deity",61,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR3499 - CR4420 Titles of honor, rank, precedence, etc",61,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography|GA300 - GA325 World maps, general atlases, etc.",61,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3601 - K3611 Medical legislation",61,
        "M - Music|MT1 - MT960 Musical instruction and study|MT90 - MT146 Analysis and appreciation of musical works|MT125 - MT130 Orchestral music",61,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6121 - PN6129 Orations",61,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism|PT5121 - PT5185 Special periods",61,
        "R - Medicine|RD1 - RD811 Surgery|RD137 - RD145 Surgery in childhood, adolescence, pregnancy, old age",61,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG211 - RG483 Abnormalities and diseases of the female genital organs",61,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF191 - SF275 Cattle|SF250.5 - SF275 Horse sports. Horse shows",61,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z53 - Z102 Shorthand. Stenography. Phonography",61,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ1001 - BQ1045 Buddhist literature",60,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT95 - BT97.2 Divine law. Moral government",60,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6901 - BX6997 Christian Science",60,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU200 - DU230 Victoria",60,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology|GB500 - GB555 Mountains. Orography",60,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT5320 - GT6737 Customs relative to special classes|GT5750 - GT6390 By occupation",60,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV4905 - HV5959 Animal experimentation. Anti-vivisection",60,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian|PD2401 - PD2446 Modern Icelandic",60,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism|PT5001 - PT5112 General",60,
        "T - Technology.|T1 - T995 Technology (General)|T11.95 - T12.5 Industrial directories",60,
        "T - Technology.|T1 - T995 Technology (General)|T351 - T385 Mechanical drawing. Engineering graphics",60,
        "V - Naval science|VG20 - VG2029 Minor services of navies|VG90 - VG95 Naval aviation",60,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ95 - DJ292 History|DJ151 - DJ292 By period|DJ215 - DJ292 19th-20th centuries",59,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT3031 - DT3145 Zambia. Northern Rhodesia",59,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2366 - LB2367.75 College examinations",59,
        "Q - Science|QC1 - QC999 Physics|QC770 - QC798 Nuclear and particle physics. Atomic energy. Radioactivity|QC794.95 - QC798 Radioactivity and radioactive substances",59,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF411 - SF459 Pets|SF441 - SF450 Cats",59,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF481 - SF507 Poultry. Eggs",59,
        "T - Technology.|TH1 - TH9745 Building construction|TH2025 - TH3000 Details in building design and construction (including walls, roofs)",59,
        "T - Technology.|TS1 - TS2301 Manufactures|TS800 - TS937 Wood technology. Lumber|TS840 - TS915 Wood products. Furniture",59,
        "U - Military science (General)|UD1 - UD495 Infantry|UD380 - UD425 Small arms. Swords, etc.",59,
        "V - Naval science|V1 - V995 Naval science (General)|V400 - V695 Naval education",59,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E303 - E309 1775-1789. The Confederation, 1783-1789",58,
        "F - America: local history|F1 - F975 United States local history|F476 - F485 Old Northwest. Northwest Territory",58,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1483 - HD1486 Agricultural associations, societies, etc.",58,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2667 - LC2698 Latin Americans. Hispanic Americans|LC2680 - LC2688 Mexican Americans. Mexicans in the United States",58,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1160 - NK1590 Decoration and ornament. Design|NK1548 - NK1590 Special subjects for design",58,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB354 - SB402 Fruit culture and orchard care|SB387 - SB399 Grape Culture, Viticulture",58,
        "U - Military science (General)|U1 - U900 Military science (General)|U150 - U155 Military planning",58,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z716 - Z716.1 Library extension. Library commissions. Traveling libraries",58,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1845 - BF1891 Fortune-telling",57,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D299 - D472 -1789|D301 - D309 Period of the French Revolution",57,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS591 - DS599 Malaysia. Malay Peninsula. Straits Settlements|DS597.36 - DS597.39 Sarawak",57,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC109 - JC121 Medieval state",57,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML475 - ML547 By region or country|ML525 - ML541 Asia",57,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF1401 - PF1541 Friesian",57,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8551 - BX8593 Moravian Church. United Brethren. Unitas Fratrum. Herrnhuters",56,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8701 - BX8749 New Jerusalem Church. New Church. Swedenborgianism",56,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT619 - DT620.9 Spanish West Africa",56,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML1091.8 - ML1093 Electronic instruments",56,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4100 - NA4145 Classed by material",56,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6001 - PK6099 General",56,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6329 - PN6338 Thoughts",56,
        "T - Technology.|TS1 - TS2301 Manufactures|TS1870 - TS1935 Rubber industry",56,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E376 - E380 John Quincy Adams' administration, 1825-1829",55,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E865 - E868 Ford's administration, August 9, 1974-1977",55,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5761 - HF5780 Shipment of goods. Delivery of goods",55,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah",55,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC701 - LC775 Jewish education",55,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC540 - TC558 Dams. Barrages",55,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP184 - BP184.9 Religious ceremonies, rites, etc.",54,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period|DR242 - DR249 1822-1881. 19th century",54,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.|G8950 - G9084 Australasia",54,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K100 - K103 Legal education",54,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K600 - K615 Private law",54,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT339 - MT533 Wind instruments|MT380 - MT392 Clarinet (A, Bb, C, Eb, etc.)",54,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6288.5 - PN6298 Epitaphs",54,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA645.3 - RA645.37 Home health care services",54,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK452 - TK454.4 Electric apparatus and materials. Electric circuits. Electric networks",54,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK7800 - TK8360 Electronics|TK8300 - TK8360 Photoelectronic devices (General)",54,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT450.5 - DT450.95 Burundi",53,
        "F - America: local history|F1 - F975 United States local history|F850.5 - F851.5 Pacific States",53,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1151 - GV1190 Shooting. Archery",53,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ836 - TJ927 Hydraulic machinery",53,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT491 - DT516.9 British West Africa|DT509 - DT509.9 Gambia",52,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU250 - DU280 Queensland",52,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC200 - GC376 Dynamics of the ocean|GC229 - GC296.8 Currents",52,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG9651 - HG9899 Fire insurance",52,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT161 - HT165 Garden cities. The 'city beautiful'",52,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV675 - HV677 Accidents. Prevention of accidents",52,
        "T - Technology.|TR1 - TR1050 Photography|TR925 - TR1050 Photomechanical processes",52,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK931 - DK939.5 Turkmenistan. Turkmen S.S.R.  Turkmenia",51,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR927 - DR978.52 History|DR954 - DR978.52 By period|DR969.8 - DR978.52 20th century",51,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ3801 - HJ3844 Revenue from sources other than taxation",51,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN5701 - JN5999 Netherlands",51,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN8423 - JN8661 Portugal",51,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV6021 - JV6032 History",51,
        "M - Music|ML1 - ML3930 Literature on music|ML3800 - ML3923 Philosophy and physics of music|ML3880 - ML3915 Criticism",51,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT740 - MT810 Instrumental techniques for children",51,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG700 - UG705 Tactics",51,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF889 - BF905 Graphology. Study of handwriting",50,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB1805 - LB2151 State teachers colleges|LB1991 - LB2151 Other regions or countries",50,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1390 - ND1393 Still life",50,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1001 - PJ1989 Egyptology|PJ1091 - PJ1109 Egyptian writing and its decipherment",50,
        "R - Medicine|RD1 - RD811 Surgery|RD701 - RD811 Orthopedic surgery|RD792 - RD811 Physical rehabilitation",50,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S600 - S600.7 Agricultural meteorology. Crops and climate",50,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB414.6 - SB417 Greenhouses and greenhouse culture",50,
        "U - Military science (General)|U1 - U900 Military science (General)|U164 - U167.5 Tactics",50,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL101 - DL291 Denmark|DL143 - DL263.3 History|DL160 - DL263.3 By period|DL184 - DL263.3 Modern, 1523-",49,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5.5 - JZ18 Periodicals",49,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3289 - K3367 Organs of government",49,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3978 - K3992 Public utilities",49,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7611 - K7688 Civil procedure. International civil procedure",49,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German|PF4501 - PF4596 Early Modern German",49,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1 - PL481 Ural-Altaic languages|PL450 - PL481 Tungus Manchu languages",49,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9201 - PT9499 Literary history and criticism|PT9320 - PT9370 Special periods",49,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ268 - TJ740 Steam engineering|TJ603 - TJ695 Locomotives",49,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC270 - UC360 Transportation",49,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z681.5 - Z681.7 Trustees. Library boards, committees, etc.",49,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL2230 - BL2240 Korea",48,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE9713 - HE9715 Cellular telephone services industry. Wireless telephone",48,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK1606 - JK1685 Government property, etc.",48,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1112 - K1116 Investments",48,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri",48,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KH1 - KH999 South America (General)",48,
        "M - Music|MT1 - MT960 Musical instruction and study|MT90 - MT146 Analysis and appreciation of musical works|MT140 - MT145 Chamber and solo instrumental music",48,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1135 - NB1150 General works",48,
        "R - Medicine|RZ201 - RZ999 Other systems of medicine|RZ400 - RZ408 Mental healing",48,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP480 - TP498 Low temperature engineering. Cyrogenic engineering. Refrigeration",48,
        "T - Technology.|TR1 - TR1050 Photography|TR590 - TR620 Lighting",48,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT490 - TT695 Clothing manufacture. Dressmaking. Tailoring",48,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA985 - UA997 Military geography",48,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG770 - UG1045 Organization. Personnel management",48,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL443 - DL537 History|DL460 - DL537 By period",47,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E416 - E420 Polk's administration, 1845-1849",47,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ2321 - HJ2323 Tax incidence. Tax shifting. Tax equity",47,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS1701 - JS1800 Canada",47,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3400 - K3431 Administrative law",47,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB1771 - LB1773 Certification of teachers",47,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE3 - LE5 Canada",47,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1160 - NB1195 Designs and technique",47,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX760 - NX770 Administration of the arts",47,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German|PF3992 - PF4010 Old Saxon",47,
        "R - Medicine|RD1 - RD811 Surgery|RD99 - RD99.35 Surgical nursing",47,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD250 - SD363.3 Forestry education",47,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC20 - UC258 Organization of the service. By region or country",47,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL71.5 - BL73 Biography",46,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT2421 - DT2525 Botswana. Bechuanaland",46,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT619 - DT620.9 Spanish West Africa|DT620 - DT620.9 Equatorial Guinea (Spanish Guinea)",46,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML3400 - ML3465 Dance music",46,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT733 - MT733.6 Band",46,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC970 - RC986 Military medicine. Naval medicine",46,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM930 - RM931 Rehabilitation therapy",46,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF371 - SF379 Sheep. Wool",46,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History|DQ78 - DQ210 By period|DQ201 - DQ210 20th century",45,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT201 - HT221 City population (including children in cities, immigration)",45,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K288 - K296 Interpretation and construction of law. Lacunae in law",45,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC129 - LC139 Compulsory education",45,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education|LC25 - LC33 Self-education. Self-culture",45,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE15 - LE17 West Indies",45,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P99.5 - P99.6 Nonverbal communication",45,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature|PA6141 - PA6144 Criticism, interpretation, etc.",45,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ2001 - PJ2199 Coptic",45,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ601 - PJ989 Special groups",45,
        "R - Medicine|RD1 - RD811 Surgery|RD101 - RD104 Fractures (General)",45,
        "R - Medicine|RF1 - RF547 Otorhinolaryngology|RF460 - RF547 Laryngology. Diseases of the throat",45,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK1250 - VK1299 Shipwrecks and fires",45,
        "B - Philosophy. Psychology. Religion|BJ1801 - BJ2195 Social usages. Etiquette|BJ2021 - BJ2078 Etiquette of entertaining",44,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP176 - BP181 The five duties of a Moslem.  Pillars of Islam",44,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History|DQ51 - DQ57 General",44,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1706 - HG1708 Accounting. Bookkeeping",44,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2599.5 - NA2599.9 Architectural criticism",44,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5211 - PJ5289 West Aramaic",44,
        "Q - Science|QK1 - QK989 Botany|QK474.8 - QK495 Spermatophyta. Phanerogams|QK494 - QK494.5 Gymnosperms",44,
        "R - Medicine|RD1 - RD811 Surgery|RD680 - RD688 Diseases of the locomotor system (Surgical treatment)",44,
        "R - Medicine|RE1 - RE994 Opthamology|RE939.2 - RE981 Optometry. Opticians. Eyeglasses",44,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD84 - DD257.4 History|DD121 - DD257.4 By period|DD121 - DD124 Earliest to 481",43,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT546.1 - DT546.49 French-speaking Equatorial Africa|DT546.3 - DT546.39 Central African Republic. Central African Empire. Ubangi-Shari",43,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K37 - K44 Bibliography",43,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3745 - LC3747 Children of immigrants (First generation)",43,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education|LC45 - LC45.8 Nonformal education",43,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH1001 - PH1079 Permic",43,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ601 - PJ989 Special groups|PJ701 - PJ989 Islamic",43,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8650 - PT8733 Collections",43,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ1040 - TJ1119 Machinery exclusive of prime movers",43,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT205 - TT267 Metalworking",43,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering|VM298.5 - VM301 Shipbuilding industry. Shipyards",43,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL175 - BL265 Natural theology|BL224 - BL227 Creation. Theory of the Earth",42,
        "C - Auxiliary Sciences of History|CJ1 - CJ6661 Numismatics|CJ4801 - CJ5450 Tokens",42,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E784 - E805 1919-1933. Harding-Coolidge-Hoover era. The twenties|E791 - E796 Coolidge's administration, August 2, 1923-1929",42,
        "H - Social sciences|HG1 - HG9999 Finance|HG4301 - HG4480.9 Trust services. Trust companies",42,
        "L - Education|LF14 - LF5627 Individual institutions|LF1541 - LF1549 Czech Republic",42,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT560 - MT570 Banjo",42,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German|PF5971 - PF5999 Slang. Argot, etc.",42,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG7900 - PG7925 Lechitic dialects",42,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6101 - PK6119 Avestan",42,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9650 - PT9876.36 Individual authors or works|PT9674 - PT9715 16th-18th centuries",42,
        "R - Medicine|RD1 - RD811 Surgery|RD151 - RD498 Military and naval surgery",42,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS139 - RS141.9 Pharmacopoeias",42,
        "U - Military science (General)|U1 - U900 Military science (General)|U310 - U310.2 War games",42,
        "V - Naval science|V1 - V995 Naval science (General)|V210 - V214.5 Submarine warfare",42,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT3161 - DT3257 Malawi. Nyasaland",41,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC200 - GC376 Dynamics of the ocean|GC228.5 - GC228.6 Ocean circulation",41,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC6601 - LC6660.4 Reading circles and correspondence clubs",41,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL6601 - PL6621 Papuan languages",41,
        "R - Medicine|RD1 - RD811 Surgery|RD49 - RD52 Surgical therapeutics. Preoperative and postoperative care",41,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG104 - RG104.7 Operative gynecology",41,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA177.4 - TA185 Engineering economy",41,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA715 - TA787 Earthwork. Foundations",41,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE279.5 - TE298 Pedestrian facilities",41,
        "U - Military science (General)|UG1500 - UG1530 Military astronautics. Space warfare. Space surveillance|UG1523 - UG1525 By region or country",41,
        "V - Naval science|VC10 - VC580 Naval maintenance",41,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B790 - B5802 Modern|B5800 - B5802 By religion",40,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography|GA192 - GA197.3 Map libraries, collections of maps, globes, etc.",40,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC150 - GC182 Physical oceanography",40,
        "M - Music|MT1 - MT960 Musical instruction and study|MT820 - MT915 Singing and vocal technique|MT825 - MT850 Systems and methods",40,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism|PQ9097 - PQ9119 Prose",40,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG801 - RG871 Puerperal state",40,
        "S - Agriculture|SK1 - SK663 Hunting|SK281 - SK293 Special methods and types of hunting (including bolos, game calling, tracking, trapping, dressing)",40,
        "T - Technology.|TH1 - TH9745 Building construction|TH845 - TH895 Architectural engineering. Structural engineering of buildings",40,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History|DH571 - DH694 By period|DH620 - DH676 1794-1909",39,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E431 - E435 Pierce's administration, 1853-1857",39,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS2101 - JS2143 Mexico",39,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2630 - LC2638 Asian Americans. Asians in the United States",39,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ255 - TJ265 Heat engines",39,
        "T - Technology.|TS1 - TS2301 Manufactures|TS940 - TS1047 Leather industries. Tanning",39,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1783 - BF1815 Seers. Prophets. Prophecies",38,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR51 - CR79 Crests, monograms, devices, badges, mottoes",38,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS491 - DS492.9 Bhutan",38,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary|HV8081 - HV8099 Private detectives. Detective bureaus",38,
        "J - Political Science|J1 - J981 General legislative and executive papers|J10 - J98 United States|J80 - J82 Presidents' messages and other executive papers",38,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6101 - JN6371 Belgium",38,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ118 - KZ194 Treaties and other international agreements",38,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT640 - MT654 Lute, balalaika, etc.",38,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6135 - PK6199.9 Middle Iranian languages",38,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6141 - PN6145 Essays",38,
        "R - Medicine|RD1 - RD811 Surgery|RD63 - RD76 Operating rooms and theaters. Instruments, apparatus, and appliances",38,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF191 - SF275 Cattle|SF221 - SF250 Horses",38,
        "T - Technology.|TR1 - TR1050 Photography|TR510 - TR545 Color Photography",38,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology|CC83 - CC97 Study and teaching. Research",37,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6630 - JN6639 Ukraine",37,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC241 - LC245 Foundations, endowments, funds",37,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1160 - NK1590 Decoration and ornament. Design|NK1160 - NK1174 General",37,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK1 - PK85 General",37,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9201 - PT9499 Literary history and criticism|PT9375 - PT9404 Poetry",37,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM283 - RM298 Endocrinotherapy. Organotherapy",37,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF84.82 - SF85.6 Rangelands. Range management. Grazing",37,
        "T - Technology.|TS1 - TS2301 Manufactures|TS195 - TS198.8 Packaging",37,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1501 - HS2460.7 Other societies. By classes|HS1601 - HS2265 Race socieities",36,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN5001 - JN5191 Greece",36,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN7011 - JN7066 Scandinavia. Northern Europe",36,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6130 - PN6140 Letters",36,
        "R - Medicine|RD1 - RD811 Surgery|RD75 - RD79 Examinations. Diagnosis",36,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ242 - RJ243 Hospital care",36,
        "R - Medicine|RZ201 - RZ999 Other systems of medicine|RZ409.7 - RZ999 Miscellaneous systems and treatments (including magnetotherapy, mesmerism, naturopathy, organomic medicine, phrenology, radiesthesia, etc.)",36,
        "T - Technology.|TC1501 - TC1800 Ocean engineering",36,
        "T - Technology.|TH1 - TH9745 Building construction|TH3301 - TH3411 Maintenance and repair",36,
        "V - Naval science|V1 - V995 Naval science (General)|V160 - V165 Strategy",36,
        "V - Naval science|VF1 - VF580 Naval ordnance",36,
        "A - General Works|AP1 - AP230 Periodicals|AP101 - AP115 Humorous periodicals",35,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF638 - BF648 New Thought. Menticulture, etc.",35,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9701 - BX9743 Salvation Army",35,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK61 - DJK77 Local history and description|DJK61 - DJK66 Black Sea region",35,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK680 - DK689.5 Armenia (Republic). Armenian S.S.R.",35,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.5 - DS646.59 Timor",35,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU350 - DU380 Western Australia",35,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5419 - HF5422 Wholesale trade",35,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBP1 - KBP4860 Islamic law. Shari'ah. Fiqh|KBP50 - KBP69 History, development and application of Islamic law",35,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC390 - NC670 Study and teaching",35,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2351 - PK2418 Marathi",35,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2701 - PK2708.9 Rajasthani",35,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2801 - PK2891 Sinhalese (Singhalese)",35,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages|PL3551 - PL4001 Tibeto-Burman languages|PL3851 - PL4001 Assam and Burma",35,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9547 - PT9639 Collections|PT9580 - PT9599 Poetry",35,
        "Q - Science|QL1 - QL991 Zoology|QL750 - QL795 Animal behavior|QL791 - QL795 Stories and anecdotes",35,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG491 - RG499 Diseases of the breast",35,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC530 - TC537 River protective works. Regulation. Flood control",35,
        "T - Technology.|TS1 - TS2301 Manufactures|TS1950 - TS1982 Animal products",35,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1100 - BL1107.5 General",34,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E838 - E840.8 General|E840.6 - E840.8 Biography (General)",34,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT5220 - GT5286 Customs relative to transportation and travel",34,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE323 - HE328 Transportation geography. Trade routes",34,
        "H - Social sciences|HG1 - HG9999 Finance|HG6105 - HG6270.9 Lotteries",34,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG9956 - HG9969 Casualty insurance",34,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KM - Asia and Eurasia, Africa, Pacific Area, and Antarctica. Asia",34,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1255 - KZ1273 Theory and principles|KZ1267 - KZ1273 Domain of the law of nations",34,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT259 - MT338 String instruments|MT320 - MT334 Double bass",34,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1370 - ND1375 Marine painting",34,
        "N - Fine Arts|NE1 - NE3002 Print media|NE2236 - NE2240.6 Serigraphy",34,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature|PL8015 - PL8021 Languages. By region or country",34,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ250 - RJ250.3 Premature infants",34,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF411 - SF459 Pets|SF456 - SF458.83 Fishes. Aquariums",34,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP934 - TP945 Paints, pigments, varnishes, etc.",34,
        "T - Technology.|TR1 - TR1050 Photography|TR250 - TR265 Cameras",34,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7801 - BX7843 German Baptist Brethren. Church of the Brethren. Dunkards",33,
        "E - History: America|E151 - E889 United States|E660 - E738 Late nineteenth century, 1865-1900|E660 - E664 General|E663 - E664 Biography",33,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1221 - GV1469.62 Indoor games and amusements|GV1301 - GV1311 Gambling. Chance and banking games",33,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K190 - K195 Ethnological jurisprudence. Primitive law",33,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KDZ1 - KDZ4999 Law of America. North America|KDZ1101 - KDZ1199 Organization of American States (OAS)",33,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH1101 - PH1109 Udmurt",33,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1001 - PK1095 Pali",33,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL490 - PL495 Far Eastern languages and literature",33,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1341 - PN1347 Folk poetry",33,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA771 - RA771.7 Rural health and hygiene. Rural health services",33,
        "R - Medicine|RL1 - RL803 Dermatology|RL201 - RL331 Hyperemias, inflammations, and infections of the skin",33,
        "R - Medicine|RX1 - RX681 Homeopathy",33,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S602 - S604.37 Methods and systems of culture. Cropping systems",33,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF405.5 - SF407 Laboratory animals",33,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T59.7 - T59.77 Human engineering in industry. Man-machine systems",33,
        "A - General Works|AZ101 - AZ999 History of scholarship and learning. The humanities|AZ191 - AZ193 Evaluation",32,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF207 - BF209 Psychotropic drugs and other substances",32,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1153.69 - BL1168 By region or country",32,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ20.5 - DQ26 Description and travel",32,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E371 - E375 Monroe's administrations, 1817-1825",32,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC65 - GC78 Underwater exploration",32,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K540 - K546 Trials",32,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7340 - K7512 Commercial law",32,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence",32,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1340 - KZA1417 Concepts and principles",32,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT259 - MT338 String instruments|MT280 - MT298 Viola",32,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT339 - MT533 Wind instruments|MT360 - MT379 Oboe",32,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1400 - NE1879 Metal engraving|NE1850 - NE1879 Color prints",32,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH1201 - PH1409 Ugric languages",32,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2781 - PK2790 Sindhi",32,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN821 - PN840 Germanic literature",32,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6066 - PN6069 Special classes of authors",32,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF670 - TF851 Local and light railways|TF840 - TF851 Elevated railways and subways",32,
        "T - Technology.|TH1 - TH9745 Building construction|TH6014 - TH6081 Environmental engineering of buildings. Sanitary engineering of buildings",32,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period|DR268 - DR269.6 -1989",31,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E386 - E390 Van Buren's administration, 1837-1841",31,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1493 - HD1493.5 Government owned and operated farms. State farms. Sovkhozes",31,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KM - Asia and Eurasia, Africa, Pacific Area, and Antarctica. Asia|KM1 - KM999 General",31,
        "L - Education|LF14 - LF5627 Individual institutions|LF4203 - LF4209 Poland",31,
        "P - Language and literature|PR1 - PR9680 English literature|PR921 - PR928 Essays",31,
        "T - Technology.|TH1 - TH9745 Building construction|TH5011 - TH5701 Construction by phase of work",31,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK4125 - TK4399 Electric lighting",31,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT950 - TT979 Hairdressing. Beauty culture. Barbers' work",31,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG637 - UG639 Education and training",31,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ4965 - BQ5030 Ceremonies and rites. Ceremonial rules",30,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR50 - DR50.84 Thrace",30,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E396 - E400 Tyler's administration, April 4, 1841-1845",30,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E761 - E765 Tafts' administration, 1909-1913",30,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography|GA110 - GA115 Projection",30,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC190 - GC190.5 Ocean-atmosphere interaction",30,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1470 - GV1511 Parties. Party games and stunts|GV1491 - GV1507 Puzzles",30,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1711 - HD1741 Irrigation",30,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC5900 - LC6101 Correspondence schools",30,
        "L - Education|LF14 - LF5627 Individual institutions|LF14 - LF1257 Great Britain|LF800 - LF957 Ireland",30,
        "L - Education|LF14 - LF5627 Individual institutions|LF5051 - LF5627 Turkey and the Baltic states",30,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2335 - NA2360 Competitions",30,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN20 - PN30 Societies",30,
        "P - Language and literature|PR1 - PR9680 English literature|PR911 - PR918 Letters",30,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA601 - RA602 Food and food supply in relation to public health",30,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD159 - TD168 Municipal engineering",30,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ751 - TJ805 Miscellaneous motors and engines (including gas, gasoline, diesel engines)",30,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology|CC200 - CC260 Bells. Campanology. Cowbells",29,
        "G - Geography. Anthropology. Recreation|GF1 - GF900 Human ecology. Anthropogeography|GF53 - GF71 Environmental influences on humans",29,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5484 - HF5495 Warehouses. Storage",29,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ981 - HQ996 Polygamy",29,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV4005 - HV4013 Immigrants",29,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF201 - JF619 Organs and functions of government|JF331 - JF341 Parliamentary government",29,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS8001 - JS8490 Australia. New Zealand. Pacific Ocean islands",29,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1287 - KZ1296 Codification of the law of nations",29,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG55 - LG57 Taiwan",29,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML465 - ML471 By period",29,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1940 - NE2232.5 Etching and aquatint|NE2120 - NE2140 General works",29,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH801 - PH836 Mari",29,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH20.3 - SH191 Aquaculture|SH33 - SH134.6 By region or country",29,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA170 - TA171 Environmental engineering",29,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA190 - TA195 Management of engineering works",29,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ940 - TJ940.5 Vacuum technology",29,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK9900 - TK9971 Electricity for amateurs. Amateur constructors' manuals",29,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK798 - VK997 Sailing directions. Pilot guides",29,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA5050 - ZA5185 Information from specific providers",29,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA5050 - ZA5185 Information from specific providers|ZA5050 - ZA5185 Government information",29,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works|AC901 - AC995 Pamphlet collections",28,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF2050 - BF2055 Human-alien encounters. Contact between humans and extraterrestrials",28,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions|BL1640 - BL1645 Syrian. Palestinian. Samaritan",28,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History|DL1050 - DL1141.6 By period|DL1055 - DL1141.6 Modern, 1523-|DL1090 - DL1105 1939-1945",28,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History|DL1050 - DL1141.6 By period|DL1055 - DL1141.6 Modern, 1523-|DL1090 - DL1105 1939-1945|DL1095 - DL1105 Russo-Finnish War, 1939-1940",28,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1780 - G2799 Eastern Hemisphere. Eurasia, Africa, etc.|G2740 - G2799 Australasia",28,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ998 - HQ999 Illegitimacy. Unmarried mothers",28,
        "J - Political Science|J1 - J981 General legislative and executive papers|J1 - J9 Gazettes",28,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1340 - KZA1417 Concepts and principles|KZA1348 - KZA1405 Mare liberum doctrine",28,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE36 - LE38 Chile",28,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3375 - NK3496.3 Wallpapers",28,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN3175 - PN3191 College and school theatricals",28,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6155 - PQ6167 Folk literature",28,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF391 - SF397.83 Swine",28,
        "T - Technology.|TR1 - TR1050 Photography|TR550 - TR581 Studio and Laboratory",28,
        "T - Technology.|TS1 - TS2301 Manufactures|TS2220 - TS2283 Tobacco industry",28,
        "U - Military science (General)|UD1 - UD495 Infantry|UD157 - UD302 Tactics. Maneuvers. Drill regulations",28,
        "U - Military science (General)|UH20 - UH910 Other services|UH600 - UH629.5 Military hygiene and sanitation",28,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7020 - BX7060 Church of God",27,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ401 - DJ411 Local history and description",27,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE5880 - HE5990 Express service",27,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ1305 - JZ2060 Scope of international relations|JZ1328 - JZ1395 By period",27,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3661 - K3674 Public safety",27,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML475 - ML547 By region or country|ML475 - ML486 America",27,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT339 - MT533 Wind instruments|MT400 - MT415 Bassoon",27,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE218 - NE330 Engraved portraits. Self",27,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3501 - PL3509 Non-Aryan languages of India and Southeastern Asia in general",27,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6080 - PN6095 Quotations|PN6086 - PN6089 French",27,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6080 - PN6095 Quotations|PN6090 - PN6110 German",27,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5901 - PT5980 Provincial, local, foreign",27,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7001 - PT7099 Scandinavian literature|PT7001 - PT7099 General|PT7090 - PT7099 Collections",27,
        "Q - Science|QD1 - QD999 Chemistry|QD450 - QD801 Physical and theoretical chemistry|QD625 - QD655 Radiation chemistry",27,
        "R - Medicine|RK1 - RK715 Dentistry|RK529 - RK535 Oral surgery",27,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF41 - SF55 History",27,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF95 - SF99 Feeds and feeding. Animal nutrition",27,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH346 - SH351 Fishery for individual species",27,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF501 - TF668 Railway operation and management",27,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z49 - Z51 Typewriters. Typewriting. Keyboards. Keyboarding",27,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z681 - Z681.3 Reproduction of library materials. Storage media of library materials",27,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History|DQ78 - DQ210 By period|DQ124 - DQ191 19th century",26,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada|F1121 - F1139 Newfoundland and Labrador|F1135 - F1139 Labrador",26,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA51 - GA87 Surveys (General)",26,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology|GB471 - GB478.99 Islands",26,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB980 - GB992 Watersheds. Runoff. Drainage",26,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3400 - K3431 Administrative law|K3402 - K3417 The administrative process",26,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3625 - K3649 Food. Drugs. Cosmetics",26,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K600 - K615 Private law|K605 - K615 Unification",26,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7120 - K7197 Persons",26,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR27 - KBR41.7 Official acts of the Holy See",26,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2574 - LC2576 Gays. Lesbians. Bisexuals",26,
        "M - Music|ML1 - ML3930 Literature on music|ML40 - ML44 Programs",26,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1550 - PK1569 Assamese",26,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6701 - PK6821 Afghan (Pashto, Pushto, Pushtu, etc.)",26,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6244 - PN6246 Literary extracts. Commonplace books",26,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1341 - PR1349 Letters",26,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7101 - PT7211 Literary history and criticism|PT7170 - PT7176 Poetry",26,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC91 - RC103 Diseases due to physical and chemical agents",26,
        "R - Medicine|RF1 - RF547 Otorhinolaryngology|RF341 - RF437 Rhinology. Diseases of the nose, accessory sinuses, and nasopharynx",26,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S589.75 - S589.76 Agriculture and the environment",26,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB175 - SB177 Food crops",26,
        "S - Agriculture|SK1 - SK663 Hunting|SK281 - SK293 Special methods and types of hunting (including bolos, game calling, tracking, trapping, dressing)|SK284 - SK287 Fox hunting",26,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT174 - TT176 Articles for children",26,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions|BL1620 - BL1625 Assyro-Babylonian",25,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period|DR241 - DR241.5 Phanariote regime, 1601-1822",25,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E391 - E393 William H. Harrison's administration, March 4-April 4, 1841",25,
        "F - America: local history|F1 - F975 United States local history|F296 - F301 Gulf States. West Florida",25,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See",25,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLF1 - KLF490 Belarus (Republic)",25,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1249 - KZ1252 International law and other disciplines",25,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1035 - LC1035.8 Basic education. Basic skills education",25,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1400 - NE1879 Metal engraving|NE1634 - NE1749 History",25,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK4990 - PK5046 Prakrit literature",25,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6135 - PK6199.9 Middle Iranian languages|PK6141 - PK6199.5 Pahlavi",25,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6500 - PT6592.36 Afrikaans literature|PT6500 - PT6530 Literary history and criticism",25,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF781 - SF809 Communicable diseases of animals (General)",25,
        "T - Technology.|TH1 - TH9745 Building construction|TH6101 - TH6887 Plumbing and pipefitting",25,
        "T - Technology.|TH1 - TH9745 Building construction|TH7700 - TH7975 Illumination. Lighting",25,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ241 - TJ254.7 Machine construction (General)",25,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP751 - TP762 Gas industry",25,
        "U - Military science (General)|UB1 - UB900 Military administration|UB275 - UB277 Psychological warfare. Propaganda",25,
        "U - Military science (General)|UB1 - UB900 Military administration|UB370 - UB375 Military pensions, etc.",25,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z52 - Z52.5 Word processing",25,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions|BL1600 - BL1605 General",24,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH901 - DH925 Luxembourg",24,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL443 - DL537 History|DL460 - DL537 By period|DL527 - DL537 20th century. Period of World War II, 1939-1945",24,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT160 - DT177 North Africa|DT167 - DT176 History|DT168 - DT169.5 Carthaginian period",24,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E421 - E423 Taylor's administiration, 1849-July 9, 1850",24,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ809 - HQ809.3 Family violence",24,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV4961 - HV4995 Degeneration",24,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3280 - K3282 Church and state",24,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLN1 - KLN489 Russian S.F.S.R. (to 1991)",24,
        "L - Education|LT6 - LT501 Textbooks",24,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH751 - PH785 Mordvin",24,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK3591 - PK4485 Sanskrit|PK4471 - PK4485 Translations",24,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1371 - PT1374 Early to 1950. Old and Middle High German",24,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7312 - PT7318 Scientific and learned literature",24,
        "Q - Science|QL1 - QL991 Zoology|QL799 - QL799.5 Morphology",24,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA619 - RA637 Disposal of the dead. Undertaking. Burial. Cremation. Cemeteries",24,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS192 - RS199 Pharmaceutical technology",24,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF105 - SF109 Breeding",24,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF811 - SF909 Veterinary medicine of special organs, regions, and systems",24,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE250 - TE278.8 Pavements and paved roads",24,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z703.5 - Z703.6 Moving. Disposition of books on shelves, etc. Including discarding, weeding",24,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF908 - BF940 The hand. Palmistry",23,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology|CC300 - CC350 Crosses",23,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT411 - DT411.9 Djibouti. French Territory of the Afars and Issas. French Somaliland",23,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV1 - JV5399 Colonies and colonization|JV412 - JV461 Administration and organization",23,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1370 - K1395 Insolvency and bankruptcy. Creditors' rights",23,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3566 - K3578 Public health",23,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL700 - KL2215 Mesopotamia. Assyro",23,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE66 - LE68 Peru",23,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2400 - NA2460 Museums. Exhibitions",23,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC1981 - PC1984 Sardinian",23,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages|PL4501 - PL4587 Munda languages (Kolarian languages)",23,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN611 - PN649 Ancient",23,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7450 - PT7495 Collections",23,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8301 - PT8574 Literary history and criticism|PT8420 - PT8456 Special periods",23,
        "R - Medicine|RE1 - RE994 Opthamology|RE925 - RE939 Refraction and errors of refraction and accommodation",23,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ50 - RJ51 Examination. Diagnosis",23,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM265 - RM267 Antibiotic therapy. Antibiotics",23,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA365 - TA367 Acoustics in engineering. Acoustical engineering",23,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD201 - TD500 Water supply for domestic and industrial purposes|TD481 - TD493 Water distribution systems",23,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG590 - UG613.5 Military telegraphy and telephony",23,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9901 - BX9969 Universalism. Universalists",22,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR4501 - CR6305 Chivalry and knighthood (Orders, decorations, etc.)|CR4571 - CR4595 Duels and dueling",22,
        "C - Auxiliary Sciences of History|CS1 - CS3090 Genealogy|CS23 - CS35 Genealogical lists, etc., covering more than one country or continent",22,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS600 - DS605 Malay Archipelago",22,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU300 - DU330 South Australia",22,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7260 - K7338 Obligations",22,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE11 - LE13 Central America",22,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG60 - LG170.2 India. Pakistan. Bangladesh. Burma. Sri Lanka. Nepal",22,
        "P - Language and literature|PE1 - PE3729 English language|PE814 - PE896 Early Modern English",22,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1201 - PK1409.5 Prakrit",22,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL700 - PL889 Japanese literature|PL885 - PL889 Local literature",22,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB418 - SB418.4 Container gardening",22,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP250 - TP261 Industrial electrochemistry",22,
        "T - Technology.|TS1 - TS2301 Manufactures|TS800 - TS937 Wood technology. Lumber|TS920 - TS937 Chemical processing of wood",22,
        "V - Naval science|VB15 - VB345 Naval administration|VB21 - VB124 By region or country",22,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA3150 - ZA3159 Information services. Information centers",22,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL425 - BL490 Religious doctrines (General)|BL465 - BL470 Worship of human beings",21,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1300 - BL1380 Jainism|BL1376 - BL1378.85 Forms of worship",21,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions|BL1615 - BL1616 Sumerian",21,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC941 - DC947 Monaco",21,
        "J - Political Science|JA1 - JA92 Political science (General)|JA27 - JA34 Societies",21,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1118 - KZA1122 Treaties and other international agreements",21,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH501 - PH509 Karelian",21,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2131 - PN2193 By period|PN2152 - PN2160 Medieval",21,
        "R - Medicine|R5 - R920 Medicine (General)|R722 - R722.32 Missionary medicine. Medical missionaries",21,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB992 - SB998 Economic zoology applied to crops. Agricultural zoology (including animals injurious and beneficial to plants)",21,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF855 - TF1127 Electric railways",21,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT300 - TT382.8 Painting. Wood finishing",21,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG470 - UG474 Military surveying, topography, and mapping",21,
        "U - Military science (General)|UH20 - UH910 Other services|UH20 - UH25 Chaplains",21,
        "U - Military science (General)|UH20 - UH910 Other services|UH520 - UH551 Care of sick and wounded. Relief societies",21,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK600 - VK794 Tide and current tables",21,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP186 - BP186.97 Special days and seasons, fasts, feasts, festivals, etc.",20,
        "C - Auxiliary Sciences of History|C1 - C51 Auxiliary Sciences of History (General)",20,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS591 - DS599 Malaysia. Malay Peninsula. Straits Settlements|DS597.33 - DS597.34 Sabah. British North Borneo",20,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT1991 - DT2054 Cape Province. Cape of Good Hope",20,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3260 - G3272 Polar regions",20,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV733 - GV734.5 Professionalism in sports. Professional sports (General)",20,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE9719 - HE9721 Artificial satellite telecommunications",20,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1501 - HS2460.7 Other societies. By classes|HS1501 - HS1510 Benevolent and friendly societies and mutual assessment fraternities",20,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS55 - JS67 History",20,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K280 - K286 Sources of law",20,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB2001 - PB3029 Brittanic group|PB2501 - PB2621 Cornish",20,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2896 - PK2899 Romani",20,
        "R - Medicine|RK1 - RK715 Dentistry|RK60.7 - RK60.8 Preventive dentistry",20,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH327.5 - SH327.7 Fishery resources. Fishery conservation",20,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF340 - TF499 Railway equipment and supplies",20,
        "U - Military science (General)|UE1 - UE500 Cavalry. Armor. Including horse cavalry, armored cavalry, mechanized cavalry|UE157 - UE302 Tactics. Maneuvers. Drill regulations",20,
        "V - Naval science|V1 - V995 Naval science (General)|V390 - V395 Naval research",20,
        "V - Naval science|VC10 - VC580 Naval maintenance|VC260 - VC268 Supplies and stores",20,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z684 - Z685 Supplies. Shelving. Bookstacks",20,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL70 - BL71 Sacred books (General)",19,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU182 - DU198 Tasmania. Van Diemen's Land",19,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3195 - G3199 Moon",19,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR620 - GR640 Cosmic phenomena",19,
        "H - Social sciences|HA1 - HA4737 Statistics|HA36 - HA37 Statistical services. Statistical bureaus",19,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ63 - JZ1153 Sources",19,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K215 - K218 History",19,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K795 - K798 Trusts and trustees",19,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ24 - KZ38 Societies, etc.",19,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli|KZ6540 - KZ6660 Warfare on sea",19,
        "L - Education|LF14 - LF5627 Individual institutions|LF14 - LF1257 Great Britain|LF960 - LF1137 Scotland",19,
        "L - Education|LF14 - LF5627 Individual institutions|LF4831 - LF4887 Portugal",19,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2190 - M2196 Sacred vocal music for children",19,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ991 - PJ995 Afroasiatic languages",19,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures|PK1981 - PK2000 Hindustani language",19,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4186 - PQ4199 Folk literature",19,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9201 - PT9499 Literary history and criticism|PT9460 - PT9499 Prose",19,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC924 - RC924.5 Diseases of the connective tissues",19,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ59 - RJ60 Infant and neonatal morbidity and mortality",19,
        "R - Medicine|RV1 - RV431 Botanic, Thomsonian, and eclectic medicine",19,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF461 - SF473 Birds",19,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF911 - SF914.4 Veterinary surgery",19,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG730 - UG735 Air defenses",19,
        "V - Naval science|VG20 - VG2029 Minor services of navies|VG100 - VG475 Medical service",19,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History|DH571 - DH694 By period|DH585 - DH619 1555-1794. Spanish and Austrian rule",18,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History|DQ78 - DQ210 By period|DQ78 - DQ110 Early and medieval to 1516",18,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS560 - DS560.72 Democratic Republic (North Vietnam), 1945-",18,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS650 - DS650.99 Brunei",18,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU392 - DU398 Northern Territory of Australia",18,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR650 - GR690 Geographical topics",18,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV750 - GV770.27 Air sports: Airplane flying, kiteflying, bungee-jumping, etc.",18,
        "H - Social sciences|HA1 - HA4737 Statistics|HA38 - HA39 Registration of vital events. Vital records",18,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1501 - HS2460.7 Other societies. By classes|HS1525 - HS1560 Religious socieities",18,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN7101 - JN7367 Denmark",18,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ3675 - JZ3875 State territory and its different parts",18,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC5701 - LC5771 Vacation schools. Summer schools",18,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC215 - LC238.4 Community and the school|LC230 - LC235 Parent-teacher associations. Home and school associations",18,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2147 - M2188 Liturgy and ritual|M2161 - M2183 Protestant churches",18,
        "M - Music|MT1 - MT960 Musical instruction and study|MT90 - MT146 Analysis and appreciation of musical works|MT110 - MT115 Oratorios, cantatas, etc.",18,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1290 - ND1293 Human figure",18,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1421 - PK1429.5 Apabhrams'a",18,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism|PQ9083 - PQ9095 Drama",18,
        "Q - Science|QR1 - QR502 Microbiology|QR99.6 - QR99.8 Cyanobacteria",18,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH213 - SH216.55 By oceans and seas",18,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK4001 - TK4102 Applications of electric power",18,
        "T - Technology.|TR1 - TR1050 Photography|TR504 - TR508 Transparencies, Diapositives",18,
        "V - Naval science|VB15 - VB345 Naval administration|VB320 - VB325 Minorities, women, etc. in navies",18,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA3201 - ZA3250 Information superhighway",18,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL443 - DL537 History|DL460 - DL537 By period|DL460 - DL478 Early and medieval to 1387",17,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT2541 - DT2686 Lesotho. Basutoland",17,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E426 - E430 Fillmore's administration, July 9, 1850-1853",17,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1218.5 - GV1220.8 Toys",17,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV200.6 - GV200.66 Caving. Spelunking",17,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD2321 - HD4730.9 Industry|HD2331 - HD2336 Home labor. Home-based businesses",17,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1685 - HG1704 Drafts. Checks",17,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ2042 - HQ2044 Life style",17,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary|HV8031 - HV8080 Police duty. Methods of protection|HV8079.5 - HV8079.55 Traffic control. Traffic accident investigation",17,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN7401 - JN7695 Norway",17,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3700 - K3705 Control of social activities",17,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7120 - K7197 Persons|K7125 - K7140 Natural persons",17,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1040 - KZA1065 Intergovernmental congresses and conferences",17,
        "L - Education|LF14 - LF5627 Individual institutions|LF4539 - LF4607 Sweden",17,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2147 - M2188 Liturgy and ritual|M2156 - M2160.87 Orthodox churches",17,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1220 - NE1233 General works",17,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX420 - NX430 Exhibitions",17,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4101 - PJ4197 West and North Semitic languages|PJ4171 - PJ4197 Phoenician-Punic",17,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1560 - PN1590 The performing arts. Show business|PN1585 - PN1589 Centers for the performing arts",17,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2131 - PN2193 By period|PN2171 - PN2179 Renaissance",17,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5351 - PT5395 Folk literature",17,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6000 - PT6466.36 Flemish literature since 1830|PT6000 - PT6199 Literary history and criticism",17,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7351 - PT7418 Literary history and criticism",17,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS151.2 - RS151.9 Dispensatories",17,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD390 - SD390.43 Forest soils",17,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF541 - SF560 Sericulture. Silk culture",17,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH388.7 - SH391.5 Algae culture. Seaweed",17,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA800 - TA820 Tunneling. Tunnels",17,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ170 - TJ179 Mechanics applied to machinery. Dynamics",17,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG760 - UG765 Aerial reconnaissance",17,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z691 - Z692 Special classes of materials. Including manuscripts, maps, microforms, serials",17,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History|DR1259 - DR1321 By period|DR1273 - DR1280 1800-1918",16,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.6 - DS646.69 Moluccas. Maluku",16,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT367 - DT367.8 Northeast Africa",16,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV743 - GV749 Athletic and sporting goods, supplies, etc.",16,
        "H - Social sciences|HN1 - HN995 Social history and conditions. Social problems. Social reform|HN41 - HN46 Community centers. Social centers",16,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK9663 - JK9993 Confederate States of America",16,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS1840 - JS2058 West Indies. Caribbean Area",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3184 - K3188 Form and structure of government",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3289 - K3367 Organs of government|K3310 - K3329 The legislature",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3289 - K3367 Organs of government|K3332 - K3363 Heads of state and the central government",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K68 - K70 Directories",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLP1 - KLP4989 Ukraine (1919-1991)",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ118 - KZ194 Treaties and other international agreements|KZ184 - KZ194 Peace treaties",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1430 - KZA1690 Maritime boundaries|KZA1630 - KZA1664 Continental shelf",16,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC5451 - LC5493 Aged education",16,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE71 - LE73 Uruguay",16,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG240 - LG277 Japan",16,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH701 - PH735 Sami",16,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM101 - PM2711 American languages (Aboriginal)|PM231 - PM355 American languages of British North America",16,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN661 - PN694 Medieval (to 1500)|PN692 - PN693 Prose. Prose fiction",16,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7326 - PT7338 Individual authors or works before 1540",16,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA604 - RA618 Parks, public baths, public carriers, buildings, etc.",16,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC1000 - RC1020 Submarine medicine",16,
        "S - Agriculture|SK1 - SK663 Hunting|SK295 - SK305 Big game",16,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ181 - TJ210 Mechanical movements",16,
        "T - Technology.|TS1 - TS2301 Manufactures|TS2120 - TS2159 Cereals and grain. Milling industry",16,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC400 - UC440 Barracks. Quarters. Camps",16,
        "U - Military science (General)|UD1 - UD495 Infantry|UD480 - UD485 Airborne troops. Parachute troops",16,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK1300 - VK1491 Saving of life and property",16,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions|BL1670 - BL1672 Canaanite",15,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6195 - BX6197 Arminians. Remonstrants",15,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX800 - BX4795 Catholic Church|BX4716.4 - BX4795 Dissenting sects other than Protestant",15,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E337.8 - E340 General|E339 - E340 Biography",15,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology|GB461 - GB468.99 Reefs",15,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1428 - HD1431 International cooperation",15,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ2035 - HQ2039 Life skills. Coping skills. Everyday living skills",15,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ961 - HQ967 Free love",15,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1241 - K1287 Insurance",15,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K4360 - K4375 Professions and occupations",15,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4720 - K4780 National defense. Military law",15,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT540 - MT557 Harp",15,
        "M - Music|MT1 - MT960 Musical instruction and study|MT20 - MT32 Special methods",15,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism|PT5201 - PT5243 Poetry",15,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6500 - PT6592.36 Afrikaans literature|PT6550 - PT6575 Collections",15,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9950 - PT9999 Provincial, local, foreign",15,
        "R - Medicine|RL1 - RL803 Dermatology|RL130 - RL169 Diseases of the glands, hair, nails",15,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM270 - RM282 Immunotherapy. Serum therapy",15,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF915 - SF919.5 Veterinary pharmacology",15,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE177 - TE178.8 Roadside development. Landscaping",15,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE200 - TE205 Materials for roadmaking",15,
        "T - Technology.|TX1 - TX1110 Home economics.|TX955 - TX985 Building operations and housekeeping",15,
        "U - Military science (General)|UB1 - UB900 Military administration|UB180 - UB197 Civilian personnel departments",15,
        "V - Naval science|V1 - V995 Naval science (General)|V720 - V743 Naval life, manners and customs, antiquities, etc.",15,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing|Z235 - Z236 Printer's marks, mottoes, etc.",15,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL350 - BL385 Classification of religions",14,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ5140 - BQ5355 Buddhist ministry. Priesthood. Organization",14,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT1029 - BT1040 Catechisms",14,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR4480 - CR4485 Royalty. Insignia. Regalia, crown and coronets, etc.",14,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL101 - DL291 Denmark|DL143 - DL263.3 History|DL160 - DL263.3 By period|DL160 - DL183.9 Early and medieval to 1523",14,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT468 - DT469 Islands (East African coast)",14,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT591 - DT615.9 Portuguese-speaking West Africa|DT615 - DT615.9 Sao Tome and Principe",14,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR890 - GR910 Occupations",14,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8053.5 - HG8054.45 Insurance for professions. Malpractice",14,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT251 - HT265 Mental and moral life",14,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5511.2 - JZ6299 Promotion of peace. Peaceful change|JZ5514 - JZ5526 Societies. Associations, etc.",14,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5511.2 - JZ6299 Promotion of peace. Peaceful change|JZ5527 - JZ5532 Congresses and conferences",14,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1700 - K1973 Social legislation|K1861 - K1929 Social insurance",14,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1700 - K1973 Social legislation|K1960 - K1973 Public welfare. Public assistance",14,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3289 - K3367 Organs of government|K3290 - K3304 The people. Election law",14,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7051 - K7054 International unification, approximation, and harmonization",14,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR190 - KBR2154.5 Sources",14,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLR1 - KLR490 Kazakhstan",14,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KWX - Antarctica",14,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2799 - LB2799.3 Educational consultants and consulting",14,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB3497 - LB3499 Hygiene in universities and colleges",14,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3503 - LC3520 Romanies. Gypsies",14,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1049 - LC1049.8 Cooperative education",14,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE31 - LE33 Brazil",14,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE41 - LE43 Colombia",14,
        "L - Education|LF14 - LF5627 Individual institutions|LF4440 - LF4441 Estonia",14,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK4501 - PK4681 Pali literature",14,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3301 - PL3311 Non-Chinese languages of China",14,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages|PL4301 - PL4470 Mon-Khmer (Mon-Anam) languages|PL4423 - PL4470 Bru, Chrau, Khasi, Muong, etc.",14,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6000 - PT6466.36 Flemish literature since 1830|PT6300 - PT6397 Collections",14,
        "R - Medicine|RL1 - RL803 Dermatology|RL110 - RL120 Therapeutics",14,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM671 - RM671.5 Nonprescription drugs. Patent medicines",14,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S604.5 - S604.64 Agricultural conservation",14,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB170 - SB172.5 Tree crops",14,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP875 - TP888 Cement industries",14,
        "U - Military science (General)|UF1 - UF910 Artillery|UF540 - UF545 Arsenals, magazines, armories, etc.",14,
        "V - Naval science|V1 - V995 Naval science (General)|V167 - V178 Tactics",14,
        "V - Naval science|VB15 - VB345 Naval administration|VB310 - VB315 Officers",14,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL576 - DL596 Local history and description",13,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History|DQ78 - DQ210 By period|DQ111 - DQ123 1516-1798",13,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC100 - GC103 Seawater",13,
        "H - Social sciences|HA1 - HA4737 Statistics|HA154 - HA4737 Statistical data|HA154 - HA155 Universal statistics",13,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE5751 - HE5870 Ferries",13,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5446 - HF5459 Canvassing. Peddling",13,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC345 - JC347 Symbolism",13,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K300 - K304 Classification of law. Typology",13,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3921 - K3925 Manufacturing industries",13,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL147 - KL177 Ancient legal systems compared",13,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL2800 - KL3099 Egypt",13,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC6571 - LC6581 Radio and television extension courses. Instruction by radio and television",13,
        "L - Education|LF14 - LF5627 Individual institutions|LF1561 - LF1697 Hungary",13,
        "L - Education|LF14 - LF5627 Individual institutions|LF4901 - LF5047 Switzerland",13,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML3300 - ML3354 Program music",13,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC1280 - NC1284 Printed ephemera. Imagerie populaire",13,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1400 - ND1403 Flowers. Fruit. Trees",13,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX798 - NX820 Arts centers and facilities",13,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6249 - PN6258 Ana",13,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7298 - PT7309 Religious works",13,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases|SB617 - SB618 Poisonous plants",13,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP700 - TP746 Illuminating industries (Nonelectric)",13,
        "U - Military science (General)|UF1 - UF910 Artillery|UF820 - UF830 Ballistics. Velocities and motions of projectiles",13,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG640 - UG645 Military aeronautical research",13,
        "V - Naval science|VF1 - VF580 Naval ordnance|VF346 - VF348 Naval weapons systems",13,
        "W - Health Sciences|W1 - W925 Health Professions",13,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL630 - BL632 Religious organization",12,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History|DH571 - DH694 By period|DH571 - DH584 Early and medieval to 1555",12,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK61 - DJK77 Local history and description|DJK76.2 - DJK76.8 Danube River Valley",12,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ1051 - HQ1057 The church and marriage",12,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ1058 - HQ1058.5 Widows and widowers. Widowhood",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1100 - K1109 Secured transactions",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3740 - K3762 Education",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K805 - K821 Succession upon death",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1234 - KZ1236 Legal research. Legal bibliography",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ24 - KZ38 Societies, etc.|KZ27 - KZ37 National",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4850 - KZ5490 Intergovernmental organizations. IGOs|KZ4853 - KZ4934 The League of Nations",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli|KZ6427 - KZ6437 Warfare on land",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD3489 - KZD4406 Peaceful uses of outer space",12,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC5501 - LC5560 Evening schools",12,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1036 - LC1036.8 Community education",12,
        "L - Education|LF14 - LF5627 Individual institutions|LF3911 - LF4067 Belgium",12,
        "L - Education|LF14 - LF5627 Individual institutions|LF4071 - LF4197 Netherlands",12,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG481 - LG505 West Africa",12,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M1356 - M1356.2 Dance orchestra and instrumental ensembles",12,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1000 - NE1027 General",12,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH91 - PH98.5 Finnic. Baltic-Finnic",12,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5211 - PJ5289 West Aramaic|PJ5211 - PJ5219.5 Biblical (Chaldaic)",12,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT881 - PT951 Folk literature|PT923 - PT937 Faust legend",12,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8301 - PT8574 Literary history and criticism|PT8540 - PT8574 Prose",12,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA646 - RA648.3 War and public health",12,
        "R - Medicine|RZ201 - RZ999 Other systems of medicine|RZ201 - RZ275 Chiropractic",12,
        "R - Medicine|RZ201 - RZ999 Other systems of medicine|RZ301 - RZ397.5 Osteopathy",12,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF84 - SF84.64 Economic zoology",12,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH334.9 - SH336.5 Fishery processing",12,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT161 - TT170.7 Manual training. School shops",12,
        "V - Naval science|VG20 - VG2029 Minor services of navies|VG50 - VG55 Coast guard and coast signal service",12,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works|AC801 - AC895 Inaugural and program dissertations",11,
        "A - General Works|AS1 - AS945 Academies and learned societies|AS2.5 - AS4 International associations, congresses, conferences, etc.",11,
        "C - Auxiliary Sciences of History|CN1 - CN1355 Inscriptions. Epigraphy|CN805 - CN865 By language",11,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK61 - DJK77 Local history and description|DJK71 - DJK76 Carpathian Mountain region",11,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT2181 - DT2278 KwaZulu-Natal. Natal",11,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E784 - E805 1919-1933. Harding-Coolidge-Hoover era. The twenties|E785 - E786 Harding's administration, 1921-August 2, 1923",11,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1059 - G1061 Maritime atlases (General)",11,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR940 - GR941 Mythical places",11,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ3675 - JZ3875 State territory and its different parts|JZ3686 - JZ3875 International waters",11,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ4835 - JZ5490 International organizations and associations|JZ4850 - JZ5490 Intergovernmental organizations. IGOs|JZ4853 - JZ4934 The League of Nations",11,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1094 - K1096 Loan of money",11,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3615 - K3622 Veterinary laws. Veterinary medicine and hygiene. Prevention of cruelty to animals",11,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K5000 - K5582 Criminal law and procedure|K5575 - K5582 Juvenile criminal law and procedure",11,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB162 - KB250 Legal systems compared",11,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2335.86 - LB2335.88 Trade unions",11,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC68 - LC70 Demographic aspects of education",11,
        "L - Education|LF14 - LF5627 Individual institutions|LF4449.2 - LF4449.5 Ukraine",11,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT728 - MT728.3 Chamber music",11,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG8001 - PG9146 Baltic|PG8201 - PG8208 Old Prussian",11,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6121 - PK6129 Old Persian",11,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6233 - PN6238 Anacreontic literature",11,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ781 - PQ841 Folk literature",11,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism|PT5250 - PT5295 Drama",11,
        "R - Medicine|RD1 - RD811 Surgery|RD98 - RD98.4 Surgical complications",11,
        "R - Medicine|RL1 - RL803 Dermatology|RL87 - RL94 Care and hygiene",11,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH344 - SH344.8 Methods and gear. Catching of fish",11,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ1350 - TJ1418 Hoisting and conveying machinery",11,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA940 - UA945 Military communication",11,
        "U - Military science (General)|UB1 - UB900 Military administration|UB440 - UB449.5 Retired military personnel",11,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1300 - BL1380 Jainism|BL1310 - BL1314.2 Sacred books. Sources",10,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions|BL1660 - BL1665 Phoenician. Carthaginian, etc.",10,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV700 - BV707 Parish. Congregation. The local church",10,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9884 - BX9886 United Church of Christ",10,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR927 - DR978.52 History|DR954 - DR978.52 By period|DR961 - DR969 1501-1912. Turkish rule",10,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8111 - HG8123 Government policy. State supervision",10,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT51 - HT65 Human settlements. Communities",10,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT621 - HT635 Orgin of social classes",10,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KQ - Africa",10,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education|LC47 - LC58.7 Private school education|LC58 - LC58.7 Preparatory schools. Preparatory school education",10,
        "M - Music|ML1 - ML3930 Literature on music|ML32 - ML33 Institutions",10,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT600 - MT612 Mandolin",10,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4150 - NA4160 Classed by form",10,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB2001 - PB3029 Brittanic group|PB3001 - PB3029 Gaulish",10,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL6145 - PL6167 Taiwan languages",10,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6319 - PN6328 Sayings, bon mots, etc.",10,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8301 - PT8574 Literary history and criticism|PT8460 - PT8489 Poetry",10,
        "Q - Science|QZ1 - QZ380 Pathology",10,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG484 - RG485 Urogynecology and obstetric urology. Urogynecologic surgery",10,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ52 - RJ53 Therapeutics",10,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS200 - RS201 Pharmaceutical dosage forms",10,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T59 - T59.2 Standardization",10,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF1300 - TF1620 High speed ground transportation",10,
        "U - Military science (General)|UD1 - UD495 Infantry|UD330 - UD335 Firing. Military sharpshooting",10,
        "U - Military science (General)|UF1 - UF910 Artillery|UF157 - UF302 Tactics. Maneuvers. Drill regulations",10,
        "U - Military science (General)|UF1 - UF910 Artillery|UF400 - UF405 Field artillery",10,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG615 - UG620 Military motor vehicles",10,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK321 - VK369.8 Harbors. Ports",10,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4600 - BQ4610 Relation to other religious and philosophical systems",9,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ5130 - BQ5137 Temple. Temple organization",9,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV1620 - BV1652 Social life, recreation, etc. in the church",9,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8799 - BX8809 Plymouth Brethren. Darbyites",9,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden|DL643 - DL879 History|DL660 - DL879 By period|DL660 - DL700.9 Early and medieval to 1523. Union of Kalmar, 1397",9,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT56.8 - DT69.5 Antiquities|DT68 - DT68.8 Religious antiquities",9,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training|GV450 - GV451.4 Nudism. Sunbathing",9,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD2321 - HD4730.9 Industry|HD2337 - HD2339 Sweatshops",9,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE331 - HE380 Traffic engineering. Roads and highways. Streets|HE374 - HE377 Bridges",9,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ4919 - HJ4936 Capitation. Poll tax",9,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7120 - K7197 Persons|K7155 - K7197 Domestic relations. Family law",9,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7260 - K7338 Obligations|K7265 - K7305 Contracts",9,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM531 - KBM619 Domestic relations. Family law",9,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli|KZ6665 - KZ6714 Air warfare",9,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3551 - LC3593 Jews",9,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1330 - NE1336 Linoleum block prints",9,
        "N - Fine Arts|NE1 - NE3002 Print media|NE2242 - NE2246 Monotype (Printmaking)",9,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB1801 - PB1867 Manx",9,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5211 - PJ5289 West Aramaic|PJ5281 - PJ5289 Neo-Aramaic",9,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5301 - PJ5329.5 East Aramaic",9,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4070 - PL4074 Miao-Yao languages",9,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM101 - PM2711 American languages (Aboriginal)|PM401 - PM501 American languages of the United States (and Mexico)",9,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1321 - PR1329 Oratory",9,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT7900 - PT7930 Folk literature",9,
        "Q - Science|QC1 - QC999 Physics|QC851 - QC999 Meteorology. Climatology (including the earth's atmosphere)|QC974.5 - QC976 Meteorological optics",9,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S588.4 - S589.6 Agricultural physics",9,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD813 - TD870 Street cleaning. Litter and its removal",9,
        "U - Military science (General)|U1 - U900 Military science (General)|U250 - U255 Maneuvers (combined arms)",9,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC700 - UC780 Subsistence",9,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ5100 - BQ5125 Symbols and symbolism",8,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR1101 - CR1131 Ecclesiastical and sacred heraldry",8,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G3100 - G3102 Antarctica",8,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR931 - GR935 Signs and symbols",8,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV200.4 - GV200.5 Orienteering. Wilderness survival",8,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5482 - HF5482.4 Secondhand trade",8,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ2336 - HJ2337 Tax exemption",8,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1150 - K1231 Maritime law|K1195 - K1223 Maritime social legislation",8,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7340 - K7512 Commercial law|K7350 - K7444 Commercial contracts",8,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLW1 - KLW490 Uzbekistan",8,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1319 - KZ1327 International legal regimes",8,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ118 - KZ194 Treaties and other international agreements|KZ170 - KZ173 -1920",8,
        "L - Education|L7 - L991 Education (General)|L797 - L898 Educational exhibitions and museums",8,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2667 - LC2698 Latin Americans. Hispanic Americans|LC2690 - LC2698 Puerto Ricans. Puerto Ricans in the United States",8,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE61 - LE63 Paraguay",8,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG200 - LG227 Philippines",8,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG351 - LG357 Lebanon",8,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG481 - LG505 West Africa|LG481 - LG483 Nigeria",8,
        "L - Education|LG21 - LG961 Individual institutions|LG715 - LG720 Australia",8,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2147 - M2188 Liturgy and ritual|M2186 - M2187 Jewish",8,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1199 - NB1200 Restoration of sculptures",8,
        "N - Fine Arts|NE1 - NE3002 Print media|NE2800 - NE2880 Printing of engravings",8,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5211 - PJ5289 West Aramaic|PJ5251 - PJ5259 Jewish Palestinian",8,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6309 - PN6318 Mottoes",8,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism|PT5300 - PT5348 Prose",8,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8600 - PT8637 Folk literature",8,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9547 - PT9639 Collections|PT9626 - PT9639 Prose",8,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC501 - QC718.8 Electricity|QC676 - QC678.6 Radio waves (Theory)",8,
        "Q - Science|QV1 - QV835 Pharmacology",8,
        "Q - Science|QZ1 - QZ380 Pathology|QZ200 - QZ380 Neoplasms. Cysts",8,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM146 - RM146.7 Misues of therapeutic drugs. Medication Errors",8,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD390.5 - SD390.7 Forest meteorology. Forest microclimatology",8,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK401 - VK529 Study and teaching",8,
        "W - Health Sciences|W1 - W925 Health Professions|W1 - W28 Reference Works. General Works",8,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ5035 - BQ5065 Hymns. Chants. Recitations",7,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.4 - DS646.49 Celebes. Sulawesi",7,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E415.6 - E415.9 General|E415.8 - E415.9 Biography",7,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3210 - G3222 Northern and Southern Hemispheres",7,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography|GA260 - GA288 Globe making, globes",7,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8205 - HG8220 Government insurance",7,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6730 - JN6739 Latvia",7,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS2145 - JS2219 Central America",7,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV9290 - JV9470 Pacific Ocean islands",7,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4720 - K4780 National defense. Military law|K4740 - K4760 Military criminal law and procedure",7,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM1 - KBM523.72 Halakah",7,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU3075 - KBU3165 Sacraments. Administration of sacraments. De sacramentis et administratione",7,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB3525 - LB3575 Special days",7,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2580 - LC2582 Student",7,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE46 - LE48 Ecuador",7,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA7910 - NA8125 Clubhouses, guild houses, etc.",7,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3175 - NK3296.3 Upholstery. Drapery",7,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH3801 - PH3820 Samoyedic languages",7,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ4951 - PJ4996 Medieval Hebrew",7,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2461 - PK2479 Marwari",7,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4001 - PN4355 Oratory. Elocution, etc.|PN4331 - PN4355 Recitations in foreign languages",7,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6340 - PN6348 Toasts",7,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR481 - PR488 21st century",7,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB354 - SB402 Fruit culture and orchard care|SB381 - SB386 Berries and Small Fruits",7,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF402 - SF405 Fur-bearing animals",7,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF408 - SF408.6 Zoo animals",7,
        "S - Agriculture|SK1 - SK663 Hunting|SK590 - SK593 Wild animal trade",7,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE206 - TE209.5 Location engineering",7,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ227 - TJ240 Machine design and drawing",7,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK301 - TK399 Electric meters",7,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA910 - UA915 Mobilization",7,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK573 - VK587 Nautical instruments",7,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6551 - BX6593 Catholic Apostolic Church. Irvingites",6,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6801 - BX6843 Christian Reformed Church",6,
        "C - Auxiliary Sciences of History|CN1 - CN1355 Inscriptions. Epigraphy|CN750 - CN753 Early Christian inscriptions",6,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR927 - DR978.52 History|DR954 - DR978.52 By period|DR954 - DR960.5 To 1501",6,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS631 - DS632 Ethnography",6,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.1 - DS646.15 Sumatra",6,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT2701 - DT2825 Swaziland",6,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1000 - G1000.5 Atlases of the moon, planets, etc.",6,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB2801 - GB2998 Hydrometerology",6,
        "J - Political Science|JJ1000 - JJ1019 Political institutions and public administration",6,
        "J - Political Science|JJ1000 - JJ1019 Political institutions and public administration|JJ1000 - JJ1019 North America",6,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ24 - JZ38 Societies. Associations, etc.",6,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ63 - JZ1153 Sources|JZ221 - JZ1153 By region or country",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7200 - K7218 Property",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7260 - K7338 Obligations|K7315 - K7338 Torts",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7340 - K7512 Commercial law|K7510 - K7512 Insolvency and bankruptcy. Creditors' rights",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM524.12 - KBM524.26 The concept of Jewish law",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU3500 - KBU3774 Sanctions in the Church. Criminal law. De sanctionibus in Ecclesia. De lege poenali",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL190 - KL420 Sources",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KQ - Africa|KQ2010 - KQ9000 Law of indigenous peoples",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1284 - KZ1285.5 Methodology",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security|KZ5615 - KZ5893 Arms control and disarmament regimes|KZ5687 - KZ5788.5 Nuclear weapon free zones and zones of peace",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD1118 - KZD1122 Treaties and other international agreements",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD3489 - KZD4406 Peaceful uses of outer space|KZD4030 - KZD4326 Public order in space and outer space",6,
        "L - Education|LF14 - LF5627 Individual institutions|LF3211 - LF3247 Greece",6,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1380 - ND1383 Animals. Birds",6,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1400 - NE1879 Metal engraving|NE1750 - NE1775 Copper engraving",6,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1700 - NK2195 Interior decoration. House decoration|NK2190 - NK2192 Church decoration",6,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF1001 - PF1184 Flemish",6,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5211 - PJ5289 West Aramaic|PJ5271 - PJ5279 Samaritan",6,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7581 - PT7599 Faroese literature",6,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8750 - PT8951.36 Individual authors or works|PT8750 - PT8775 16th-18th centuries",6,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH705 - QH705.5 Economic biology",6,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ47.3 - RJ47.4 Genetic aspects",6,
        "R - Medicine|RL1 - RL803 Dermatology|RL391 - RL489 Atrophies. Hypertrophies",6,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ950 - TJ1030 Pneumatic machinery",6,
        "U - Military science (General)|U1 - U900 Military science (General)|U320 - U325 Physical training of soldiers",6,
        "U - Military science (General)|UB1 - UB900 Military administration|UB160 - UB165 Records, returns, muster rolls, etc.",6,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC600 - UC695 Horses. Mules. Remount service",6,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG500 - UG565 Technical troops and other special corps",6,
        "U - Military science (General)|UH20 - UH910 Other services|UH750 - UH769 Military social work. Social welfare services",6,
        "V - Naval science|VB15 - VB345 Naval administration|VB260 - VB275 Enlisted personnel",6,
        "V - Naval science|VD7 - VD430 Naval seamen",6,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK588 - VK597 Marine hydrography. Hydrographic surveying",6,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP170.3 - BP170.5 Missionary work of Islam",5,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP188 - BP190 Islamic religious life|BP189.68 - BP189.7 Monasticism",5,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9875 - BX9877.1 United Brethren in Christ. Church of the United Brethren in Christ",5,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9881 - BX9882.95 United Church of Canada",5,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB881 - DB898 Liechtenstein",5,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History|DL1050 - DL1141.6 By period|DL1055 - DL1141.6 Modern, 1523-|DL1070 - DL1078 Revolution, 1917-1918. Civil War",5,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL443 - DL537 History|DL460 - DL537 By period|DL503 - DL526 1814-1905. 19th century",5,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT2291 - DT2378 Transvaal. South African Republic",5,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT179.2 - DT179.9 Northwest Africa",5,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G905 - G910 Tropics (General)",5,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1050 - G1052 Northern and Southern Hemispheres",5,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology|GN397 - GN397.5 Applied anthropology",5,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD6941 - HD6948 Employers' associations",5,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K109 - K110 Law societies. International bar associations",5,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM3790 - KBM4855 Criminal law and procedure",5,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4850 - KZ5490 Intergovernmental organizations. IGOs|KZ5330 - KZ5490 Regional organizations",5,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD3489 - KZD4406 Peaceful uses of outer space|KZD4030 - KZD4326 Public order in space and outer space|KZD4080 - KZD4210 Space flight",5,
        "L - Education|LF14 - LF5627 Individual institutions|LF14 - LF1257 Great Britain|LF1140 - LF1257 Wales",5,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG341 - LG345 Israel. Palestine",5,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG421 - LG423 Uganda",5,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG551 - LG552 Senegal",5,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG553 - LG554 Benin",5,
        "M - Music|ML1 - ML3930 Literature on music|ML3928 - ML3930 Literature for children",5,
        "M - Music|MT1 - MT960 Musical instruction and study|MT820 - MT915 Singing and vocal technique|MT898 - MT915 Techniques for children",5,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3475 - PG3476 1917-1960",5,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.|PN4825 - PN4830 Amateur journalism",5,
        "P - Language and literature|PR1 - PR9680 English literature|PR901 - PR907.2 Oratory",5,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9650 - PT9876.36 Individual authors or works|PT9650 - PT9651 Medieval",5,
        "Q - Science|QV1 - QV835 Pharmacology|QV701 - QV835 Pharmacy and Pharmaceutics",5,
        "R - Medicine|RL1 - RL803 Dermatology|RL760 - RL785 Diseases due to parasites",5,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S770 - S790.3 Agricultural structures. Farm buildings",5,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF101 - SF103.5 Brands and branding, and other means of identifying",5,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF114 - SF121 Exhibitions",5,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF411 - SF459 Pets|SF451 - SF455 Rabbits and hares",5,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA2001 - TA2040 Plasma engineering. Applied plasma dynamics",5,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC183 - TC201 General preliminary operations. Dredging. Submarine building",5,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK4601 - TK4661 Electric heating",5,
        "T - Technology.|TX1 - TX1110 Home economics.|TX851 - TX885 Dining-room service",5,
        "U - Military science (General)|UE1 - UE500 Cavalry. Armor. Including horse cavalry, armored cavalry, mechanized cavalry|UE460 - UE475 Horses",5,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG360 - UG390 Field engineering",5,
        "V - Naval science|VC10 - VC580 Naval maintenance|VC280 - VC345 Clothing and equipment",5,
        "V - Naval science|VC10 - VC580 Naval maintenance|VC350 - VC410 Subsistence. Provisioning",5,
        "V - Naval science|VF1 - VF580 Naval ordnance|VF21 - VF124 Naval ordnance",5,
        "V - Naval science|VF1 - VF580 Naval ordnance|VF350 - VF375 Ordnance and arms (General)",5,
        "W - Health Sciences|WZ1 - WZ350 History of Medicine",5,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA4050 - ZA4750 Information in specific formats or media|ZA4050 - ZA4460 Electronic information resources|ZA4450 - ZA4460 Databases",5,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP188 - BP190 Islamic religious life|BP188.2 - BP188.3 Devotional literature",4,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7079 - BX7097 Churches of God",4,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7401 - BX7430 Dowieism. Christian Catholic Church",4,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC921 - DC930 Andorra",4,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR996 - DR998 Local history and description",4,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E310 - E337 1789-1809. Constitutional period|E331 - E337 Jefferson's administrations, 1801-1809|E336 - E336.5 Neutral trade and its restrictions, 1800-1810",4,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB2601 - GB2798 Snow. Snow surveys",4,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV198.94 - GV198.97 Dude ranches",4,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE5746 - HE5749 Stage lines",4,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE9751 - HE9756 Messenger service",4,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5482.6 - HF5482.65 Black market",4,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5520 - HF5541 Office equipment and supplies",4,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ2326 - HJ2327 Progressive taxation",4,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ1001 - HQ1006 The state and marriage",4,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS951 - HS1179 Odd Fellows",4,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV701 - HV1420.5 Children|HV835 - HV847 Foundlings",4,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN7390 - JN7399 Finland",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K270 - K274 Acts and events",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K486 - K487 Relation of law to other topics",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1010 - K1014 The merchant. Business enterprises",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1054 - K1065.5 Negotiable instruments",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3440 - K3460 Civil service. Government officials and employees",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3926 - K3935 Food processing industries",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7060 - K7081 Choice of law",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7550 - K7582 Intellectual property",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB400 - KB4855 Interdisciplinary discussion of subjects",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM3098 - KBM3122 Medical legislation",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF1 - KF9827 Federal law. Common and collective state law",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL2 - KL135 General",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL4700 - KL4999 Hittite law",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA4130 - KZA4205 Public order of the oceans",4,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5161 - LC5163 Fundamental education",4,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG281 - LG285 Korea",4,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG302.2 - LG320 Former Soviet republics in Asia",4,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG471 - LG475 Transvaal",4,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG581 - LG593 German Africa (Former)",4,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT620 - MT634 Zither",4,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1293 - NB1895 Special forms|NB1312 - NB1313 Equestrian statues",4,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1400 - NE1879 Metal engraving|NE1620 - NE1630 General works",4,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1940 - NE2232.5 Etching and aquatint|NE2141 - NE2149 Special subjects",4,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB1101 - PB1200 Goidelic. Gaelic",4,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5301 - PJ5329.5 East Aramaic|PJ5321 - PJ5329.5 Mandaean",4,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK3591 - PK4485 Sanskrit|PK3801 - PK4251 Special subjects",4,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism|PQ9121 - PQ9128 Folk literature",4,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7500 - PT7511 Individual authors or works",4,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9547 - PT9639 Collections|PT9605 - PT9625 Drama",4,
        "R - Medicine|RE1 - RE994 Opthamology|RE986 - RE988 Artificial eyes and other prostheses",4,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS250 - RS252 Commercial preparations. Patent medicines",4,
        "U - Military science (General)|UB1 - UB900 Military administration|UB407 - UB409 Warrant officers. Noncommissioned officers",4,
        "V - Naval science|VD7 - VD430 Naval seamen|VD21 - VD124 By region or country",4,
        "V - Naval science|VG20 - VG2029 Minor services of navies|VG70 - VG85 Naval communication by telegraphy, telephone, etc.",4,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1170 - DL1180 Local history and description",3,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT2075 - DT2145 Orange Free State. Oranje Vrystaat",3,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU400 - DU430 New Zealand|DU428 - DU430 Local history and description",3,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada|F1141 - F1145.3 Nunavut",3,
        "G - Geography. Anthropology. Recreation|G3160 - G3171 Globes",3,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3190 - G3192 Celestial maps",3,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT5320 - GT6737 Customs relative to special classes|GT5320 - GT5690 By birth, rank, etc.",3,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1201 - HS1350 Knights of Pythias",3,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV701 - HV1420.5 Children|HV931 - HV941 Fresh-air funds",3,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6640 - JN6649 Belarus",3,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6680 - JN6689 Moldova",3,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ6422 - JZ6422.5 Neutrality",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1021 - K1022 Commercial agency",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1150 - K1231 Maritime law|K1226 - K1231 Marine insurance",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K578 - K579 Concepts applying to several branches of law",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7120 - K7197 Persons|K7155 - K7197 Domestic relations. Family law|K7181 - K7197 Parent and child. Guardian and ward",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7230 - K7245 Succession upon death",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7340 - K7512 Commercial law|K7449 - K7460 Maritime law",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM1572 - KBM1942 Courts and procedure",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM524.6 - KBM530 Persons",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM639 - KBM1424 Dinei mamonot",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR3077 - KBR3165 Sacraments. Administration of sacraments. De sacramentis et administratione",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL2200 - KL2499 Babylonia",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLM1 - KLM490 Moldova",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLT1 - KLT490 Tadjikistan",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security|KZ5615 - KZ5893 Arms control and disarmament regimes|KZ5870 - KZ5893 Mutual and balanced reduction of armed forces",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli|KZ6730 - KZ6785 The end of war. Armistice. Surrender. Postliminy",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD1340 - KZD1400 Concepts and principles. Theory",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD5614 - KZD6715 Un-peaceful uses of outer space",3,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3530 - LC3540 Lapps",3,
        "L - Education|LF14 - LF5627 Individual institutions|LF1550 - LF1550.8 Slovakia",3,
        "L - Education|LF14 - LF5627 Individual institutions|LF4445 - LF4446 Lithuania",3,
        "L - Education|LF14 - LF5627 Individual institutions|LF4451 - LF4487 Denmark",3,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG171 - LG172 Indochina",3,
        "L - Education|LG21 - LG961 Individual institutions|LG741 - LG745 New Zealand",3,
        "M - Music|ML1 - ML3930 Literature on music|ML112.8 - ML158.8 Bibliography|ML158.4 - ML158.6 Video recordings",3,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE965 - NE965.3 Tradesmen's cards",3,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH551 - PH559 Ingrian",3,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ2340 - PJ2399 Libyco-Berber languages. Berber languages|PJ2353 - PJ2367 Libyan group",3,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2261 - PK2270.9 Lahnda",3,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2892 - PK2892.95 Siraiki",3,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4051 - PL4054 Karen languages",3,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2131 - PN2193 By period|PN2131 - PN2145 Ancient",3,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7001 - PT7099 Scandinavian literature|PT7001 - PT7099 General|PT7088 - PT7089 Folk literature",3,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8301 - PT8574 Literary history and criticism|PT8500 - PT8534 Drama",3,
        "Q - Science|QS1 - QS681 Human Anatomy",3,
        "Q - Science|QV1 - QV835 Pharmacology|QV701 - QV835 Pharmacy and Pharmaceutics|QV738 - QV772 Drug Standardization. Pharmacognosy. Medicinal Plants",3,
        "R - Medicine|RD1 - RD811 Surgery|RD91 - RD91.5 Asepsis and antisepsis. Sterilization (Operative)",3,
        "R - Medicine|RL1 - RL803 Dermatology|RL701 - RL751 Diseases due to psychosomatic and nerve disorders. Dermatoneuroses",3,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS355 - RS356 Pharmaceutical supplies",3,
        "R - Medicine|RX1 - RX681 Homeopathy|RX601 - RX675 Materia medica and therapeutics",3,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB442.8 - SB443.4 Marketing, cut flower industry",3,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB444 - SB446.6 Horticultural service industry",3,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF361 - SF361.73 Donkeys",3,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF380 - SF388 Goats",3,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF511 - SF511.5 Ostrich",3,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH360 - SH363 Seal fisheries. Fur sealing",3,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE279.5 - TE298 Pedestrian facilities|TE280 - TE295 Sidewalks. Footpaths. Flagging",3,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ1501 - TJ1519 Sewing machines",3,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT980 - TT999 Laundry work",3,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA920 - UA925 Plans for attack and defense",3,
        "U - Military science (General)|UB1 - UB900 Military administration|UB380 - UB385 Soldiers' and sailors' homes",3,
        "U - Military science (General)|UE1 - UE500 Cavalry. Armor. Including horse cavalry, armored cavalry, mechanized cavalry|UE144 - UE145 Horse cavalry",3,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG570 - UG582 Military signaling",3,
        "U - Military science (General)|UH20 - UH910 Other services|UH800 - UH910 Recreation and information services",3,
        "V - Naval science|VB15 - VB345 Naval administration|VB170 - VB187 Civil department",3,
        "V - Naval science|VC10 - VC580 Naval maintenance|VC270 - VC279 Equipment of vessels, supplies, allowances, etc.",3,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK1500 - VK1661 Pilots and pilotage",3,
        "W - Health Sciences|W1 - W925 Health Professions|W32 - W64 Law. Ethics. Professional-Patient Relations",3,
        "W - Health Sciences|WX1 - WX225 Hospitals and Other Health Facilities",3,
        "W - Health Sciences|WX1 - WX225 Hospitals and Other Health Facilities|WX1 - WX100 Reference Works. General Works",3,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1108.19 - BL1108.7 Religious education",2,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1300 - BL1380 Jainism|BL1315 - BL1317 Jain literature",2,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ5070 - BQ5075 Altar, liturgical objects, ornaments, memorials, etc.",2,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV895 - BV896 Shrines. Holy places",2,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6051 - BX6093 Reformed Episcopal Church",2,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6751 - BX6793 Christian Church",2,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7451 - BX7493 Evangelical and Reformed Church",2,
        "C - Auxiliary Sciences of History|CS1 - CS3090 Genealogy|CS38 - CS39 Family history covering more than one country",2,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS331 - DS349.9 Southern Asia. Indian Ocean Region|DS349.8 - DS349.9 Islands of the Indian Ocean",2,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT669 - DT671 Islands",2,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3180 - G3182 Universe. Solar system",2,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC170 - GC190 Environmental policy",2,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC200 - GC376 Dynamics of the ocean|GC297 - GC299 Water masses and ocean mixing",2,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ3863 - HJ3925 Direct taxation",2,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV3025 - HV3174 Special classes. By occupation",2,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV3025 - HV3174 Special classes. By occupation|HV3025 - HV3163 Mariners",2,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV9029 - JV9036 Atlantic Ocean islands",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K321 - K474 Schools of legal theory|K325 - K328 Historical jurisprudence",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4720 - K4780 National defense. Military law|K4725 - K4734 The military establishment. Armed forces",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7120 - K7197 Persons|K7155 - K7197 Domestic relations. Family law|K7157 - K7179 Marriage. Husband and wife",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB400 - KB4855 Interdisciplinary discussion of subjects|KB2101 - KB2862 Constitutions and religion. Constitutional and administrative law",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM2070 - KBM2614 Constitutional law. Constitutional principles of the Jewish community",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM632 - KBM636.2 Inheritance and succession",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR2310 - KBR3026 Constitution of the Church",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR4000 - KBR4090 Church and state relationships. De relationibus inter ecclesiam et status. Ius publicum ecclesiae",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU2210 - KBU2212 The codes of canon law",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU3040 - KBU3070 The teaching office of the Church. Magisterium. De ecclesiae munere docendi",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KDZ1 - KDZ4999 Law of America. North America|KDZ2001 - KDZ2499.2 Bermuda",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KDZ1 - KDZ4999 Law of America. North America|KDZ3001 - KDZ3499 Greenland",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL5300 - KL5599 Persia",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLH1 - KLH490 Georgia (Republic)",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KQ - Africa|KQ2 - KQ197 History of law",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1329 - KZ3085 Early/Medieval development to ca. 1900. Ius Naturae et Gentium|KZ1330 - KZ1339 Peace of Westphalia to the French Revolution (1648",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ2 - KZ5.5 Bibliography",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ118 - KZ194 Treaties and other international agreements|KZ176 - KZ182.5 Boundary treaties",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD1420 - KZD1455 Boundaries",2,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1025 - LC1027 Collective education",2,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE27 - LE29 Bolivia",2,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG405 - LG411 South Africa",2,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG431 - LG438 Natal",2,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1293 - NB1895 Special forms|NB1750 - NB1793 Religious monuments and shrines",2,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1115 - ND1120 Study and teaching",2,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1350 - NE1352 Other materials used in relief printing",2,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1400 - NE1879 Metal engraving|NE1400 - NE1422 General",2,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1940 - NE2232.5 Etching and aquatint|NE1940 - NE1975 General",2,
        "N - Fine Arts|NE1 - NE3002 Print media|NE3000 - NE3002 Copying art. Copying machine art",2,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH541 - PH549 Veps",2,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH561 - PH569 Votic",2,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH581 - PH589 Livonian",2,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5211 - PJ5289 West Aramaic|PJ5241 - PJ5249 Christian Palestinian",2,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ601 - PJ989 Special groups|PJ601 - PJ621 Christian Oriental",2,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1471 - PK1490 Middle Indo-Aryan dialects",2,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages|PL3551 - PL4001 Tibeto-Burman languages|PL3561 - PL3801 Tibeto-Himalayan languages|PL3781 - PL3801 Himalayan languages",2,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages|PL4490 - PL4498 Chamic languages",2,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL950 - PL998 Korean literature|PL997 - PL998 Local literature",2,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7520 - PT7550 Provincial, local, foreign",2,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7581 - PT7599 Faroese literature|PT7598 - PT7599 Individual authors or works",2,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9201 - PT9499 Literary history and criticism|PT9415 - PT9449 Drama",2,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9509 - PT9542 Folk literature",2,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9547 - PT9639 Collections|PT9565 - PT9570 Translations",2,
        "Q - Science|QB1 - QB991 Astronomy|QB455 - QB456 Astrogelogy",2,
        "Q - Science|QS1 - QS681 Human Anatomy|QS1 - QS132 Anatomy",2,
        "Q - Science|QV1 - QV835 Pharmacology|QV1 - QV55 Reference Works. General Works",2,
        "Q - Science|QV1 - QV835 Pharmacology|QV701 - QV835 Pharmacy and Pharmaceutics|QV773 - QV835 Pharmaceutical Processes. Packaging. Labeling",2,
        "Q - Science|QW1 - QW949 Microbiology. Immunology",2,
        "R - Medicine|RX1 - RX681 Homeopathy|RX211 - RX581 Diseases, treatment, etc.",2,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S119 - S124 Propagation (including breeding, selection, grafting, air layering)",2,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S71 - S87 History",2,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF111 - SF113 Cost, yield, and profit. Accounting",2,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF780.2 - SF780.7 Veterinary microbiology, bacteriology, virology, mycology",2,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH400 - SH400.8 Seafood gathering",2,
        "S - Agriculture|SK1 - SK663 Hunting|SK650 - SK664 Wildlife-related recreation",2,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T58.7 - T58.8 Production capacity. Manufacturing capacity",2,
        "T - Technology.|TH1 - TH9745 Building construction|TH900 - TH915 Construction equipment in buildings",2,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ1425 - TJ1475 Lifting and pressing machinery",2,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ1480 - TJ1496 Agricultural machinery. Farm machinery",2,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ266 - TJ267.5 Turbines. Turbomachines (General)",2,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT201 - TT203 Lathework. Turning",2,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA929.5 - UA929.95 War damage in industry. Industrial defense",2,
        "U - Military science (General)|UD1 - UD495 Infantry|UD460 - UD464 Mountain troops",2,
        "U - Military science (General)|UF1 - UF910 Artillery|UF460 - UF465 Siege artillery",2,
        "U - Military science (General)|UF1 - UF910 Artillery|UF848 - UF856 Artillery instruments. Fire control, etc.",2,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG160 - UG302 Tactics and regulations",2,
        "U - Military science (General)|UH20 - UH910 Other services|UH700 - UH705 Public relations. Press. War correspondents",2,
        "V - Naval science|V1 - V995 Naval science (General)|V396 - V396.5 Military oceanography",2,
        "V - Naval science|VE7 - VE500 Marines|VE430 - VE435 Training camps",2,
        "V - Naval science|VF1 - VF580 Naval ordnance|VF390 - VF510 Ordnance material (Ordnance proper)",2,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK381 - VK397 Signaling",2,
        "W - Health Sciences|WB1 - WB962 Practice of Medicine",2,
        "W - Health Sciences|WB1 - WB962 Practice of Medicine|WB300 - WB962 Therapeutics",2,
        "W - Health Sciences|WE1 - WE890 Musculoskeletal System",2,
        "W - Health Sciences|WE1 - WE890 Musculoskeletal System|WE500 - WE600 Muscles and Tendons",2,
        "W - Health Sciences|WK1 - WK920 Endocrine System",2,
        "W - Health Sciences|WW1 - WW722.1 Ophthalmology",2,
        "W - Health Sciences|WY1 - WY300 Nursing",2,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ1365 - BJ1385 Positivist ethics",1,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1109.19 - BL1109.7 Antiquities. Archaeology. Inscriptions",1,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1300 - BL1380 Jainism|BL1375.3 - BL1375.7 Jaina pantheon. Deities",1,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX5996 - BX6030 Protestant Episcopal Church outside the United States",1,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6651 - BX6693 Christadelphians. Brothers of Christ",1,
        "C - Auxiliary Sciences of History|CE1 - CE97 Technical Chronology. Calendar|CE91 - CE92 Perpetual calendars. Century calendars, etc.",1,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ95 - DJ292 History|DJ151 - DJ292 By period|DJ151 - DJ152 Early and medieval to 1555",1,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL443 - DL537 History|DL460 - DL537 By period|DL480 - DL502 1387-1814. Union of Kalmar, 1397",1,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History|DR1259 - DR1321 By period|DR1259 - DR1265 Early and medieval to 1500",1,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History|DR1259 - DR1321 By period|DR1266 - DR1272 1500-1800",1,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT2831 - DT2864 British Central Africa. Federation of Rhodesia and Nyasaland",1,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1054 - G1055 Polar regions",1,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR865 - GR874 Transportation, travel, commerce, etc.",1,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1564 - GV1565 Darts",1,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV650 - HV670 Life saving",1,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN7370 - JN7379 Greenland",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1130 - K1132 Carriage of goods and passengers. Carriers",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4430 - K4675 Public finance|K4650 - K4675 State and local finance",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4700 - K4705 Government measures in time of war, national emergency, or economic crisis",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K524 - K525 Treaties and other international agreements",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K592 - K597 Regional divisions. Interregional comparative law",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7340 - K7512 Commercial law|K7485 - K7495 Business associations. Business corporations",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7550 - K7582 Intellectual property|K7555 - K7557 Copyright",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7550 - K7582 Intellectual property|K7570 - K7582 Industrial property",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7585 - K7595 Social legislation",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB400 - KB4855 Interdisciplinary discussion of subjects|KB1572 - KB1690 Courts and procedure",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB400 - KB4855 Interdisciplinary discussion of subjects|KB632 - KB636.2 Inheritance and succession",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM1468 - KBM1547 Social laws and legislation",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBP1 - KBP4860 Islamic law. Shari'ah. Fiqh|KBP100 - KBP136.8 Sources",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBP1 - KBP4860 Islamic law. Shari'ah. Fiqh|KBP70 - KBP75.4 Biography",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR2155 - KBR2157 Canon law and other disciplines or subjects",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR2160 - KBR2204.5 Canonical jurisprudence. Canonical science",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR2224 - KBR2295 Ius ecclesiasticum privatum",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR3500 - KBR3774 Penal (Criminal) law. De lege poenali",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR3780 - KBR3983 Judiciary. Ecclesiastical courts and procedure. De processibus",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU2 - KBU19 Bibliography",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU2160 - KBU2204 Canonical jurisprudence. Theory and science of canon law",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU2310 - KBU3026 Constitution of the Church",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU3780 - KBU3985 Courts and procedure. De processibus",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU4112 - KBU4820 Local Church government",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLS1 - KLS490 Kyrgyzstan",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLV1 - KLV490 Turkmenistan",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KN - South Asia. Southeast Asia. East Asia",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1329 - KZ3085 Early/Medieval development to ca. 1900. Ius Naturae et Gentium|KZ1373 - KZ1387.2 American Civil War to the First Conference of the Hague (1861-1899)",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security|KZ5615 - KZ5893 Arms control and disarmament regimes|KZ5637 - KZ5645 Conventional arms control",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security|KZ5615 - KZ5893 Arms control and disarmament regimes|KZ5834 - KZ5865 Other weapons of mass destruction",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ60 - KZ62.5 Intergovernmental congresses and conferences",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ118 - KZ194 Treaties and other international agreements|KZ119 - KZ165 To 1920",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ118 - KZ194 Treaties and other international agreements|KZ183 - KZ183.5 Treaties of arbitration, investigation, etc.",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA3481 - KZA3900 Marine resources conservation and development",1,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC361 - LC629 Christian education. Church education|LC446 - LC454 Orthodox Eastern Church",1,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1001 - LC1024 Humanistic education. liberal education|LC1022 - LC1022.25 Computer-assisted education",1,
        "L - Education|LF14 - LF5627 Individual institutions|LF1705 - LF1709 Finland",1,
        "L - Education|LF14 - LF5627 Individual institutions|LF4493 - LF4537 Norway",1,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG181 - LG184 Indonesia",1,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG361 - LG367 Syria",1,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG461 - LG462 Zimbabwe",1,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG541 - LG543 Madagascar",1,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG545 - LG547 Rwanda",1,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M1350 - M1353 Reduced orchestra",1,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT200 - MT208 Reed organ",1,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1120 - NB1133 Study and teaching",1,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC673 - NC677 Competitions",1,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE390 - NE395 Collected works",1,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE975 - NE975.4 Competitions",1,
        "N - Fine Arts|NE1 - NE3002 Print media|NE2685 - NE2685.8 Lumiprints",1,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH531 - PH539 Ludic",1,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages|PL4471 - PL4471.5 Nicobarese",1,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM9001 - PM9021 Secret languages",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7420 - PT7438 Folk literature",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7500 - PT7511 Individual authors or works|PT7500 - PT7501 16th-18th centuries",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7500 - PT7511 Individual authors or works|PT7510 - PT7511 19th-20th centuries",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7581 - PT7599 Faroese literature|PT7581 - PT7592 Literary history and criticism",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7581 - PT7599 Faroese literature|PT7593 - PT7596.5 Collections",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT8205 - PT8260 Provincial, local, foreign",1,
        "Q - Science|QS1 - QS681 Human Anatomy|QS604 - QS681 Embryology",1,
        "Q - Science|QT1 - QT275 Physiology",1,
        "Q - Science|QT1 - QT275 Physiology|QT1 - QT33.1 Reference Works. General Works",1,
        "Q - Science|QU1 - QU500 Biochemistry",1,
        "Q - Science|QU1 - QU500 Biochemistry|QU145 - QU220 Vitamins",1,
        "Q - Science|QW1 - QW949 Microbiology. Immunology|QW1 - QW300 Microbiology",1,
        "Q - Science|QW1 - QW949 Microbiology. Immunology|QW1 - QW300 Microbiology|QW55 - QW85 Environmental Microbiology",1,
        "Q - Science|QW1 - QW949 Microbiology. Immunology|QW501 - QW949 Immunology",1,
        "Q - Science|QW1 - QW949 Microbiology. Immunology|QW501 - QW949 Immunology|QW800 - QW949 Immunotherapy and Hypersensitivity",1,
        "Q - Science|QZ1 - QZ380 Pathology|QZ1 - QZ39 Reference Works. General Works",1,
        "Q - Science|QZ1 - QZ380 Pathology|QZ40 - QZ109 Pathogenesis. Etiology",1,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S107 - S109 Economic botany",1,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S113.2 - S118.46 Seeds. Seed technology",1,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S589.8 - S589.87 Plant growing media. Potting soils",1,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB406.7 - SB406.83 Plant propagation",1,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF170 - SF180 Working animals",1,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF911 - SF914.4 Veterinary surgery|SF914.3 - SF914.4 Veterinary traumatology. Veterinary emergencies",1,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH334.5 - SH334.7 Fishery technology",1,
        "S - Agriculture|SK1 - SK663 Hunting|SK281 - SK293 Special methods and types of hunting (including bolos, game calling, tracking, trapping, dressing)|SK291 - SK292 Coursing",1,
        "S - Agriculture|SK1 - SK663 Hunting|SK37 - SK39.5 Shooting",1,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA197 - TA198 Engineering meteorology",1,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD940 - TD949 Low temperature sanitary engineering",1,
        "T - Technology.|TH1 - TH9745 Building construction|TH8001 - TH8581 Decoration and decorative furnishings",1,
        "T - Technology.|TX1 - TX1110 Home economics.|TX1100 - TX1105 Mobile home living",1,
        "U - Military science (General)|UD1 - UD495 Infantry|UD490 - UD495 Airmobile operations",1,
        "U - Military science (General)|UF1 - UF910 Artillery|UF450 - UF455 Seacoast artillery",1,
        "U - Military science (General)|UF1 - UF910 Artillery|UF470 - UF475 Howitzer artillery. Mortar batteries",1,
        "V - Naval science|VB15 - VB345 Naval administration|VB307 - VB309 Warrant officers",1,
        "V - Naval science|VC10 - VC580 Naval maintenance|VC20 - VC258 Organization of service",1,
        "V - Naval science|VC10 - VC580 Naval maintenance|VC412 - VC425 Navy yards and stations. Shore facilities",1,
        "V - Naval science|VD7 - VD430 Naval seamen|VD160 - VD302 Drill regulations",1,
        "V - Naval science|VD7 - VD430 Naval seamen|VD360 - VD390 Small arms",1,
        "V - Naval science|VE7 - VE500 Marines|VE160 - VE302 Drill regulations",1,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering|VM165 - VM276 Study and teaching",1,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering|VM295 - VM296 Contracts and specifications",1,
        "W - Health Sciences|W1 - W925 Health Professions|W601 - W925 Forensic Sciences",1,
        "W - Health Sciences|W1 - W925 Health Professions|W601 - W925 Forensic Sciences|W775 - W867 Medicolegal Examination",1,
        "W - Health Sciences|W1 - W925 Health Professions|W74 - W80 Medical Economics",1,
        "W - Health Sciences|WA1 - WA950 Public Health",1,
        "W - Health Sciences|WA1 - WA950 Public Health|WA108 - WA245 Preventive Medicine",1,
        "W - Health Sciences|WB1 - WB962 Practice of Medicine|WB300 - WB962 Therapeutics|WB700 - WB760 Medical Climatology",1,
        "W - Health Sciences|WB1 - WB962 Practice of Medicine|WB300 - WB962 Therapeutics|WB880 - WB962 Complementary and Alternative Therapies",1,
        "W - Health Sciences|WH1 - WH700 Hemic and Lymphatic Systems",1,
        "W - Health Sciences|WH1 - WH700 Hemic and Lymphatic Systems|WH120 - WH540 Hematologic Diseases. Immunologic Factors. Blood Banks",1,
        "W - Health Sciences|WK1 - WK920 Endocrine System|WK1 - WK148 Reference Works. General Works",1,
        "W - Health Sciences|WK1 - WK920 Endocrine System|WK800 - WK885 Islets of Langerhans",1,
        "W - Health Sciences|WM1 - WM611 Psychiatry",1,
        "W - Health Sciences|WM1 - WM611 Psychiatry|WM400 - WM460.7 Therapies",1,
        "W - Health Sciences|WS1 - WS463 Pediatrics",1,
        "W - Health Sciences|WW1 - WW722.1 Ophthalmology|WW202 - WW290 Eye Structures",1,
        "W - Health Sciences|WY1 - WY300 Nursing|WY1 - WY49 Reference Works",1,
        "W - Health Sciences|WY1 - WY300 Nursing|WY150 - WY164 Nursing Techniques in Special Fields of Medicine",1,
        "W - Health Sciences|WZ1 - WZ350 History of Medicine|WZ1 - WZ40 Reference Works. General Works",1,
        "W - Health Sciences|WZ1 - WZ350 History of Medicine|WZ100 - WZ150 Biography",1],
      "language_f":[
        "English",5370515,
        "French",303671,
        "German",301869,
        "Spanish",290479,
        "Russian",183226,
        "Chinese",117537,
        "Italian",109867,
        "Latin",71053,
        "Portuguese",37429,
        "Czech",25985,
        "Arabic",25065],
      "date_cataloged_dt":[
        "2004-10-01T04:00:00Z",3319845,
        "2011-11-13T05:00:00Z",76005,
        "2017-11-01T04:00:00Z",74639,
        "2002-01-01T05:00:00Z",48156,
        "2017-10-31T04:00:00Z",47403,
        "2017-10-30T04:00:00Z",33733,
        "2016-05-26T04:00:00Z",32739,
        "2011-05-24T04:00:00Z",30316,
        "2019-04-08T04:00:00Z",25560,
        "2011-03-16T04:00:00Z",24969,
        "2010-04-02T04:00:00Z",24105]},
    "facet_ranges":{},
    "facet_intervals":{},
    "facet_heatmaps":{}},
  "stats":{
    "stats_fields":{
      "publication_year_isort":{
        "min":500.0,
        "max":2021.0,
        "count":6866230,
        "missing":176971,
        "sum":1.3425216158E10,
        "sumOfSquares":2.6298441453208E13,
        "mean":1955.2529055973948,
        "stddev":84.26005111204573}}}}

    http_version: null
  recorded_at: Fri, 25 Oct 2019 20:00:25 GMT
- request:
    method: get
    uri: https://query.discovery.trln.org/trlnbib/select?f.author_facet_f.facet.limit=11&f.available_f.facet.limit=11&f.date_cataloged_dt.facet.limit=11&f.language_f.facet.limit=11&f.lcc_callnum_classification_f.facet.limit=4501&f.location_hierarchy_f.facet.limit=201&f.location_hierarchy_f.facet.sort=count&f.physical_media_f.facet.limit=11&f.resource_type_f.facet.limit=11&f.subject_chronological_f.facet.limit=11&f.subject_genre_f.facet.limit=11&f.subject_geographic_f.facet.limit=11&f.subject_topical_f.facet.limit=11&facet=true&facet.field=subject_chronological_f&facet.query=date_cataloged_dt:%5BNOW-3MONTH/DAY%20TO%20NOW%5D&fq=institution_f:unc&rows=20&sort=score%20desc,%20publication_year_isort%20desc,%20title_sort_ssort_single%20asc&stats=true&stats.field=publication_year_isort&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 25 Oct 2019 20:00:35 GMT
      Content-Type:
      - application/json;charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - nginx/1.16.1
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {
  "responseHeader":{
    "zkConnected":true,
    "status":0,
    "QTime":6135,
    "params":{
      "f.lcc_callnum_classification_f.facet.limit":"4501",
      "facet.field":["access_type_f",
        "available_f",
        "{!ex=rollup}location_hierarchy_f",
        "resource_type_f",
        "physical_media_f",
        "subject_topical_f",
        "lcc_callnum_classification_f",
        "language_f",
        "{!ex=publication_year_isort_single}publication_year_isort",
        "author_facet_f",
        "subject_genre_f",
        "subject_geographic_f",
        "subject_chronological_f"],
      "f.available_f.facet.limit":"11",
      "f.date_cataloged_dt.facet.limit":"11",
      "f.location_hierarchy_f.facet.sort":"count",
      "f.subject_chronological_f.facet.limit":"11",
      "f.subject_genre_f.facet.limit":"11",
      "fq":"institution_f:unc",
      "sort":"score desc, publication_year_isort desc, title_sort_ssort_single asc",
      "rows":"20",
      "f.subject_geographic_f.facet.limit":"11",
      "facet.query":["date_cataloged_dt:[NOW-7DAY/DAY TO NOW]",
        "date_cataloged_dt:[NOW-1MONTH/DAY TO NOW]",
        "date_cataloged_dt:[NOW-3MONTH/DAY TO NOW]"],
      "f.language_f.facet.limit":"11",
      "f.location_hierarchy_f.facet.limit":"201",
      "stats":"true",
      "f.physical_media_f.facet.limit":"11",
      "f.author_facet_f.facet.limit":"11",
      "f.resource_type_f.facet.limit":"11",
      "f.subject_topical_f.facet.limit":"11",
      "facet":"true",
      "wt":"json",
      "stats.field":"publication_year_isort"}},
  "response":{"numFound":7043201,"start":0,"docs":[
      {
        "id":"UNCb8204204",
        "items_a":["{\"item_id\":\"i10853267\",\"loc_b\":\"mmdd\",\"loc_n\":\"mmdd\",\"status\":\"Available\",\"call_no\":\"CD-28,555\",\"cn_scheme\":\"ALPHANUM\"}"],
        "author_suggest":["Stockhausen, Karlheinz, 1928-2007",
          "Lustgarten, Raul",
          "Stump-Linshalm, Petra",
          "Tkatchouk, Anna",
          "Nickel, Hans, 1958-",
          "Gauwerky, Friedrich",
          "Stockhausen, Karlheinz, 1928-2007."],
        "names_a":["{\"name\":\"Stockhausen, Karlheinz, 1928-2007\"}",
          "{\"name\":\"Lustgarten, Raul\",\"rel\":\"instrumentalist\"}",
          "{\"name\":\"Stump-Linshalm, Petra\",\"rel\":\"instrumentalist\"}",
          "{\"name\":\"Tkatchouk, Anna\",\"rel\":\"instrumentalist\"}",
          "{\"name\":\"Nickel, Hans, 1958-\",\"rel\":\"instrumentalist\"}",
          "{\"name\":\"Gauwerky, Friedrich\",\"rel\":\"instrumentalist\"}"],
        "owner_a":["unc"],
        "misc_id_a":["Issue Number: 102 (Stockhausen Verlag)",
          "Issue Number: CD102 (Stockhausen Verlag)"],
        "barcodes_a":["00049257150"],
        "language_a":["German",
          "English"],
        "local_id":"b8204204",
        "note_toc_a":["In Freundschaft (für Violine) (15:18) -- In Freundschaft (für Bassklarinette (16:29) -- In Freundschaft (für Viola) (15:51) -- In Freundschaft (für Tuba) (15:51) -- In Freundschaft (für Violoncello (15:04)."],
        "available_a":["Available"],
        "lang_code_a":["zxx"],
        "publisher_a":["Stockhausen Verlag"],
        "rollup_id":"OCLC881480522",
        "title_suggest":["In Freundschaft",
          "Works. 1991"],
        "title_main":"In Freundschaft",
        "title_sort_ssort_single":"in freundschaft",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"881480522",
        "series_work_a":["{\"author\":\"Stockhausen, Karlheinz, 1928-2007.\",\"title\":[\"Works.\",\"1991\"],\"details\":\"102.\"}"],
        "creator_main_a":["Stockhausen, Karlheinz, 1928-2007"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Kürten : Stockhausen Verlag, [2014]\"}"],
        "note_general_a":["Includes versions for violin, bass clarinet, viola, tuba, and cello.",
          "Compact disc.",
          "Booklet with program notes in German and English (20 pages : color illustrations) inserted in container.",
          "Recorded on violin Dec. 14, 2013, on bass clarinet May 4, 2013, on viola March 30, 2014, on cello March 17, 2012, and on tuba March 24, 2012."],
        "resource_type_a":["Music recording"],
        "subject_genre_a":["Violin",
          "Bass clarinet",
          "Viola",
          "Tuba",
          "Cello",
          "Art music"],
        "date_cataloged":"2015-09-02T04:00:00Z",
        "genre_headings_a":["Violin",
          "Bass clarinet",
          "Viola",
          "Tuba",
          "Cello",
          "Art music"],
        "subject_suggest":["Violin",
          "Bass clarinet",
          "Viola",
          "Tuba",
          "Cello",
          "Art music",
          "Violin music",
          "Bass clarinet music",
          "Viola music",
          "Tuba music",
          "Cello music"],
        "physical_media_a":["CD"],
        "subject_topical_a":["Violin music",
          "Bass clarinet music",
          "Viola music",
          "Tuba music",
          "Cello music"],
        "publication_year_sort":"2021",
        "subject_headings_a":["Violin music",
          "Bass clarinet music",
          "Viola music",
          "Tuba music",
          "Cello music"],
        "location_hierarchy_a":["unc",
          "unc:uncmusy"],
        "record_data_source_a":["ILSMARC"],
        "origin_place_search_a":["Kürten",
          "Germany"],
        "physical_description_a":["1 audio disc (78:30) : digital ; 4 3/4 in."],
        "note_performer_credits_a":["Raul Lustgarten, violin ; Petra Stump, bass clarinet ; Anna Tkatchouk, viola ; Friedrich Gauwerky, cello ; Hans Nickel, tuba."],
        "statement_of_responsibility_a":["Karlheinz Stockhausen."]},
      {
        "id":"UNCb7461492",
        "url_a":["{\"href\":\"http://libproxy.lib.unc.edu/login?url=https://www.aspresolver.com/aspresolver.asp?CLMU;388897\",\"type\":\"fulltext\",\"text\":\"Streaming audio available via the UNC-Chapel Hill Libraries\"}"],
        "author_suggest":["Cage, John",
          "Tan, Margaret Leng"],
        "names_a":["{\"name\":\"Cage, John\"}",
          "{\"name\":\"Tan, Margaret Leng\",\"rel\":\"instrumentalist\"}"],
        "owner_a":["unc"],
        "local_id":"b7461492",
        "note_toc_a":["Chess Pieces ; Sonatas and interludes (for prepared piano) / Cage -- Chess Serenade / Rieti."],
        "available_a":["Available"],
        "lang_code_a":["zxx"],
        "publisher_a":["Mode Records"],
        "rollup_id":"OCLC854881430",
        "this_work_a":["{\"author\":\"Cage, John.\",\"title\":[\"Sonatas and interludes,\",\"piano\"]}"],
        "note_local_a":["Content provider: Alexander Street Press.",
          "Vendor-supplied catalog record."],
        "title_suggest":["Piano works. 7 : Chess pieces, sonatas & interludes"],
        "title_main":"Piano works. 7 : Chess pieces, sonatas & interludes",
        "title_sort_ssort_single":"piano works 7 chess pieces sonatas and interludes",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "oclc_number":"854881430",
        "creator_main_a":["Cage, John"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"[S.l.] : Mode Records, 2021 [A.K.A. 2012]\"}"],
        "note_general_a":["Previously released as a compact disc.",
          "Title from resource description page (viewed Feb. 7, 2013).",
          "Recorded in 2005."],
        "related_work_a":["{\"author\":\"Rieti, Vittorio, 1898-1994.\",\"title\":[\"Chess serenade.\"]}"],
        "host_item_work_a":["{\"title\":[\"Classical music library\",\"(online collection)\"]}"],
        "resource_type_a":["Music recording"],
        "subject_genre_a":["Sound recordings"],
        "date_cataloged":"2014-02-05T05:00:00Z",
        "genre_headings_a":["Sound recordings"],
        "subject_suggest":["Sound recordings",
          "Prepared piano music",
          "Suites (Piano)"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["ASP388897/CLMU"],
        "subject_topical_a":["Prepared piano music",
          "Suites (Piano)"],
        "publication_year_sort":"2021",
        "subject_headings_a":["Prepared piano music",
          "Suites (Piano)"],
        "record_data_source_a":["ILSMARC"],
        "physical_description_a":["1 online resource"],
        "note_performer_credits_a":["Margaret Leng Tan, piano, prepared piano."],
        "note_access_restrictions_a":["Access limited to UNC Chapel Hill-authenticated users. Unlimited simultaneous users"],
        "statement_of_responsibility_a":["Cage. Chess serenade / Rieti."]},
      {
        "id":"UNCb7468809",
        "upc_a":["UPC: 702397764120"],
        "items_a":["{\"item_id\":\"i10222765\",\"loc_b\":\"mmdd\",\"loc_n\":\"mmdd\",\"status\":\"Available\",\"call_no\":\"CD-27,108\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"notes\":[\"Special Collection material:  Use of audio or visual material may require production of listening or viewing copies before use.  Contact wilsonlibrary@unc.edu before visiting reading room for more information.\"],\"item_id\":\"i11502530\",\"loc_b\":\"wadb\",\"loc_n\":\"wadb\",\"status\":\"In-Library Use Only\",\"call_no\":\"CD-16549\",\"cn_scheme\":\"ALPHANUM\"}"],
        "author_suggest":["Frisell, Bill"],
        "names_a":["{\"name\":\"Frisell, Bill\",\"rel\":\"composer, instrumentalist\"}"],
        "owner_a":["unc"],
        "misc_id_a":["Issue Number: TZ 7641 (Tzadik Records)",
          "Issue Number: CD7641 (Tzadik Records)",
          "Issue Number: TZA7641 (Tzadik Records)"],
        "barcodes_a":["00047206316"],
        "local_id":"b7468809",
        "note_toc_a":["Bagatelle (3:11) -- John Goldfarb, please come home! (8:51) -- Babbitt (3:38) -- Silent comedy (2:02) -- Lake Superior (4:34) -- Proof (3:55) -- The road (5:20) -- Leprechaun (3:41) -- Ice cave (6:38) -- Big fish (5:26) -- Lullaby (3:14)."],
        "available_a":["Available"],
        "lang_code_a":["zxx"],
        "publisher_a":["Tzadik Records"],
        "rollup_id":"OCLC827562464",
        "title_suggest":["Silent comedy"],
        "title_main":"Silent comedy",
        "title_sort_ssort_single":"silent comedy",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"827562464",
        "creator_main_a":["Frisell, Bill, composer, instrumentalist"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"New York, NY : Tzadik Records, ℗2013.\"}"],
        "note_general_a":["Special Collection material:  Use of audio or visual material may require production of listening or viewing copies before use.  Contact wilsonlibrary@unc.edu before visiting reading room for more information.",
          "Jazz improvisation.",
          "All music by Bill Frisell; \"improvised in real time with no overdubbing\"--Insert.",
          "Compact disc.",
          "Recorded and mixed Dec. 2, 2012 at EastSide Sound, NYC."],
        "resource_type_a":["Music recording"],
        "date_cataloged":"2014-02-19T05:00:00Z",
        "physical_media_a":["CD"],
        "subject_topical_a":["Electric guitar music (Jazz)",
          "Avant-garde (Music)",
          "Jazz",
          "Improvisation (Music)"],
        "publication_year_sort":"2021",
        "subject_headings_a":["2011 - 2020",
          "Electric guitar music (Jazz)",
          "Avant-garde (Music)",
          "Jazz -- 2011-2020",
          "Improvisation (Music)",
          "Jazz"],
        "subject_suggest":["2011 - 2020",
          "Electric guitar music (Jazz)",
          "Avant-garde (Music)",
          "Jazz -- 2011-2020",
          "Improvisation (Music)",
          "Jazz"],
        "location_hierarchy_a":["unc",
          "unc:uncmusy",
          "unc:uncsouz",
          "unc:uncwil",
          "unc:uncwil:uncwilsfc"],
        "record_data_source_a":["ILSMARC"],
        "origin_place_search_a":["New York, NY",
          "New York (State)",
          "United States"],
        "physical_description_a":["1 audio disc (50 min.) : digital ; 4 3/4 in. + 1 leaflet"],
        "subject_chronological_a":["2011 - 2020",
          "2011-2020"],
        "note_performer_credits_a":["Bill Frisell, electric guitar."],
        "note_production_credits_a":["Produced by John Zorn."],
        "statement_of_responsibility_a":["Bill Frisell."],
        "physical_description_details_a":["Dimensions: 4 3/4 in.",
          "Recording type: digital",
          "File type: audio file",
          "File format: CD audio"]},
      {
        "id":"UNCb7441548",
        "donor_a":["Purchased using funds from the Lucile Turner Music Library Fund."],
        "items_a":["{\"item_id\":\"i10111930\",\"loc_b\":\"mmda\",\"loc_n\":\"mmda\",\"status\":\"In-Library Use Only\",\"call_no\":\"M3.1.K45 O7 2012\",\"cn_scheme\":\"LC\"}"],
        "author_suggest":["Keiser, Reinhard, 1674-1739",
          "Drauschke, Hansjörg",
          "Ihlenfeldt, Thomas",
          "Keiser, Reinhard, 1674-1739.",
          "Keiser, Reinhard, 1674-1739.",
          "Keiser, Reinhard, 1674-1739.",
          "Keiser, Reinhard, 1674-1739."],
        "names_a":["{\"name\":\"Keiser, Reinhard, 1674-1739\",\"rel\":\"composer\"}",
          "{\"name\":\"Drauschke, Hansjörg\",\"rel\":\"editor\"}",
          "{\"name\":\"Ihlenfeldt, Thomas\",\"rel\":\"editor\"}"],
        "owner_a":["unc"],
        "misc_id_a":["International Standard Music Number: 9790700317935",
          "Plate Number: om157/1 (Ortus Musikverlag)"],
        "barcodes_a":["00044944436"],
        "language_a":["German",
          "Italian",
          "English"],
        "local_id":"b7441548",
        "note_toc_a":["Keisers Gemüths-Ergötzung = R. Keiser's amusements of the mind -- Divertimenti serenissimi = Entertainments for Her Highness -- Musicalische Land-Lust = Music for the countryside -- Kayserliche Friedens-Post nebst verschiedenen moralischen Sing-Gedichten und Arien = Imperial message of peace, along with various moral cantatas and arias -- Anhang."],
        "shelfkey":"lc:M..00031.K45.O7--2012",
        "available_a":["Available"],
        "lang_code_a":["ger"],
        "publisher_a":["Ortus Musikverlag"],
        "rollup_id":"OCLC829707625",
        "this_work_a":["{\"author\":\"Keiser, Reinhard, 1674-1739\",\"title\":[\"Vocal music.\",\"Selections\"]}"],
        "note_local_a":["Purchased using funds from the Lucile Turner Music Library Fund."],
        "title_suggest":["Weltliche Kantaten und Arien. Band I, Werke aus gedruckter Überlieferung",
          "Musik zwischen Elbe und Oder",
          "Gemüths-Ergötzung.",
          "Divertimenti serenissimi.",
          "Musicalische Land-Lust.",
          "Kayserliche Friedens-Post."],
        "title_main":"Weltliche Kantaten und Arien. Band I, Werke aus gedruckter Überlieferung",
        "title_sort_ssort_single":"weltliche kantaten und arien band i werke aus gedruckter uberlieferung",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"829707625",
        "series_work_a":["{\"title\":[\"Musik zwischen Elbe und Oder\"],\"details\":\"Bd. 30.\"}"],
        "creator_main_a":["Keiser, Reinhard, 1674-1739, composer"],
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"Beeskow : Ortus Musikverlag, [2012?]\"}"],
        "note_general_a":["With preface in German and English, critical notes in German.",
          "Staff notation.",
          "German or Italian words.",
          "Texts printed separately with English translation: pages xlvii-lxviii."],
        "included_work_a":["{\"label\":\"Contains\",\"author\":\"Keiser, Reinhard, 1674-1739.\",\"title\":[\"Gemüths-Ergötzung.\"]}",
          "{\"label\":\"Contains\",\"author\":\"Keiser, Reinhard, 1674-1739.\",\"title\":[\"Divertimenti serenissimi.\"]}",
          "{\"label\":\"Contains\",\"author\":\"Keiser, Reinhard, 1674-1739.\",\"title\":[\"Musicalische Land-Lust.\"]}",
          "{\"label\":\"Contains\",\"author\":\"Keiser, Reinhard, 1674-1739.\",\"title\":[\"Kayserliche Friedens-Post.\"]}"],
        "resource_type_a":["Music score"],
        "subject_genre_a":["Scores",
          "Songs"],
        "date_cataloged":"2013-09-16T04:00:00Z",
        "genre_headings_a":["Scores",
          "Songs"],
        "subject_suggest":["Scores",
          "Songs",
          "Vocal music -- Scores",
          "Cantatas, Secular -- Scores",
          "Incidental music -- Scores"],
        "physical_media_a":["Print"],
        "subject_topical_a":["Vocal music",
          "Cantatas, Secular",
          "Incidental music"],
        "imprint_multiple_a":["{\"type\":\"publication\",\"value\":\"Beeskow : Ortus Musikverlag, [2012?]\"}",
          "{\"type\":\"copyright\",\"value\":\"©2012\"}"],
        "publication_year_sort":"2021",
        "reverse_shelfkey":"lc:D}}ZZZWY}FVU}BS~~XZYX",
        "series_statement_a":["Musik zwischen Elbe und Oder ; Bd. 30"],
        "subject_headings_a":["Vocal music -- Scores",
          "Cantatas, Secular -- Scores",
          "Incidental music -- Scores"],
        "location_hierarchy_a":["unc",
          "unc:uncmusy"],
        "record_data_source_a":["ILSMARC"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["Beeskow",
          "Germany"],
        "physical_description_a":["1 score (lxviii, 160 pages) : illustrations ; 33 cm."],
        "lcc_callnum_classification_a":["M - Music",
          "M - Music|M1 - M5000 Music",
          "M - Music|M1 - M5000 Music|M3 - M3.3 Collected works of individual composers"],
        "statement_of_responsibility_a":["Reinhard Keiser ; herausgegeben von Hansjörg Drauschke und Thomas Ihlenfeldt."]},
      {
        "id":"UNCb5737093",
        "issn_primary_a":["1021-4054"],
        "items_a":["{\"item_id\":\"i7554229\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.1-9\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7569569\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.10-16\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7592370\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.17-27\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7554238\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.28-32\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7554242\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.33-41\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7569576\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.42-51\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7569577\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.52-61\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7569575\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.62-73\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7554247\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.74-85\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7554250\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.86-97\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7571711\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.98-107\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7571714\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.108-118\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7571712\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.119-124\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7571713\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.125-130\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7569571\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.131-136\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7569573\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.137-142\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7569574\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"no.143-152\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 92933460",
          "LCCN (canceled or invalid): sn 95017371"],
        "barcodes_a":["00031038074",
          "00031038733",
          "00031046742",
          "00031038109",
          "00031038083",
          "00031038788",
          "00031038797",
          "00031038779",
          "00031038092",
          "00031038118",
          "00031046181",
          "00031046216",
          "00031046190",
          "00031046207",
          "00031038742",
          "00031038751",
          "00031038760"],
        "holdings_a":["{\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"call_no\":\"HQ1735.2 .A48\",\"summary\":\"no.1-no.152\"}"],
        "language_a":["Persian"],
        "local_id":"b5737093",
        "shelfkey":"lc:HQ.17352.A48",
        "available_a":["Available"],
        "frequency_current_a":["Monthly"],
        "publisher_a":["s.n."],
        "rollup_id":"OCLC32658826",
        "title_suggest":["Zanān.",
          "."],
        "title_main":". / Zanān.",
        "title_sort_ssort_single":" zanan",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"32658826",
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Tihrān : [s.n.\"}"],
        "note_general_a":["Description based on: Sāl-i 1., shumārah-i 3 (Mah 1371 [Mārs/Āvrīl 1992]; title from cover."],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals"],
        "title_variant_a":["Zanaan"],
        "date_cataloged":"2008-10-14T04:00:00Z",
        "genre_headings_a":["Periodicals"],
        "subject_suggest":["Periodicals",
          "Women -- Iran -- Periodicals",
          "Women -- Periodicals"],
        "physical_media_a":["Print"],
        "subject_topical_a":["Women"],
        "publication_year_sort":"2020",
        "reverse_shelfkey":"lc:I9}YSWUX}PVR",
        "subject_headings_a":["Women -- Iran -- Periodicals",
          "Women -- Periodicals"],
        "lc_call_nos_normed_a":["HQ.17352.A48"],
        "location_hierarchy_a":["unc",
          "unc:uncdavy"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["Iran"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["Tihrān",
          "Iran"],
        "physical_description_a":["volumes : illustrations ; 30 cm"],
        "lcc_callnum_classification_a":["H - Social sciences",
          "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women",
          "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1101 - HQ2030.7 Women. Feminism",
          "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1101 - HQ2030.7 Women. Feminism|HQ1451 - HQ1870.7 By region or country"]},
      {
        "id":"UNCb9054209",
        "url_a":["{\"href\":\"http://VB3LK7EB4T.search.serialssolutions.com/?V=1.0\\u0026L=VB3LK7EB4T\\u0026S=JCs\\u0026C=TC0001932552\\u0026T=marc\",\"type\":\"fulltext\",\"text\":\"Full text available via the UNC-Chapel Hill Libraries\",\"restricted\":\"false\"}"],
        "issn_linking_a":["2250-4591"],
        "issn_primary_a":["2346-9986"],
        "author_suggest":["Universidad Nacional del Litoral"],
        "names_a":["{\"name\":\"Universidad Nacional del Litoral\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 2018268502"],
        "language_a":["Multiple languages",
          "Portuguese",
          "Spanish"],
        "local_id":"b9054209",
        "available_a":["Available"],
        "frequency_current_a":["Annual"],
        "lang_code_a":["mul"],
        "publisher_a":["Universidad Nacional del Litoral"],
        "rollup_id":"OCLC972080263",
        "this_work_a":["{\"title\":[\"+E (Online)\"]}"],
        "title_suggest":["+E."],
        "title_main":"+E.",
        "title_sort_ssort_single":"+e",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "oclc_number":"972080263",
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Santa Fe, Argentina: Universidad Nacional del Litoral, 2011-\"}"],
        "note_general_a":["Articles in Spanish or Poruguese; abstracts in language of article from 2011-2013 and in Spanish and Portuguese beginning with 2014 issue."],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals",
          "Electronic journals"],
        "title_variant_a":["Revista de Extension Universitaria"],
        "date_cataloged":"2018-03-09T05:00:00Z",
        "genre_headings_a":["Periodicals",
          "Electronic journals"],
        "subject_suggest":["Periodicals",
          "Electronic journals",
          "University extension -- Iberian Peninsula -- Periodicals",
          "University extension -- Latin America -- Periodicals",
          "Universities and colleges -- Research -- Periodicals",
          "Universities and colleges -- Research",
          "University extension",
          "Europe -- Iberian Peninsula",
          "Latin America"],
        "note_numbering_a":["All issues are organized around a specific theme."],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["SSJ0001932552"],
        "subject_topical_a":["University extension",
          "Universities and colleges",
          "Research"],
        "publication_year_sort":"2020",
        "subject_headings_a":["University extension -- Iberian Peninsula -- Periodicals",
          "University extension -- Latin America -- Periodicals",
          "Universities and colleges -- Research -- Periodicals",
          "Universities and colleges -- Research",
          "University extension",
          "Europe -- Iberian Peninsula",
          "Latin America"],
        "note_serial_dates_a":["Began with: Número 1 (enero/noviembre 2011)"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["Iberian Peninsula",
          "Latin America",
          "Europe"]},
      {
        "id":"UNCb1381401",
        "issn_primary_a":["0258-8374"],
        "items_a":["{\"item_id\":\"i1899973\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.1(1962)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899974\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.2(1963)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899975\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.3(1963)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899976\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.4(1964)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899977\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.5(1964)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899978\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.6(1965)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899979\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.7(1965)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899980\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.8(1966)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899981\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.9(1966)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899982\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.10(1967)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899983\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.11(1967)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899984\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.12(1968)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899985\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.13(1968)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899986\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.14(1969)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899987\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.15(1969)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899988\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.16(1970)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899989\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.17:no.98-103(1970)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10096643\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.18:no.104-v.19:no.115(1971)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899990\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.20:no.116-121(1972)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10096645\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.21:no.122-127(1972)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10096646\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.22:no.128-133(1973)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10096647\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.23:no.134-139(1973)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899991\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.24:no.140-145(1974)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10096648\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.25:no.146-151(1974)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899992\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.26:no.152-157(1975)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899993\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.27:no.158-163(1975)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10096652\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.28:no.164-169(1976)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10096653\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.29:no.170-175(1976)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10096654\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.30:no.176-181(1977)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899994\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.31:no.182-187(1977)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899995\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.32:no.188-193(1978)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899996\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.33:no.194-199(1978)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899997\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.34:no.200-205(1979)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899998\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.35:no.206-211(1979)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1899999\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.36:no.212-217(1980)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900000\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.37:no.218-223(1980)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900001\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.38:no.224-229(1981)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900002\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.39:no.230-235(1981)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900003\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.40:no.236-241(1982)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900004\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.41:no.242-247(1982)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900005\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.42:no.248-253(1983)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900006\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.43:no.254-256(1983)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900007\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.44:no.260-265(1984)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900008\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.45:no.266-271(1984)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900009\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.46:no.272-277(1984)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900010\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.47:no.278-280,283(1985)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900011\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.48:no.284,286-289(1986)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900012\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.49:no.291-295(1986)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900013\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.50:no.296-301(1987)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900014\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.51:no.302-307(1989)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900015\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.52:no.308-313(1988)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900016\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.53:no.314-319(1988)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900017\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.54:no.320-325(1989)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900018\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.55:no.326-331(1989)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900019\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.56:no.332-337(1990)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900020\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.57:no.338-343(1990)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900021\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.58:no.344-349(1991)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900022\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.59:no.350-355(1991)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900023\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.60:no.356-361(1992)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900024\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.61:no.362-367(1992)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900025\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.62:no.368-373(1993)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900026\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.63:no.374-379(1993)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900027\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.64:no.380-385(1994)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900028\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.65:no.386-391(1994)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900029\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.66:no.392-397(1995)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900030\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.67:no.398-403(1995)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900031\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.68:no.404-409(1996)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900032\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.69:no.410-415(1996)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900033\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.70:no.416-420,422-427(1997)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900034\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.70:no.421(1997)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900035\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.72:no.428-433(1998)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900036\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.73:no.434-439(1998)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900037\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.74:no.440-445(1999)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900038\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.75:no.446-451(1999)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900039\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.76:no.452-457(2000)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900040\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.77:no.459-463(2000)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900041\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.78:no.464-465,467-469(2001)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10097051\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.78:no.466(2001)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900042\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.79:no.470-475(2001)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900043\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.80:no.477-478,480-481(2002)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900044\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.81:no.482-487(2002)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900045\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.82:no.488-493(2003)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1900046\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.83:no.494-499(2003)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i6117470\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.84:no.500-505(2004)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i6137688\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.85:no.506-511(2004)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i6295114\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.86:no.512-517(2005)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i6792716\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.87:no.518-523(2005)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i6848935\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.88:no.524-529(2006)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i6848937\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.88:no.530-535(2006)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7043520\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.90:no.536-541(2007)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7521344\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.91:no.542-547(2007)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7682594\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.92:no.548-553(2008)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7957923\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.93:no.554-559(2008)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8011537\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.94 no.560-565(2009)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8224939\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.95:no.566-570(2009)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8858222\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.95:no.571(2009)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8854226\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.96:no.572-577(2010)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i9514827\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.97:no.578-583(2010)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i9515086\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.98:no.584-589(2011)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10332956\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.99:no.590(2011)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10332957\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.99:no.591(2011)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10332961\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.99:no.592(2011)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10202678\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.99:no.593(2011)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10202688\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.99:no.594(2011)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10202691\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.99:no.595(2011)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10202696\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.100:no.597(2012)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10332962\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.100:no.598(2012)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10332963\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.100:no.599(2012)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10332965\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.100:no.600(2012)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10202711\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.100:no.601(2012)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10369700\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.101:no.602(2012)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10369699\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.101:no.603(2012)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10325880\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.101:no.604(2012)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10325882\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.101:no.605(2012)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10325878\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.101:no.606(2012)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10202699\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.101:no.607(2012)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10369701\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.102:no.608(2013)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10202708\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.102:no.609(2013)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10379199\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.102:no.610(2013)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10379206\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.102:no.611(2013)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10379210\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.102:no.612(2013)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10380551\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.103:no.614(2013)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10379222\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.103:no.615(2013)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10220319\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.103:no.616(2013)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10380552\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.103:no.617(2013)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10379223\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.103:no.618(2013)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10325875\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.103:no.619(2013)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10911983\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.105:no.639(2015)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i10911984\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.105:no.640(2015)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11317254\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.108:no.648(2016)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11317255\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.108:no.649(2016)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11317256\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.109:no.650(2016)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11268557\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.109:no.651(2016)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11268558\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.109:no.652(2016)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11266748\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.109:no.653(2016)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11317257\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.109:no.654(2016)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11317258\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.109:no.655(2016)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11387371\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.110:no.656(2017)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11387374\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.110:no.657(2017)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11717455\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.112:no.668(2018)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11717450\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.112:no.669(2018)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11839987\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.112:no.670(2018)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11839988\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.112:no.671(2018)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11839989\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.112:no.672(2018)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11839990\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.112:no.673(2018)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11925155\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.113:no.674(2018)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11925156\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.113:no.675(2018)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11925157\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.113:no.676(2018)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11925158\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.113:no.677(2018)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i11925159\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.113:no.678(2018)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i12118613\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.114:no.680(2019)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i12118614\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.114:no.681(2019)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i12118615\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.114:no.682(2019)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i12027129\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.114:no.683(2019)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i12027131\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.114:no.684(2019)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i12027126\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.114:no.685(2019)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i12095199\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"In-Library Use Only\",\"vol\":\"v.114:no.686(2019)\",\"call_no\":\"CT203.C5 C48\",\"cn_scheme\":\"LC\"}"],
        "author_suggest":["Zhuan ji wen xue za zhi she"],
        "names_a":["{\"name\":\"Zhuan ji wen xue za zhi she\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: c  68003302",
          "LCCN (canceled or invalid): 88644044",
          "LCCN (canceled or invalid): sn 88022240"],
        "barcodes_a":["00046852912",
          "00046852921",
          "00046852930",
          "00046852949",
          "00046852958",
          "00046852967",
          "00046852976",
          "00046852985",
          "00046852994",
          "00046853001",
          "00046853010",
          "00046853029",
          "00046853038",
          "00046853047",
          "00046853056",
          "00046853065",
          "00046853074",
          "00046853083",
          "00046853092",
          "00046853109",
          "00046853118",
          "00046853127",
          "00046853136",
          "00046853145",
          "00046853154",
          "00046853163",
          "00046853172",
          "00046853181",
          "00046853190",
          "00046853207",
          "00046853216",
          "00046853225",
          "00046853234",
          "00046853243",
          "00046853252",
          "00046853261",
          "00046853270",
          "00046853289",
          "00046853298",
          "00046853305",
          "00046853314",
          "00046853323",
          "00046853332",
          "00046853341",
          "00046853350",
          "00046853369",
          "00046853378",
          "00046853387",
          "00046853396",
          "00046853403",
          "00046853412",
          "00046853421",
          "00046853430",
          "00046853449",
          "00046853458",
          "00046853467",
          "00046853476",
          "00046853485",
          "00046853494",
          "00046853500",
          "00046853519",
          "00046853528",
          "00046853537",
          "00046853546",
          "00046853555",
          "00046853564",
          "00046853573",
          "00046853582",
          "00046853591",
          "00046853608",
          "00046853617",
          "00046853626",
          "00046853635",
          "00046853644",
          "00046853653",
          "00046853662",
          "00046853671",
          "00047055210",
          "00046853680",
          "00046853699",
          "00046853706",
          "00046853715",
          "00046853724",
          "00046853733",
          "00046853742",
          "00046853751",
          "00046853760",
          "00046853779",
          "00046853788",
          "00047057334",
          "00047057343",
          "00047057352",
          "00035094922",
          "00036132586",
          "00037250973",
          "00037945787",
          "00037945581",
          "00022122695",
          "00022122686",
          "00047915568",
          "00047915577",
          "00047915586",
          "00046929635",
          "00046929644",
          "00046929653",
          "00046929662",
          "00047915595",
          "00047915602",
          "00047915611",
          "00046929699",
          "00047914284",
          "00047914293",
          "00047915014",
          "00047915023",
          "00047915005",
          "00046929671",
          "00047914275",
          "00046929680",
          "00048095489",
          "00048095498",
          "00048095504",
          "00048095728",
          "00048095513",
          "00045786194",
          "00048095737",
          "00048095522",
          "00047914998",
          "00049392682",
          "00049392566",
          "00051559124",
          "00051559008",
          "00051558884",
          "00050319314",
          "00050776891",
          "00050319430",
          "00051559375",
          "00051559259",
          "00050405729",
          "00050405710",
          "00053377807",
          "00053377790",
          "00053724969",
          "00053724978",
          "00053724852",
          "00053724736",
          "00053819563",
          "00053816575",
          "00053816584",
          "00053816593",
          "00053816600",
          "00054262643",
          "00054265524",
          "00054265533",
          "00053948987",
          "00053949030",
          "00053948978",
          "00054262518"],
        "holdings_a":["{\"holdings_id\":\"c2786418\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"call_no\":\"CT203.C5 C48\",\"summary\":\"v.1:no.1(1962)- TO DATE, Some issues missing\"}"],
        "language_a":["Chinese"],
        "local_id":"b1381401",
        "shelfkey":"lc:CT.0203.C5.C48",
        "available_a":["Available"],
        "frequency_current_a":["Monthly"],
        "publisher_a":["Zhuan ji wen xue za zhi she"],
        "publisher_vern":["傳記文學雜誌社"],
        "rollup_id":"OCLC2259142",
        "title_suggest":["Zhuan ji wen xue = Biographical literature.",
          "0 傳記文學 = Biographical literature."],
        "title_main_vern":["0 傳記文學 = Biographical literature."],
        "title_main":"0 傳記文學 = Biographical literature. / Zhuan ji wen xue = Biographical literature.",
        "title_sort_ssort_single":"0 傳記文學 = biographical literature zhuan ji wen xue biographical literature",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number_old_a":["1554550",
          "46466148"],
        "oclc_number":"2259142",
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Taibei Shi : Zhuan ji wen xue za zhi she, Minguo 51- [1962]-\"}",
          "{\"type\":\"imprint\",\"value\":\"臺北市 : 傳記文學雜誌社, 民國51- [1962]-\"}"],
        "note_general_a":["Title from cover."],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals",
          "Biography"],
        "date_cataloged":"2017-02-07T05:00:00Z",
        "genre_headings_a":["Periodicals",
          "Biography"],
        "subject_suggest":["Periodicals",
          "Biography",
          "1900-1999",
          "Biography -- Periodicals",
          "Biography as a literary form -- Periodicals",
          "Chinese literature -- 20th century -- Periodicals",
          "Biography",
          "Biography as a literary form",
          "Chinese literature",
          "China -- Biography -- Periodicals",
          "China"],
        "physical_media_a":["Print"],
        "subject_topical_a":["Biography",
          "Biography as a literary form",
          "Chinese literature"],
        "imprint_multiple_a":["{\"type\":\"imprint\",\"value\":\"Taibei Shi : Zhuan ji wen xue za zhi she, Minguo 51- [1962]-\"}",
          "{\"type\":\"imprint\",\"value\":\"臺北市 : 傳記文學雜誌社, 民國51- [1962]-\"}"],
        "publication_year_sort":"2020",
        "reverse_shelfkey":"lc:N6}ZXZW}NU}NVR",
        "subject_headings_a":["1900-1999",
          "Biography -- Periodicals",
          "Biography as a literary form -- Periodicals",
          "Chinese literature -- 20th century -- Periodicals",
          "Biography",
          "Biography as a literary form",
          "Chinese literature",
          "China -- Biography -- Periodicals",
          "China"],
        "note_described_by_a":["Indexes: Vol. 1, no. 1 (June 1962)-v. 44, no. 6 (June 1984). 1 v.; v. 1 (June 1962)-50 (June 1987). 1 v."],
        "note_serial_dates_a":["Di 1 juan di 1 qi (Minguo 51 nian 6 yue [June 1962])-",
          "第1卷第1期(民國51年6月 [June 1962])-"],
        "lc_call_nos_normed_a":["CT.0203.C5.C48"],
        "location_hierarchy_a":["unc",
          "unc:uncdavy"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["China"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["Taibei Shi",
          "China (Republic : 1949- )"],
        "origin_place_search_vern":["臺北市"],
        "physical_description_a":["volumes : illustrations ; 26 cm"],
        "subject_chronological_a":["1900-1999",
          "20th century"],
        "lcc_callnum_classification_a":["C - Auxiliary Sciences of History",
          "C - Auxiliary Sciences of History|CT21 - CT9999 Biography",
          "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT93 - CT206 General collective biography"]},
      {
        "id":"UNCb7636543",
        "url_a":["{\"href\":\"http://VB3LK7EB4T.search.serialssolutions.com/?V=1.0\\u0026L=VB3LK7EB4T\\u0026S=JCs\\u0026C=TC0001034081\\u0026T=marc\",\"type\":\"fulltext\",\"text\":\"Full text available via the UNC-Chapel Hill Libraries\",\"restricted\":\"false\"}"],
        "author_suggest":["Dow Jones Reuters Business Interactive LLC"],
        "names_a":["{\"name\":\"Dow Jones Reuters Business Interactive LLC\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: sn 95021992",
          "CODEN designation: REEAE3"],
        "language_a":["French"],
        "local_id":"b7636543",
        "available_a":["Available"],
        "frequency_current_a":["Eight no. a year"],
        "lang_code_a":["fre"],
        "publisher_a":["Groupe Tests"],
        "rollup_id":"OCLC32126299",
        "this_work_a":["{\"title\":[\"01 réseaux (Online)\"]}"],
        "title_suggest":["01 réseaux."],
        "title_main":"01 réseaux.",
        "title_sort_ssort_single":"01 reseaux",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "oclc_number":"32126299",
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Paris : Groupe Tests, 1994-\"}"],
        "note_general_a":["Title from cover."],
        "related_work_a":["{\"title\":[\"01 informatique.\"]}"],
        "supplement_to_work_a":["{\"title\":[\"01 informatique\"],\"issn\":\"0398-1169\"}"],
        "earlier_work_a":["{\"label\":\"Continues\",\"title\":[\"Télécoms magazine\"]}"],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals",
          "Electronic journals"],
        "date_cataloged":"2019-01-08T05:00:00Z",
        "genre_headings_a":["Periodicals",
          "Electronic journals"],
        "subject_suggest":["Periodicals",
          "Electronic journals",
          "Computer networks -- Periodicals",
          "Telecommunication -- Periodicals",
          "Computer networks",
          "Telecommunication"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["SSJ0001034081"],
        "subject_topical_a":["Computer networks",
          "Telecommunication"],
        "publication_year_sort":"2020",
        "subject_headings_a":["Computer networks -- Periodicals",
          "Telecommunication -- Periodicals",
          "Computer networks",
          "Telecommunication"],
        "note_serial_dates_a":["No 1 (mars 1994)-"],
        "record_data_source_a":["ILSMARC"]},
      {
        "id":"UNCb7911442",
        "url_a":["{\"href\":\"http://VB3LK7EB4T.search.serialssolutions.com/?V=1.0\\u0026L=VB3LK7EB4T\\u0026S=JCs\\u0026C=TC0001325210\\u0026T=marc\",\"type\":\"fulltext\",\"text\":\"Full text available via the UNC-Chapel Hill Libraries\",\"restricted\":\"false\"}"],
        "issn_linking_a":["2296-0597"],
        "issn_primary_a":["2296-0597"],
        "author_suggest":["Universitätsbibliothek Basel"],
        "names_a":["{\"name\":\"Universitätsbibliothek Basel\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 2014256005"],
        "language_a":["German"],
        "local_id":"b7911442",
        "available_a":["Available"],
        "frequency_current_a":["Semiannual"],
        "lang_code_a":["ger"],
        "publisher_a":["Universitätsbibliothek Basel"],
        "rollup_id":"OCLC891466631",
        "this_work_a":["{\"title\":[\"027.7 (Online)\"]}"],
        "title_suggest":["027.7 : Zeitschrift für Bibliothekskultur."],
        "title_main":"027.7 : Zeitschrift für Bibliothekskultur.",
        "title_sort_ssort_single":"0277 zeitschrift fur bibliothekskultur",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "oclc_number":"891466631",
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Basel, Switzerland : Universitätsbibliothek Basel\"}"],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals",
          "Electronic journals"],
        "title_variant_a":["Zeitschrift für Bibliothekskultur"],
        "date_cataloged":"2017-06-08T04:00:00Z",
        "genre_headings_a":["Periodicals",
          "Electronic journals"],
        "subject_suggest":["Periodicals",
          "Electronic journals",
          "Library science -- Periodicals",
          "Libraries -- History -- Periodicals",
          "Libraries",
          "Library science"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["SSJ0001325210"],
        "subject_topical_a":["Library science",
          "Libraries",
          "History"],
        "publication_year_sort":"2020",
        "subject_headings_a":["Library science -- Periodicals",
          "Libraries -- History -- Periodicals",
          "Libraries",
          "Library science"],
        "note_serial_dates_a":["Began with Bd. 2, Nr. 1 (2013)."],
        "record_data_source_a":["ILSMARC"]},
      {
        "id":"UNCb8542341",
        "isbn_number_a":["9789869154529"],
        "isbn_qualifying_info_a":[""],
        "items_a":["{\"status\":\"On Order\",\"loc_b\":\"dd\",\"loc_n\":\"dd\"}"],
        "author_suggest":["John Sisyphus"],
        "names_a":["{\"name\":\"John Sisyphus\"}"],
        "owner_a":["unc"],
        "language_a":["Chinese"],
        "local_id":"b8542341",
        "lang_code_a":["chi"],
        "publisher_a":["Xi Xi Fu Si Wen Hua"],
        "publisher_vern":["西西弗斯文化"],
        "title_suggest":["Mao Ze Dong De Qi Shou Jiang Qing Yu Wen Ge (Xia).",
          "03 毛澤東的旗手 江青與文革(下)."],
        "title_main_vern":["03 毛澤東的旗手 江青與文革(下)."],
        "title_main":"03 毛澤東的旗手 江青與文革(下). / Mao Ze Dong De Qi Shou Jiang Qing Yu Wen Ge (Xia).",
        "title_sort_ssort_single":"03 毛澤東的旗手 江青與文革下 mao ze dong de qi shou jiang qing yu wen ge xia",
        "institution_a":["unc"],
        "creator_main_a":["John Sisyphus"],
        "imprint_main_a":["{\"type\":\"production\",\"value\":\"Xi Xi Fu Si Wen Hua.\"}",
          "{\"type\":\"production\",\"value\":\"西西弗斯文化.\"}"],
        "resource_type_a":["Book"],
        "subject_genre_a":["Nonfiction"],
        "imprint_multiple_a":["{\"type\":\"production\",\"value\":\"Xi Xi Fu Si Wen Hua.\"}",
          "{\"type\":\"production\",\"value\":\"西西弗斯文化.\"}"],
        "publication_year_sort":"2020",
        "location_hierarchy_a":["unc",
          "unc:uncdavy"],
        "record_data_source_a":["ILSMARC"]},
      {
        "id":"UNCb8542343",
        "isbn_number_a":["9789869154536"],
        "isbn_qualifying_info_a":[""],
        "items_a":["{\"status\":\"On Order\",\"loc_b\":\"dd\",\"loc_n\":\"dd\"}"],
        "author_suggest":["John Sisyphus"],
        "names_a":["{\"name\":\"John Sisyphus\"}"],
        "owner_a":["unc"],
        "language_a":["Chinese"],
        "local_id":"b8542343",
        "lang_code_a":["chi"],
        "publisher_a":["Xi Xi Fu Si Wen Hua"],
        "publisher_vern":["西西弗斯文化"],
        "title_suggest":["Mao Ze Dong De Li Lun Jia Zhang Chun Qiao Yu Wen Ge (Shang).",
          "05 毛澤東的理論家 張春橋與文革(上)."],
        "title_main_vern":["05 毛澤東的理論家 張春橋與文革(上)."],
        "title_main":"05 毛澤東的理論家 張春橋與文革(上). / Mao Ze Dong De Li Lun Jia Zhang Chun Qiao Yu Wen Ge (Shang).",
        "title_sort_ssort_single":"05 毛澤東的理論家 張春橋與文革上 mao ze dong de li lun jia zhang chun qiao yu wen ge shang",
        "institution_a":["unc"],
        "creator_main_a":["John Sisyphus"],
        "imprint_main_a":["{\"type\":\"production\",\"value\":\"Xi Xi Fu Si Wen Hua.\"}",
          "{\"type\":\"production\",\"value\":\"西西弗斯文化.\"}"],
        "resource_type_a":["Book"],
        "subject_genre_a":["Nonfiction"],
        "imprint_multiple_a":["{\"type\":\"production\",\"value\":\"Xi Xi Fu Si Wen Hua.\"}",
          "{\"type\":\"production\",\"value\":\"西西弗斯文化.\"}"],
        "publication_year_sort":"2020",
        "location_hierarchy_a":["unc",
          "unc:uncdavy"],
        "record_data_source_a":["ILSMARC"]},
      {
        "id":"UNCb8724941",
        "url_a":["{\"href\":\"http://libproxy.lib.unc.edu/login?url=http://dx.doi.org/10.1093/OBO/9780195393361-0041\",\"type\":\"fulltext\",\"text\":\"Available via the UNC-Chapel Hill Libraries\"}"],
        "author_suggest":["Henten, Jan Willem van, 1955-"],
        "names_a":["{\"name\":\"Henten, Jan Willem van, 1955-\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b8724941",
        "available_a":["Available"],
        "frequency_current_a":["Updated quarterly"],
        "lang_code_a":["eng"],
        "publisher_a":["Oxford University Press"],
        "rollup_id":"OBOEDZ0000050457",
        "note_local_a":["Vendor-supplied catalog record."],
        "title_suggest":["1-4 Maccabees"],
        "title_main":"1-4 Maccabees",
        "title_sort_ssort_single":"1 4 maccabees",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "creator_main_a":["Henten, Jan Willem van, 1955-"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"[New York] : Oxford University Press, 2011-\"}"],
        "host_item_work_a":["{\"title\":[\"Oxford bibliographies online\",\"(online collection)\",\".\",\"Biblical studies\"]}"],
        "resource_type_a":["Web page or site"],
        "subject_genre_a":["Bibliography",
          "Reference"],
        "date_cataloged":"2017-01-30T05:00:00Z",
        "genre_headings_a":["Bibliography"],
        "subject_suggest":["Bibliography",
          "Bible. Maccabees -- Criticism, interpretation, etc -- Bibliography"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["OBOEDZ0000050457"],
        "subject_topical_a":["Bible. Maccabees",
          "Criticism, interpretation, etc"],
        "publication_year_sort":"2020",
        "subject_headings_a":["Bible. Maccabees -- Criticism, interpretation, etc -- Bibliography"],
        "record_data_source_a":["ILSMARC"],
        "origin_place_search_a":["[New York]",
          "New York (State)",
          "United States"],
        "physical_description_a":["1 online resource"],
        "note_access_restrictions_a":["Access limited to UNC Chapel Hill-authenticated users. Unlimited simultaneous users"],
        "statement_of_responsibility_a":["by Jan W. van Henten."]},
      {
        "id":"UNCb8723980",
        "url_a":["{\"href\":\"http://libproxy.lib.unc.edu/login?url=http://dx.doi.org/10.1093/OBO/9780195393361-0021\",\"type\":\"fulltext\",\"text\":\"Available via the UNC-Chapel Hill Libraries\"}"],
        "author_suggest":["Tuell, Steven Shawn"],
        "names_a":["{\"name\":\"Tuell, Steven Shawn\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b8723980",
        "available_a":["Available"],
        "frequency_current_a":["Frequency of update unknown"],
        "lang_code_a":["eng"],
        "publisher_a":["Oxford University Press"],
        "rollup_id":"OBOEDZ0000021379",
        "note_local_a":["Vendor-supplied catalog record."],
        "title_suggest":["1 and 2 Chronicles"],
        "title_main":"1 and 2 Chronicles",
        "title_sort_ssort_single":"1 and 2 chronicles",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "creator_main_a":["Tuell, Steven Shawn"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"[New York] : Oxford University Press, 2010-\"}"],
        "host_item_work_a":["{\"title\":[\"Oxford bibliographies online\",\"(online collection)\",\".\",\"Biblical studies\"]}"],
        "resource_type_a":["Web page or site"],
        "subject_genre_a":["Bibliography",
          "Reference"],
        "date_cataloged":"2017-01-30T05:00:00Z",
        "genre_headings_a":["Bibliography"],
        "subject_suggest":["Bibliography",
          "Bible. Chronicles -- Criticism, interpretation, etc -- Bibliography"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["OBOEDZ0000021379"],
        "subject_topical_a":["Bible. Chronicles",
          "Criticism, interpretation, etc"],
        "publication_year_sort":"2020",
        "subject_headings_a":["Bible. Chronicles -- Criticism, interpretation, etc -- Bibliography"],
        "record_data_source_a":["ILSMARC"],
        "origin_place_search_a":["[New York]",
          "New York (State)",
          "United States"],
        "physical_description_a":["1 online resource"],
        "note_access_restrictions_a":["Access limited to UNC Chapel Hill-authenticated users. Unlimited simultaneous users"],
        "statement_of_responsibility_a":["by Steven Shawn Tuell."]},
      {
        "id":"UNCb8723999",
        "url_a":["{\"href\":\"http://libproxy.lib.unc.edu/login?url=http://dx.doi.org/10.1093/OBO/9780195393361-0071\",\"type\":\"fulltext\",\"text\":\"Available via the UNC-Chapel Hill Libraries\"}"],
        "author_suggest":["Knoppers, Gary N., 1956-",
          "Greer, Jonathan S."],
        "names_a":["{\"name\":\"Knoppers, Gary N., 1956-\"}",
          "{\"name\":\"Greer, Jonathan S.\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b8723999",
        "available_a":["Available"],
        "frequency_current_a":["Frequency of update unknown"],
        "lang_code_a":["eng"],
        "publisher_a":["Oxford University Press"],
        "rollup_id":"OBOEDZ0000021397",
        "note_local_a":["Vendor-supplied catalog record."],
        "title_suggest":["1 and 2 Kings"],
        "title_main":"1 and 2 Kings",
        "title_sort_ssort_single":"1 and 2 kings",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "creator_main_a":["Knoppers, Gary N., 1956-"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"[New York] : Oxford University Press, 2010-\"}"],
        "host_item_work_a":["{\"title\":[\"Oxford bibliographies online\",\"(online collection)\",\".\",\"Biblical studies\"]}"],
        "resource_type_a":["Web page or site"],
        "subject_genre_a":["Bibliography",
          "Reference"],
        "date_cataloged":"2017-01-30T05:00:00Z",
        "genre_headings_a":["Bibliography"],
        "subject_suggest":["Bibliography",
          "Bible. Kings -- Criticism, interpretation, etc -- Bibliography"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["OBOEDZ0000021397"],
        "subject_topical_a":["Bible. Kings",
          "Criticism, interpretation, etc"],
        "publication_year_sort":"2020",
        "subject_headings_a":["Bible. Kings -- Criticism, interpretation, etc -- Bibliography"],
        "record_data_source_a":["ILSMARC"],
        "origin_place_search_a":["[New York]",
          "New York (State)",
          "United States"],
        "physical_description_a":["1 online resource"],
        "note_access_restrictions_a":["Access limited to UNC Chapel Hill-authenticated users. Unlimited simultaneous users"],
        "statement_of_responsibility_a":["by Gary N. Knoppers, Jonathan S. Greer."]},
      {
        "id":"UNCb8724944",
        "url_a":["{\"href\":\"http://libproxy.lib.unc.edu/login?url=http://dx.doi.org/10.1093/OBO/9780195393361-0086\",\"type\":\"fulltext\",\"text\":\"Available via the UNC-Chapel Hill Libraries\"}"],
        "author_suggest":["Auld, A. Graeme"],
        "names_a":["{\"name\":\"Auld, A. Graeme\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b8724944",
        "available_a":["Available"],
        "frequency_current_a":["Updated quarterly"],
        "lang_code_a":["eng"],
        "publisher_a":["Oxford University Press"],
        "rollup_id":"OBOEDZ0000050460",
        "note_local_a":["Vendor-supplied catalog record."],
        "title_suggest":["1 and 2 Samuel"],
        "title_main":"1 and 2 Samuel",
        "title_sort_ssort_single":"1 and 2 samuel",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "creator_main_a":["Auld, A. Graeme"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"[New York] : Oxford University Press, 2011-\"}"],
        "host_item_work_a":["{\"title\":[\"Oxford bibliographies online\",\"(online collection)\",\".\",\"Biblical studies\"]}"],
        "resource_type_a":["Web page or site"],
        "subject_genre_a":["Bibliography",
          "Reference"],
        "date_cataloged":"2017-01-30T05:00:00Z",
        "genre_headings_a":["Bibliography"],
        "subject_suggest":["Bibliography",
          "Bible. Samuel -- Criticism, interpretation, etc -- Bibliography"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["OBOEDZ0000050460"],
        "subject_topical_a":["Bible. Samuel",
          "Criticism, interpretation, etc"],
        "publication_year_sort":"2020",
        "subject_headings_a":["Bible. Samuel -- Criticism, interpretation, etc -- Bibliography"],
        "record_data_source_a":["ILSMARC"],
        "origin_place_search_a":["[New York]",
          "New York (State)",
          "United States"],
        "physical_description_a":["1 online resource"],
        "note_access_restrictions_a":["Access limited to UNC Chapel Hill-authenticated users. Unlimited simultaneous users"],
        "statement_of_responsibility_a":["by Graeme Auld."]},
      {
        "id":"UNCb9520781",
        "url_a":["{\"href\":\"https://purl.fdlp.gov/GPO/gpo117142\",\"type\":\"fulltext\",\"restricted\":\"false\"}"],
        "author_suggest":["Dalaker, Joseph",
          "Library of Congress. Congressional Research Service"],
        "names_a":["{\"name\":\"Dalaker, Joseph\",\"rel\":\"author\"}",
          "{\"name\":\"Library of Congress. Congressional Research Service\",\"rel\":\"issuing body\"}"],
        "owner_a":["unc"],
        "edition_a":["[Library of Congress public edition]."],
        "misc_id_a":["LCCN: 2019230804",
          "GPO Item Number: 0807-A-07 (online)"],
        "language_a":["English"],
        "local_id":"b9520781",
        "shelfkey":"sudoc:LC 14.23:R 45100/",
        "available_a":["Available"],
        "frequency_current_a":["Updated irregularly"],
        "publisher_a":["Congressional Research Service"],
        "rollup_id":"OCLC1089448247",
        "title_suggest":["The 10-20-30 provision : defining persistent poverty counties",
          "CRS report"],
        "title_main":"The 10-20-30 provision : defining persistent poverty counties",
        "title_sort_ssort_single":"10 20 30 provision defining persistent poverty counties",
        "access_type_a":["Online"],
        "institution_a":["unc",
          "duke",
          "nccu",
          "ncsu"],
        "oclc_number":"1089448247",
        "series_work_a":["{\"title\":[\"CRS report\"],\"details\":\"R45100.\"}"],
        "creator_main_a":["Dalaker, Joseph, author"],
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"[Washington, D.C.] : Congressional Research Service, 2018-\"}"],
        "note_general_a":["The CRS report home page provides access to all versions published since 2018 in accordance with P.L. 115-141.",
          "Report includes bibliographical references."],
        "host_item_work_a":["{\"label\":\"In\",\"title\":[\"CRS reports\",\"(Library of Congress. Congressional Research Service)\"]}"],
        "resource_type_a":["Government publication",
          "Web page or site"],
        "subject_genre_a":["Statistics"],
        "title_former_a":["<March 8, 2019>: 10-20-30 plan and persistent poverty counties"],
        "date_cataloged":"2019-09-09T04:00:00Z",
        "genre_headings_a":["Statistics"],
        "subject_suggest":["Statistics",
          "American Community Survey (U.S.)",
          "Small Area Income and Poverty Estimates (Program : U.S.)",
          "Poverty -- United States -- Statistics",
          "Small area statistics -- United States",
          "United States -- Economic conditions -- Regional disparities -- Statistics"],
        "physical_media_a":["Online"],
        "subject_topical_a":["American Community Survey (U.S.)",
          "Small Area Income and Poverty Estimates (Program : U.S.)",
          "Poverty",
          "Small area statistics",
          "Economic conditions",
          "Regional disparities"],
        "publication_year_sort":"2020",
        "reverse_shelfkey":"sudoc:EN~YV}XW~8~VUYZZ~",
        "series_statement_a":["Report / Congressional Research Service ; R45100"],
        "subject_headings_a":["American Community Survey (U.S.)",
          "Small Area Income and Poverty Estimates (Program : U.S.)",
          "Poverty -- United States -- Statistics",
          "Small area statistics -- United States",
          "United States -- Economic conditions -- Regional disparities -- Statistics"],
        "record_data_source_a":["ILSMARC",
          "Shared Records",
          "DWS"],
        "subject_geographic_a":["United States"],
        "virtual_collection_a":["TRLN Shared Records. Documents without shelves."],
        "call_number_schemes_a":["SUDOC"],
        "origin_place_search_a":["[Washington, D.C.]",
          "District of Columbia",
          "United States"],
        "physical_description_a":["1 online resource."],
        "statement_of_responsibility_a":["Joseph Dalaker."]},
      {
        "id":"UNCb9708687",
        "url_a":["{\"href\":\"https://purl.fdlp.gov/GPO/gpo125236\",\"type\":\"fulltext\",\"restricted\":\"false\"}"],
        "author_suggest":["Dalaker, Joseph",
          "Library of Congress. Congressional Research Service"],
        "names_a":["{\"name\":\"Dalaker, Joseph\",\"rel\":\"author\"}",
          "{\"name\":\"Library of Congress. Congressional Research Service\",\"rel\":\"issuing body\"}"],
        "owner_a":["unc"],
        "edition_a":["[Library of Congress public edition]."],
        "misc_id_a":["LCCN: 2019256302",
          "GPO Item Number: 0807-A-07 (online)"],
        "language_a":["English"],
        "local_id":"b9708687",
        "shelfkey":"sudoc:LC 14.23:R 44748/",
        "available_a":["Available"],
        "frequency_current_a":["Updated irregularly"],
        "publisher_a":["Congressional Research Service"],
        "rollup_id":"OCLC1117495328",
        "title_suggest":["The 10-20-30 rule and persistent poverty counties",
          "CRS report"],
        "title_main":"The 10-20-30 rule and persistent poverty counties",
        "title_sort_ssort_single":"10 20 30 rule and persistent poverty counties",
        "access_type_a":["Online"],
        "institution_a":["unc",
          "duke",
          "nccu",
          "ncsu"],
        "oclc_number":"1117495328",
        "series_work_a":["{\"title\":[\"CRS report\"],\"details\":\"R44748.\"}"],
        "creator_main_a":["Dalaker, Joseph, author"],
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"[Washington, D.C.] : Congressional Research Service, 2019-\"}"],
        "note_general_a":["The CRS report home page provides access to all versions published since 2018 in accordance with P.L. 115-141; earliest version dated 2017.",
          "\"January 27, 2017.\"",
          "Report includes color map.",
          "Report includes bibliographical references."],
        "host_item_work_a":["{\"label\":\"In\",\"title\":[\"CRS reports\",\"(Library of Congress. Congressional Research Service)\"]}"],
        "resource_type_a":["Government publication",
          "Web page or site"],
        "date_cataloged":"2019-10-10T04:00:00Z",
        "physical_media_a":["Online"],
        "subject_topical_a":["United States. American Recovery and Reinvestment Act of 2009",
          "Poverty",
          "Rural development",
          "Economic conditions"],
        "publication_year_sort":"2020",
        "reverse_shelfkey":"sudoc:EN~YV}XW~8~VVSVR~",
        "series_statement_a":["Report / Congressional Research Service ; R44748"],
        "subject_headings_a":["United States. American Recovery and Reinvestment Act of 2009",
          "Poverty -- United States",
          "Rural development -- United States",
          "United States -- Economic conditions"],
        "subject_suggest":["United States. American Recovery and Reinvestment Act of 2009",
          "Poverty -- United States",
          "Rural development -- United States",
          "United States -- Economic conditions"],
        "record_data_source_a":["ILSMARC",
          "Shared Records",
          "DWS"],
        "subject_geographic_a":["United States"],
        "virtual_collection_a":["TRLN Shared Records. Documents without shelves."],
        "call_number_schemes_a":["SUDOC"],
        "origin_place_search_a":["[Washington, D.C.]",
          "District of Columbia",
          "United States"],
        "physical_description_a":["1 online resource"],
        "statement_of_responsibility_a":["Joseph Dalaker."]},
      {
        "id":"UNCb9476282",
        "url_a":["{\"href\":\"https://www.westlaw.com/Browse/Home/BusinessLawCenter/10KSectionSearch?rs=tran3.0\\u0026vr=3.0\\u0026originationContext=vendcc\",\"type\":\"fulltext\",\"text\":\"Full text available to UNC-Chapel Hill Law School with password\",\"note\":\"Coverage: 1996 - present\",\"restricted\":\"false\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b9476282",
        "available_a":["Available"],
        "frequency_current_a":["Updated periodically"],
        "lang_code_a":["eng"],
        "publisher_a":["publisher not identified",
          "Thomson Reuters"],
        "rollup_id":"WLN00870102",
        "title_suggest":["10-K Section search."],
        "title_main":"10-K Section search.",
        "title_sort_ssort_single":"10 k section search",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"[Place of publication not identified] : [publisher not identified]\"}"],
        "note_summary_a":["10-K Section search offers users the ability to focus searches on particular sections of Form 10-K. By simply checking a box, users can limit their search to the area(s) of the 10-K most likely to contain what they need. For more targeted results, users can use additional search fields to specify key words or phrases, filing date, period date, company name, ticker symbol, CIK and more."],
        "related_work_a":["{\"title\":[\"WESTLAW (Information retrieval system)\"]}"],
        "resource_type_a":["Web page or site"],
        "subject_genre_a":["Rules and practice",
          "Forms",
          "Electronic books"],
        "date_cataloged":"2019-03-15T04:00:00Z",
        "genre_headings_a":["Rules and practice",
          "Forms",
          "Electronic books"],
        "subject_suggest":["Rules and practice",
          "Forms",
          "Electronic books",
          "United States. Securities and Exchange Commission -- Rules and practice",
          "EDGAR (Information retrieval system)",
          "Corporation reports -- United States",
          "Corporation reports -- United States -- Forms",
          "Disclosure of information -- United States",
          "Disclosure of information -- United States -- Forms",
          "Financial statements -- United States",
          "Financial statements -- United States -- Forms",
          "Securities -- United States",
          "Securities -- United States -- Forms"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["WLN00870102"],
        "subject_topical_a":["United States. Securities and Exchange Commission",
          "EDGAR (Information retrieval system)",
          "Corporation reports",
          "Disclosure of information",
          "Financial statements",
          "Securities"],
        "imprint_multiple_a":["{\"type\":\"publication\",\"value\":\"[Place of publication not identified] : [publisher not identified]\"}",
          "{\"type\":\"distribution\",\"value\":\"[St. Paul, Minnesota] : Thomson Reuters, [2016]-\"}"],
        "publication_year_sort":"2020",
        "subject_headings_a":["United States. Securities and Exchange Commission -- Rules and practice",
          "EDGAR (Information retrieval system)",
          "Corporation reports -- United States",
          "Corporation reports -- United States -- Forms",
          "Disclosure of information -- United States",
          "Disclosure of information -- United States -- Forms",
          "Financial statements -- United States",
          "Financial statements -- United States -- Forms",
          "Securities -- United States",
          "Securities -- United States -- Forms"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["United States"],
        "origin_place_search_a":["[Place of publication not identified]",
          "[St. Paul, Minnesota]"],
        "physical_description_a":["1 online resource"]},
      {
        "id":"UNCb9707573",
        "url_a":["{\"href\":\"http://libproxy.lib.unc.edu/login?url=https://www.taylorfrancis.com/books/9780429199219\",\"type\":\"fulltext\",\"text\":\"Full text available via the UNC-Chapel Hill Libraries\"}"],
        "isbn_number_a":["042919921X",
          "0429579195",
          "0429581416",
          "0429583311",
          "9780429199219",
          "9780429579196",
          "9780429581410",
          "9780429583315",
          "9780367189204",
          "9780367189228"],
        "isbn_qualifying_info_a":["",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""],
        "author_suggest":["Beachboard, Cathleen",
          "Dause, Marynn"],
        "names_a":["{\"name\":\"Beachboard, Cathleen\",\"rel\":\"author\"}",
          "{\"name\":\"Dause, Marynn\",\"rel\":\"author\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b9707573",
        "note_toc_a":["Key one: relationships -- Key two: support -- Key three: strength -- Key four: willpower -- Key five: soft skills -- Key six: service -- Key seven: agency -- Key eight: curiosity -- Key nine: innovation -- Key ten: failure."],
        "shelfkey":"lc:LB.102723",
        "available_a":["Available"],
        "publisher_a":["Routledge"],
        "rollup_id":"OCLC1119979376",
        "note_local_a":["Content provider: Taylor & Francis.",
          "Vendor-supplied catalog record."],
        "title_suggest":["10 keys to student empowerment : unlocking the hero in each child"],
        "title_main":"10 keys to student empowerment : unlocking the hero in each child",
        "title_sort_ssort_single":"10 keys to student empowerment unlocking the hero in each child",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "oclc_number":"1119979376",
        "creator_main_a":["Beachboard, Cathleen, author"],
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"New York, NY : Routledge, [2020]\"}"],
        "note_summary_a":["\"Discover how to work alongside your students to unlock their potential. This powerful book reveals 10 keys to creating a classroom where your students can take ownership of their learning and become heroes in their own lives. You'll learn how to build relationships, support, strength, willpower, soft skills, service, agency, curiosity, innovation, and productive failure. Each key is illustrated in a narrative format, designed with tips and notes to help you make practical changes immediately. By the end of the book, you'll have the foundational pieces you need to create a student-powered classroom where students can learn about themselves, fail forward, and gain courage to face challenges head on\" --Provided by publisher."],
        "host_item_work_a":["{\"title\":[\"Taylor \\u0026 Francis e-books\",\"(online collection)\",\".\",\"Evidence-based DDA.\",\"T\\u0026F.\",\"Discovery\"]}"],
        "resource_type_a":["Book"],
        "subject_genre_a":["Nonfiction"],
        "date_cataloged":"2019-10-08T04:00:00Z",
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["TFDDATF9780429199219"],
        "subject_topical_a":["Motivation in education",
          "Student-centered learning",
          "Teacher-student relationships"],
        "publication_year_sort":"2020",
        "reverse_shelfkey":"lc:EO}YZXSXW",
        "subject_headings_a":["Motivation in education",
          "Student-centered learning",
          "Teacher-student relationships"],
        "subject_suggest":["Motivation in education",
          "Student-centered learning",
          "Teacher-student relationships"],
        "lc_call_nos_normed_a":["LB.102723"],
        "record_data_source_a":["ILSMARC"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["New York, NY",
          "New York (State)",
          "United States"],
        "physical_description_a":["1 online resource"],
        "note_access_restrictions_a":["Access limited to UNC Chapel Hill-authenticated users. Unlimited simultaneous users"],
        "lcc_callnum_classification_a":["L - Education",
          "L - Education|LB5 - LB3640 Theory and practice of education",
          "L - Education|LB5 - LB3640 Theory and practice of education|LB1025 - LB1050.75 Teaching (Principles and practice)"],
        "statement_of_responsibility_a":["Cathleen Beachboard, Marynn Dause."]},
      {
        "id":"UNCb7976745",
        "url_a":["{\"href\":\"http://worldcat.org/oclc/890136221/viewonline\",\"type\":\"fulltext\",\"text\":\"Available via the UNC-Chapel Hill Libraries\",\"restricted\":\"false\"}"],
        "author_suggest":["North Carolina. Division of Public Health",
          "North Carolina. Injury Epidemiology and Surveillance Unit"],
        "names_a":["{\"name\":\"North Carolina. Division of Public Health\"}",
          "{\"name\":\"North Carolina. Injury Epidemiology and Surveillance Unit\",\"rel\":\"issuing body\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b7976745",
        "available_a":["Available"],
        "frequency_current_a":["Annual"],
        "lang_code_a":["eng"],
        "publisher_a":["Division of Public Health, Injury Epidemiology and Surveillance Unit"],
        "rollup_id":"OCLC890136221",
        "title_suggest":["10 leading causes of injury death (all races, both sexes) by age groups, North Carolina"],
        "title_main":"10 leading causes of injury death (all races, both sexes) by age groups, North Carolina",
        "title_sort_ssort_single":"10 leading causes of injury death all races both sexes by age groups north carolina",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "oclc_number":"890136221",
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"[Raleigh, North Carolina] : Division of Public Health, Injury Epidemiology and Surveillance Unit\"}"],
        "resource_type_a":["Government publication",
          "Journal, Magazine, or Periodical"],
        "subject_genre_a":["Statistics",
          "Periodicals"],
        "date_cataloged":"2014-11-25T05:00:00Z",
        "genre_headings_a":["Statistics",
          "Periodicals"],
        "subject_suggest":["Statistics",
          "Periodicals",
          "Death -- North Carolina -- Causes -- Statistics -- Periodicals",
          "Mortality -- North Carolina -- Statistics -- Periodicals",
          "Accidents -- North Carolina -- Statistics -- Periodicals"],
        "physical_media_a":["Online"],
        "subject_topical_a":["Death",
          "Causes",
          "Mortality",
          "Accidents"],
        "publication_year_sort":"2020",
        "subject_headings_a":["Death -- North Carolina -- Causes -- Statistics -- Periodicals",
          "Mortality -- North Carolina -- Statistics -- Periodicals",
          "Accidents -- North Carolina -- Statistics -- Periodicals"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["North Carolina"],
        "note_system_details_a":["System requirements: Adobe Acrobat Reader ; current access available via PURL."],
        "origin_place_search_a":["[Raleigh, North Carolina]",
          "North Carolina",
          "United States"],
        "physical_description_a":["1 online resource (volumes)"],
        "statement_of_responsibility_a":["N.C. Division of Public Health, Injury Epidemiology and Surveillance Unit."],
        "physical_description_details_a":["File type: text file",
          "File format: PDF"]}]
  },
  "facet_counts":{
    "facet_queries":{
      "date_cataloged_dt:[NOW-7DAY/DAY TO NOW]":10701,
      "date_cataloged_dt:[NOW-1MONTH/DAY TO NOW]":36224,
      "date_cataloged_dt:[NOW-3MONTH/DAY TO NOW]":121555},
    "facet_fields":{
      "access_type_f":[
        "At the Library",4982519,
        "Online",2140362],
      "available_f":[
        "Available",6803849],
      "location_hierarchy_f":[
        "unc",4955916,
        "unc:uncdavy",2331386,
        "unc:unclibr",1455110,
        "unc:uncdavy:uncdavdoc",736300,
        "unc:uncwil",451475,
        "law",215772,
        "law:lawuncw",215772,
        "unc:unclawy",215772,
        "unc:uncmusy",200623,
        "unc:uncrarn",191904,
        "unc:uncwil:uncwilrbc",191904,
        "unc:uncnorn",189598,
        "unc:uncwil:uncwilncc",189598,
        "unc:uncscix",140165,
        "hsl",136134,
        "hsl:hsluncy",136134,
        "unc:unchsl",136134,
        "unc:uncarty",96962,
        "unc:uncul",84282,
        "unc:uncinfy",82097,
        "unc:uncsouz",66876,
        "unc:uncwil:uncwilsfc",66876,
        "unc:uncdavy:uncdavmap",41606,
        "unc:uncmedr",27049,
        "unc:unccarr",15664,
        "unc:uncschy",12164,
        "unc:uncdavy:uncdavref",11497,
        "unc:uncpark",10643,
        "unc:uncstoy",10245,
        "unc:uncdavy:uncstor",9939,
        "unc:uncmusy:uncmusymult",6147,
        "unc:uncsoun",5072,
        "unc:uncwil:uncwilshc",5072,
        "unc:uncnory",4887,
        "unc:uncmary",3062,
        "unc:uncul:unculpop",1775,
        "unc:unclgby",1257,
        "unc:uncmedr:uncmedrmeks",787,
        "unc:unclaty",674,
        "unc:uncdavy:uncdavglo",644,
        "unc:uncherb",584,
        "unc:unchigy",577,
        "unc:uncarchives",456,
        "unc:uncwil:uncwilar",456,
        "unc:unccarn",423,
        "unc:uncmedr:uncmedrmets",173,
        "unc:uncgloy",98,
        "unc:unckeny",68,
        "unc:uncofft",17],
      "resource_type_f":[
        "Book",6025518,
        "Government publication",1277045,
        "Journal, Magazine, or Periodical",402302,
        "Music recording",147461,
        "Thesis/Dissertation",120445,
        "Video",101000,
        "Music score",94077,
        "Map",61806,
        "Web page or site",25408,
        "Newspaper",14908,
        "Dataset -- Statistical",14564],
      "physical_media_f":[
        "Print",4359652,
        "Online",2140362,
        "Microform",382582,
        "Microform > Microfiche",124827,
        "Microform > Microfilm",67468,
        "Vinyl record",60745,
        "Microform > Microopaque",53060,
        "CD",51929,
        "33 1/3 rpm record",47238,
        "12\" record",46582,
        "DVD",26627],
      "subject_topical_f":[
        "History",677560,
        "Politics and government",205666,
        "History and criticism",171470,
        "Law and legislation",146846,
        "Criticism and interpretation",83755,
        "Economic conditions",82756,
        "Social conditions",74788,
        "Foreign relations",72651,
        "Social aspects",57726,
        "Social life and customs",57385,
        "Philosophy",57330],
      "lcc_callnum_classification_f":[
        "P - Language and literature",981576,
        "H - Social sciences",435259,
        "D - History (General) and History of Europe",329149,
        "B - Philosophy. Psychology. Religion",245660,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature",224979,
        "Q - Science",210043,
        "P - Language and literature|PR1 - PR9680 English literature",171358,
        "P - Language and literature|PS1 - PS3626 American literature. Canadian literature",149933,
        "P - Language and literature|PS1 - PS3626 American literature. Canadian literature|PS1 - PS3626 American literature",149933,
        "N - Fine Arts",137132,
        "M - Music",136199,
        "J - Political Science",127683,
        "K - Law in general. Comparative and uniform law. Jurisprudence",122339,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature",109200,
        "P - Language and literature|PN1 - PN6790 Literature (General)",106552,
        "G - Geography. Anthropology. Recreation",92954,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor",92261,
        "Z - Bibliography. Library Science. Information resources (general)",86304,
        "F - America: local history",85892,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia",85157,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language",84715,
        "L - Education",84211,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic",83271,
        "R - Medicine",82684,
        "M - Music|M1 - M5000 Music",75584,
        "T - Technology.",71529,
        "E - History: America",71090,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature",68088,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ7000 - PQ8929 Provincial, local, colonial, etc.",63214,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ7000 - PQ8929 Provincial, local, colonial, etc.|PQ7081 - PQ8560 Spanish America",62633,
        "Q - Science|QA1 - QA939 Mathematics",56858,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature",54853,
        "E - History: America|E151 - E889 United States",53825,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania",51829,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States",51725,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America",51265,
        "M - Music|ML1 - ML3930 Literature on music",50905,
        "H - Social sciences|HC1 - HC1085 Economic history and conditions",50816,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature",49813,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama",49483,
        "D - History (General) and History of Europe|D1 - D2009 History (General)",48305,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women",47874,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology",47459,
        "N - Fine Arts|N1 - N9211 Visual arts",46939,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature",46576,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)",44967,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature",44693,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music",44422,
        "L - Education|LB5 - LB3640 Theory and practice of education",43947,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration",43772,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States",43756,
        "H - Social sciences|HC1 - HC1085 Economic history and conditions|HC94 - HC1085 By region or country",42372,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography",40684,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics",40345,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period",39787,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations",39148,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works",36393,
        "H - Social sciences|HF1 - HF6182 Commerce",35933,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration",35762,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature",35730,
        "A - General Works",35681,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism",34998,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works",33957,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries",33031,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK1001 - JK1443 Congress. Legislative branch",32310,
        "P - Language and literature|PR1 - PR9680 English literature|PR3991 - PR5990 19th century, 1770/1800-1890/1900",32293,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL2250 - PL3208 Chinese literature",32200,
        "R - Medicine|RC31 - RC1245 Internal medicine",31923,
        "F - America: local history|F1 - F975 United States local history",31008,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain",30593,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class",30344,
        "N - Fine Arts|ND25 - ND3416 Painting",30034,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature",29881,
        "P - Language and literature|P1 - P1091 Philology. Linguistics",29729,
        "P - Language and literature|PR1 - PR9680 English literature|PR6000 - PR6049 1900-1960",29325,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography",29014,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology",28893,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B790 - B5802 Modern",28729,
        "N - Fine Arts|N1 - N9211 Visual arts|N5300 - N7418 History",28530,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature",27625,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America",27465,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China",27175,
        "C - Auxiliary Sciences of History",26719,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence",26532,
        "P - Language and literature|PR1 - PR9680 English literature|PR6050 - PR6076 1961-2000",25797,
        "H - Social sciences|HG1 - HG9999 Finance",25505,
        "P - Language and literature|PR1 - PR9680 English literature|PR8309 - PR9680 English literature: Provincial, local, etc.",24750,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1993 - PN1999 Motion pictures",24413,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa",24127,
        "P - Language and literature|PZ1 - PZ90 Fiction and juvenile belles lettres",23833,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music",23723,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B790 - B5802 Modern|B850 - B5739 By region or country",23372,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business",23161,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism",22682,
        "A - General Works|AS1 - AS945 Academies and learned societies",22021,
        "N - Fine Arts|NA1 - NA9428 Architecture",21779,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England",21760,
        "A - General Works|AS1 - AS945 Academies and learned societies|AS11 - AS785 By region or country",21606,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL2250 - PL3208 Chinese literature|PL2661 - PL2979 Individual authors and works",21050,
        "Q - Science|QE1 - QE996.5 Geology",20980,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF0001 - KF999",20979,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science",20750,
        "L - Education|LC8 - LC6691 Special aspects of education",20660,
        "S - Agriculture",20613,
        "Q - Science|QC1 - QC999 Physics",20539,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure",20527,
        "U - Military science (General)",20470,
        "Q - Science|Q1 - Q390 Science (General)",20218,
        "N - Fine Arts|ND25 - ND3416 Painting|ND49 - ND813 History",20204,
        "H - Social sciences|HN1 - HN995 Social history and conditions. Social problems. Social reform",20199,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home",20084,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX800 - BX4795 Catholic Church",19952,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z5051 - Z7999 Subject bibliography. Subjects arranged in alphabetical sequence",19824,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6170 - PQ6269 Collections",19799,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD28 - HD70 Management. Industrial management",19483,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC321 - RC571 Neurosciences. Biological psychiatry. Neuropsychiatry",19428,
        "D - History (General) and History of Europe|DC1 - DC947 History of France",19390,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible",19020,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ2600 - PQ2651 1900-1960",19003,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History",18766,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity",18544,
        "Q - Science|Q1 - Q390 Science (General)|Q1 - Q295 General",18340,
        "Q - Science|QK1 - QK989 Botany",18178,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML385 - ML429 Biography",18140,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature",17851,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology",17490,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater",17309,
        "H - Social sciences|HN1 - HN995 Social history and conditions. Social problems. Social reform|HN50 - HN995 By region or country",17015,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races",16940,
        "Q - Science|QL1 - QL991 Zoology",16914,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music",16744,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades",16591,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany",16575,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description",16557,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature",16524,
        "J - Political Science|JC11 - JC607 Political theory",16507,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state",16507,
        "Q - Science|QA1 - QA939 Mathematics|QA71 - QA90 Instruments and machines",16466,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA28 - DA592 History",16372,
        "Q - Science|QA1 - QA939 Mathematics|QA71 - QA90 Instruments and machines|QA75 - QA76.95 Calculating machines",16352,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration",16324,
        "Q - Science|QA1 - QA939 Mathematics|QA71 - QA90 Instruments and machines|QA75 - QA76.95 Calculating machines|QA75.5 - QA76.95 Electronic computers. Computer science",16300,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1101 - HQ2030.7 Women. Feminism",16174,
        "E - History: America|E11 - E143 America",16121,
        "P - Language and literature|PC1 - PC5498 Romanic languages",16059,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy",15578,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History",15129,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature",15024,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine",14942,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS733 - DS779.32 History",14929,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS101 - DS151 Israel (Palestine). The Jews",14600,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology",14170,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature",14130,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works|PT2600 - PT2653 1860/70-1960",14079,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar",14072,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3477 - PG3490 1961-2000",13751,
        "P - Language and literature|PZ1 - PZ90 Fiction and juvenile belles lettres|PZ1 - PZ4 Fiction in English",13399,
        "Q - Science|QD1 - QD999 Chemistry",13360,
        "Q - Science|QH301 - QH705.5 Biology (General)",13055,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology",12902,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism",12771,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB848 - HB3697 Demography. Population. Vital events",12732,
        "H - Social sciences|HX1 - HX970.7 Socialism. Communism. Anarchism",12703,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2219.3 - PN3030 Special regions or countries",12654,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period",12563,
        "N - Fine Arts|NK1 - NK9990 Decorative arts",12557,
        "E - History: America|E151 - E889 United States|E184 - E185.98 Elements in the population",12540,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA28 - DA592 History|DA129 - DA592 By period",12521,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M6 - M175.5 Solo instruments",12387,
        "H - Social sciences|HE1 - HE9990 Transportation and communications",12190,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.",12019,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.",11918,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1241 - PR1273 Drama",11916,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions",11746,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature",11651,
        "P - Language and literature|PR1 - PR9680 English literature|PR2199 - PR3195 English renaissance (1500-1640)",11583,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city",11498,
        "Q - Science|QP1 - QP801 Physiology",11329,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ2660 - PQ2686 1961-2000",11259,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports",11236,
        "P - Language and literature|PE1 - PE3729 English language",11225,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration",11193,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period|DC110 - DC424 Modern, 1515-",11088,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography",11041,
        "T - Technology.|TR1 - TR1050 Photography",10980,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology",10882,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam",10786,
        "Q - Science|QE1 - QE996.5 Geology|QE1 - QE350.62 General (including geographical divisions)",10550,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ2149 - PQ2551 19th century",10501,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.",10344,
        "R - Medicine|R5 - R920 Medicine (General)",10244,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps",10087,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA28 - DA592 History|DA129 - DA592 By period|DA300 - DA592 Modern, 1485-",10066,
        "H - Social sciences|H1 - H99 Social sciences (General)",10024,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia",9989,
        "L - Education|LA5 - LA2396 History of education",9874,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS401 - DS486.8 India (Bharat)",9773,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country",9700,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology|HV6251 - HV6773.55 Crimes and offenses",9691,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1025 - LB1050.75 Teaching (Principles and practice)",9651,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade",9560,
        "Q - Science|QA1 - QA939 Mathematics|QA299.6 - QA433 Analysis",9548,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9400 - PQ9999 Provincial, local, colonial, etc.",9540,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)",9479,
        "Q - Science|QA1 - QA939 Mathematics|QA1 - QA43 General",9458,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books",9435,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages",9431,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature",9422,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief",9265,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG4001 - PG5146 Czech",9193,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works|PT1799 - PT2592 1700-ca. 1860/70",9192,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature",9153,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula",9080,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD84 - DD257.4 History",9007,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity|BR140 - BR1510 History",9004,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9400 - PQ9999 Provincial, local, colonial, etc.|PQ9500 - PQ9698.43 Brazil",8819,
        "E - History: America|E151 - E889 United States|E456 - E655 Civil War period, 1861-1865",8793,
        "H - Social sciences|HM401 - HM1281 Sociology (General)",8755,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA190 - NA1555.5 History",8709,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization",8685,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages",8682,
        "P - Language and literature|PR1 - PR9680 English literature|PR3291 - PR3785 17th and 18th centuries (1640-1770)",8676,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects",8613,
        "S - Agriculture|SB1 - SB1110 Plant culture",8608,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore",8594,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD2321 - HD4730.9 Industry",8585,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology",8526,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M1000 - M1075 Orchestra",8523,
        "Q - Science|QK1 - QK989 Botany|QK1 - QK474.5 General (including geographical distribution)",8333,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons",8329,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS101 - DS151 Israel (Palestine). The Jews|DS133 - DS151 Jews outside of Palestine",8291,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law",8249,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works|PT2660 - PT2688 1961-2000",8232,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations",8214,
        "P - Language and literature|PE1 - PE3729 English language|PE1001 - PE1693 Modern English",8168,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.|PN4840 - PN5648 By region or country",8154,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries",8152,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy",8087,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6600 - PQ6647 Individual authors, 1868-1960",7991,
        "Q - Science|QH1 - QH278.5 Natural history (General)",7972,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history",7951,
        "N - Fine Arts|NB1 - NB1952 Sculpture",7896,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration",7860,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration",7838,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ12 - HQ449 Sexual life",7811,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD84 - DD257.4 History|DD121 - DD257.4 By period",7738,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN45 - PN57 Theory. Philosophy. Esthetics",7726,
        "E - History: America|E151 - E889 United States|E171 - E183.9 History",7720,
        "T - Technology.|TR1 - TR1050 Photography|TR624 - TR835 Applied photography (Including artistic, commercial, medical photography, photocopying processes)",7689,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine",7687,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK510 - DK651 Russia (Federation). Russian S.F.S.R.",7681,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature|PA6202 - PA6971 Individual authors",7645,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture",7624,
        "E - History: America|E151 - E889 United States|E456 - E655 Civil War period, 1861-1865|E461 - E655 The Civil War, 1861-1865",7612,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography",7581,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B108 - B708 Ancient",7580,
        "Q - Science|QA1 - QA939 Mathematics|QA150 - QA272.5 Algebra",7551,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4800 - PQ4851 Individual authors, 1900-1960",7550,
        "M - Music|MT1 - MT960 Musical instruction and study",7543,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes",7499,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics",7484,
        "Q - Science|QH1 - QH278.5 Natural history (General)|QH1 - QH198 General (including nature conservation, geographical distribution)",7402,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS1901 - BS2970 New Testament",7381,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG6001 - PG7446 Polish",7357,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain",7356,
        "E - History: America|E151 - E889 United States|E184 - E185.98 Elements in the population|E184.5 - E185.98 Afro-Americans",7328,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation",7316,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG11 - DG365 Ancient Italy. Rome to 476",7290,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings",7249,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism",7227,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD84 - DD257.4 History|DD121 - DD257.4 By period|DD175 - DD257.4 Modern, 1519-",7189,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1201 - F1393 Mexico",7185,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use",7173,
        "H - Social sciences|HJ9 - HJ9940 Public finance",7163,
        "T - Technology.|T1 - T995 Technology (General)",7079,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ3800 - PQ3999 Provincial, local, colonial, etc.",7040,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature|PA3818 - PA4505 Individual authors",6940,
        "E - History: America|E11 - E143 America|E75 - E99 Indians of North America",6930,
        "Q - Science|QL1 - QL991 Zoology|QL605 - QL739.8 Chordates. Vertebrates",6892,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental",6831,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music",6831,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education",6801,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF1000 - KF1999",6771,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3320 - PG3447 1800-1870",6723,
        "Q - Science|QB1 - QB991 Astronomy",6712,
        "J - Political Science|JZ2 - JZ6530 International relations",6699,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861",6690,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4860 - PQ4886 Individual authors, 1961-2000",6638,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures",6622,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism",6597,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education",6536,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G3290 - G5668 America. Western Hemisphere",6517,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB60 - NB1115 History. Including collective biography",6509,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P1 - P85 General",6492,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA21 - UA885 By region or country",6491,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KD - Law of the United Kingdom and Ireland",6416,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KD - Law of the United Kingdom and Ireland|KD51 - KD9500 England and Wales",6411,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D1 - D24.5 General",6388,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism",6374,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF309 - BF499 Consciousness. Cognition",6277,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK112.8 - DK264.8 House of Romanov, 1613-1917",6233,
        "D - History (General) and History of Europe|DF10 - DF951 History of Greece",6231,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature",6216,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G3290 - G5668 America. Western Hemisphere|G3300 - G5184 North America",6203,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR99.6 - GR390 By region or country",6116,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6650 - PQ6676 Individual authors, 1961-2000",6086,
        "U - Military science (General)|U1 - U900 Military science (General)",6082,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast",6055,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS701 - BS1830 Old Testament",6054,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF4000 - KF4999",5983,
        "Q - Science|QA1 - QA939 Mathematics|QA273 - QA280 Probabilities. Mathematical statistics",5980,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)",5977,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV8301 - HV9920.7 Penology. Prisons. Corrections",5955,
        "R - Medicine|RJ1 - RJ570 Pediatrics",5935,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX200 - BX756 Orthodox Eastern Church",5910,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1101 - HQ2030.7 Women. Feminism|HQ1451 - HQ1870.7 By region or country",5870,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)",5785,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration",5783,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG1201 - PG1749 Serbo-Croatian",5755,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC501 - JC607 Purpose, functions, and relations of the state",5744,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2801 - F3021 Argentina",5707,
        "N - Fine Arts|NX1 - NX820 Arts in general",5694,
        "J - Political Science|JA1 - JA92 Political science (General)",5692,
        "H - Social sciences|HA1 - HA4737 Statistics",5660,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD101 - HD1395.5 Land use",5579,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine",5483,
        "L - Education|LA5 - LA2396 History of education|LA410 - LA2284 Other regions or countries",5467,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF8000 - KF8999",5429,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.",5416,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX800 - BX4795 Catholic Church|BX4650 - BX4750 Biography and portraits",5379,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL2250 - PL3208 Chinese literature|PL2250 - PL2443 History and criticism",5360,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works",5329,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography",5327,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z729 - Z871 Library reports. History. Statistics",5316,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century",5315,
        "S - Agriculture|S1 - S946.5 Agriculture (General)",5304,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works|AC1 - AC195 Collections of monographs, essays, etc.",5289,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1500 - M1527.8 Dramatic music",5281,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT210 - CT3150 National biography",5274,
        "P - Language and literature|PR1 - PR9680 English literature|PR6100 - PR6126 -2001",5274,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity|BR140 - BR1510 History|BR500 - BR1510 By region or country",5257,
        "Q - Science|QA1 - QA939 Mathematics|QA440 - QA699 Geometry. Trigonometry. Topology",5247,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6271 - PQ6498 Individual authors and works to 1700",5220,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism",5170,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1 - JQ1849 Asia",5160,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK5101 - TK6720 Telecommunication (including telegraphy, telephone, radio, radar, television)",5110,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK266 - DK292 Soviet regime, 1918-1991",5100,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS1901 - BS2970 New Testament|BS2547 - BS2970 Special parts of the New Testament",5083,
        "P - Language and literature|PZ1 - PZ90 Fiction and juvenile belles lettres|PZ5 - PZ90 Juvenile belles lettres",5057,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1611 - M1624.8 Songs",5012,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF3000 - KF3999",4985,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-",4965,
        "C - Auxiliary Sciences of History|CB3 - CB482 History of Civilization",4962,
        "T - Technology.|TX1 - TX1110 Home economics.",4960,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV861 - GV1017 Ball games: Baseball, football, golf, etc.",4946,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P87 - P96 Communication. Mass media",4911,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government",4891,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration",4883,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5410 - HF5417.5 Marketing. Disribution of products",4880,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature",4811,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing",4774,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z8001 - Z8999 Personal bibliography. Names of individuals arranged in alphabetical sequence",4741,
        "N - Fine Arts|NE1 - NE3002 Print media",4727,
        "N - Fine Arts|N1 - N9211 Visual arts|N7560 - N8266 Special subjects of art",4689,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z2000 - Z2959 Europe",4665,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language",4657,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration",4625,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History",4623,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period",4612,
        "M - Music|ML1 - ML3930 Literature on music|ML112.8 - ML158.8 Bibliography",4573,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration",4567,
        "Q - Science|QC1 - QC999 Physics|QC170 - QC197 Atomic physics. Constitution and properties of matter (including molecular physics, relativity, quantum theory, and solid state physics)",4557,
        "T - Technology.|TL1 - TL4050 Motor vehicles. Aeronautics. Astronautics",4549,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography",4548,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking",4525,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1990 - PN1992.92 Broadcasting",4523,
        "P - Language and literature|PF1 - PF5999 West Germanic languages",4519,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period|DC110 - DC424 Modern, 1515-|DC139 - DC249 Revolutionary and Napoleonic period, 1789-1815",4508,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA4170 - NA7020 Public buildings",4506,
        "M - Music|M1 - M5000 Music|M1 - M2.3 Collections",4432,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9000 - HD9495 Agricultural industries",4425,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1555 - LB1602 Elementary or public school education",4424,
        "Q - Science|QL1 - QL991 Zoology|QL360 - QL599.82 Invertebrates",4400,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB2000 - DB3150 Czechoslovakia",4388,
        "Q - Science|QC1 - QC999 Physics|QC1 - QC75 General",4379,
        "Q - Science|QP1 - QP801 Physiology|QP1 - QP345 General (including influence of the environment)",4362,
        "D - History (General) and History of Europe|DF10 - DF951 History of Greece|DF10 - DF289 Ancient Greece",4361,
        "T - Technology.|TN1 - TN997 Mining engineering. Metallurgy.",4350,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1401 - F1419 Latin America (General)",4346,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works|AC1 - AC195 Collections of monographs, essays, etc.|AC9 - AC195 Other languages",4327,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2001 - PG2826 Russian language",4299,
        "M - Music|M1 - M5000 Music|M1 - M2.3 Collections|M2 - M2.3 Collections of musical sources",4290,
        "E - History: America|E151 - E889 United States|E184 - E185.98 Elements in the population|E184.5 - E185.98 Afro-Americans|E185.2 - E185.89 Status and development since emancipation",4260,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B790 - B5802 Modern|B808 - B849 Special topics and schools of philosophy",4253,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961",4229,
        "A - General Works|AP1 - AP230 Periodicals",4219,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS410 - BS680 Works about the Bible",4208,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA900 - DA995 Ireland",4189,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3950 - LC4806.5 Exceptional children and youth. Special education",4156,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL2250 - PL3208 Chinese literature|PL2450 - PL2659 Collections",4112,
        "Q - Science|QD1 - QD999 Chemistry|QD450 - QD801 Physical and theoretical chemistry",4109,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German",4104,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN700 - GN890 Prehistoric archaeology",4083,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French",4060,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ760 - HQ767.7 Family size",4058,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB1 - DB879 Austria. Austro-Hungarian Empire",4048,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1 - RA418.5 Medicine and the state",4048,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism",4044,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ370 - RJ550 Diseases of children and adolescents",4044,
        "T - Technology.|TP1 - TP1185 Chemical technology.",4035,
        "V - Naval science",4015,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG401 - DG583.8 Medieval and modern Italy, 476-",4014,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period",4003,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K1 - K36.5 Periodicals",4003,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary",4000,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1993 - PN1999 Motion pictures|PN1997 - PN1997.85 Plays, scenarios, etc.",3984,
        "H - Social sciences|HC1 - HC1085 Economic history and conditions|HC72 - HC88 Economic growth, development, planning",3961,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9506 - HD9624 Mineral industries. Metal trade",3942,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD6050 - HD6305 Classes of labor (including women, children, students, middle-aged and older persons, minorities)",3941,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2301 - F2349 Venezuela",3940,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB75 - HB130 History of economics",3933,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)",3924,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia",3922,
        "Q - Science|QK1 - QK989 Botany|QK504 - QK635 Cryptogams",3917,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL700 - PL889 Japanese literature",3899,
        "E - History: America|E151 - E889 United States|E151 - E169.13 General",3847,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z662 - Z664 Collections",3847,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC348 - JC497 Forms of the state",3828,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ767.8 - HQ792.2 Children. Child development (including child rearing, child care, child life)",3814,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC3801 - PC3976 Catalan",3803,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD5701 - HD6000.9 Labor market. Labor supply. Labor demand (including unemployment, manpower policy, occupational training, employment agencies)",3780,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF712 - BF724.85 Developmental psychology",3756,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS41 - DS66 Middle East. Southwestern Asia. Ancient Orient. Arab East. Near East",3752,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures|PK2030 - PK2142 Hindi, Hindustani literatures",3746,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z1201 - Z1946 America",3712,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z278 - Z549 Bookselling and publishing",3691,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4265 - PQ4556 Individual authors and works to 1400",3685,
        "H - Social sciences|HG1 - HG9999 Finance|HG201 - HG1496 Money",3684,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern",3676,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1990 - PN1992.92 Broadcasting|PN1992 - PN1992.92 Television broadcasts",3658,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt",3610,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases",3595,
        "Q - Science|QL1 - QL991 Zoology|QL1 - QL355 General (including geographical distribution)",3583,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism",3574,
        "T - Technology.|TS1 - TS2301 Manufactures",3568,
        "N - Fine Arts|N1 - N9211 Visual arts|N7420 - N7525.8 General works",3557,
        "C - Auxiliary Sciences of History|CD1 - CD6471 Diplomatics. Archives. Seals",3552,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5601 - HF5689 Accounting. Bookkeeping",3544,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E740 - E749 General",3521,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages",3518,
        "Q - Science|QP1 - QP801 Physiology|QP501 - QP801 Animal biochemistry",3508,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL1001 - PL1960 Chinese language",3506,
        "F - America: local history|F1001 - F1145.3 British America",3494,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada",3494,
        "R - Medicine|RD1 - RD811 Surgery",3492,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D299 - D472 -1789",3466,
        "N - Fine Arts|N1 - N9211 Visual arts|N400 - N3990 Art museums, galleries, etc.",3464,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes",3462,
        "Q - Science|QP1 - QP801 Physiology|QP351 - QP495 Neurophysiology and neuropsychology",3457,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML1400 - ML3275 Vocal music",3449,
        "Q - Science|QD1 - QD999 Chemistry|QD241 - QD441 Organic chemistry",3445,
        "Q - Science|QC1 - QC999 Physics|QC851 - QC999 Meteorology. Climatology (including the earth's atmosphere)",3429,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH2001 - PH3445 Hungarian",3428,
        "H - Social sciences|HA1 - HA4737 Statistics|HA154 - HA4737 Statistical data",3424,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD6350 - HD6940.7 Trade unions. Labor unions. Worker's associations",3422,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature",3413,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK7800 - TK8360 Electronics",3399,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC4001 - PC4977 Spanish",3391,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT165.5 - HT169.9 City planning",3385,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period",3384,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS801 - DS897 Japan",3379,
        "H - Social sciences|HA1 - HA4737 Statistics|HA154 - HA4737 Statistical data|HA175 - HA4737 By region or country",3373,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations",3353,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN3311 - PN3503 Prose. Prose fiction",3342,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV701 - HV1420.5 Children",3312,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN101 - JN1179 Great Britain",3310,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS401 - DS486.8 India (Bharat)|DS433 - DS481 History",3309,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics",3291,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS781 - DS796 Local history and description",3287,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology",3283,
        "H - Social sciences|HF1 - HF6182 Commerce|HF3000 - HF4055 By region or country",3277,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV85 - HV525 By region or country",3235,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity|BR140 - BR1510 History|BR160 - BR481 By period",3232,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period",3210,
        "R - Medicine|R5 - R920 Medicine (General)|R131 - R687 History of medicine. Medical expeditions",3200,
        "E - History: America|E151 - E889 United States|E171 - E183.9 History|E171 - E180 General",3184,
        "Q - Science|QE1 - QE996.5 Geology|QE500 - QE639.5 Dynamic and structural geology",3184,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN101 - PN245 Authorship",3157,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV4485 - BV5099 Practical religion. The Christian life",3156,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ1947 - PQ2147 18th century",3155,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology|GN537 - GN673 Ethnic groups and races",3129,
        "P - Language and literature|PR1 - PR9680 English literature|PR750 - PR890 Prose",3126,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1627 - M1853 National music",3116,
        "C - Auxiliary Sciences of History|CD1 - CD6471 Diplomatics. Archives. Seals|CD921 - CD4280 Archives",3108,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA670 - DA690 Local history and description",3104,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH540 - QH549.5 Ecology",3099,
        "Q - Science|QR1 - QR502 Microbiology",3096,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators",3090,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX800 - BX4795 Catholic Church|BX2400 - BX4563 Monasticism. Religious orders",3082,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML198 - ML360 By region or country",3078,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6201 - PK6599.7 New Persian",3070,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1580 - GV1799.4 Dancing",3061,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ1305 - JZ2060 Scope of international relations",3043,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4675 - PQ4734 Individual authors, 1701-1900",3040,
        "H - Social sciences|HG1 - HG9999 Finance|HG3810 - HG4000 Foreign exchange. International finance",3006,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry",2980,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences",2975,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina",2975,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.",2966,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3450 - PG3470 1870-1917",2966,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-",2960,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK3700 - NK4695 Ceramics",2956,
        "M - Music|ML1 - ML3930 Literature on music|ML3800 - ML3923 Philosophy and physics of music",2934,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF6000 - KF6999",2932,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew",2919,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature",2916,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3950 - LC4806.5 Exceptional children and youth. Special education|LC4001 - LC4806.5 Children and youth with disabilities. Learning disabled children and youth",2914,
        "G - Geography. Anthropology. Recreation|GE1 - GE350 Environmental sciences",2900,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology|GN406 - GN517 Cultural traits, customs, and institutions",2880,
        "L - Education|LA5 - LA2396 History of education|LA201 - LA398 United States",2880,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL700 - PL889 Japanese literature|PL784 - PL866 Individual authors and works",2880,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC189 - LC214.53 Educational sociology",2873,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX440 - NX632 History of the arts",2870,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ370 - RJ550 Diseases of children and adolescents|RJ499 - RJ507 Mental disorders. Child psychiatry",2837,
        "C - Auxiliary Sciences of History|CS1 - CS3090 Genealogy",2830,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML3469 - ML3541 Popular music",2818,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC50 - NC266 History of drawing",2816,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6201 - PK6599.7 New Persian|PK6400 - PK6599.7 Literature",2809,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology",2802,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism",2790,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9680 - HD9714 Mechanical industries (including electric utilities, electronic industries, and machinery)",2784,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN1 - JN97 Europe (General)",2783,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature",2782,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC600 - DC801 Local history and description",2764,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country",2762,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ1710 - PQ1935 17th century",2748,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB3011 - LB3095 School management and discipline",2725,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2501 - F2659 Brazil",2724,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving",2711,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT198 - BT590 Christology",2706,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country",2702,
        "M - Music|M1 - M5000 Music|M3 - M3.3 Collected works of individual composers",2700,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS401 - DS486.8 India (Bharat)|DS483 - DS486.8 Local history and description",2680,
        "Q - Science|QB1 - QB991 Astronomy|QB495 - QB903 Descriptive astronomy",2678,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery",2667,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC131 - JC273 Modern state",2652,
        "Q - Science|QL1 - QL991 Zoology|QL605 - QL739.8 Chordates. Vertebrates|QL671 - QL699 Birds",2650,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF511 - BF593 Affection. Feeling. Emotion",2648,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1300 - PQ1595 Old French literature (To ca. 1500/1550)",2648,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music",2640,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F3401 - F3619 Peru",2630,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration|JL1850 - JL3899 South America",2626,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia",2623,
        "R - Medicine|RT1 - RT120 Nursing",2612,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F3051 - F3285 Chile",2583,
        "G - Geography. Anthropology. Recreation|GF1 - GF900 Human ecology. Anthropogeography",2579,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P201 - P299 Comparative grammar",2571,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK265 - DK265.95 Revolution, 1917-1921",2569,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ12 - HQ449 Sexual life|HQ75 - HQ76.8 Homosexuality. Lesbianism",2566,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa",2558,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM1001 - HM1281 Social psychology",2558,
        "Q - Science|QD1 - QD999 Chemistry|QD1 - QD65 General (including alchemy)",2555,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages",2528,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States",2516,
        "E - History: America|E151 - E889 United States|E201 - E298 The Revolution, 1775-1783",2501,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA7100 - NA7884 Domestic architecture. Houses. Dwellings",2480,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water",2465,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1170 - PR1228 Poetry",2463,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS901 - DS937 Korea",2449,
        "J - Political Science|JA1 - JA92 Political science (General)|JA71 - JA80.2 Theory. Relations to other subjects",2445,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1 - JQ1849 Asia|JQ1499 - JQ1749 East Asia. Including China, Japan, Korea",2413,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV1551 - HV3024 People with disabilities (including blind, deaf, people with physical and mental disabilities)",2399,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2201 - F2239 General",2396,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government",2392,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5801 - HF6182 Advertising",2389,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9650 - PT9876.36 Individual authors or works",2387,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA28 - DA592 History|DA129 - DA592 By period|DA129 - DA260 Early and medieval to 1485",2381,
        "Q - Science|QC1 - QC999 Physics|QC770 - QC798 Nuclear and particle physics. Atomic energy. Radioactivity",2380,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology",2374,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements",2374,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC254 - RC282 Neoplasms. Tumors. Oncology (including cancer and carcinogens)",2369,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD143 - BD237 Epistomology. Theory of knowledge",2368,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3491.2 - PG3493.96 -2001",2367,
        "Q - Science|QL1 - QL991 Zoology|QL605 - QL739.8 Chordates. Vertebrates|QL700 - QL739.8 Mammals",2365,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA9000 - NA9428 Aesthetics of cities. City planning and beautifying",2360,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS251 - DS326 Iran (Persia)",2359,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering",2359,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity|BR60 - BR67 Early Christian literature. Fathers of the Church, etc.",2357,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D299 - D472 -1789|D410 - D472 20th century",2355,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training",2345,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK2403 - JK9593 State government",2345,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue",2324,
        "U - Military science (General)|UB1 - UB900 Military administration",2322,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD300 - BD450 Ontology",2315,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques",2315,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4601 - PL4890 Dravidian languages",2308,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN3201 - JN4980 Germany",2304,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures|PK2151 - PK2212 Urdu literature",2304,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ226 - PQ310 Modern",2277,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG5201 - PG5546 Slovak",2276,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6201 - PK6599.7 New Persian|PK6400 - PK6599.7 Literature|PK6450.9 - PK6562.35 Individual authors or works",2274,
        "T - Technology.|TX1 - TX1110 Home economics.|TX642 - TX840 Cookery",2267,
        "Q - Science|QL1 - QL991 Zoology|QL360 - QL599.82 Invertebrates|QL461 - QL599.82 Insects",2266,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS556 - DS559.93 Vietnam. Annam",2264,
        "Q - Science|QB1 - QB991 Astronomy|QB1 - QB139 General",2264,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN80 - PN99 Criticism",2253,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG2397 - HG3550 By region or country",2252,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT695 - BT749 Creation",2248,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV2000 - BV3705 Missions",2248,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1050.9 - LB1091 Educational psychology",2245,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey",2243,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH426 - QH470 Genetics",2237,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9720 - HD9975 Manufacturing industries",2232,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL689 - BL980 European. Occidental",2226,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF2000 - KF2999",2224,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P121 - P149 Science of language (Linguistics)",2224,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections",2223,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF5000 - KF5999",2221,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature",2216,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E441 - E453 Slavery in the United States. Antislavery movements",2213,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF1338 - JF2112 Public administration",2211,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland",2201,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law",2201,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography",2199,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA4170 - NA7020 Public buildings|NA4590 - NA5621 Religious architecture",2199,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF173 - BF175.5 Psychoanalysis",2191,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism",2172,
        "C - Auxiliary Sciences of History|CB3 - CB482 History of Civilization|CB305 - CB430 By period",2170,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period|DC110 - DC424 Modern, 1515-|DC361 - DC424 20th century",2169,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education",2164,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism|PG2900 - PG2998 General",2164,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML3544 - ML3775 National music",2155,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ793 - HQ799.2 Youth. Adolescents. Teenagers",2152,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA8001 - PA8595 Medieval and modern Latin literature",2152,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism|PG3001 - PG3026 Special periods",2151,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE400 - NE773 History of printmaking",2113,
        "P - Language and literature|PR1 - PR9680 English literature|PR1803 - PR2165 Anglo-Norman period. Early English. Middle English",2112,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages",2111,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1201 - F1393 Mexico|F1218.5 - F1221 Antiquities. Indians",2107,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS798.92 - DS799.9 Taiwan",2104,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ71 - BJ1185 History and general works",2101,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC321 - RC571 Neurosciences. Biological psychiatry. Neuropsychiatry|RC346 - RC429 Neurology. Diseases of the nervous system",2074,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M1100 - M1160 String orchestra",2064,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1421 - F1440 Central America",2059,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z1201 - Z1946 America|Z1215 - Z1363 United States",2058,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT500 - GT2370 Costume. Dress. Fashion",2054,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2251 - F2299 Colombia",2051,
        "S - Agriculture|SF1 - SF1100 Animal culture",2045,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA1 - PA199 Classical philology",2043,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary|HV8130 - HV8280.7 By region or country",2039,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS67 - DS79.9 Iraq (Assyria, Babylonia, Mesopotamia)",2034,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS300 - JS1583 United States",2034,
        "C - Auxiliary Sciences of History|CS1 - CS3090 Genealogy|CS42 - CS2209 By region or country",2030,
        "M - Music|ML1 - ML3930 Literature on music|ML47 - ML54.8 Librettos. Scenarios",2029,
        "H - Social sciences|HG1 - HG9999 Finance|HG3810 - HG4000 Foreign exchange. International finance|HG3879 - HG3898 International monetary system",2013,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature|PL8035 - PL8844 Special languages (alphabetically)",2004,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX5011 - BX5207 Church of England",2002,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2020 - M2036 Choruses, cantatas, etc.",1995,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1 - PL481 Ural-Altaic languages",1994,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature",1994,
        "H - Social sciences|HG1 - HG9999 Finance|HG4001 - HG4285 Finance management, Business finance. Corporation finance",1991,
        "P - Language and literature|PR1 - PR9680 English literature|PR500 - PR614 Poetry",1991,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML1400 - ML3275 Vocal music|ML1600 - ML2881 Secular vocal music",1990,
        "S - Agriculture|SD1 - SD669.5 Forestry",1987,
        "C - Auxiliary Sciences of History|CJ1 - CJ6661 Numismatics",1986,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1870 - JQ3981 Africa",1980,
        "L - Education|LF14 - LF5627 Individual institutions",1977,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-|DP233 - DP272.4 20th century. 1886-",1966,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel",1964,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG801 - PG1146 Bulgarian",1959,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG3801 - PG3987 Ukrainian",1954,
        "B - Philosophy. Psychology. Religion|BH1 - BH301 Aesthetics",1949,
        "T - Technology.|TS1 - TS2301 Manufactures|TS155 - TS194 Production management. Operations management",1945,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK501 - JK901 Executive branch",1943,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP1 - BP68 General",1941,
        "H - Social sciences|HG1 - HG9999 Finance|HG201 - HG1496 Money|HG451 - HG1496 By region or country",1940,
        "L - Education|LD13 - LD7501 Individual institutions",1939,
        "L - Education|LD13 - LD7501 Individual institutions|LD13 - LD7501 United States",1939,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography",1938,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4561 - PQ4664 Individual authors, 1400-1700",1935,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants",1934,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ1600 - PQ1709 16th century",1933,
        "T - Technology.|TL1 - TL4050 Motor vehicles. Aeronautics. Astronautics|TL500 - TL777 Aeronautics. Aeronautical engineering",1926,
        "E - History: America|E11 - E143 America|E51 - E73 Pre-Columbian America. The Indians",1921,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ755.7 - HQ759.92 Parents. Parenthood",1901,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT17 - DT39 History",1899,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA750 - DA890 Scotland",1897,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT851 - HT1445 Slavery",1888,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN695 - PN779 Modern",1887,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period|DC110 - DC424 Modern, 1515-|DC251 - DC354.9 19th century",1886,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5546 - HF5548.6 Office management",1883,
        "L - Education|LD13 - LD7501 Individual institutions|LD13 - LD7501 United States|LD13 - LD7251 Universities. Colleges",1875,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD701 - DD901 Local history and description",1863,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ1 - PQ150 General",1861,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law",1860,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections",1860,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters",1857,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z3001 - Z3496 Asia",1853,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6500 - PQ6576 Individual authors, 1700-ca. 1868",1851,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK1717 - JK2248 Political rights. Practical politics",1848,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK508 - DK508.95 Ukraine",1847,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH573 - QH671 Cytology",1840,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE1001 - HE5600 Railroads. Rapid transit systems",1835,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA2001 - PA2915 Latin philology and language",1825,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G149 - G180 Travel. Voyages and travels (General)",1823,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5511.2 - JZ6299 Promotion of peace. Peaceful change",1822,
        "C - Auxiliary Sciences of History|CJ1 - CJ6661 Numismatics|CJ1 - CJ4625 Coins",1818,
        "Q - Science|QE1 - QE996.5 Geology|QE760.8 - QE899.2 Paleozoology",1814,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare",1813,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8750 - PT8951.36 Individual authors or works",1806,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV40 - HV69 Social service. Social work. Charity organization and practice (including social case work, private/public relief, institutional care, etc.)",1805,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT2400 - GT3390.5 Customs relative to private life (including children, marriage, eating and drinking, funeral customs, etc.)",1804,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D111 - D203 Medieval history",1797,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK751 - DK781 Siberia",1791,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL51 - BL65 Philosophy of religion. Psychology of religion. Religion in relation to other subjects",1784,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV8301 - HV9920.7 Penology. Prisons. Corrections|HV9441 - HV9920.7 By region or country",1782,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML198 - ML360 By region or country|ML240 - ML325 Europe",1781,
        "R - Medicine|RB1 - RB214 Pathology",1778,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS556 - DS559.93 Vietnam. Annam|DS557 - DS559.9 Vietnamese Conflict",1777,
        "M - Music|ML1 - ML3930 Literature on music|ML112.8 - ML158.8 Bibliography|ML136 - ML158 Catalogs. Discography",1775,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam",1750,
        "B - Philosophy. Psychology. Religion|BC1 - BC199 Logic",1747,
        "Q - Science|Q1 - Q390 Science (General)|Q300 - Q390 Cybernetics",1747,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6400 - PN6525 Proverbs",1743,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica",1740,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP285 - DP402 Local history and description",1739,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects",1735,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9262 - PQ9288 Individual authors, 1961-2000",1728,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments",1726,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education",1721,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS1901 - BS2970 New Testament|BS2280 - BS2545 Works about the New Testament",1709,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling",1709,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB5 - LB45 General",1700,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z693 - Z695.83 Cataloging",1698,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia",1687,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT8050 - PT8176.36 Individual authors or works",1685,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN49 - GN298 Physical anthropology. Somatology",1682,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA401 - TA492 Materials of engineering and construction. Mechanics of materials",1682,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1 - PL481 Ural-Altaic languages|PL21 - PL396 Turkic languages",1672,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases",1672,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD201 - TD500 Water supply for domestic and industrial purposes",1672,
        "Q - Science|QD1 - QD999 Chemistry|QD71 - QD142 Analytical chemistry",1671,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts",1669,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB131 - HB147 Methodology",1668,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1350 - DR2285 Local history and description",1667,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1780 - G2799 Eastern Hemisphere. Eurasia, Africa, etc.",1662,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV5800 - HV5840 Drug habits. Drug abuse",1661,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS801 - DS897 Japan|DS833 - DS891.5 History",1652,
        "Q - Science|QK1 - QK989 Botany|QK710 - QK899 Plant physiology",1650,
        "L - Education|L7 - L991 Education (General)",1646,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G149 - G180 Travel. Voyages and travels (General)|G154.9 - G180 Travel and state, Tourist Trade",1645,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6700 - PN6790 Comic books, strips, etc.",1638,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature|PT236 - PT405 Modern",1625,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC501 - QC718.8 Electricity",1622,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA8001 - PA8595 Medieval and modern Latin literature|PA8200 - PA8595 Individual authors",1619,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ1518 - BJ1697 Individual ethics. Character. Virtue",1611,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX1 - NX260 General",1609,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4001 - PN4355 Oratory. Elocution, etc.",1608,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9502 - HD9502.5 Energy industries. Energy policy. Fuel trade",1603,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM831 - HM901 Social change",1599,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT98 - BT180 God",1590,
        "E - History: America|E11 - E143 America|E101 - E135 Discovery of America and early explorations",1573,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT491 - DT516.9 British West Africa",1568,
        "N - Fine Arts|ND25 - ND3416 Painting|ND2889 - ND3416 Illuminating of manuscripts and books",1568,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia",1556,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA960 - RA1000.5 Medical centers. Hospitals. Dispensaries. Clinics (including ambulance service and nursing homes)",1556,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature",1548,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2060 - M2101.5 Choruses, part-songs, etc., with accompaniment of keyboard or other solo instrument, or unaccompanied",1546,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ5001 - PJ5060 Literature",1539,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada|F1001 - F1035 General",1537,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6146.5 - PN6231 Wit and humor",1537,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics",1536,
        "E - History: America|E151 - E889 United States|E660 - E738 Late nineteenth century, 1865-1900",1532,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK6400 - NK8459 Metalwork",1527,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB3711 - HB3840 Business cycles. Economic fluctuations",1521,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1025 - LB1050.75 Teaching (Principles and practice)|LB1049.9 - LB1050.75 Reading (General)",1517,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP1 - BP68 General|BP50 - BP68 History",1516,
        "B - Philosophy. Psychology. Religion|BF1001 - BF1389 Parapsychology",1514,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC2700 - PC3708 Dialects. Provincialisms",1509,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature",1509,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS901 - DS937 Korea|DS904.8 - DS922.46 History",1507,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature",1503,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology|CC72 - CC81 Philosophy. Theory",1500,
        "Q - Science|QE1 - QE996.5 Geology|QE701 - QE760 Paleontology",1498,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC666 - RC701 Diseases of the circulatory (cardiovascular) system",1498,
        "P - Language and literature|PR1 - PR9680 English literature|PR621 - PR744 Drama",1497,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE5601 - HE5725 Automotive transportation (including trucking, bus lines, and taxicab service)",1493,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV2000 - BV3705 Missions|BV2750 - BV3695 Missions in individual countries",1484,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM1 - BM449 General",1479,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG691 - DG817.3 Central Italy",1479,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period|DC60 - DC109 Early and medieval to 1515",1472,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance",1467,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works|PT1501 - PT1695 Middle High German, ca. 1050-1450/1500",1461,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB51 - LB885 Systems of individual educators and writers",1458,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC1001 - PC1977 Italian",1450,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG1 - PG499 Slavic philology and languages (General)",1449,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania",1447,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL1790 - BL1975 China",1446,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC1300 - NC1766 Pictorial humor, caricature, etc.",1443,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV8301 - HV9920.7 Penology. Prisons. Corrections|HV9051 - HV9230.7 The juvenile offender. Juvenile delinquency. Reform schools, etc.",1440,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History",1439,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing|Z242.9 - Z264.5 Practical printing. Including printing as a business, layout, paper and ink, machinery, type and type founding, electrotyping, desktop publishing",1435,
        "R - Medicine|RK1 - RK715 Dentistry",1434,
        "Q - Science|QC1 - QC999 Physics|QC851 - QC999 Meteorology. Climatology (including the earth's atmosphere)|QC980 - QC999 Climatology and weather",1431,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)",1430,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.|G7400 - G8198.54 Asia",1426,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.",1421,
        "T - Technology.|TN1 - TN997 Mining engineering. Metallurgy.|TN799.5 - TN948 Nonmetallic minerals",1421,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD258 - DD262 West Germany",1420,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology|HV6774 - HV7220.5 Crimes and criminal classes",1418,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH359 - QH425 Evolution",1416,
        "N - Fine Arts|N1 - N9211 Visual arts|N1 - N58 General",1415,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA643 - RA645 Disease (Communicable and noninfectious) and public health",1415,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ241 - HJ1620 By region or country",1411,
        "P - Language and literature|PR1 - PR9680 English literature|PR500 - PR614 Poetry|PR521 - PR614 By period",1408,
        "E - History: America|E151 - E889 United States|E184 - E185.98 Elements in the population|E184.5 - E185.98 Afro-Americans|E185.96 - E185.98 Biography. Genealogy",1397,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4900 - PQ4926 Individual authors, 2001-",1397,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM495 - BM532 Sources of Jewish religion. Rabbinical literature",1394,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B720 - B765 Medieval",1393,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions",1390,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT3400 - GT5090 Customs relative to public and social life (including town life, court life, festivals, holidays, ceremonies of royalty, etc.)",1389,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History",1388,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography",1367,
        "Q - Science|QE1 - QE996.5 Geology|QE640 - QE699 Stratigraphy",1367,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3224 - K3278 Individual and state",1364,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP100 - BP137 Sacred books",1362,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)",1359,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1603 - LB1696.6 Secondary education. High schools",1356,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5549 - HF5549.5 Personnel management. Employment management",1351,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1100 - PQ1297 Collections",1348,
        "Q - Science|QA1 - QA939 Mathematics|QA801 - QA939 Analytic mechanics",1333,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology",1330,
        "M - Music|MT1 - MT960 Musical instruction and study|MT90 - MT146 Analysis and appreciation of musical works",1328,
        "Q - Science|QE1 - QE996.5 Geology|QE420 - QE499 Petrology",1320,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT74 - DT107.87 History",1319,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages",1318,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature",1315,
        "F - America: local history|F1 - F975 United States local history|F590.3 - F596.3 The West. Trans-Mississippi Region. Great Plains",1305,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4201 - PQ4263 Collections",1304,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL175 - BL265 Natural theology",1303,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV7590 - JV8349 Europe",1300,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB450.9 - SB467.8 Gardens and gardening",1300,
        "P - Language and literature|PR1 - PR9680 English literature|PR621 - PR744 Drama|PR641 - PR744 By period",1299,
        "D - History (General) and History of Europe|DE1 - DE100 History of the Greco-Roman world",1292,
        "T - Technology.|TH1 - TH9745 Building construction",1289,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE380.8 - HE971 Water transportation",1287,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS3000 - JS6949.8 Europe",1287,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK2255 - JK2391 Political parties",1286,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT851 - HT1445 Slavery|HT1048 - HT1444 By region or country",1284,
        "F - America: local history|F1 - F975 United States local history|F206 - F220 The South. South Atlantic States",1279,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography",1276,
        "Q - Science|QL1 - QL991 Zoology|QL750 - QL795 Animal behavior",1276,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN661 - PN694 Medieval (to 1500)",1275,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM1001 - HM1281 Social psychology|HM1176 - HM1281 Social influence. Social pressure",1274,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE331 - HE380 Traffic engineering. Roads and highways. Streets",1272,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB901 - DB999 Hungary",1269,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements",1269,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC71 - LC120.4 Education and the state",1269,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature|PA3051 - PA3285 Literary history",1266,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.",1266,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4001 - PQ4063 General",1262,
        "P - Language and literature|PE1 - PE3729 English language|PE1700 - PE3602 Dialects. Provincialisms, etc.",1261,
        "T - Technology.|TL1 - TL4050 Motor vehicles. Aeronautics. Astronautics|TL1 - TL484 Motor vehicles. Cycles",1258,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z699 - Z699.5 Machine methods of information and retrieval. Mechanized bibliographic control",1258,
        "H - Social sciences|HA1 - HA4737 Statistics|HA29 - HA32 Theory and method of social science statistics",1254,
        "Q - Science|QM1 - QM695 Human anatomy",1254,
        "Q - Science|QB1 - QB991 Astronomy|QB495 - QB903 Descriptive astronomy|QB500.5 - QB785 Solar system",1251,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL689 - BL980 European. Occidental|BL700 - BL820 Classical (Etruscan, Greek, Roman)",1246,
        "C - Auxiliary Sciences of History|CN1 - CN1355 Inscriptions. Epigraphy",1239,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1635 - HD1702 Utilization and culture of special classes of lands (including pasture lands, water resources development)",1239,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT3701 - PT3971 Provincial, local, colonial, etc.",1237,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal",1236,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS201 - DS248 Arabian Peninsula. Saudi Arabia",1234,
        "T - Technology.|TL1 - TL4050 Motor vehicles. Aeronautics. Astronautics|TL787 - TL4050 Astronautics. Space travel",1234,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB522 - HB715 Income. Factor shares",1233,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP188 - BP190 Islamic religious life",1229,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS501 - DS518.9 East Asia. The Far East",1228,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML1400 - ML3275 Vocal music|ML2900 - ML3275 Sacred vocal music",1224,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ1305 - JZ2060 Scope of international relations|JZ1464 - JZ2060 By country, territory, or region",1223,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1037 - Z1039 Books for special classes of persons, institutions, etc.",1220,
        "R - Medicine|R5 - R920 Medicine (General)|R735 - R854 Medical education. Medical schools. Research",1219,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV1 - JV5399 Colonies and colonization",1216,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6001 - PQ6056 General",1216,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV5001 - HV5720.5 Alcoholism. Intemperance. Temperance reform",1214,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845",1210,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU520 - DU950 Smaller Island Groups",1209,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry",1200,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria",1198,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1 - PD780 General",1197,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2010 - M2017.6 Services",1194,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV4000 - BV4470 Pastoral theology",1191,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2701 - F2799 Uruguay",1190,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ601 - PQ771 Prose and prose fiction",1187,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG8001 - PG9146 Baltic",1183,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ1188 - BJ1295 Religious ethics",1182,
        "V - Naval science|V1 - V995 Naval science (General)",1180,
        "H - Social sciences|HX1 - HX970.7 Socialism. Communism. Anarchism|HX519 - HX550 Communism/socialism in relation to special topics",1174,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ2700 - PQ2726 -2001",1174,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1547 - M1600 Choruses, part-songs, etc., with accompaniment of keyboard or other solo instrument, or unaccompanied",1171,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC110 - RC216 Infectious and parasitic diseases",1171,
        "M - Music|ML1 - ML3930 Literature on music|ML100 - ML109 Dictionaries. Encyclopedias",1169,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS36 - DS39.2 Arab countries",1168,
        "A - General Works|AM1 - AM401 Museums. Collectors and collecting",1167,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ12 - HQ449 Sexual life|HQ19 - HQ30.7 Sexual behavior and attitudes. Sexuality",1166,
        "Q - Science|QC1 - QC999 Physics|QC350 - QC467 Optics. Light",1159,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ5001 - PJ5060 Literature|PJ5050 - PJ5055.51 Individual authors and works",1157,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2500 - NA2599 General works",1156,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z711 - Z711.92 Reference work. Library service to special groups",1154,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E310 - E337 1789-1809. Constitutional period",1153,
        "P - Language and literature|PR1 - PR9680 English literature|PR1 - PR56 Literary history and criticism",1152,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z716.2 - Z718.8 Libraries in relation to special topics. Including libraries and community, libraries and television, children's libraries, libraries and students",1141,
        "Q - Science|QB1 - QB991 Astronomy|QB495 - QB903 Descriptive astronomy|QB799 - QB903 Stars",1139,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing|Z124 - Z228 History",1139,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV551.2 - HV639 Emergency management",1134,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1031 - PN1049 Theory, philosophy, relations, etc.",1133,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KE - Law of Canada",1127,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KE - Law of Canada|KE1 - KE9450 Federal law. Common and collective provincial law",1127,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF698 - BF698.9 Personality",1125,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC1 - PC400 General",1120,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa",1117,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z881 - Z980 Library catalogs and bulletins",1115,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania",1111,
        "R - Medicine|RD1 - RD811 Surgery|RD520 - RD599.5 Surgery by region, system, or organ",1110,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM711 - HM806 Groups and organizations",1107,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML162 - ML197 Special periods",1107,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z1201 - Z1946 America|Z1411 - Z1939 Latin America",1107,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ1060 - HQ1064 Aged. Gerontology (Social aspects). Retirement",1103,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education",1102,
        "E - History: America|E151 - E889 United States|E456 - E655 Civil War period, 1861-1865|E456 - E459 Lincoln's administrations, 1861-April 15, 1865",1093,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA1501 - TA1820 Applied optics. Photonics",1090,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)",1088,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV6403 - JV7127 United States",1077,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR451 - PR469 19th century",1077,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLB1 - KLB6499 Russia (Federation, 1992",1075,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL2250 - PL3208 Chinese literature|PL3030 - PL3208 Provincial, local, colonial, etc.",1075,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2661 - F2699 Paraguay",1073,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA201 - PA899 Greek philology and language",1073,
        "Q - Science|QK1 - QK989 Botany|QK900 - QK989 Plant ecology",1072,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL1 - BL50 Religion (General)",1070,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM1 - BM449 General|BM150 - BM449 History",1070,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G369 - G503 Special voyages and travels",1069,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM3001 - PM4566 Languages of Mexico and Central America",1069,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD2321 - HD4730.9 Industry|HD2340.8 - HD2346.5 Small and medium-sized businesses, artisans, handicrafts, trades",1065,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT390 - HT395 Regional planning",1063,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD493 - BD701 Cosmology",1060,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL2500 - BL2592 American",1055,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK70 - DK112.42 Early to 1613",1054,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1501 - HD1542 Agricultural classes (including farm tenancy, agricultural laborers",1049,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1865 - PN1988 Special types",1048,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F3301 - F3359 Bolivia",1046,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL950 - PL998 Korean literature",1044,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC5001 - PC5498 Portuguese",1042,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1 - JQ1849 Asia|JQ200 - JQ620 India",1038,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P302 - P302.87 Discourse analysis",1037,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ12 - HQ449 Sexual life|HQ101 - HQ440.7 Prostitution",1036,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC601 - PC872 Romanian",1031,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP191 - BP253 Branches, sects, etc.",1027,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB3011 - LB3095 School management and discipline|LB3050 - LB3060.87 Educational tests, measurements, evaluations and examinations",1027,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject",1025,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1 - PB431 Modern languages",1025,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF38 - BF64 Philosophy. Relation to other topics",1022,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN500 - PN519 Collections",1017,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM300 - RM666 Drugs and their actions",1016,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6500 - JN6598 Soviet Union. Russia. Former Soviet Republics",1013,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN101 - PN245 Authorship|PN172 - PN239 Technique. Literary composition, etc.",1006,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S419 - S482 History",1006,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT3200 - CT9999 Biography. By subject",1004,
        "C - Auxiliary Sciences of History|CB3 - CB482 History of Civilization|CB195 - CB281 Civilization and race",1003,
        "Q - Science|QE1 - QE996.5 Geology|QE351 - QE399.2 Mineralogy",1000,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1100 - G1779 America. Western Hemisphere",998,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN2301 - JN3007 France",991,
        "V - Naval science|VA10 - VA750 Navies: Organization, distribution, naval situation",984,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6700 - PQ6726 Individual authors, 2001-",982,
        "R - Medicine|R5 - R920 Medicine (General)|R723 - R726 Medical philosophy. Medical ethics",978,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E838 - E840.8 General",974,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica",973,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T57 - T57.97 Applied mathematics. Quantitative methods",973,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA773 - RA788 Personal health and hygiene",966,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P118 - P118.75 Language acquisition",965,
        "H - Social sciences|HF1 - HF6182 Commerce|HF1701 - HF2701 Tariff. Free trade. Protectionism",963,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2699 - LC2913 Blacks. African Americans",963,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3000 - PA3049 Classical literature",961,
        "J - Political Science|J1 - J981 General legislative and executive papers",957,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History|DR481 - DR605 By period",956,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM621 - HM656 Culture",956,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6146.5 - PN6231 Wit and humor|PN6157 - PN6222 By region or country",949,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC51 - JC93 Ancient state",944,
        "D - History (General) and History of Europe|DF10 - DF951 History of Greece|DF701 - DF951 Modern Greece",943,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD4909 - HD5100.9 Wages",943,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT641 - DT665 Zaire. Congo (Democratic Republic). Belgian Congo",942,
        "Q - Science|QL1 - QL991 Zoology|QL605 - QL739.8 Chordates. Vertebrates|QL614 - QL639.8 Fishes",941,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1160 - NK1590 Decoration and ornament. Design",927,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL2700 - BL2790 Rationalism",926,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G575 - G890 Arctic and Antarctic regions",925,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ12 - HQ449 Sexual life|HQ31 - HQ64 Sex instruction and sexual ethics",923,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.|G5700 - G6967 Europe",922,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS350 - DS375 Afghanistan",920,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E740 - E749 General|E744 - E744.5 Diplomatic history. Foreign and general relations",920,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1700 - ND2495 Watercolor painting",918,
        "Q - Science|QE1 - QE996.5 Geology|QE500 - QE639.5 Dynamic and structural geology|QE521 - QE545 Volcanoes and earthquakes",917,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3701 - LC3740 Immigrants or ethnic and linguistic minorities. Bilingual schools and bilingual education",916,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5381 - HF5386 Vocational guidance. Career development",915,
        "C - Auxiliary Sciences of History|CN1 - CN1355 Inscriptions. Epigraphy|CN120 - CN740 Ancient inscriptions",914,
        "M - Music|ML1 - ML3930 Literature on music|ML62 - ML90 Special aspects. Including writings of musicians",914,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving",914,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P306 - P310 Translating and interpreting",913,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK8800 - NK9505.5 Textiles",912,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL501 - PL699 Japanese language",912,
        "D - History (General) and History of Europe|DF10 - DF951 History of Greece|DF501 - DF649 Medieval Greece. Byzantine Empire, 323-1453",908,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T57 - T57.97 Applied mathematics. Quantitative methods|T57.6 - T57.97 Operations research. Systems analysis",906,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1101 - LB1139 Child study",905,
        "U - Military science (General)|UG1 - UG620 Military engineering",902,
        "Q - Science|QA1 - QA939 Mathematics|QA299.6 - QA433 Analysis|QA303 - QA316 Calculus",899,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP100 - BP137 Sacred books|BP100 - BP134 Koran",897,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF800 - JF1177 Political rights. Political participation",895,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP188 - BP190 Islamic religious life|BP188.45 - BP189.65 Sufism. Mysticism. Dervishes",887,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9751 - BX9793 Shakers. United Society of Believers. Millennial Church",887,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK1717 - JK2248 Political rights. Practical politics|JK1961 - JK2248 Electoral system",885,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S590 - S599.9 Soils. Soil science (Including soil surveys, soil chemistry, soil structure, soil-plant relationships)",882,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL175 - BL265 Natural theology|BL239 - BL265 Religion and science",880,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D299 - D472 -1789|D351 - D400 19th century. 1801-1914/1920",877,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA5000 - PA5660 Byzantine and modern Greek literature",875,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1100 - G1779 America. Western Hemisphere|G1100 - G1692 North America",866,
        "Q - Science|QR1 - QR502 Microbiology|QR1 - QR74.5 General",866,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP97.3 - DP160.8 711-1516. Moorish domination and the Reconquest",865,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3515 - PG3550 Outside the Russian Federation",865,
        "L - Education|L7 - L991 Education (General)|L7 - L97 Periodicals. Societies",864,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1119 - PR1151 By period",862,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE380.8 - HE971 Water transportation|HE561 - HE971 Shipping",858,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB421 - SB439.8 Classes of plants (including annuals, climbers, ferns, lawns, perennials, shrubs)",856,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG8001 - PG9146 Baltic|PG8801 - PG9146 Latvian",855,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL1790 - BL1975 China|BL1899 - BL1942.85 Taoism",854,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT56.8 - DT69.5 Antiquities",853,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States|DT271 - DT299 Algeria",850,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA600 - DA667 Description and travel. Guidebooks",847,
        "Q - Science|QD1 - QD999 Chemistry|QD146 - QD197 Inorganic chemistry",846,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1811 - HG2351 Special classes of banks and financial institutions",845,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History",844,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature|PT711 - PT871 Prose",843,
        "E - History: America|E151 - E889 United States|E171 - E183.9 History|E171 - E180 General|E176 - E176.8 Biography",842,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV640 - HV645 Refugee problems",842,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History",841,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT1501 - HT1595 Races (including race as a social group and race relations in general)",841,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature|PA6001 - PA6095.5 Literary history",839,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries",837,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K5000 - K5582 Criminal law and procedure",836,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD280 - DD289.5 East Germany",835,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian",835,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM5001 - PM7356 Languages of South America and the West Indies",835,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries",834,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian",833,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK5100 - NK5440 Glass",832,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV551.2 - HV639 Emergency management|HV553 - HV639 Relief in case of disasters",831,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K321 - K474 Schools of legal theory",830,
        "A - General Works|AZ101 - AZ999 History of scholarship and learning. The humanities",829,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH501 - QH531 Life",827,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS651 - DS689 Philippines",823,
        "L - Education|LF14 - LF5627 Individual institutions|LF14 - LF1257 Great Britain",819,
        "N - Fine Arts|N1 - N9211 Visual arts|N61 - N72 Theory. Philosophy. Aesthetics of the visual arts",817,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG133 - RG137.6 Conception. Artificial insemination. Contraception",817,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1530 - M1546.5 Choruses with orchestra or other ensemble",813,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z668 - Z669.7 Library education. Research",808,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1111 - BL1143.2 Sacred books. Sources",807,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC311 - JC314 Nationalism. Nation state",806,
        "U - Military science (General)|U1 - U900 Military science (General)|U21 - U22.3 War. Philosophy. Military sociology",806,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8601 - BX8695 Mormons. Church of Jesus Christ of Latter-Day Saints",805,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3230 - PG3238 Poetry",803,
        "N - Fine Arts|N1 - N9211 Visual arts|N5198 - N5299 Private collections and collectors",802,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z105 - Z115.5 Manuscripts. Paleography",801,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA790 - RA790.95 Mental health. Mental illness prevention",800,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity|BR1690 - BR1725 Biography",797,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ5061 - PJ5192 Other languages used by Jews",796,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN3311 - PN3503 Prose. Prose fiction|PN3355 - PN3383 Technique. Authorship",794,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBP1 - KBP4860 Islamic law. Shari'ah. Fiqh",793,
        "M - Music|ML1 - ML3930 Literature on music|ML3800 - ML3923 Philosophy and physics of music|ML3845 - ML3877 Aesthetics",793,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM1001 - HM1281 Social psychology|HM1106 - HM1171 Interpersonal relations. Social behavior",791,
        "Q - Science|QL1 - QL991 Zoology|QL605 - QL739.8 Chordates. Vertebrates|QL640 - QL669.3 Reptiles and amphibians",791,
        "G - Geography. Anthropology. Recreation|GF1 - GF900 Human ecology. Anthropogeography|GF500 - GF900 By region or country",790,
        "R - Medicine|RE1 - RE994 Opthamology",788,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal|DP535 - DP682.2 History",787,
        "M - Music|MT1 - MT960 Musical instruction and study|MT5.5 - MT7 Music theory",787,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1221 - GV1469.62 Indoor games and amusements",785,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z678 - Z678.88 Library administration and organization. Constitution",785,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN1008.2 - PN1009.5 Juvenile literature",784,
        "H - Social sciences|HX1 - HX970.7 Socialism. Communism. Anarchism|HX821 - HX970.9 Anarchism",783,
        "E - History: America|E11 - E143 America|E101 - E135 Discovery of America and early explorations|E121 - E135 Post-Columbian period. El Dorado",782,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ2361 - HJ3192.7 By region or country",782,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB2000 - DB3150 Czechoslovakia|DB2700 - DB3150 Slovakia",780,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT93 - CT206 General collective biography",777,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV712 - GV725 Athletic contests. Sports Events",777,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2005 - HJ2216 Income and expenditure. Budget",777,
        "L - Education|LA5 - LA2396 History of education|LA2301 - LA2396 Biography",777,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1100 - PT1141 General",777,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS591 - DS599 Malaysia. Malay Peninsula. Straits Settlements",776,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL2390 - BL2490 African",773,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG600 - DG684.72 Northern Italy",771,
        "Q - Science|QM1 - QM695 Human anatomy|QM1 - QM511 General",768,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD878 - TD894 Special types of environmental pollution (including soil, air, and noise pollution)",766,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2341 - LB2341.95 Supervision and administration. Business management",765,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2835 - NA4050 Details and decoration",764,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1 - JQ1849 Asia|JQ1758 - JQ1852 Middle East. Including Turkey, Iran, Israel, Arabian Peninsula",763,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1651 - PK1799 Bengali",763,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV701 - HV1420.5 Children|HV873 - HV887 Destitute, neglected, and abandoned children. Street children",761,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1190 - RA1270 Toxiciology. Poisons",761,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB183 - SB317 Field crops (including cereals, forage crops, grasses, legumes, root crops, sugar plants, textile plants, alkaloidal plants, medicinal plants)",760,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2830 - PG2847 Belarusian",757,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ5061 - PJ5192 Other languages used by Jews|PJ5111 - PJ5192 Yiddish",757,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP160 - BP165 General works on Islam",756,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology|HV6035 - HV6197 Criminal anthropology (including criminal types, criminal psychology, prison psychology, causes of crime)",755,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F3701 - F3799 Ecuador",754,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History|DR1259 - DR1321 By period",753,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9401 - BX9640 Reformed or Calvinistic Churches",749,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law",748,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC1401 - LC2572 Women",747,
        "L - Education|LF14 - LF5627 Individual institutions|LF14 - LF1257 Great Britain|LF14 - LF797 England",742,
        "Q - Science|QD1 - QD999 Chemistry|QD901 - QD999 Crystallography",742,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5511.2 - JZ6299 Promotion of peace. Peaceful change|JZ5586 - JZ6009 International security. Disarmament",739,
        "S - Agriculture|SK1 - SK663 Hunting",737,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)",737,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z696 - Z697 Classification and notation",736,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV1450 - HV1494 Aged",734,
        "P - Language and literature|PR1 - PR9680 English literature|PR1490 - PR1799 Anglo-Saxon literature",734,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History|DR1259 - DR1321 By period|DR1281 - DR1321 -1918",733,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB1775 - LB1785 Professional aspects of teaching and school administrators. Vocational guidance",733,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.|PN4775 - PN4784 Technique. Practical journalism",733,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation",730,
        "T - Technology.|TR1 - TR1050 Photography|TR845 - TR899 Cinematography. Motion pictures",730,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German|PF5000 - PF5951 Dialects. Provincialism, etc.",729,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary|HV8031 - HV8080 Police duty. Methods of protection",728,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD101 - HD1395.5 Land use|HD1361 - HD1395.5 Real estate business",724,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861",722,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1 - PT80 Literary history and criticism",720,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS41 - DS66 Middle East. Southwestern Asia. Ancient Orient. Arab East. Near East|DS51 - DS54.95 Local history and description",719,
        "Q - Science|QA1 - QA939 Mathematics|QA101 - QA141.8 Elementary mathematics. Arithmetic",716,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D51 - D90 Ancient history",714,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV1 - JV5399 Colonies and colonization|JV500 - JV5399 Colonizing nations",714,
        "Q - Science|QR1 - QR502 Microbiology|QR180 - QR189.5 Immunology",713,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T58.5 - T58.64 Information technology",711,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC950 - NC996 Illustration",710,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB1201 - PB1449 Irish",710,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM101 - PM2711 American languages (Aboriginal)",710,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL74 - BL99 Religions of the world",709,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1421 - F1440 Central America|F1435 - F1435.3 Mayas",709,
        "Q - Science|QC1 - QC999 Physics|QC770 - QC798 Nuclear and particle physics. Atomic energy. Radioactivity|QC793 - QC793.5 Elementary particle physics",708,
        "Q - Science|QK1 - QK989 Botany|QK474.8 - QK495 Spermatophyta. Phanerogams",708,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6061 - PQ6073 Modern",705,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL624 - BL629.5 Religious life",703,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL425 - BL490 Religious doctrines (General)",702,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB2832 - LB2844.1 Teaching personnel",701,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control",699,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5437 - HF5444 Purchasing. Selling. Sales personnel. Sales executives",696,
        "M - Music|MT1 - MT960 Musical instruction and study|MT1 - MT5 History and criticism",695,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9650 - PT9876.36 Individual authors or works|PT9725 - PT9850 19th century",694,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML162 - ML197 Special periods|ML169.8 - ML190 Medieval. Renaissance",691,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT491 - DT516.9 British West Africa|DT515 - DT515.9 Nigeria",690,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1780 - G2799 Eastern Hemisphere. Eurasia, Africa, etc.|G1791 - G2082 Europe",688,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD5306 - HD5474 Labor disputes. Strikes and lockouts",688,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC149 - LC161 Literacy. Illiteracy",688,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT1313 - BT1480 History of specific doctrines and movements. Heresies and schisms",687,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1990 - PN1992.92 Broadcasting|PN1991 - PN1991.9 Radio broadcasts",687,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV8301 - HV9920.7 Penology. Prisons. Corrections|HV9261 - HV9430.7 Reformation and reclamation of adult prisoners",686,
        "C - Auxiliary Sciences of History|CS1 - CS3090 Genealogy|CS2300 - CS3090 Personal or family names",685,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT750 - BT811 Salvation. Soteriology",683,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature|PA3300 - PA3516 Collections",683,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBP1 - KBP4860 Islamic law. Shari'ah. Fiqh|KBP173.25 - KBP0.6 Islamic law and other disciplines or subjects",680,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ400 - PQ491 Poetry",680,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB469 - SB476 Landscape gardening. Landscape architecture",680,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law",678,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLA1 - KLA9999 Russia. Soviet Union",678,
        "N - Fine Arts|N1 - N9211 Visual arts|N81 - N390 Study and teaching. Research",677,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z987 - Z997 Private libraries. Book collecting. Including bibliophilism, bookplates",677,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law",675,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK2200 - NK2750 Furniture",675,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1 - RA418.5 Medicine and the state|RA410 - RA410.9 Medical economics. Economics of medical care. Employment",671,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering",671,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT170 - HT178 Urban renewal. Urban redevelopment",670,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ251 - BQ799 History",669,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK70 - DK112.42 Early to 1613|DK70 - DK99.7 Rus'",669,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ9103 - HJ9695 Local finance. Municipal finance (including the revenue, budget, expenditures of counties, boroughs, municipalities, etc.)",667,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG819 - DG875 Southern Italy",664,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1401 - K1578 Intellectual property",663,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8750 - PT8951.36 Individual authors or works|PT8800 - PT8942 19th century",663,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC215 - LC238.4 Community and the school",662,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z719 - Z725 Libraries (General)",660,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ4835 - JZ5490 International organizations and associations",659,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature|PT175 - PT230 Medieval",659,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ1100 - BQ3340 Tripitaka (Canonical literature)",657,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX650 - NX694 Special subjects, characters, persons, religious arts, etc.",656,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z3501 - Z3975 Africa",655,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine",652,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT348 - DT363.3 Central Sub-Saharan Africa",651,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM695 - RM893 Physical medicine. Physical therapy (including massage, exercise, occupational therapy, hydrotherapy, phototherapy, radiotherapy, thermotherapy, elect",651,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS376 - DS392.2 Pakistan",648,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6099 - PN6110 Poetry",648,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS80 - DS90 Lebanon (Phenicia)",647,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ151 - PQ221 Medieval. Old French",646,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR4501 - CR6305 Chivalry and knighthood (Orders, decorations, etc.)",644,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV7200 - JV7539 Canada, Latin America, etc.",644,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD101 - HD1395.5 Land use|HD1241 - HD1339 Land tenure",641,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN3311 - PN3503 Prose. Prose fiction|PN3427 - PN3448 Special kinds of fiction. Fiction genres",641,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR251 - PR369 Medieval. Middle English (1066-1500)",641,
        "V - Naval science|VA10 - VA750 Navies: Organization, distribution, naval situation|VA400 - VA750 Other regions or countries",641,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD301 - DD454 Prussia",640,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN49 - GN298 Physical anthropology. Somatology|GN281 - GN289 Human evolution",639,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE305 - HE311 Urban transportation",639,
        "N - Fine Arts|N1 - N9211 Visual arts|N4390 - N5098 Exhibitions",636,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History",635,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E806 - E813 Franklin Delano Roosevelt's administrations, 1933-April 12, 1945",634,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT339 - MT533 Wind instruments",634,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC189 - LC214.53 Educational sociology|LC213 - LC214.53 Educational equalization. Right to education",633,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1001 - G1046 World atlases",632,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K5000 - K5582 Criminal law and procedure|K5015.4 - K5350 Criminal law",629,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1780 - G2799 Eastern Hemisphere. Eurasia, Africa, etc.|G2200 - G2444.84 Asia",628,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA5000 - PA5660 Byzantine and modern Greek literature|PA5301 - PA5637 Individual authors",628,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC870 - RC923 Diseases of the genitourinary system. Urology",628,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB71 - HB74 Economics as a science. Relation to other subjects",625,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR471 - PR479 20th century",624,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1 - PJ489 General",623,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK30 - DJK51 History",622,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period",622,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT1772 - DT1974 History",620,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism",618,
        "U - Military science (General)|U1 - U900 Military science (General)|U27 - U43 History of military science",618,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS36 - DS39.2 Arab countries|DS37 - DS39.2 History",617,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z682 - Z682.4 Personnel",616,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1099 - LC1099.5 Multicultural education (General)",612,
        "M - Music|MT1 - MT960 Musical instruction and study|MT40 - MT67 Composition. Elements and techniques of music",612,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6131 - PQ6153 Prose",612,
        "U - Military science (General)|U1 - U900 Military science (General)|U400 - U714 Military education and training",610,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation",607,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2331.7 - LB2335.8 Teaching personnel",606,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2102 - M2114.8 Songs",606,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC799 - RC869 Diseases of the digestive system. Gastroenterology",606,
        "H - Social sciences|HG1 - HG9999 Finance|HG3691 - HG3769 Credit. Debt. Loans (including credit institutions, credit instruments, consumer credit, bankruptcy)",605,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works|PT1701 - PT1797 1500-ca. 1700",600,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E841 - E843 Kennedy's administration, 1961-November 22, 1963",599,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL2000 - BL2032 India",598,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1139.2 - LB1139.5 Early childhood education",596,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1110 - PN1279 History and criticism",595,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP166 - BP166.94 Theology (Kalam)",594,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism|PG3041 - PG3065 Poetry",594,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR441 - PR449 18th century",594,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF201 - JF619 Organs and functions of government",592,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9650 - PT9876.36 Individual authors or works|PT9876 - PT9876.36 1961-2000",592,
        "U - Military science (General)|U1 - U900 Military science (General)|U161 - U163 Strategy",592,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing",590,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL950 - PL998 Korean literature|PL986 - PL993 Individual authors and works",589,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1075 - HQ1075.5 Sex role",588,
        "J - Political Science|JA1 - JA92 Political science (General)|JA81 - JA84 History",588,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1 - RA418.5 Medicine and the state|RA418 - RA418.5 Medicine and society. Social medicine. Medical sociology",588,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1 - RA418.5 Medicine and the state|RA407 - RA409.5 Health status indicators. Medical statistics and surveys",585,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members",584,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3950 - LC4806.5 Exceptional children and youth. Special education|LC3991 - LC4000 Gifted children and youth",584,
        "W - Health Sciences",584,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1035 - Z1035.9 Best books",584,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT154.1 - DT159.9 Sudan. Anglo-Egyptian Sudan",583,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G200 - G336 History of discoveries, explorations, and travel",583,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5387 - HF5387.5 Business ethics",583,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5717 - HF5734.7 Business communication",583,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4077 - PQ4088 Modern",582,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology|HV6201 - HV6249 Criminal classes",580,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1300 - ND1337 Portraits",577,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations",576,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT19 - BT37 Doctrine and dogma",575,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2695 - NA2793 Architectural drawing and design",575,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal|DP535 - DP682.2 History|DP558 - DP682.2 By period",574,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium",572,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland",568,
        "T - Technology.|T1 - T995 Technology (General)|T14.7 - T33 History of technology",568,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P901 - P1091 Extinct ancient or medieval languages",567,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1940 - NE2232.5 Etching and aquatint",565,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF231 - BF299 Sensation. Aesthesiology",564,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA565 - RA600 Environmental health (including sewage disposal, air pollution, nuisances, water supply)",564,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS125 - BS355 Modern texts and versions",563,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT697 - TT927 Home arts. Homecrafts (including sewing, embroidery, decorative crafts)",561,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium",559,
        "J - Political Science|J1 - J981 General legislative and executive papers|J100 - J981 Other regions and countries",557,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9191 - PQ9255 Individual authors and works, 1500-1700",553,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1101 - GV1150.9 Fighting sports: Bullfighting, boxing, fencing, etc.",552,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P99 - P99.4 Semiotics. Signs and symbols",552,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B69 - B99 General works",551,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary|HV7935 - HV8025 Administration and organization",551,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS6950 - JS7509 Asia",551,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML198 - ML360 By region or country|ML198 - ML239 America",550,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE9761 - HE9900 Air transportation. Airlines",549,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN451 - PN497 Biography",549,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8201 - BX8495 Methodism",548,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ8001 - HJ8899 Public debts",547,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML198 - ML360 By region or country|ML330 - ML345 Asia",546,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P325 - P325.5 Semantics",546,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6201 - BX6495 Baptists",545,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2061 - PN2071 Art of acting",545,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1160 - NK1590 Decoration and ornament. Design|NK1175 - NK1498 History",544,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology|GB561 - GB649 Other natural landforms: floodplains, caves, deserts, dunes, etc.",543,
        "A - General Works|AE1 - AE88 Encyclopedias",542,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6080 - PN6095 Quotations",539,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4091 - PQ4131 Poetry",538,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR421 - PR429 Elizabethan era (1550-1640)",538,
        "Q - Science|QC1 - QC999 Physics|QC350 - QC467 Optics. Light|QC450 - QC467 Spectroscopy",538,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL300 - BL325 The myth. Comparative mythology",537,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS92 - DS99 Syria",536,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E310 - E337 1789-1809. Constitutional period|E311 - E320 Washington's administrations, 1789-1797",536,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography|GA341 - GA1776 Maps. By region or country",534,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1 - PN9 Periodicals",534,
        "Q - Science|QK1 - QK989 Botany|QK640 - QK673 Plant anatomy",534,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works|AC1 - AC195 Collections of monographs, essays, etc.|AC1 - AC8 American and English",532,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN5201 - JN5690 Italy",530,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL5051 - PL5497 Malayan (Indonesian) languages",528,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV697 - HV700.7 Families. Mothers. Widow's pensions",527,
        "B - Philosophy. Psychology. Religion|BH1 - BH301 Aesthetics|BH81 - BH208 History",524,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS351 - HS929 Freemasons",523,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV4480 - HV4630 Mendicancy. Vagabondism. Tramps. Homelessness",523,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT341 - TT641 Nutrition. Foods and food supply",522,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ4543 - PJ4937 Language (Biblical and modern)",521,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK2901 - PK2979 General",521,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6098.7 - PQ6129 Drama",521,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG1100 - UG1435 Equipment and supplies",521,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1140 - LB1140.5 Preschool education. Nursery schools",520,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM7801 - PM7895 Mixed languages",520,
        "Q - Science|QB1 - QB991 Astronomy|QB980 - QB991 Cosmogony. Cosmology",519,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB2000 - DB3150 Czechoslovakia|DB2300 - DB2650 Local history and description of Czech lands",517,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS31 - DS35.2 History",517,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV4023 - HV4470.7 Poor in cities. Slums",516,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC361 - LC629 Christian education. Church education",516,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1001 - PJ1989 Egyptology",516,
        "E - History: America|E11 - E143 America|E101 - E135 Discovery of America and early explorations|E111 - E120 Columbus",515,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training|GV460 - GV555 Gymnastics. Gymnastic exercises (including calisthenics, heavy exercises, acrobatics, etc.)",515,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism|PG3091 - PG3099 Prose",509,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN851 - PN884 Comparative literature",509,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP600 - BP610 Other beliefs and movements",507,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD84 - DD257.4 History|DD121 - DD257.4 By period|DD125 - DD174.6 Early and medieval to 1519",506,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ4835 - JZ5490 International organizations and associations|JZ4850 - JZ5490 Intergovernmental organizations. IGOs",506,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT8050 - PT8176.36 Individual authors or works|PT8100 - PT8167 19th century",506,
        "R - Medicine|RB1 - RB214 Pathology|RB37 - RB56.5 Clinical pathology. Laboratory technique",506,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK1001 - TK1841 Production of electric energy or power. Powerplants. Central stations",504,
        "Q - Science|QC1 - QC999 Physics|QC81 - QC114 Weights and measures",503,
        "B - Philosophy. Psychology. Religion|BF1001 - BF1389 Parapsychology|BF1001 - BF1045 Psychic research. Psychology of the conscious",502,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL901 - PL949 Korean language",502,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases|SB621 - SB795 Plant pathology",502,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB1001 - GB1199.6 Groundwater. Hydrogeology",501,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6075 - PQ6098 Poetry",501,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD131 - SD247.5 History of forestry. Forest conditions",501,
        "Q - Science|QH1 - QH278.5 Natural history (General)|QH201 - QH278.5 Microscopy",500,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2000 - M2007 Oratorios",499,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC321 - RC571 Neurosciences. Biological psychiatry. Neuropsychiatry|RC346 - RC429 Neurology. Diseases of the nervous system|RC423 - RC429 Speech and language disorders",499,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1501 - LB1547 Primary education",498,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P87 - P96 Communication. Mass media|P95 - P95.6 Oral communication. Speech",498,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS901 - DS937 Korea|DS904.8 - DS922.46 History|DS918 - DS921.8 War and intervention, 1950-1953",497,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G521 - G539 Adventures, shipwrecks, buried treasure, etc.",497,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature|PA3601 - PA3681 Translations",496,
        "Q - Science|QC1 - QC999 Physics|QC251 - QC338.5 Heat",496,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ500 - PQ591 Drama",493,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration|JL1 - JL500 Canada",492,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature|PT605 - PT709 Drama",492,
        "T - Technology.|T1 - T995 Technology (General)|T173.2 - T174.5 Technological change",491,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS13 - DS28 Ethnography",490,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1 - PJ489 General|PJ1 - PJ195 Languages",490,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB2831.6 - LB2831.99 Administrative personnel",489,
        "U - Military science (General)|UF1 - UF910 Artillery",489,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2326.4 - LB2330 Institutions of higher education",488,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT819 - BT891 Eschatology. Last things",487,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1491 - HD1492.5 Cooperative agriculture",487,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1293 - NB1895 Special forms",487,
        "Q - Science|QE1 - QE996.5 Geology|QE901 - QE996.5 Paleobotany",486,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU108 - DU117.2 History",484,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN8101 - JN8399 Spain",484,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes",484,
        "T - Technology.|TX1 - TX1110 Home economics.|TX901 - TX946.5 Hospitality industry. Hotels, clubs, restaurants, food service, etc.",484,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine",482,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1003 - Z1003.5 Choice of books. Books and reading. Book reviews",482,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK3591 - PK4485 Sanskrit",480,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z266 - Z276 Bookbinding. Book decoration",480,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC997 - NC1003 Commercial art. Advertising art",479,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV6201 - JV6348 Immigration",478,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ450 - HQ472 Erotica",477,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation",477,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK7800 - TK8360 Electronics|TK7885 - TK7895 Computer engineering. Computer hardware",475,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT1095 - BT1255 Apologetics. Evidences of Christianity",474,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5428 - HF5429.6 Retail trade",474,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1001 - RA1171 Forensic medicine. Medical jurisprudence. Legal medicine",474,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB2001 - PB3029 Brittanic group",473,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E876 - E880 Reagan's administrations, 1981-1989",472,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK401 - PK976 Sanskrit",472,
        "L - Education|LE3 - LE78 Individual institutions",471,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)",471,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States|DT301 - DT330 Morocco",470,
        "M - Music|MT1 - MT960 Musical instruction and study|MT820 - MT915 Singing and vocal technique",470,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects",470,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1019 - Z1033 Special classes of books. Including prohibited books, rare books, paperbacks, reprints",470,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT3200 - CT9999 Biography. By subject|CT3200 - CT3830 Biography of women (Collective)",469,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU400 - DU430 New Zealand",468,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1562.5 - BF1584 Witchcraft",467,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period",467,
        "R - Medicine|RF1 - RF547 Otorhinolaryngology",465,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9131 - PQ9188 Collections",464,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P501 - P769 Indo-European (Indo-Germanic) philology",463,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC401 - TC506 River, lake, and water-supply engineering (General)",463,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM101 - PM2711 American languages (Aboriginal)|PM549 - PM2711 Special languages of the United States and Canada (alphabetically)",462,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT595 - BT680 Mary, Mother of Jesus Christ. Mariology",461,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden",460,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ4629 - HJ4830 Income tax",459,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement",459,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6690 - JN6699 Russia (Federation)",458,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures|PK1931 - PK1970 Hindi language",458,
        "U - Military science (General)|U1 - U900 Military science (General)|U263 - U264.5 Atomic warfare. Atomic weapons",458,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1088 - HQ1090.7 Men",457,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3260 - PG3299 Prose",457,
        "T - Technology.|TS1 - TS2301 Manufactures|TS200 - TS770 Metal manufactures. Metalworking",457,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS561 - DS589 Thailand (Siam)",456,
        "D - History (General) and History of Europe|DX101 - DX301 History of Gypsies",456,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2155 - F2191 Caribbean area. Caribbean Sea",456,
        "B - Philosophy. Psychology. Religion|BC1 - BC199 Logic|BC171 - BC199 Special topics",454,
        "Q - Science|QR1 - QR502 Microbiology|QR75 - QR99.5 Bacteria",454,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1585 - BF1623 Magic. Hermetics. Necromancy",453,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA700 - DA745 Wales",453,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G80 - G99 History of geography",453,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ8001 - HJ8899 Public debts|HJ8101 - HJ8899 By region or country",453,
        "A - General Works|AG2 - AG600 Dictionaries and other general reference works",452,
        "A - General Works|AY10 - AY2001 Yearbooks. Almanacs. Directories",451,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL550 - BL619 Worship. Cultus",451,
        "E - History: America|E151 - E889 United States|E171 - E183.9 History|E171 - E180 General|E175 - E175.7 Historiography",451,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT220 - MT255 Piano",451,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8001 - BX8080 Lutheran churches",450,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS41 - DS66 Middle East. Southwestern Asia. Ancient Orient. Arab East. Near East|DS51 - DS54.95 Local history and description|DS54 - DS54.95 Cyprus",449,
        "L - Education|LG21 - LG961 Individual institutions",449,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E838 - E840.8 General|E840 - E840.3 Diplomatic history. Foreign and general relations",447,
        "B - Philosophy. Psychology. Religion|BF1001 - BF1389 Parapsychology|BF1048 - BF1108 Hallucinations. Sleep. Dreaming. Visions",446,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D242 - D283.5 1601-1715. 17th century",446,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR4501 - CR6305 Chivalry and knighthood (Orders, decorations, etc.)|CR4651 - CR6305 Orders, etc.",444,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK501 - JK901 Executive branch|JK631 - JK873 Civil Service. Departments and agencies",444,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC2700 - PC3708 Dialects. Provincialisms|PC3201 - PC3366 Provencal (Old)",442,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1 - RA418.5 Medicine and the state|RA411 - RA415 Provisions for personal medical care. Medical care plans",441,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z657 - Z659 Freedom of the press. Censorship",441,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG1801 - PG1962 Slovenian",440,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR32 - DR48.5 History. Balkan War, 1912-1913",439,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5548.7 - HF5548.85 Industrial psychology",439,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC189 - LC214.53 Educational sociology|LC212 - LC212.86 Discrimination in education",439,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP785 - TP869 Clay industries. Ceramics. Glass",439,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV770.3 - GV840 Water sports: Canoeing, sailing, yachting, scuba diving, etc.",438,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)",437,
        "L - Education|L7 - L991 Education (General)|L900 - L991 Directories of educational institutions",436,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP171 - BP173 Relation of Islam to other religions",435,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC71 - RC78.7 Examination. Diagnosis (including radiography)",435,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature|PT500 - PT597 Poetry",434,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS331 - DS349.9 Southern Asia. Indian Ocean Region",433,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF697 - BF697.5 Differential psychology. Individuality. Self",431,
        "Q - Science|QD1 - QD999 Chemistry|QD241 - QD441 Organic chemistry|QD415 - QD436 Biochemistry",429,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments",428,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1340 - ND1367 Landscape painting",428,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP248.13 - TP248.65 Biotechnology",428,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF201 - JF619 Organs and functions of government|JF441 - JF619 Legislation. Legislative process. Law",426,
        "R - Medicine|RD1 - RD811 Surgery|RD701 - RD811 Orthopedic surgery",426,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8901 - BX9225 Presbyterianism. Calvinistic Methodism",425,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA4050 - ZA4750 Information in specific formats or media",425,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE6000 - HE7500 Postal service. Stamps. Philately",424,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC581 - RC607 Immunologic diseases. Allergy",424,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E310 - E337 1789-1809. Constitutional period|E331 - E337 Jefferson's administrations, 1801-1809",421,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL700 - PL889 Japanese literature|PL700 - PL751.5 History and criticism",421,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC1200 - RC1245 Sports medicine",421,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB221 - HB236 Price",420,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB1805 - LB2151 State teachers colleges",420,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS801 - DS897 Japan|DS894.21 - DS897 Local history and description",419,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB3602 - LB3640 School life. Student manners and customs",419,
        "Q - Science|QB1 - QB991 Astronomy|QB460 - QB466 Astrophysics",419,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD95 - BD131 Metaphysics",418,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD172 - TD193.5 Environmental pollution",418,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV800 - BV873 Sacraments. Ordinances",417,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E341 - E370 Madison's administrations, 1809-1817",416,
        "Q - Science|QA1 - QA939 Mathematics|QA71 - QA90 Instruments and machines|QA75 - QA76.95 Calculating machines|QA75.5 - QA76.95 Electronic computers. Computer science|QA76.75 - QA76.76 Computer software",416,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4061 - BQ4570 Doctrinal and systematic Buddhism",414,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV3750 - BV3799 Evangelism. Revivals",414,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ3995 - JQ6651 Australia. New Zealand. Pacific Ocean islands",414,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M1200 - M1269 Band",414,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP500 - TP660 Fermentation industries. Beverages. Alcohol",414,
        "U - Military science (General)|UH20 - UH910 Other services",414,
        "E - History: America|E151 - E889 United States|E186 - E199 Colonial history (1607-1775)",413,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology|GN357 - GN367 Culture and cultural processes",413,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG500 - PG585 Slavic literature (General)",412,
        "T - Technology.|TN1 - TN997 Mining engineering. Metallurgy.|TN600 - TN799 Metallurgy",412,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B770 - B785 Renaissance",411,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z679 - Z680 Library buildings. Library architecture. Including planning, space utilization, security, safety, lighting, etc.",411,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM481 - HM554 Theory. Method. Relations to other subjects",410,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2115 - M2146 Hymnals. Hymn collections",407,
        "R - Medicine|RB1 - RB214 Pathology|RB151 - RB214 Theories of disease. Etiology. Pathogenesis",406,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT371 - DT390 Ethiopia (Abyssinia)",405,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature|PL8009.5 - PL8014 Literature",405,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS901 - DS937 Korea|DS930 - DS937 Democratic People's Republic, 1948-",404,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD240 - BD260 Methodology",403,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History|DR481 - DR605 By period|DR576 - DR605 20th century. Constitutional movement",403,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM661 - HM696 Social control",403,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC251 - LC318 Moral education. Character building",403,
        "R - Medicine|RD1 - RD811 Surgery|RD1 - RD31.7 General works",403,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK9001 - TK9401 Nuclear engineering. Atomic power",403,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA4050 - ZA4750 Information in specific formats or media|ZA4050 - ZA4460 Electronic information resources",403,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX5800 - BX5995 Protestant Episcopal Church in the United States of America",401,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV4701 - HV4890.9 Protection of animals. Animal rights. Animal welfare",401,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK5500 - NK6060 Glyptic arts",401,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration|JL1200 - JL1299 Mexico",400,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD169 - TD171.8 Environmental protection",400,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP70 - BP80 Biography",399,
        "Q - Science|QE1 - QE996.5 Geology|QE500 - QE639.5 Dynamic and structural geology|QE601 - QE613.5 Structural geology",398,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education",397,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG601 - PG716 Church Slavic",397,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8751 - HG9295 Life insurance",396,
        "R - Medicine|RB1 - RB214 Pathology|RB127 - RB150 Manifestation of disease",396,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing|Z240 - Z241.5 Incunabula. Block books. Including broadsides, playing cards",396,
        "Q - Science|QL1 - QL991 Zoology|QL801 - QL950.9 Anatomy",395,
        "Q - Science|QL1 - QL991 Zoology|QL951 - QL991 Embryology",394,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU120 - DU125 Ethnography",393,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM7801 - PM7895 Mixed languages|PM7831 - PM7875 Creole languages",393,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6110.5 - PN6120 Drama",392,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1060.5 - GV1098 Track and field athletics",391,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT561 - DT581 Cameroon (Cameroun, Kamerun)",390,
        "F - America: local history|F1 - F975 United States local history|F786 - F790 New Southwest. Colorado River, Canyon, and Valley",387,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1900 - M1978 Songs (part and solo) of special character",387,
        "B - Philosophy. Psychology. Religion|BC1 - BC199 Logic|BC60 - BC99 General works",386,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK70 - DK112.42 Early to 1613|DK99.8 - DK112.42 Muscovy",386,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE380.8 - HE971 Water transportation|HE380.8 - HE560 Waterways",384,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF7000 - KF7999",384,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK845 - DK860 Soviet Central Asia. West Turkestan",383,
        "N - Fine Arts|N1 - N9211 Visual arts|N8700 - N9165 Art and the state. Public art",383,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4161 - PQ4185 Prose",383,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD783 - TD812.5 Municipal refuse. Solid wastes",383,
        "T - Technology.|TN1 - TN997 Mining engineering. Metallurgy.|TN400 - TN580 Ore deposits and mining of particular metals",383,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z700.9 - Z701.5 Preservation, conservation and restoration of books, etc.",383,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA10 - DA18.2 British Empire. Commonwealth of Nations. The Commonwealth",382,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD4861 - HD4895 Labor systems",381,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN3311 - PN3503 Prose. Prose fiction|PN3329 - PN3352 Philosophy, theory, etc.",381,
        "Q - Science|QC1 - QC999 Physics|QC474 - QC496.9 Radiation physics (General)",381,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM214 - RM258 Diet therapy. Diet and dietetics in disease. Dietary cookbooks",380,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG443 - UG449 Attack and defense. Siege warfare",380,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ807 - TJ830 Renewable energy sources",379,
        "L - Education|LA5 - LA2396 History of education|LA31 - LA135 By period",378,
        "V - Naval science|V1 - V995 Naval science (General)|V750 - V995 War vessels: Construction, armament, etc.",378,
        "A - General Works|AE1 - AE88 Encyclopedias|AE5 - AE88 By language",377,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8750 - PT8951.36 Individual authors or works|PT8951 - PT8951.36 1961-2000",377,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC750 - QC766 Magnetism",376,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU520 - DU950 Smaller Island Groups|DU620 - DU629 Hawaiian Islands. Hawaii",375,
        "U - Military science (General)|UB1 - UB900 Military administration|UB250 - UB271 Intelligence",375,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE380.8 - HE971 Water transportation|HE561 - HE971 Shipping|HE730 - HE943 Merchant marine. Ocean shipping. Coastwise shipping",374,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL700 - PL889 Japanese literature|PL752 - PL783 Collections",373,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1800 - GV1860 Circuses, spectacles, etc. (including rodeos, waxworks, amusement parks, etc.)",372,
        "Q - Science|QC1 - QC999 Physics|QC120 - QC168.85 Descriptive and experimental mechanics",372,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T58.5 - T58.64 Information technology|T58.6 - T58.62 Management information systems",372,
        "A - General Works|AM1 - AM401 Museums. Collectors and collecting|AM10 - AM100 By country",371,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.|G8200 - G8904 Africa",371,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)|BV169 - BV199 Liturgy and ritual",370,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB1805 - LB2151 State teachers colleges|LB1811 - LB1987 United States",370,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG1151 - PG1199 Macedonian",370,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA648.5 - RA767 Epidemics. Epidemology. Quarantine. Disinfection",370,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4600 - DK4800 Local history and description",369,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR700 - GR860 Animals, plants, and minerals",369,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea",369,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3199 - PG3205 General",369,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ212 - TJ225 Control engineering systems. Automatic machinery (General)",369,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1271.2 - BL1295 Modifications. Sects",368,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4430 - K4675 Public finance",368,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3223 - PG3229.2 Special periods",368,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases|SB950 - SB990.5 Pest control and treatment of diseases. Plant protection",368,
        "L - Education|LF14 - LF5627 Individual institutions|LF2402 - LF3197 Germany",367,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3581 - K3598 Environmental law",366,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC648 - RC665 Diseases of the endocrine glands",366,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC705 - RC779 Diseases of the respiratory system",366,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV2000 - BV3705 Missions|BV2123 - BV2595 Special churches",365,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF1338 - JF2112 Public administration|JF2011 - JF2112 Political parties",364,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1030 - NE1196.3 History",364,
        "N - Fine Arts|NE1 - NE3002 Print media|NE2250 - NE2570 Lithography",364,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1700 - NK2195 Interior decoration. House decoration",364,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1151 - PT1241 Poetry",364,
        "F - America: local history|F1 - F975 United States local history|F1 - F15 New England",361,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1720 - PN1861 History",361,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D101 - D110.5 Medieval and modern history, 476-",360,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature|PA6101 - PA6140 Collections",360,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC952 - RC954.6 Geriatrics",360,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-|DP170 - DP189 1516-1700. Hapsburgs",359,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT433.5 - DT434 Kenya",359,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT641 - HT657 Classes arising from birth",359,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB2001 - PB3029 Brittanic group|PB2101 - PB2499 Welsh. Cymric",359,
        "R - Medicine|RL1 - RL803 Dermatology",359,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB320 - SB353.5 Vegetables",359,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal|DP535 - DP682.2 History|DP558 - DP682.2 By period|DP620 - DP682.2 -1580",358,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ840 - BQ999 Biography",356,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT491 - DT516.9 British West Africa|DT509.97 - DT512.9 Ghana (Gold Coast)",355,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1300 - PQ1595 Old French literature (To ca. 1500/1550)|PQ1300 - PQ1391 Collections",355,
        "P - Language and literature|PE1 - PE3729 English language|PE101 - PE458 Anglo-Saxon. Old English",354,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF1 - PF979 Dutch",354,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG940 - RG991 Maternal care. Prenatal care services",353,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR500 - GR615 Supernatural beings, demonology, fairies, ghosts, charms, etc.",352,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History|DR1259 - DR1321 By period|DR1281 - DR1321 -1918|DR1313 - DR1313.8 Yugoslav War, 1991-1995",351,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT591 - DT615.9 Portuguese-speaking West Africa",351,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E885 - E889 Clinton administration, 1993-2001",351,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV9950 - HV9960 By region or country",351,
        "J - Political Science|J1 - J981 General legislative and executive papers|J10 - J98 United States",351,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ163.12 - TJ163.25 Power resources",351,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC633 - RC647.5 Diseases of the blood and blood-forming organs",349,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC925 - RC935 Diseases of the musculoskeletal system",349,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia",348,
        "T - Technology.|TS1 - TS2301 Manufactures|TS1300 - TS1865 Textile industries",348,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV1460 - BV1615 Religious education (General)",347,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK507 - DK507.95 Belarus. Byelorussian S.S.R.  White Russia",347,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR701 - DR741 Local history and description (European Turkey)",347,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E855 - E861 Nixon's administrations, 1969-August 9, 1974",347,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1700 - NK2195 Interior decoration. House decoration|NK1700 - NK2138 General. History, etc.  Including special rooms",347,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF411 - SF459 Pets",347,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB111 - GB398.7 By region or country",346,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF51 - JF56 General works. History",346,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E300 - E302.6 General",345,
        "Q - Science|QR1 - QR502 Microbiology|QR100 - QR130 Microbial ecology",345,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG600 - RG650 The embryo and fetus",345,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA329 - TA348 Engineering mathematics. Engineering analysis",344,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC65 - LC67.68 Economic aspects of education",343,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z689 - Z689.8 Acquisition (selection, purchase, gifts, duplicates)",343,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN3311 - PN3503 Prose. Prose fiction|PN3451 - PN3503 History",342,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM480 - BM488.8 Pre-Talmudic Jewish literature (non-Biblical)",341,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS633 - DS644.46 History",341,
        "B - Philosophy. Psychology. Religion|BF1001 - BF1389 Parapsychology|BF1228 - BF1389 Spiritualism",340,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K625 - K709 Persons",340,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)|BV301 - BV530 Hymnology",339,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX4872 - BX4924 Pre-Reformation",338,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1410 - ND1460 Other subjects",338,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC1 - NC45 General. Including collective biography",337,
        "N - Fine Arts|ND25 - ND3416 Painting|ND2550 - ND2733 Mural painting",337,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ840 - BQ999 Biography|BQ860 - BQ999 Individual",336,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA703 - TA712 Engineering geology. Rock mechanics. Soil mechanics. Underground construction",336,
        "T - Technology.|TS1 - TS2301 Manufactures|TS1080 - TS1268 Paper manufacture and trade",336,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ210.2 - TJ211.47 Mechanical devices and figures. Automata. Ingenious mechanisms. Robots (General)",335,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP70 - BP80 Biography|BP75 - BP77.75 Muhammad, Prophet, d. 632",334,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ125 - RJ145 Physiology of children and adolescents",334,
        "B - Philosophy. Psychology. Religion|BJ1801 - BJ2195 Social usages. Etiquette",333,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML549.8 - ML649 Organ",332,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7601 - BX7795 Friends. Society of Friends. Quakers",331,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology|GN378 - GN396 Collected dthnographies",331,
        "U - Military science (General)|U1 - U900 Military science (General)|U799 - U897 History of arms and armor",331,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB801 - HB843 Consumption. Demand",330,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3310 - PG3319 18th century",330,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9715 - HD9717.5 Construction industry",329,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ4835 - JZ5490 International organizations and associations|JZ4850 - JZ5490 Intergovernmental organizations. IGOs|JZ4935 - JZ5160 The United Nations",329,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA630 - TA695 Structural engineering (General)",329,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E341 - E370 Madison's administrations, 1809-1817|E351.5 - E364.9 War of 1812",328,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3200 - G3202 World maps",328,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS2501 - HS3371 Clubs. Clubs and societies for special classes (including boys' societies, Boy Scouts, girls' societies)",328,
        "H - Social sciences|HX1 - HX970.7 Socialism. Communism. Anarchism|HX806 - HX811 Utopias. The ideal state",327,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK1717 - JK2248 Political rights. Practical politics|JK1846 - JK1936 Suffrage",326,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD10 - BD41 General philosophical works",324,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN661 - PN694 Medieval (to 1500)|PN683 - PN687 Legends",324,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC963 - RC969 Industrial medicine. Industrial hygiene",324,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN49 - GN298 Physical anthropology. Somatology|GN62.8 - GN263 Human variation",322,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT401 - HT485 Rural groups. Rural sociology",322,
        "R - Medicine|R5 - R920 Medicine (General)|R726.5 - R726.8 Medicine and disease in relation to psychology, terminal care, dying",322,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1940 - NE2232.5 Etching and aquatint|NE1980 - NE2055.5 History",321,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC200 - GC376 Dynamics of the ocean",320,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD411 - SD428 Conservation and protection",320,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM1 - BM449 General|BM150 - BM449 History|BM201 - BM449 By region or country",319,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K321 - K474 Schools of legal theory|K366 - K380 Sociology of law. Sociological jurisprudence",319,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT259 - MT338 String instruments",318,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S900 - S946.5 Conservation of natural resources (Including land conservation)",318,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH219 - SH321 By region or country",318,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP368 - TP456 Food processing and manufacture",318,
        "C - Auxiliary Sciences of History|CE1 - CE97 Technical Chronology. Calendar",317,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT361 - HT384 Urbanization. City and country",317,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-|DP201 - DP232.6 1808-1886. 19th century",316,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB1201 - GB1598 Rivers. Stream measurements",316,
        "R - Medicine|RT1 - RT120 Nursing|RT89 - RT120 Specialties in nursing",316,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV551.2 - HV639 Emergency management|HV553 - HV639 Relief in case of disasters|HV599 - HV639 Special types of disasters",315,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC319 - JC323 Political geography",315,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P301 - P301.5 Style. Composition. Rhetoric",315,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1225.2 - BL1243.58 Religious life",313,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D284 - D297 1715-1789. 18th century",313,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF636 - BF637 Applied psychology",311,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF692 - BF692.5 Psychology of sex. Sexual behavior",311,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL425 - BL490 Religious doctrines (General)|BL473 - BL490 Other",311,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4430 - K4675 Public finance|K4453 - K4640 National revenue",311,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML649.8 - ML747 Piano, clavichord, harpsichord, etc.",311,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG633 - UG635 By region or country",311,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL500 - BL547 Eschatology",310,
        "E - History: America|E11 - E143 America|E11 - E29 General",310,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)|BV205 - BV287 Prayer",309,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH101 - PH405 Finnish",308,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ811 - HQ960.7 Divorce",307,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ6360 - JZ6377 Non-military coercion",307,
        "N - Fine Arts|N1 - N9211 Visual arts|N8600 - N8675 Economics of art",307,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History|DR481 - DR605 By period|DR485 - DR555.7 1281/1453-1789. Fall of Constantinople, 1453",305,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ799.5 - HQ799.9 Young men and women",305,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK600 - NK806 History",305,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT546.1 - DT546.49 French-speaking Equatorial Africa",304,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1221 - GV1469.62 Indoor games and amusements|GV1469.15 - GV1469.62 Computer games. Video games. Fantasy games",303,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV701 - HV1420.5 Children|HV888 - HV907 Children with disabilities",303,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD511 - TD780 Sewage collection and disposal systems",303,
        "A - General Works|AZ101 - AZ999 History of scholarship and learning. The humanities|AZ501 - AZ908 By region or country",302,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1444 - BF1486 Ghosts. Apparitions. Hauntings",302,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z4 - Z8 History of books and bookmaking",302,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS527 - DS530.9 Burma",301,
        "V - Naval science|VA10 - VA750 Navies: Organization, distribution, naval situation|VA49 - VA395 United States",301,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KU1 - KU4999 Australia",300,
        "P - Language and literature|PR1 - PR9680 English literature|PR125 - PR138.5 Relations to other literatures and countries",299,
        "R - Medicine|RK1 - RK715 Dentistry|RK301 - RK493 Oral and dental medicine. Pathology. Diseases",299,
        "E - History: America|E151 - E889 United States|E186 - E199 Colonial history (1607-1775)|E186 - E189 General",298,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD5106 - HD5267 Hours of labor (including overtime, shift work, sick leave, vacations)",298,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL2390 - BL2490 African|BL2420 - BL2460 Egyptian",297,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL689 - BL980 European. Occidental|BL900 - BL980 Other European",297,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK3591 - PK4485 Sanskrit|PK3791 - PK3799 Individual authors and works",297,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism|PQ9000 - PQ9034 General",297,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT450 - DT450.49 Rwanda. Ruanda-Urundi",296,
        "E - History: America|E151 - E889 United States|E660 - E738 Late nineteenth century, 1865-1900|E660 - E664 General",296,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1660 - PN1693 Technique of dramatic composition",296,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB354 - SB402 Fruit culture and orchard care",296,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB481 - SB485 Parks and public reservations (including works on theory, management, history)",296,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9665 - HD9675 Pharmaceutical industry",295,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli",295,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT580 - MT599 Guitar",295,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG551 - RG591 Pregnancy",295,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1528 - M1529.5 Duets, trios, etc., for solo voices",294,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT8050 - PT8176.36 Individual authors or works|PT8176 - PT8176.36 1961-2000",294,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology|GB450 - GB460 Coasts",293,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML430 - ML455 Composition",293,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P98 - P98.5 Computational linguistics. Natural language processing",293,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z674.7 - Z674.83 Library information networks",293,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP595 - BP597 Anthroposophy",290,
        "H - Social sciences|HX1 - HX970.7 Socialism. Communism. Anarchism|HX626 - HX696 Communism: Utopian socialism, collective settlements",290,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1041 - LC1048 Vocational education (General)",290,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6000 - PT6466.36 Flemish literature since 1830",290,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC401 - GC881 Oceanography. By region",289,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ221 - KZ1152 By region or country",289,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1560 - PN1590 The performing arts. Show business",289,
        "R - Medicine|R5 - R920 Medicine (General)|R728 - R733 Practice of medicine. Medical practice economics",288,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD201 - TD500 Water supply for domestic and industrial purposes|TD419 - TD428 Water pollution",288,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4850 - KZ5490 Intergovernmental organizations. IGOs",287,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States|DT211 - DT239 Libya",286,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV680 - HV696 Free professional services (including medical charities)",285,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7101 - PT7211 Literary history and criticism",285,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship",284,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH601 - PH671 Estonian",284,
        "A - General Works|AY10 - AY2001 Yearbooks. Almanacs. Directories|AY30 - AY1730 Almanacs",282,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX100 - BX189 Eastern churches. Oriental churches",282,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States|DT241 - DT269 Tunisia (Tunis)",282,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G3290 - G5668 America. Western Hemisphere|G5200 - G5668 South America",282,
        "L - Education|L7 - L991 Education (General)|L111 - L791 Official documents, reports, etc.",282,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT3701 - PT3971 Provincial, local, colonial, etc.|PT3701 - PT3746 East Germany",282,
        "C - Auxiliary Sciences of History|CD1 - CD6471 Diplomatics. Archives. Seals|CD5001 - CD6471 Seals",281,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB3201 - LB3325 School architecture and equipment. School physical facilities. Campus planning",281,
        "Q - Science|QR1 - QR502 Microbiology|QR355 - QR502 Virology",281,
        "R - Medicine|RD1 - RD811 Surgery|RD78.3 - RD87.3 Anesthesiology",280,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1310 - NE1326.5 Japanese prints",279,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1221 - GV1469.62 Indoor games and amusements|GV1312 - GV1469 Board games. Move games",278,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1501 - HS2460.7 Other societies. By classes",278,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT321 - HT325 The city as economic factor. City promotion",278,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG8001 - PG9146 Baltic|PG8501 - PG8772 Lithuanian",278,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1001 - LC1024 Humanistic education. liberal education",277,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD391 - SD410.9 Sylviculture",277,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS161 - DS195.5 Armenia",276,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E740 - E749 General|E743 - E743.5 Political history",276,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1130 - ND1156 General works",276,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK9600 - NK9955 Woodwork",276,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1910 - NB1952 Special subjects",274,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1001 - PJ1989 Egyptology|PJ1481 - PJ1989 Literature. Inscriptions",274,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages",274,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP315 - TP360 Fuel",274,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1651 - BF1729 Astrology",273,
        "E - History: America|E151 - E889 United States|E660 - E738 Late nineteenth century, 1865-1900|E666 - E670 Johnson's administration, April 15, 1865-1869",273,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G100.5 - G108.5 Toponymy",273,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA349 - TA359 Mechanics of engineering. Applied mechanics",273,
        "R - Medicine|RF1 - RF547 Otorhinolaryngology|RF110 - RF320 Otology. Diseases of the ear",272,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History|DK4429 - DK4442 1945-1989. People's Republic",270,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden|DL643 - DL879 History",270,
        "C - Auxiliary Sciences of History|CB3 - CB482 History of Civilization|CB440 - CB482 Relation to special topics",269,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ4113 - HJ4601 Property tax",269,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America",269,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature|PA6155 - PA6191 Translations",268,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR171 - PR236 Anglo-Saxon (Beginnings through 1066)",268,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT115 - DT154 Local history and description",267,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR72 - GR79 Folk literature (General)",267,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC142 - LC148.5 Attendance. Dropouts",267,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC501 - QC718.8 Electricity|QC717.6 - QC718.8 Plasma physics. Ionized gasses",267,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5460 - HF5469.5 Department stores. Mail order business. Supermarkets. Convenience stores",265,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC361 - LC629 Christian education. Church education|LC461 - LC510 Roman Catholic",265,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ5901 - PQ5999 Regional, provincial, local, etc.",265,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS554 - DS554.98 Cambodia",264,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS781 - DS796 Local history and description|DS785 - DS786 Tibet",264,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC165 - LC182 Higher education and the state",264,
        "M - Music|ML1 - ML3930 Literature on music|ML93 - ML96.5 Manuscripts, autographs, etc.",264,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z695.9 - Z695.94 Indexing. Abstracting",263,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology|CC135 - CC137 Preservation, restoration, and conservation of antiquities.  Antiquities and state",261,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG9501 - PG9665 Albanian",261,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6201 - PK6599.7 New Persian|PK6201 - PK6399 Language",261,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4133 - PQ4160 Drama",260,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS488 - DS490 Sri Lanka",259,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6000 - PT6466.36 Flemish literature since 1830|PT6400 - PT6466.36 Individual authors or works",259,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German|PF3801 - PF3991 Old High German",258,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG400 - UG442 Fortification",258,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN9600 - JN9689 Balkan States",257,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K321 - K474 Schools of legal theory|K400 - K474 Natural law",257,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts",257,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA1 - NA60 General",256,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT545 - DT545.9 Cote d'Ivoire. Ivory Coast",255,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2337.2 - LB2340.8 Student financial aid",255,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC86 - RC88.9 Medical emergencies. Critical care. Intensive care. First aid",255,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2351 - LB2359 Admissions and entrance requirements",254,
        "Q - Science|Q1 - Q390 Science (General)|Q300 - Q390 Cybernetics|Q350 - Q390 Information theory",254,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS524 - DS526.7 History",253,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS160 - RS167 Pharmacognosy. Pharmaceutical substances (plant, animal, and inorganic)",253,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ9701 - HJ9940 Public accounting. Auditing",252,
        "R - Medicine|RE1 - RE994 Opthamology|RE91 - RE912 Particular diseases of the eye",252,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K2100 - K2385 Courts. Procedure",251,
        "Q - Science|QC1 - QC999 Physics|QC251 - QC338.5 Heat|QC310.15 - QC319 Thermodynamics",251,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK504 - DK504.95 Latvia",250,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML929 - ML990 Wind instruments",250,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1203 - NB1270 Special materials",250,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1 - NK570 General",250,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK5401 - PK5471 Modern Indo-Aryan literature",250,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS730 - DS731 Ethnography",249,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada|F1060 - F1060.97 Canadian Northwest. Northwest Territories",249,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ801 - HQ801.83 Man-woman relationships. Courtship. Dating",249,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB2165 - LB2278 Teacher training in universities and colleges",249,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS35.3 - DS35.77 The Islamic World",248,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3300 - PG3308 Early to 1700",248,
        "R - Medicine|R5 - R920 Medicine (General)|R858 - R859.7 Computer applications to medicine",248,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K830 - K968 Obligations",247,
        "T - Technology.|T1 - T995 Technology (General)|T175 - T178 Industrial research. Research and development",247,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages",246,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT881 - PT951 Folk literature",246,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF608 - BF635 Will. Volition. Choice. Control",244,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1601 - F1629 West Indies",243,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S530 - S559 Agricultural education",242,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT1754 - DT1770 Ethnography",241,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M1375 - M1420 Instrumental music for children",241,
        "Q - Science|QM1 - QM695 Human anatomy|QM550 - QM577.8 Human and comparative histology",241,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ750 - HQ755.5 Eugenics",240,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML162 - ML197 Special periods|ML193 - ML197 -1601",240,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1293 - NB1895 Special forms|NB1800 - NB1880 Sepulchral monuments",239,
        "Q - Science|QC1 - QC999 Physics|QC801 - QC809 Geophysics. Cosmic physics",239,
        "T - Technology.|T1 - T995 Technology (General)|T61 - T173 Technical education. Technical schools",239,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9650 - HD9663 Chemistry industries",238,
        "L - Education|LF14 - LF5627 Individual institutions|LF4251 - LF4437 Russia (Federation)",238,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6080 - PN6095 Quotations|PN6081 - PN6084 English",238,
        "T - Technology.|T1 - T995 Technology (General)|T201 - T342 Patents. Trademarks",238,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL2195 - BL2228 Japan",237,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV199 - GV199.6 Hiking. Pedestrian tours",237,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN101 - PN245 Authorship|PN241 - PN241.5 Translating as a literary pursuit",237,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KG1 - KG999 Latin America (General)",236,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT339 - MT533 Wind instruments|MT340 - MT359 Flute",236,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages|PL4301 - PL4470 Mon-Khmer (Mon-Anam) languages",236,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA1001 - TA1280 Transportation engineering",236,
        "T - Technology.|TH1 - TH9745 Building construction|TH4021 - TH4977 Buildings: Construction with reference to use (including public buildings, dwellings)",236,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4000 - BQ4060 General works",233,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV840.7 - GV857 Winter sports: Ice hockey, skiing, bobsledding, snowmobiling, etc.",233,
        "H - Social sciences|HN1 - HN995 Social history and conditions. Social problems. Social reform|HN30 - HN39 The church and social problems",233,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E813 - E816 Truman's administrations, April 12, 1945-1953",232,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1700 - K1973 Social legislation",232,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML1200 - ML1270 Orchestra",232,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA1000 - PA1179 Medieval and modern Greek language",232,
        "U - Military science (General)|UH20 - UH910 Other services|UH201 - UH515 Medical and sanitary services",232,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP173.25 - BP173.45 Islamic sociology",231,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ95 - DJ292 History",231,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT549 - DT549.9 Senegal",231,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR431 - PR439 17th century",231,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E838 - E840.8 General|E839.5 - E839.8 Political history",230,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC215 - LC238.4 Community and the school|LC225 - LC226.7 Home and school",230,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1160 - NK1590 Decoration and ornament. Design|NK1505 - NK1535 General works",229,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages|PL3551 - PL4001 Tibeto-Burman languages",229,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL43 - DL87 History",228,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6269 - PN6278 Aphorisms. Apothegms",228,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA4050 - ZA4750 Information in specific formats or media|ZA4050 - ZA4460 Electronic information resources|ZA4150 - ZA4390 Computer network resources",227,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E766 - E783 Wilson's administrations, 1913-1921",226,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN59 - PN72 Study and teaching",226,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature",226,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8101 - BX8144 Mennonites",225,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV8490 - JV8758 Asia",225,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws",225,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH20.3 - SH191 Aquaculture",225,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1040 - GV1060.4 Cycling. Bicycling. Motorcycling",224,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3500 - PG3505 Provincial, local, etc.",224,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E784 - E805 1919-1933. Harding-Coolidge-Hoover era. The twenties",223,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology|HV6250 - HV6250.4 Victims of crimes. Victimology",223,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1301 - PT1360 Prose",223,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1375 - PT1479 Middle High German",223,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA791 - RA954 Medical geography. Climatology. Meteorology",223,
        "T - Technology.|T1 - T995 Technology (General)|T391 - T995 Exhibitions. Trade shows. World's fairs",223,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT160 - DT177 North Africa",222,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV1421 - HV1441 Young Adults. Youth. Teenagers",222,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC5800 - LC5808 Distance education",222,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1065 - PN1085 Relations to, and treatment of, special subjects",222,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7220 - PT7262.5 Collections",222,
        "C - Auxiliary Sciences of History|CN1 - CN1355 Inscriptions. Epigraphy|CN870 - CN1355 By region or country",221,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E401 - E415.3 Mexican War, 1846-1848",221,
        "Q - Science|QB1 - QB991 Astronomy|QB468 - QB480 Non-optical methods of astronomy",221,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration|JL1400 - JL1679 Central America",220,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL5501 - PL6135 Philippine languages",220,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD895 - TD899 Industrial and factory sanitation",220,
        "A - General Works|AM1 - AM401 Museums. Collectors and collecting|AM111 - AM160 Museology. Museum methods, technique, etc.",219,
        "M - Music|ML1 - ML3930 Literature on music|ML112.8 - ML158.8 Bibliography|ML113 - ML118 International",219,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH5001 - PH5490 Basque",219,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2667 - LC2698 Latin Americans. Hispanic Americans",218,
        "P - Language and literature|PR1 - PR9680 English literature|PR111 - PR116 Women authors",218,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC627.5 - RC632 Metabolic diseases",217,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D25 - D27 Military and naval history",216,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal|DP535 - DP682.2 History|DP558 - DP682.2 By period|DP558 - DP618 Early and medieval to 1580",216,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E756 - E760 Theodore Roosevelt's administrations, September 14, 1901-1909",216,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN1601 - JN2191 Austria-Hungary. Austria. Hungary",216,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD895 - TD899 Industrial and factory sanitation|TD896 - TD899 Industrial and factory wastes",216,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS153 - DS154.9 Jordan. Transjordan",215,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS608 - DS610.9 Singapore",215,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT436 - DT449 Tanzania. Tanganyika. German East Africa",215,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K4011 - K4343 Transportation and communication",215,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG51 - LG53 China",214,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases|SB818 - SB945 Economic entomology",214,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1501 - BF1562 Demonology. Satanism. Possession",213,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK901 - DK909.5 Kazakhstan. Kazakh S.S.R.",213,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E835 - E837.7 Eisenhower's administrations, 1953-1961",213,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1401 - K1578 Intellectual property|K1500 - K1578 Industrial property",213,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KDZ1 - KDZ4999 Law of America. North America",212,
        "R - Medicine|RD1 - RD811 Surgery|RD92 - RD97.8 Emergency surgery. Wounds and injuries",212,
        "E - History: America|E151 - E889 United States|E171 - E183.9 History|E183 - E183.3 Political history",211,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM8001 - PM8995 Artificial languages",211,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ251 - RJ325 Newborn infants (including physiology, care, treatment, diseases)",211,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL101 - DL291 Denmark",210,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5469.7 - HF5481 Markets. Fairs",210,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG9969.5 - HG9999 Other insurance (including automobile, burglary, disaster, title, etc.)",210,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN695 - PN779 Modern|PN715 - PN749 Renaissance (1500-1700)",210,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z998 - Z1000.5 Booksellers' catalogs. Book prices",210,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK1001 - JK1443 Congress. Legislative branch|JK1308 - JK1443 House of Representatives",209,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS400 - RS431 Pharmaceutical chemistry",209,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden|DL643 - DL879 History|DL660 - DL879 By period",208,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1 - PL481 Ural-Altaic languages|PL400 - PL431 Mongolian languages",208,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D219 - D234 1453-1648",207,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT655 - MT725 Percussion and other instruments",207,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC306 - RC320.5 Tuberculosis",207,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF191 - SF275 Cattle",207,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions",206,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1470 - ND1625 Technique and materials",206,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z712 - Z714 Circulation. Loans. Charging systems",206,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS541 - DS553.7 History",205,
        "L - Education|LA5 - LA2396 History of education|LA5 - LA25 General",205,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX1 - BX9.5 Church unity. Ecumenical movement. Interdenominational cooperation",204,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ301 - DQ851 Local history and description",204,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z683 - Z683.5 Finance. Insurance",204,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR279 - DR296 Local history and description",203,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD5650 - HD5660 Employee participation in management. Employee ownership. Industrial democracy. Works councils",203,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3092 - KZ3405 20th century",203,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL2000 - BL2032 India|BL2017 - BL2018.7 Sikhism",202,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS781 - DS796 Local history and description|DS781 - DS784.2 Manchuria",201,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E381 - E385 Jackson's administrations, 1829-1837",201,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4850 - KZ5490 Intergovernmental organizations. IGOs|KZ4935 - KZ5275 The United Nations",201,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC1800 - NC1850 Posters",201,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases|SB610 - SB615 Weeds, parasitic plants, etc.",201,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK15 - VK124 History, conditions, etc.",201,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training|GV401 - GV433 Physical education facilities. Sports facilities (including gymnasiums, athletic fields, playgrounds, etc.)",200,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF180 - BF198.7 Experimental psychology",199,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1745 - BF1779 Oracles. Sibyls. Divinations",199,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden|DL643 - DL879 History|DL660 - DL879 By period|DL701 - DL879 Modern, 1523-",199,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z1201 - Z1946 America|Z1365 - Z1401 Canada. British North America",199,
        "A - General Works|AZ101 - AZ999 History of scholarship and learning. The humanities|AZ101 - AZ111 Philosophy. Theory",198,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT621 - DT637 Liberia",198,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1020 - GV1038.2 Automobile travel. Motoring. Automobile racing",198,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1401 - K1578 Intellectual property|K1411 - K1485 Copyright",198,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2361 - LB2365 Curriculum",198,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1200 - LC1203 Inclusive education",198,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1990 - M1998 Secular music for children",198,
        "P - Language and literature|PR1 - PR9680 English literature|PR750 - PR890 Prose|PR767 - PR818 By period",198,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP500 - BP585 Theosophy",197,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK670 - DK679.5 Georgia (Republic). Georgian S.S.R.  Georgian Sakartvelo",197,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB5000 - GB5030 Natural disasters",197,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1281 - PR1309 Prose (General)",197,
        "R - Medicine|R5 - R920 Medicine (General)|R690 - R697 Medicine as a profession. Physicians",197,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF411 - SF459 Pets|SF421 - SF440.2 Dogs. Dog racing",197,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF660 - BF685 Comparative psychology. Animal and human psychology",196,
        "J - Political Science|JA1 - JA92 Political science (General)|JA1 - JA26 Periodicals",194,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian|PD5001 - PD5929 Swedish",194,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering|VM311 - VM466 Special types of vessels",194,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1501 - HS2460.7 Other societies. By classes|HS2301 - HS2460.7 Political and patriotic societies",193,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB409 - SB413 Culture of Individual plants",193,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV659 - BV683 Ministry. Clergy. Religious vocations",192,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB201 - HB206 Value. Utility",192,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC2700 - PC3708 Dialects. Provincialisms|PC2813 - PC2898 Old French",192,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM147 - RM180 Administration of drugs and other therapeutic agents",192,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML475 - ML547 By region or country",191,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE1 - NE90 General",191,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH1 - PH87 General",191,
        "Q - Science|QC1 - QC999 Physics|QC221 - QC246 Acoustics. Sound",191,
        "U - Military science (General)|UB1 - UB900 Military administration|UB356 - UB369.5 Provision for veterans",191,
        "U - Military science (General)|UB1 - UB900 Military administration|UB416 - UB419 Minorities, women, etc. in armed forces",191,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History",190,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC2700 - PC3708 Dialects. Provincialisms|PC3371 - PC3420.5 Modern patois of South France",190,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN801 - PN820 Romance literature",190,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC71 - RC78.7 Examination. Diagnosis (including radiography)|RC78 - RC78.5 Radiography. Roentgenography",190,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA501 - TA625 Surveying",190,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1700 - K1973 Social legislation|K1701 - K1841 Labor law",189,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2561 - PK2579.5 Oriya",189,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2131 - PN2193 By period",189,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD194 - TD195 Environmental effects of industries and plants",189,
        "T - Technology.|TH1 - TH9745 Building construction|TH9025 - TH9745 Protection of fuildings (including protection from dampness, fire, burglary)",189,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB238 - HB251 Competition. Production. Wealth",188,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN597 - PN605 Special relations, movements, and currents of literature",188,
        "A - General Works|AI1 - AI21 Indexes",187,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB846 - HB846.8 Welfare theory",187,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE8701 - HE9680.7 Telephone industry",187,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ6603 - HJ7390 Customs administration",187,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ206 - RJ235 Nutrition and feeding of children and adolescents",187,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K237 - K264 The concept of law",186,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1165 - KZ1208 Trials",186,
        "P - Language and literature|PE1 - PE3729 English language|PE3701 - PE3729 Slang. Argot, etc.",186,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC160 - TC181 Technical hydraulics",186,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9201 - PT9499 Literary history and criticism",185,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP200 - TP248 Manufacture and use of chemicals",185,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3820 - K3836 Economic constitution, policy, planning, and development",184,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4001 - PJ4091 Sumerian",184,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History",183,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU400 - DU430 New Zealand|DU422.5 - DU424.5 Ethnography",183,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2147 - M2188 Liturgy and ritual",183,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E846 - E851 Johnson's administrations, November 22, 1963-1969",182,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1165 - KZ1208 Trials|KZ1168 - KZ1208 War crime trials",182,
        "T - Technology.|TG1 - TG470 Bridge engineering.",182,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8501 - HG8745 By region or country",181,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML749.5 - ML927 Bowed string instruments",181,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN905 - PN1008 Folk literature",181,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE210 - TE228.3 Construction details (including foundations, maintenance, equipment)",181,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF1338 - JF2112 Public administration|JF1411 - JF1521 Civil service",180,
        "Q - Science|QB1 - QB991 Astronomy|QB349 - QB421 Theoretical astronomy and celestial mechanics",179,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF699 - BF711 Genetic psychology",178,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1216 - BL1225 Hindu pantheon. Deities",178,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK26 - DJK28 Ethnography",178,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period|DR84.9 - DR89.8 1878-1944",178,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT713 - HT725 Caste system",178,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ1249 - JZ1254 Relation to other disciplines and topics",178,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK2896 - TK2985 Production of electricity by direct electricity conversion",178,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period|DR81 - DR84 Turkish rule, 1396-1878",177,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica",177,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1090 - LC1091 Political education",176,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA100 - NA130 Architecture and the state",176,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)|BV30 - BV135 Times and seasons. The Church year",175,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK505 - DK505.95 Lithuania",175,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient",175,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3092 - KZ3405 20th century|KZ3110 - KZ3405 Publicists. Writers on public international law",175,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1081 - LC1087.4 Industrial education (General)",175,
        "B - Philosophy. Psychology. Religion|BC1 - BC199 Logic|BC11 - BC39 History",173,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1300 - BL1380 Jainism",173,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History|DK4186 - DK4348 To 1795",173,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1001 - DT1190 Southern Africa",173,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM435 - HM477 History of sociology. History of sociological theory",173,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV3176 - HV3199 Special classes. By race or ethnic group",173,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.|PN4735 - PN4748 Relation to the state. Government and the press. Liberty of the press",173,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH401 - SH691 Angling (including tackle, casting, methods of angling, angling for special kinds of fish)",173,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering|VM15 - VM124 History",172,
        "A - General Works|AN - Newspapers",171,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ5360 - BQ5680 Religious life",171,
        "M - Music|ML1 - ML3930 Literature on music|ML110 - ML111.5 Music librarianship",171,
        "Q - Science|QB1 - QB991 Astronomy|QB140 - QB237 Practical and spherical astronomy",171,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC460 - UC535 Clothing and equipment",171,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z674.2 - Z674.5 Information services. Information centers",171,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1500 - BL1590 Zoroastrianism (Mazdeism). Parseeism",170,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History|DK4397 - DK4420 1918-1945",170,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3476 - K3560 Public property. Public restraint on private property",170,
        "A - General Works|AY10 - AY2001 Yearbooks. Almanacs. Directories|AY10 - AY29 Annuals",169,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC730 - NC758 Technique",169,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature|PL8000 - PL8009 Languages",169,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1011 - Z1017 General bibliographies",169,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF176 - BF176.5 Psychological tests and testing",168,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT2871 - DT3025 Zimbabwe. Southern Rhodesia",168,
        "H - Social sciences|HF1 - HF6182 Commerce|HF1021 - HF1027 Commercial geography. Economic geography",168,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX700 - NX750 Patronage of the arts",168,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S604.8 - S621.5 Melioration: Improvement, reclamation, fertilization, irrigation, etc. of lands",167,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1301 - K1366 Business associations",166,
        "S - Agriculture|SK1 - SK663 Hunting|SK351 - SK579 Wildlife management. Game protection",166,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT7601 - PT7869 Literary history and criticism",165,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1041 - Z1121 Anonyms and pseudonyms",165,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9301 - BX9359 Puritanism",164,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT491 - DT516.9 British West Africa|DT516 - DT516.9 Sierra Leone",164,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4002 - KZ4080 The state",164,
        "U - Military science (General)|UB1 - UB900 Military administration|UB320 - UB338 Enlistment, recruiting, etc.",164,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.|G7000 - G7342 Former Soviet republics. Union of Soviet Socialist Republics.  Russia (Empire)",163,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV701 - HV1420.5 Children|HV959 - HV1420.5 Orphanages. Orphans",163,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC49 - RC52 Psychosomatic medicine",163,
        "R - Medicine|RK1 - RK715 Dentistry|RK641 - RK667 Prosthetic dentistry. Prosthodontics",162,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP300 - BP395 Bahai Faith",161,
        "N - Fine Arts|N1 - N9211 Visual arts|N8350 - N8356 Art as a profession. Artists",161,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF501 - BF505 Motivation",160,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT960 - BT985 Invisible world (Saints, demons, etc.)",160,
        "D - History (General) and History of Europe|DAW1001 - DAW1051 History of Central Europe",160,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS493 - DS495.8 Nepal",160,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL950 - PL998 Korean literature|PL969.8 - PL985 Collections",160,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism",160,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7001 - PT7099 Scandinavian literature",160,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7001 - PT7099 Scandinavian literature|PT7001 - PT7099 General",160,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1251 - DT1465 Angola",159,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB1501 - PB1709 Gaelic (Scottish Gaelic, Erse)",159,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD430 - SD557 Exploitation and utilization",159,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS327 - DS329.4 Central Asia",158,
        "E - History: America|E11 - E143 America|E31 - E49.3 North America",158,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB2401 - GB2598 Ice. Glaciers. Ice sheets. Sea ice",158,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC71 - LC120.4 Education and the state|LC107 - LC120.4 Public school question. Secularization. Religious instruction in the public schools",158,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK2775 - NK2898 Rugs and carpets",158,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages|PL4301 - PL4470 Mon-Khmer (Mon-Anam) languages|PL4371 - PL4379 Vietnamese. Annamese",158,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN3151 - PN3171 Amateur theater",158,
        "Q - Science|QB1 - QB991 Astronomy|QB275 - QB343 Geodesy",158,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP1080 - TP1185 Polymers and polymer manufacture",158,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ3001 - PJ3097 Semitic philology and literature",157,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7101 - BX7260 Congregationalism",156,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT21 - CT22 Biography as an art or literary form",156,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT551 - DT551.9 Mali. Mali Federation. Sudanese Republic. French Sudan",156,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC1000 - GC1023 Marine resources. Applied oceanography",156,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL6191 - PL6341 Micronesian and Melanesian languages",156,
        "S - Agriculture|SK1 - SK663 Hunting|SK40 - SK268 By country",156,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania",155,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN1400 - JN1571.5 Ireland",155,
        "P - Language and literature|PE1 - PE3729 English language|PE501 - PE693 Middle English",155,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway",154,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4001 - PN4355 Oratory. Elocution, etc.|PN4177 - PN4191 Debating",154,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4001 - PN4355 Oratory. Elocution, etc.|PN4199 - PN4321 Recitations (in English)",154,
        "U - Military science (General)|UD1 - UD495 Infantry",154,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT160 - DT177 North Africa|DT167 - DT176 History",153,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV181.35 - GV181.6 Recreation leadership. Administration of recreation services",153,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History|DK4348.5 - DK4395 1795-1918. 19th century (General)",152,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS101 - HS330.7 Secret societies",152,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS2300 - JS2778 South America",152,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ95 - DJ292 History|DJ151 - DJ292 By period",151,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK690 - DK699.5 Azerbaijan. Azerbaijan S.S.R.",151,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL43 - DL87 History|DL61 - DL87 By period",151,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC70 - GC90 Environmental education",151,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1073 - HQ1073.5 Thanatology. Death. Dying",151,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z551 - Z656 Copyright",151,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH95 - DH207 History",150,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ7461 - HJ7980 Expenditures. Government spending",150,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security",150,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX280 - NX410 Study and teaching. Research",150,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ101 - RJ103 Child health. Child health services",150,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT541 - DT541.9 Benin. Dahomey",149,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E872 - E875 Carter's administration, 1977-1981",149,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian|PD2501 - PD2999 Norwegian",149,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z4001 - Z4980 Australia. Oceania",149,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1141 - LB1489 Kindergarten",148,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6120.15 - PN6120.95 Fiction",148,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History|DR481 - DR605 By period|DR568 - DR575 1861-1909. War with Russia, 1877-1878",147,
        "Q - Science|QA1 - QA939 Mathematics|QA47 - QA59 Tables",147,
        "V - Naval science|VB15 - VB345 Naval administration",147,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR191 - CR1020 Public and official heraldry",146,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS393 - DS396.9 Bangladesh. East Pakistan",146,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E337.8 - E340 General",146,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN49 - GN298 Physical anthropology. Somatology|GN51 - GN59 Anthropometry",146,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3941 - K3974 Trade and commerce",146,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2371 - LB2372 Graduate education",146,
        "N - Fine Arts|N1 - N9211 Visual arts|N8554 - N8585 Examination and conservation of works of art",146,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages|PL3551 - PL4001 Tibeto-Burman languages|PL3561 - PL3801 Tibeto-Himalayan languages",146,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2131 - PN2193 By period|PN2181 - PN2193 Modern",146,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9300 - PQ9326 Individual authors, 2001-",146,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD561 - SD669.5 Administration. Policy",146,
        "C - Auxiliary Sciences of History|CD1 - CD6471 Diplomatics. Archives. Seals|CD1 - CD511 Diplomatics",145,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K2400 - K2405 Arbitration and award",145,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA166 - TA167 Human engineering",145,
        "U - Military science (General)|UF1 - UF910 Artillery|UF560 - UF780 Ordnance material (Ordnance proper)",145,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP187 - BP187.9 Shrines, sacred places, etc.",144,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS11 - BS115 Early versions",144,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training|GV346 - GV351.5 School and college athletics. Intramural and interscholastic athletics",144,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV5725 - HV5770 Tobacco habit",144,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC760 - NC825 Special subjects",144,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS125 - RS131.9 Formularies. Collected prescriptions",144,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU400 - DU430 New Zealand|DU419 - DU422 History",143,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5691 - HF5716 Business mathematics. Commercial arithmetic",143,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG9371 - HG9399 Health insurance",143,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM711 - HM806 Groups and organizations|HM756 - HM781 Community",143,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV4997 - HV5000 Substance abuse",143,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2018 - M2019.5 Duets, trios, etc. for solo voices",143,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT259 - MT338 String instruments|MT260 - MT279.7 Violin",143,
        "M - Music|MT1 - MT960 Musical instruction and study|MT820 - MT915 Singing and vocal technique|MT855 - MT883 Special techniques",143,
        "Q - Science|QM1 - QM695 Human anatomy|QM601 - QM695 Human embryology",143,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL689 - BL980 European. Occidental|BL830 - BL875 Germanic and Norse",142,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU28.11 - DU68 History",142,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN2210 - JN2229 Czech Republic. Czechoslovakia",142,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security|KZ5615 - KZ5893 Arms control and disarmament regimes",142,
        "M - Music|ML1 - ML3930 Literature on music|ML35 - ML38 Festivals. Congresses",142,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P321 - P324.5 Etymology",142,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF951 - SF997.5 Diseases of special classes of animals",142,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH20.3 - SH191 Aquaculture|SH151 - SH179 Fish culture",142,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ268 - TJ740 Steam engineering",142,
        "C - Auxiliary Sciences of History|CB3 - CB482 History of Civilization|CB158 - CB161 Forecasts of future progress",141,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History|DH571 - DH694 By period",141,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5400 - PT5547 Collections",141,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX4929 - BX4951 Post-Reformation",140,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8762 - BX8785 Pentecostal churches",140,
        "E - History: America|E11 - E143 America|E141 - E143 Descriptive accounts of America. Earliest to 1810",140,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV8790 - JV9025 Africa",140,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages|PL3551 - PL4001 Tibeto-Burman languages|PL3561 - PL3801 Tibeto-Himalayan languages|PL3601 - PL3775 Tibetan",140,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN905 - PN1008 Folk literature|PN980 - PN995 Fables",140,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism|PQ9035 - PQ9055 Special periods",140,
        "R - Medicine|R5 - R920 Medicine (General)|R856 - R857 Biomedical engineering. Electronics. Instrumentation",140,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-|DP192 - DP200.8 1700-1808. Bourbons",139,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E415.6 - E415.9 General",139,
        "R - Medicine|R5 - R920 Medicine (General)|R895 - R920 Medical physics. Medical radiology. Nuclear medicine",139,
        "V - Naval science|VG20 - VG2029 Minor services of navies",139,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT433.2 - DT433.29 Uganda",138,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS7525 - JS7819 Africa",138,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK3001 - TK3521 Distribution or transmission of electric power",138,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP670 - TP699 Oils, fats, and waxes",138,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC260 - UC267 Supplies and stores",138,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z43 - Z45 Calligraphy. Penmanship",138,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT401 - DT409 Somalia. Somaliland and adjacent territory",137,
        "E - History: America|E11 - E143 America|E101 - E135 Discovery of America and early explorations|E103 - E110 Pre-Columbian period",137,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC501 - QC718.8 Electricity|QC701 - QC715.4 Electric discharge",137,
        "B - Philosophy. Psychology. Religion|BC1 - BC199 Logic|BC11 - BC39 History|BC25 - BC39 By period",136,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF795 - BF839 Temperament. Character",136,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX800 - BX4795 Catholic Church|BX4600 - BX4644 Churches, cathedrals, abbeys (as parish churches), etc.",136,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK502.3 - DK502.75 Baltic States",136,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC6201 - LC6401 University extension",136,
        "T - Technology.|TH1 - TH9745 Building construction|TH7005 - TH7699 Heating and ventilation. Air conditioning",136,
        "U - Military science (General)|UB1 - UB900 Military administration|UB340 - UB345 Compulsory service. Conscription and exemption",136,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period|DR250 - DR266.5 1866/1881-1944",135,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F3031 - F3031.5 Falkland Islands",135,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC203 - TC380 Harbors and coast protective works. Coastal engineering. Lighthouses",135,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP155 - TP156 Chemical engineering",135,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK503 - DK503.95 Estonia",134,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G540 - G550 Seafaring life, ocean travel, etc.",134,
        "H - Social sciences|HF1 - HF6182 Commerce|HF1040 - HF1054 Commodities. Commercial products",134,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5735 - HF5746 Business records management",134,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1625 - M1626 Recitations with music",134,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2147 - M2188 Liturgy and ritual|M2147 - M2155.6 Roman Catholic Church",134,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC1860 - NC1896 Greeting cards, postcards, invitations, book jackets, etc.",134,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG159 - RG208 Functional and systemic disorders. Endocrine gynecology",134,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE830 - NE898 General works",133,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1 - PJ489 General|PJ306 - PJ489 Literature",133,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6500 - PT6592.36 Afrikaans literature",133,
        "R - Medicine|RD1 - RD811 Surgery|RD120.6 - RD129.8 Transplantation of organs, tissues, etc.",133,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1100 - G1779 America. Western Hemisphere|G1445 - G2739 Africa",132,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P375 - P381 Linguistic geography",132,
        "T - Technology.|TR1 - TR1050 Photography|TR287 - TR500 Photographic Processing",132,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal|DP702 - DP802 Local history and description",131,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT421 - DT432.5 East Africa. British East Africa",131,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM1001 - HM1281 Social psychology|HM1041 - HM1101 Social perception. Social cognition (including perception of the self and others, prejudices, stereotype)",131,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1272 - NB1291 Mobiles, color, sculpture gardens, etc.",131,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL950 - PL998 Korean literature|PL950.2 - PL969.5 History and criticism",131,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD5481 - HD5630.7 Industrial arbitration. Mediation and conciliation",130,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German|PF4043 - PF4350 Middle High German",130,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK101 - PK185 General",130,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL6401 - PL6551 Polynesian languages",130,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1361 - PR1369 Essays",130,
        "C - Auxiliary Sciences of History|CE1 - CE97 Technical Chronology. Calendar|CE51 - CE85 Medieval and modern",129,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1101 - HQ2030.7 Women. Feminism|HQ1871 - HQ2030.7 Women's clubs",129,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC3721 - PC3761 Slang. Argot",129,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7001 - PT7099 Scandinavian literature|PT7001 - PT7099 General|PT7001 - PT7087 Literary history and criticism",129,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD201 - TD500 Water supply for domestic and industrial purposes|TD429.5 - TD480.7 Water purification. Water treatment and conditioning. Saline water conversion",129,
        "V - Naval science|V1 - V995 Naval science (General)|V25 - V55 History and antiquities of naval science",129,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH95 - DH207 History|DH141 - DH207 By period",128,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2381 - LB2391 Academic degrees",128,
        "P - Language and literature|PR1 - PR9680 English literature|PR57 - PR78 Criticism",128,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP91 - DP96 Earliest to 711",127,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT7 - DT12.25 Description and travel",127,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E881 - E884 Bush administration, 1989-1993",127,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT495 - GT499 Human body and its parts. Personal beauty",127,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV1 - JV5399 Colonies and colonization|JV61 - JV151 History",127,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6058 - PQ6060 Early to 1500",127,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM182 - RM190 Other therapeutic procedures (including acupuncture, pneumatic aspiration, spinal puncture, pericardial puncture)",127,
        "T - Technology.|TL1 - TL4050 Motor vehicles. Aeronautics. Astronautics|TL780 - TL785.8 Rocket propulsion. Rockets",127,
        "V - Naval science|VE7 - VE500 Marines",127,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT547 - DT547.9 Niger",126,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K50 - K54 Dictionaries. Words and phrases",126,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S622 - S627 Soil conservation and protection",126,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL1790 - BL1975 China|BL1830 - BL1883 Confucianism",125,
        "E - History: America|E151 - E889 United States|E660 - E738 Late nineteenth century, 1865-1900|E671 - E680 Grant's administrations, 1869-1877",125,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN49 - GN298 Physical anthropology. Somatology|GN269 - GN279 Race (General)",125,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT899 - BT940 Future state. Future life",124,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT3200 - CT9999 Biography. By subject|CT9960 - CT9998 Other miscellaneous groups",124,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland",124,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K5000 - K5582 Criminal law and procedure|K5401 - K5570 Criminal procedure",124,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC901 - PC986 Raeto-Romance. Including Romansh",124,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian|PD2201 - PD2393 Old Norse. Old Icelandic and Old Norwegian",124,
        "C - Auxiliary Sciences of History|CJ1 - CJ6661 Numismatics|CJ5501 - CJ6661 Medals and medallions",123,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1621 - HG1638 Interest rates. Interest tables",123,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ199 - KZ218 Judicial decisions and arbitral awards. Law reports",123,
        "M - Music|ML1 - ML3930 Literature on music|ML25 - ML28 Societies and organizations",123,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1780 - G2799 Eastern Hemisphere. Eurasia, Africa, etc.|G2110 - G2196 Former Soviet republics. Union of Soviet Socialist Republics. Russia (Empire)",122,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1470 - GV1511 Parties. Party games and stunts",122,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV199.8 - GV200.3 Mountaineering",122,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K830 - K968 Obligations|K923 - K968 Torts",122,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KJ - Europe",122,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1203 - GV1218 Children's games and amusements",121,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1 - JQ1849 Asia|JQ1070 - JQ1199 Central Asia. Including former republics of the Soviet Union",121,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC601 - TC791 Canals and inland navigation. Waterways",121,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK509.1 - DK509.95 Moldova. Moldovian S.S.R.  Bessarabia",120,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL101 - DL291 Denmark|DL143 - DL263.3 History",120,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1271.2 - BL1295 Modifications. Sects|BL1284.5 - BL1289.59 Vaishnavism",119,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K2100 - K2385 Courts. Procedure|K2201 - K2385 Civil procedure",119,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2601 - LC2611 Education in developing countries",119,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature|PL8024 - PL8027 Special families of languages",119,
        "R - Medicine|RZ201 - RZ999 Other systems of medicine",119,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL301 - DL398 Iceland",118,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT675 - HT690 Classes arising from occupation",118,
        "J - Political Science|JA1 - JA92 Political science (General)|JA86 - JA88 Study and teaching. Research",118,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3842 - K3862 Trade regulations. Control of trade practices",118,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P327 - P327.5 Lexicography",118,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E310 - E337 1789-1809. Constitutional period|E321 - E330 John Adams' administration, 1797-1801",117,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC1080 - GC1581 Marine pollution. Seawater pollution",117,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM1 - PM94 Hyperborean languages of Arctic Asia and America",117,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT990 - BT1010 Creeds, confessions, covenants, etc.",116,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV2000 - BV3705 Missions|BV2610 - BV2695 Special types of missions",116,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic",116,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1841 - PK1870.95 Gujarati",116,
        "Q - Science|QD1 - QD999 Chemistry|QD450 - QD801 Physical and theoretical chemistry|QD701 - QD731 Photochemistry",116,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM711 - HM806 Groups and organizations|HM786 - HM806 Organizational sociology. Organization theory",115,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3171 - K3179 Constitutional principles",115,
        "A - General Works|AZ101 - AZ999 History of scholarship and learning. The humanities|AZ200 - AZ361 History",114,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL175 - BL265 Natural theology|BL175 - BL190 General",114,
        "G - Geography. Anthropology. Recreation|GF1 - GF900 Human ecology. Anthropogeography|GF101 - GF127 Settlements",114,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1641 - HG1643 Bank loans. Bank credit. Commercial loans",114,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1 - NB50 General",114,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1351 - PN1389 Lyric poetry",114,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3670 - KZ3881 Objects of the law of nations. Territory and its different parts",113,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2198 - M2199 Gospel, revival, temperance, etc. songs M5000 Unidentified compositions",113,
        "P - Language and literature|PR1 - PR9680 English literature|PR931 - PR938 Wit and humor",113,
        "U - Military science (General)|UF1 - UF910 Artillery|UF520 - UF537 Ordnance and small arms",113,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S560 - S571.5 Farm economics. Farm management. Agricultural mathematics",112,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S631 - S667 Fertilizers and improvement of the soil",112,
        "U - Military science (General)|U1 - U900 Military science (General)|U750 - U773 Military life, manners and customs, antiquities, etc.",112,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK941 - DK949.5 Uzbekistan. Uzbek S.S.R.",111,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1221 - GV1469.62 Indoor games and amusements|GV1232 - GV1299 Card games: Poker, patience, whist, etc.",111,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7435 - HV7439 Gun control",111,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV6061 - JV6149 Emigration",111,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5511.2 - JZ6299 Promotion of peace. Peaceful change|JZ6010 - JZ6299 Pacific settlement of international disputes",111,
        "L - Education|LA5 - LA2396 History of education|LA173 - LA186 Higher education",111,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML1030 - ML1049 Percussion instruments",111,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism|PG3071 - PG3089 Drama",111,
        "T - Technology.|TH1 - TH9745 Building construction|TH1000 - TH1725 Systems of building construction.",111,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC200 - GC376 Dynamics of the ocean|GC205 - GC226 Waves",110,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1293 - NB1895 Special forms|NB1293 - NB1310 Portrait sculpture",110,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC377 - GC399 Marine sediments",109,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KJ - Europe|KJ2 - KJ1040 History of Law",109,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC901 - LC915 Islamic education",109,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG725 - RG791 Obstetric operations. Operative obstetrics",109,
        "T - Technology.|TS1 - TS2301 Manufactures|TS800 - TS937 Wood technology. Lumber",109,
        "V - Naval science|VE7 - VE500 Marines|VE23 - VE124 By region or country",109,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing|Z231 - Z232 Printers and printing establishments",109,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF839.8 - BF885 Physiognomy. Phrenology",108,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT170 - GT476 Houses. Dwellings",108,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK1001 - JK1443 Congress. Legislative branch|JK1154 - JK1276 Senate",108,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3001 - LC3501 Asians",108,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education|LC37 - LC44.3 Home education",108,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education|LC47 - LC58.7 Private school education",108,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6366 - PN6377 Riddles, acrostics, charades, conundrums, etc.",108,
        "Q - Science|QC1 - QC999 Physics|QC811 - QC849 Geomagnetism",108,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ163.26 - TJ163.5 Energy conservation",108,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL2195 - BL2228 Japan|BL2216 - BL2227.8 Shinto",107,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP1 - BP68 General|BP42 - BP48 Study and teaching",107,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1501 - DT1685 Namibia. South-West Africa",107,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT555 - DT555.9 Burkina Faso. Upper Volta",107,
        "E - History: America|E151 - E889 United States|E186 - E199 Colonial history (1607-1775)|E191 - E199 By period",106,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ4835 - JZ5490 International organizations and associations|JZ4841 - JZ4848 Political non-governmental organizations. NGOs",106,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML1100 - ML1165 Chamber music",106,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML1049.8 - ML1091 Mechanical and other instruments",106,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN3203 - PN3299 Tableaux, pageants, 'Happenings,' etc.",106,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8301 - PT8574 Literary history and criticism",106,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S583 - S587.73 Agricultural chemistry. Agricultural chemicals",106,
        "J - Political Science|JA1 - JA92 Political science (General)|JA60 - JA64 Dictionaries and encyclopedias",105,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)|BV150 - BV168 Christian symbols and symbolism",104,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-|DP161.5 - DP166 1479-1516. Fernando V and Isabel I",104,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History|DQ78 - DQ210 By period",104,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6750 - JN6769 Poland",104,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA8200 - NA8260 Farm architecture",104,
        "R - Medicine|RK1 - RK715 Dentistry|RK501 - RK519 Operative dentistry. Restorative dentistry",104,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ1390 - BJ1390.5 Communist ethics",103,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K115 - K130 The legal profession",103,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ2401 - PJ2594 Cushitic languages",103,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL425 - BL490 Religious doctrines (General)|BL435 - BL457 Nature worship",102,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR1179 - CR3395 Family heraldry",102,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training|GV435 - GV436.7 Physical measurements. Physical tests, etc.",102,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K830 - K968 Obligations|K840 - K917 Contracts",102,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC620 - RC627 Nutritional diseases. Deficiency diseases",102,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX5001 - BX5009 Anglican Communion (General)",101,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS498 - DS498.8 Goa. Portuguese in India",101,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS5.95 - DS10 Description and travel",101,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States|DT331 - DT346 Sahara",101,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT591 - DT615.9 Portuguese-speaking West Africa|DT613 - DT613.9 Guinea-Bissau. Portuguese Guinea",101,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1470 - HD1476 Size of farms",101,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV551.2 - HV639 Emergency management|HV553 - HV639 Relief in case of disasters|HV560 - HV583 Red Cross. Red Crescent",101,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K720 - K792 Property",101,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1329 - KZ3085 Early/Medieval development to ca. 1900. Ius Naturae et Gentium",101,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4112 - KZ4820 By state",101,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1400 - NE1879 Metal engraving",101,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1001 - PJ1989 Egyptology|PJ1111 - PJ1446 Language",101,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG651 - RG721 Labor. Parturition",101,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB1601 - GB1798.9 Lakes. Limnology. Ponds. Lagoons",100,
        "H - Social sciences|HF1 - HF6182 Commerce|HF294 - HF343 Boards of trade. Chambers of commerce. Merchants' associations",100,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ800 - HQ800.4 Single people",100,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S604.8 - S621.5 Melioration: Improvement, reclamation, fertilization, irrigation, etc. of lands|S606 - S621.5 Special classes of lands and reclamation methods (including woodlands, burning of lands, deserts, saline environments, moors)",100,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT546.1 - DT546.49 French-speaking Equatorial Africa|DT546.4 - DT546.49 Chad (Tchad)",99,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ6378 - JZ6405 The armed conflict. War and order",99,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1648 - NK1678 Religious art",99,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism|PQ9061 - PQ9081 Poetry",99,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC501 - QC718.8 Electricity|QC669 - QC675.8 Electromagnetic theory",99,
        "R - Medicine|RK1 - RK715 Dentistry|RK520 - RK528 Orthodontics",99,
        "B - Philosophy. Psychology. Religion|BF1001 - BF1389 Parapsychology|BF1111 - BF1156 Hypnotism. Suggestion. Mesmerism. Subliminal projection",98,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV900 - BV1450 Religious societies, associations, etc.",98,
        "M - Music|MT1 - MT960 Musical instruction and study|MT90 - MT146 Analysis and appreciation of musical works|MT95 - MT100 Opera, ballet, etc.",98,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT8050 - PT8176.36 Individual authors or works|PT8060 - PT8098 16th-18th centuries",98,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC1030 - RC1160 Transportation medicine (including automotive, aviation, and space medicine)",98,
        "R - Medicine|RD1 - RD811 Surgery|RD32 - RD33.9 Operative surgery. Technique of surgical operations",98,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC801 - TC978 Irrigation engineering. Reclamation of wasteland. Drainage",98,
        "A - General Works|AM1 - AM401 Museums. Collectors and collecting|AM200 - AM401 Collectors and collecting",97,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL2600 - BL2630 Pacific Ocean Islands. Oceania",97,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4620 - BQ4905 Buddhist pantheon",97,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9801 - BX9869 Unitarianism",97,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1195 - GV1198.99 Wrestling",97,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT751 - HT815 Serfdom",97,
        "M - Music|ML1 - ML3930 Literature on music|ML112 - ML112.5 Music printing and publishing",97,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML1299 - ML1354 Band",97,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA639 - RA642 Transmission of disease",97,
        "U - Military science (General)|UF1 - UF910 Artillery|UF500 - UF515 Weapons systems",97,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR927 - DR978.52 History",96,
        "L - Education|LJ3 - LJ165 Student fraternities and societies, United States",96,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6259 - PN6268 Anecdotes. Table talk",96,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4064 - PQ4075 Early to 1500",96,
        "C - Auxiliary Sciences of History|CE1 - CE97 Technical Chronology. Calendar|CE21 - CE46 Ancient",95,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT5320 - GT6737 Customs relative to special classes",95,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space",95,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML162 - ML197 Special periods|ML162 - ML169 Ancient",95,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ1125 - TJ1345 Machine shops and machine shops practice",95,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period|DR89.9 - DR93.34 1944-1990",94,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K583 - K591 Legal systems compared",94,
        "M - Music|MT1 - MT960 Musical instruction and study|MT40 - MT67 Composition. Elements and techniques of music|MT58 - MT67 Forms",94,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS155 - DS156 Asia Minor",93,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G2800 - G3064 Oceans (General)",93,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1329 - KZ3085 Early/Medieval development to ca. 1900. Ius Naturae et Gentium|KZ2064 - KZ3085 Publicists. Writers on public international law",93,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1430 - KZA1690 Maritime boundaries",93,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC845 - NC915 Graphic art materials",93,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6500 - PT6592.36 Afrikaans literature|PT6590 - PT6592.36 Individual authors or works",93,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period|DR73.7 - DR80.8 Early and medieval",92,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV1442 - HV1448 Women",92,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6101 - BX6193 Adventists",91,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History",91,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS555 - DS555.98 Laos",91,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT3291 - DT3415 Mozambique",91,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography|GA125 - GA155 Map drawing, modeling, printing, reading, etc.",91,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ2340 - PJ2399 Libyco-Berber languages. Berber languages",91,
        "R - Medicine|RD1 - RD811 Surgery|RD651 - RD678 Neoplasms. Tumors. Oncology",91,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM1 - BM449 General|BM70 - BM135 Study and teaching",90,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History|DK4445 - DK4452 -1989",90,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1710 - HG1710.5 Electronic funds transfers",90,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF201 - JF619 Organs and functions of government|JF251 - JF289 Executive. Heads of state",90,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK1717 - JK2248 Political rights. Practical politics|JK1756 - JK1761 Citizenship",90,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ1305 - JZ2060 Scope of international relations|JZ1400 - JZ1454 Diplomatic and consular service",90,
        "R - Medicine|RD1 - RD811 Surgery|RD118 - RD120.5 Plastic surgery. Reparative surgery",90,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP890 - TP933 Textile bleaching, dyeing, printing, etc.",90,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL4110 - KL4399 Greek law",89,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB3011 - LB3095 School management and discipline|LB3045 - LB3048 Textbooks",89,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4101 - PJ4197 West and North Semitic languages",89,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ840 - BQ999 Biography|BQ860 - BQ999 Individual|BQ860 - BQ939 Gautama Buddha",88,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC71 - LC120.4 Education and the state|LC72 - LC72.5 Academic freedom",88,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1037 - LC1037.8 Career education",88,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK2975 - NK3049 Tapestries",88,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1801 - PK1831.95 Bihari",88,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2591 - PK2610 Pahari",88,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF670 - TF851 Local and light railways",88,
        "T - Technology.|TN1 - TN997 Mining engineering. Metallurgy.|TN950 - TN997 Building and ornamental stones",88,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK61 - DJK77 Local history and description",87,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV182 - GV182.5 Recreational areas and facilities. Recreation centers",87,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3240 - PG3255 Drama",87,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.|PN4832 - PN4836 Magazines and other periodicals",87,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC215 - LC238.4 Community and the school|LC237 - LC238.4 College-university and the community",86,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE175 - TE176.5 Highway design. Interchanges and intersections",86,
        "U - Military science (General)|UG1500 - UG1530 Military astronautics. Space warfare. Space surveillance",86,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT582 - DT582.9 Togo. Togoland",85,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR430 - GR487 Folklore relating to private life (including dreams, love, children, nursery rhymes, etc.)",85,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE199 - HE199.5 Freight (General)",85,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8075 - HG8107 Insurance business. Insurance management",85,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ5309 - HJ5510 Administrative fees. User charges. License fees",85,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN1187 - JN1371 Scotland",85,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6360 - KZ6373 Non-military coercion",85,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE76 - LE78 Venezuela",85,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1293 - NB1895 Special forms|NB1330 - NB1685 Sculptural monuments",85,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures|PK1971 - PK1979.5 Urdu language",85,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB419 - SB419.3 Indoor gardening and houseplants",85,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA926 - UA929 Civil defense",85,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z102.5 - Z104.5 Cryptography. Ciphers. Invisible writing",85,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1243.72 - BL1243.78 Monasteries. Temples, etc.",84,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT15 - DT16 Ethnography",84,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration|JL599.5 - JL839 West Indies. Caribbean Area",84,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1150 - K1231 Maritime law",84,
        "N - Fine Arts|ND25 - ND3416 Painting|ND25 - ND48 General",84,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2085 - PN2091 The stage and accessories",84,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC955 - RC962 Arctic medicine. Tropical medicine",84,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT180 - TT200 Woodworking. Furniture making. Upholstering",84,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT115 - DT154 Local history and description|DT139 - DT153.5 Cairo",83,
        "E - History: America|E151 - E889 United States|E186 - E199 Colonial history (1607-1775)|E191 - E199 By period|E195 - E199 1689-1775",83,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E855 - E861 Nixon's administrations, 1969-August 9, 1974|E860 - E861 Watergate Affair. Resignation",83,
        "S - Agriculture|SK1 - SK663 Hunting|SK311 - SK335 Bird hunting. Fowling",83,
        "T - Technology.|T1 - T995 Technology (General)|T55 - T55.3 Industrial satety. Industrial accident prevention",83,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ95 - DJ292 History|DJ151 - DJ292 By period|DJ154 - DJ210 1555-1795. United provinces",82,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS401 - DS486.8 India (Bharat)|DS430 - DS432 Ethnography. Sects",82,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1635 - PN1650 Relation to, and treatment of, special subjects",82,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z41 - Z42.5 Autographs. Signatures",82,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH801 - DH811 Local history and description",81,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS141 - JS271 Municipal government and local government other than municipal",81,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K140 - K165 History of law",81,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1066 - K1089 Banking",81,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1255 - KZ1273 Theory and principles",81,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2335.95 - LB2337 Endowments, trusts, etc.",81,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB2844.52 - LB2844.63 Trade unions",81,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian|PD3001 - PD3929 Danish",81,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT7945 - PT8046 Collections",81,
        "Q - Science|QM1 - QM695 Human anatomy|QM531 - QM549 Regional anatomy",81,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM260 - RM263 Chemotherapy",81,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS189 - RS190 Assay methods. Standardization. Analysis",81,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB449 - SB450.87 Flower arrangement and decoration",81,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D31 - D34 Political and diplomatic history",80,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT546.1 - DT546.49 French-speaking Equatorial Africa|DT546.2 - DT546.29 Congo (Brazaville). Middle Congo",80,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT554 - DT554.9 Mauritania",80,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1541 - GV1561 Parlor magic and tricks",80,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli|KZ6440 - KZ6530 Humanitarian law",80,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC6501 - LC6560.4 Lyceums and lecture courses. Forums",80,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE7 - LE9 Mexico",80,
        "M - Music|MT1 - MT960 Musical instruction and study|MT70 - MT74 Instrumentation and orchestration",80,
        "N - Fine Arts|N1 - N9211 Visual arts|N8510 - N8553 Art studios, materials, etc.",80,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2000 - NA2320 Study and teaching. Research",80,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1001 - PD1350 Old Germanic dialects",80,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN661 - PN694 Medieval (to 1500)|PN688 - PN691 Poetry",80,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7101 - PT7211 Literary history and criticism|PT7177 - PT7211 Prose",80,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH381 - SH385 Whaling",80,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD920 - TD934 Rural and farm sanitary engineering",80,
        "L - Education|LD13 - LD7501 Individual institutions|LD13 - LD7501 United States|LD13 - LD7251 Universities. Colleges|LD7020 - LD7251 Women's colleges",79,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa",79,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML1400 - ML3275 Vocal music|ML1499 - ML1554 Choral music",79,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8525 - BX8528 Millennial Dawnists. Jehovah's Witnesses",78,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History|DR481 - DR605 By period|DR556 - DR567 1789-1861. 19th century",78,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT391 - DT398 Eritrea",78,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU150 - DU180 New South Wales",78,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2631 - PK2659 Panjabi",78,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP670 - TP699 Oils, fats, and waxes|TP690 - TP692.5 Petroleum refining. Petroleum products",78,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG987 - DG999 Malta. Maltese Islands",77,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period|DR93.4 - DR93.47 -1990",77,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5429.7 - HF5430.6 Shopping centers. Shopping malls",77,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1051 - LC1072 Professional education",77,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P326 - P326.5 Lexicology",77,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1992.93 - PN1992.95 Nonbroadcast video recordings",77,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6279 - PN6288 Epigrams",77,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6348.5 - PN6358 Emblems, devices",77,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ245 - RJ247 Nursing of children. Pediatric nursing",77,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S671 - S760.5 Farm machinery and farm engineering",77,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3870 - K3918 rimary production. Extractive industries",76,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA8300 - NA8480 Outbuildings, gates, fences, etc.",76,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature|PA3520 - PA3564 Criticism, interpretation, etc.",76,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT543 - DT543.9 Guinea",75,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada|F1121 - F1139 Newfoundland and Labrador",75,
        "L - Education|LF14 - LF5627 Individual institutions|LF1711 - LF2397 France",75,
        "P - Language and literature|PR1 - PR9680 English literature|PR951 - PR981 Folk literature",75,
        "U - Military science (General)|UE1 - UE500 Cavalry. Armor. Including horse cavalry, armored cavalry, mechanized cavalry",75,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL443 - DL537 History",74,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ30 - DQ49.5 Antiquities. Social life and customs. Ethnography",74,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E436 - E440.5 Buchanan's administration, 1857-1861",74,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC96 - GC97.8 Estuarine oceanography",74,
        "L - Education|LF14 - LF5627 Individual institutions|LF4610 - LF4827 Spain",74,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT180 - MT198 Organ",74,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB2001 - PB3029 Brittanic group|PB2801 - PB2932 Breton. Armorican",74,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM8001 - PM8995 Artificial languages|PM8201 - PM8298 Esperanto",74,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1301 - PN1333 Epic poetry",74,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ1298 - BJ1335 Evolutionary and genetic ethics",73,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K321 - K474 Schools of legal theory|K330 - K344 Positivism",73,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT259 - MT338 String instruments|MT300 - MT318 Violoncello",73,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB317.5 - SB319.86 Horticulture. Horticultural crops",73,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1212.32 - BL1215 Doctrines. Theology",72,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR95 - DR98 Local history and description",72,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E784 - E805 1919-1933. Harding-Coolidge-Hoover era. The twenties|E801 - E805 Hoover's administration, 1919-1933",72,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV191.68 - GV198.9 Camping",72,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN8701 - JN9599 Switzerland",72,
        "L - Education|LF14 - LF5627 Individual institutions|LF3248 - LF3897 Italy",72,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1251 - PT1299 Drama",72,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7101 - PT7211 Literary history and criticism|PT7177 - PT7211 Prose|PT7181 - PT7193 Sagas",72,
        "T - Technology.|TX1 - TX1110 Home economics.|TX950 - TX953 Taverns, barrooms, saloons",72,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT93 - BT93.6 Judaism",71,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7301 - BX7343 Disciples of Christ. Campbellites",71,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1026 - K1045 Sale of goods",71,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6374 - KZ6377 Threat of force",71,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC361 - LC629 Christian education. Church education|LC531 - LC629 Protestant",71,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1001 - PD1350 Old Germanic dialects|PD1101 - PD1211 Gothic",71,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG5631 - PG5689 Sorbian (Wendic)",71,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4001 - PN4355 Oratory. Elocution, etc.|PN4071 - PN4095 Study and teaching",71,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF756.5 - SF769.5 Special preclinical sciences (including veterinary genetics, ethology, anatomy, physiology, embryology)",71,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK911 - DK919.5 Kyrgyzstan. Kirghiz S.S.R. Kirghizia",70,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT330 - HT334 Metropolitan areas",70,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV9100 - JV9269 Australia. New Zealand",70,
        "L - Education|LF14 - LF5627 Individual institutions|LF1341 - LF1537 Austria",70,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC2700 - PC3708 Dialects. Provincialisms|PC3420.8 - PC3495 Langue d'oc dialects",70,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL7001 - PL7101 Australian languages",70,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD1020 - TD1066 Hazardous substances and their disposal",70,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK1000 - VK1249 Lighthouse service",70,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering|VM595 - VM989 Marine engineering",70,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK921 - DK929.5 Tajikistan. Tajik S.S.R. Tadzhikistan",69,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period|DR267 - DR267.5 1944-1989",69,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E740 - E749 General|E747 - E748 Biography",69,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ799.95 - HQ799.97 Adulthood",69,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC703 - NC725 General works",69,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK4700 - NK4890 Costume",69,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3211 - PG3219 Translations",69,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH471 - QH489 Reproduction",69,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK2000 - TK2891 Dynamoelectric machinery and auxiliaries (including generators, transformers, motors)",69,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP87 - BP89 Islamic literature",68,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History|DH571 - DH694 By period|DH677 - DH694 20th century",68,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History|DL1050 - DL1141.6 By period",68,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History|DL1050 - DL1141.6 By period|DL1055 - DL1141.6 Modern, 1523-",68,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period|DR238 - DR240.5 Early and medieval to 1601. Roman period",68,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT546.1 - DT546.49 French-speaking Equatorial Africa|DT546.1 - DT546.19 Gabon (Gaboon, Gabun)",68,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security|KZ5615 - KZ5893 Arms control and disarmament regimes|KZ5647 - KZ5686 Nuclear (Strategic) arms limitation",68,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE21 - LE23 Argentina",68,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1630 - ND1662 Examination and conservation of paintings",68,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z680.3 - Z680.6 Library communication systems",68,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT31 - CT83 History of biographical literature. Lives of biographers",67,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR927 - DR978.52 History|DR954 - DR978.52 By period",67,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.3 - DS646.34 Borneo. Kalimantan, Indonesia",67,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS901 - DS937 Korea|DS924 - DS925 Local history and description",67,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT351 - HT352 Suburban cities and towns",67,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law",67,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE951 - NE962 Special subjects",67,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ2340 - PJ2399 Libyco-Berber languages. Berber languages|PJ2369 - PJ2399 Berber languages",67,
        "Q - Science|QC1 - QC999 Physics|QC851 - QC999 Meteorology. Climatology (including the earth's atmosphere)|QC980 - QC999 Climatology and weather|QC994.95 - QC999 Weather forecasting",67,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA645.5 - RA645.9 Emergency medical services",67,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH365 - SH380.92 Shellfish fisheries. Shellfish culture",67,
        "A - General Works|AP1 - AP230 Periodicals|AP200 - AP230 Juvenile periodicals",66,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E300 - E302.6 General|E302.5 - E302.6 Biography (Late eighteenth century)",66,
        "F - America: local history|F1 - F975 United States local history|F721 - F723 Rocky Mountains. Yellowstone National Park",66,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1298 - KZ1304 The law of treaties. System of treaty law",66,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML475 - ML547 By region or country|ML489 - ML522 Europe",66,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK201 - PK379 Vedic",66,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6299 - PN6308 Maxims",66,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF521 - SF539.8 Bee culture",66,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T60 - T60.8 Work measurement. Methods engineering",66,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT56.8 - DT69.5 Antiquities|DT63 - DT63.5 Pyramids",65,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM811 - HM821 Deviant behavior. Social deviance",65,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1135 - NK1149.5 Arts and crafts movement",65,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9547 - PT9639 Collections",65,
        "R - Medicine|RB1 - RB214 Pathology|RB24 - RB33 Pathology anatomy and histology",65,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH328 - SH329 Fishery management. Fishery policy",65,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK549 - VK572 Science of navigation",65,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR101 - CR115 Flags, banners, and standards",64,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL101 - DL291 Denmark|DL143 - DL263.3 History|DL160 - DL263.3 By period",64,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden|DL971 - DL991 Local history and description",64,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ1 - DQ20 General",64,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC109 - GC149 Chemical oceanography",64,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K212 - K213 Methodology",64,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K2100 - K2385 Courts. Procedure|K2110 - K2155 Court organization and procedure",64,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KUQ1 - KUQ4990 New Zealand",64,
        "L - Education|LH1 - LH9 College and school magazines and papers",64,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML999 - ML1015 Plucked instruments",64,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP267.5 - TP301 Explosives and pyrotechnics",64,
        "U - Military science (General)|UB1 - UB900 Military administration|UB410 - UB415 Officers",64,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1050 - BL1060 By region",63,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.17 - DS646.29 Java",63,
        "E - History: America|E11 - E143 America|E75 - E99 Indians of North America|E81 - E83 Indian wars",63,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN7721 - JN7997 Sweden",63,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV6001 - JV6006 Periodicals. Serials",63,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K85 - K89 Legal research",63,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1031 - LC1034.5 Competency based education",63,
        "M - Music|MT1 - MT960 Musical instruction and study|MT955 - MT956 Musical theater",63,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF200 - TF320 Railway construction",63,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM435 - HM477 History of sociology. History of sociological theory|HM461 - HM473 Schools of sociology. Schools of social thought",62,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV8290 - HV8291 Private security services",62,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3770 - K3795 Science and arts. Research",62,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC189 - LC214.53 Educational sociology|LC212.9 - LC212.93 Sex differences in education",62,
        "M - Music|MT1 - MT960 Musical instruction and study|MT918 - MT948 School music",62,
        "R - Medicine|RK1 - RK715 Dentistry|RK58 - RK59.3 Practice of dentistry. Dental economics",62,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH20.3 - SH191 Aquaculture|SH151 - SH179 Fish culture|SH171 - SH179 Diseases and adverse factors",62,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL175 - BL265 Natural theology|BL205 - BL216 Nature and attributes of Deity",61,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR3499 - CR4420 Titles of honor, rank, precedence, etc",61,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography|GA300 - GA325 World maps, general atlases, etc.",61,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3601 - K3611 Medical legislation",61,
        "M - Music|MT1 - MT960 Musical instruction and study|MT90 - MT146 Analysis and appreciation of musical works|MT125 - MT130 Orchestral music",61,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6121 - PN6129 Orations",61,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism|PT5121 - PT5185 Special periods",61,
        "R - Medicine|RD1 - RD811 Surgery|RD137 - RD145 Surgery in childhood, adolescence, pregnancy, old age",61,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG211 - RG483 Abnormalities and diseases of the female genital organs",61,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF191 - SF275 Cattle|SF250.5 - SF275 Horse sports. Horse shows",61,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z53 - Z102 Shorthand. Stenography. Phonography",61,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ1001 - BQ1045 Buddhist literature",60,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT95 - BT97.2 Divine law. Moral government",60,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6901 - BX6997 Christian Science",60,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU200 - DU230 Victoria",60,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology|GB500 - GB555 Mountains. Orography",60,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT5320 - GT6737 Customs relative to special classes|GT5750 - GT6390 By occupation",60,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV4905 - HV5959 Animal experimentation. Anti-vivisection",60,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian|PD2401 - PD2446 Modern Icelandic",60,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism|PT5001 - PT5112 General",60,
        "T - Technology.|T1 - T995 Technology (General)|T11.95 - T12.5 Industrial directories",60,
        "T - Technology.|T1 - T995 Technology (General)|T351 - T385 Mechanical drawing. Engineering graphics",60,
        "V - Naval science|VG20 - VG2029 Minor services of navies|VG90 - VG95 Naval aviation",60,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ95 - DJ292 History|DJ151 - DJ292 By period|DJ215 - DJ292 19th-20th centuries",59,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT3031 - DT3145 Zambia. Northern Rhodesia",59,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2366 - LB2367.75 College examinations",59,
        "Q - Science|QC1 - QC999 Physics|QC770 - QC798 Nuclear and particle physics. Atomic energy. Radioactivity|QC794.95 - QC798 Radioactivity and radioactive substances",59,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF411 - SF459 Pets|SF441 - SF450 Cats",59,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF481 - SF507 Poultry. Eggs",59,
        "T - Technology.|TH1 - TH9745 Building construction|TH2025 - TH3000 Details in building design and construction (including walls, roofs)",59,
        "T - Technology.|TS1 - TS2301 Manufactures|TS800 - TS937 Wood technology. Lumber|TS840 - TS915 Wood products. Furniture",59,
        "U - Military science (General)|UD1 - UD495 Infantry|UD380 - UD425 Small arms. Swords, etc.",59,
        "V - Naval science|V1 - V995 Naval science (General)|V400 - V695 Naval education",59,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E303 - E309 1775-1789. The Confederation, 1783-1789",58,
        "F - America: local history|F1 - F975 United States local history|F476 - F485 Old Northwest. Northwest Territory",58,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1483 - HD1486 Agricultural associations, societies, etc.",58,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2667 - LC2698 Latin Americans. Hispanic Americans|LC2680 - LC2688 Mexican Americans. Mexicans in the United States",58,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1160 - NK1590 Decoration and ornament. Design|NK1548 - NK1590 Special subjects for design",58,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB354 - SB402 Fruit culture and orchard care|SB387 - SB399 Grape Culture, Viticulture",58,
        "U - Military science (General)|U1 - U900 Military science (General)|U150 - U155 Military planning",58,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z716 - Z716.1 Library extension. Library commissions. Traveling libraries",58,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1845 - BF1891 Fortune-telling",57,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D299 - D472 -1789|D301 - D309 Period of the French Revolution",57,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS591 - DS599 Malaysia. Malay Peninsula. Straits Settlements|DS597.36 - DS597.39 Sarawak",57,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC109 - JC121 Medieval state",57,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML475 - ML547 By region or country|ML525 - ML541 Asia",57,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF1401 - PF1541 Friesian",57,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8551 - BX8593 Moravian Church. United Brethren. Unitas Fratrum. Herrnhuters",56,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8701 - BX8749 New Jerusalem Church. New Church. Swedenborgianism",56,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT619 - DT620.9 Spanish West Africa",56,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML1091.8 - ML1093 Electronic instruments",56,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4100 - NA4145 Classed by material",56,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6001 - PK6099 General",56,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6329 - PN6338 Thoughts",56,
        "T - Technology.|TS1 - TS2301 Manufactures|TS1870 - TS1935 Rubber industry",56,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E376 - E380 John Quincy Adams' administration, 1825-1829",55,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E865 - E868 Ford's administration, August 9, 1974-1977",55,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5761 - HF5780 Shipment of goods. Delivery of goods",55,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah",55,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC701 - LC775 Jewish education",55,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC540 - TC558 Dams. Barrages",55,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP184 - BP184.9 Religious ceremonies, rites, etc.",54,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period|DR242 - DR249 1822-1881. 19th century",54,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.|G8950 - G9084 Australasia",54,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K100 - K103 Legal education",54,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K600 - K615 Private law",54,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT339 - MT533 Wind instruments|MT380 - MT392 Clarinet (A, Bb, C, Eb, etc.)",54,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6288.5 - PN6298 Epitaphs",54,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA645.3 - RA645.37 Home health care services",54,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK452 - TK454.4 Electric apparatus and materials. Electric circuits. Electric networks",54,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK7800 - TK8360 Electronics|TK8300 - TK8360 Photoelectronic devices (General)",54,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT450.5 - DT450.95 Burundi",53,
        "F - America: local history|F1 - F975 United States local history|F850.5 - F851.5 Pacific States",53,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1151 - GV1190 Shooting. Archery",53,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ836 - TJ927 Hydraulic machinery",53,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT491 - DT516.9 British West Africa|DT509 - DT509.9 Gambia",52,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU250 - DU280 Queensland",52,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC200 - GC376 Dynamics of the ocean|GC229 - GC296.8 Currents",52,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG9651 - HG9899 Fire insurance",52,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT161 - HT165 Garden cities. The 'city beautiful'",52,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV675 - HV677 Accidents. Prevention of accidents",52,
        "T - Technology.|TR1 - TR1050 Photography|TR925 - TR1050 Photomechanical processes",52,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK931 - DK939.5 Turkmenistan. Turkmen S.S.R.  Turkmenia",51,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR927 - DR978.52 History|DR954 - DR978.52 By period|DR969.8 - DR978.52 20th century",51,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ3801 - HJ3844 Revenue from sources other than taxation",51,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN5701 - JN5999 Netherlands",51,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN8423 - JN8661 Portugal",51,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV6021 - JV6032 History",51,
        "M - Music|ML1 - ML3930 Literature on music|ML3800 - ML3923 Philosophy and physics of music|ML3880 - ML3915 Criticism",51,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT740 - MT810 Instrumental techniques for children",51,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG700 - UG705 Tactics",51,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF889 - BF905 Graphology. Study of handwriting",50,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB1805 - LB2151 State teachers colleges|LB1991 - LB2151 Other regions or countries",50,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1390 - ND1393 Still life",50,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1001 - PJ1989 Egyptology|PJ1091 - PJ1109 Egyptian writing and its decipherment",50,
        "R - Medicine|RD1 - RD811 Surgery|RD701 - RD811 Orthopedic surgery|RD792 - RD811 Physical rehabilitation",50,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S600 - S600.7 Agricultural meteorology. Crops and climate",50,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB414.6 - SB417 Greenhouses and greenhouse culture",50,
        "U - Military science (General)|U1 - U900 Military science (General)|U164 - U167.5 Tactics",50,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL101 - DL291 Denmark|DL143 - DL263.3 History|DL160 - DL263.3 By period|DL184 - DL263.3 Modern, 1523-",49,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5.5 - JZ18 Periodicals",49,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3289 - K3367 Organs of government",49,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3978 - K3992 Public utilities",49,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7611 - K7688 Civil procedure. International civil procedure",49,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German|PF4501 - PF4596 Early Modern German",49,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1 - PL481 Ural-Altaic languages|PL450 - PL481 Tungus Manchu languages",49,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9201 - PT9499 Literary history and criticism|PT9320 - PT9370 Special periods",49,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ268 - TJ740 Steam engineering|TJ603 - TJ695 Locomotives",49,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC270 - UC360 Transportation",49,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z681.5 - Z681.7 Trustees. Library boards, committees, etc.",49,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL2230 - BL2240 Korea",48,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE9713 - HE9715 Cellular telephone services industry. Wireless telephone",48,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK1606 - JK1685 Government property, etc.",48,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1112 - K1116 Investments",48,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri",48,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KH1 - KH999 South America (General)",48,
        "M - Music|MT1 - MT960 Musical instruction and study|MT90 - MT146 Analysis and appreciation of musical works|MT140 - MT145 Chamber and solo instrumental music",48,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1135 - NB1150 General works",48,
        "R - Medicine|RZ201 - RZ999 Other systems of medicine|RZ400 - RZ408 Mental healing",48,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP480 - TP498 Low temperature engineering. Cyrogenic engineering. Refrigeration",48,
        "T - Technology.|TR1 - TR1050 Photography|TR590 - TR620 Lighting",48,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT490 - TT695 Clothing manufacture. Dressmaking. Tailoring",48,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA985 - UA997 Military geography",48,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG770 - UG1045 Organization. Personnel management",48,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL443 - DL537 History|DL460 - DL537 By period",47,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E416 - E420 Polk's administration, 1845-1849",47,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ2321 - HJ2323 Tax incidence. Tax shifting. Tax equity",47,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS1701 - JS1800 Canada",47,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3400 - K3431 Administrative law",47,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB1771 - LB1773 Certification of teachers",47,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE3 - LE5 Canada",47,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1160 - NB1195 Designs and technique",47,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX760 - NX770 Administration of the arts",47,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German|PF3992 - PF4010 Old Saxon",47,
        "R - Medicine|RD1 - RD811 Surgery|RD99 - RD99.35 Surgical nursing",47,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD250 - SD363.3 Forestry education",47,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC20 - UC258 Organization of the service. By region or country",47,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL71.5 - BL73 Biography",46,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT2421 - DT2525 Botswana. Bechuanaland",46,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT619 - DT620.9 Spanish West Africa|DT620 - DT620.9 Equatorial Guinea (Spanish Guinea)",46,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML3400 - ML3465 Dance music",46,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT733 - MT733.6 Band",46,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC970 - RC986 Military medicine. Naval medicine",46,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM930 - RM931 Rehabilitation therapy",46,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF371 - SF379 Sheep. Wool",46,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History|DQ78 - DQ210 By period|DQ201 - DQ210 20th century",45,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT201 - HT221 City population (including children in cities, immigration)",45,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K288 - K296 Interpretation and construction of law. Lacunae in law",45,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC129 - LC139 Compulsory education",45,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education|LC25 - LC33 Self-education. Self-culture",45,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE15 - LE17 West Indies",45,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P99.5 - P99.6 Nonverbal communication",45,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature|PA6141 - PA6144 Criticism, interpretation, etc.",45,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ2001 - PJ2199 Coptic",45,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ601 - PJ989 Special groups",45,
        "R - Medicine|RD1 - RD811 Surgery|RD101 - RD104 Fractures (General)",45,
        "R - Medicine|RF1 - RF547 Otorhinolaryngology|RF460 - RF547 Laryngology. Diseases of the throat",45,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK1250 - VK1299 Shipwrecks and fires",45,
        "B - Philosophy. Psychology. Religion|BJ1801 - BJ2195 Social usages. Etiquette|BJ2021 - BJ2078 Etiquette of entertaining",44,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP176 - BP181 The five duties of a Moslem.  Pillars of Islam",44,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History|DQ51 - DQ57 General",44,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1706 - HG1708 Accounting. Bookkeeping",44,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2599.5 - NA2599.9 Architectural criticism",44,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5211 - PJ5289 West Aramaic",44,
        "Q - Science|QK1 - QK989 Botany|QK474.8 - QK495 Spermatophyta. Phanerogams|QK494 - QK494.5 Gymnosperms",44,
        "R - Medicine|RD1 - RD811 Surgery|RD680 - RD688 Diseases of the locomotor system (Surgical treatment)",44,
        "R - Medicine|RE1 - RE994 Opthamology|RE939.2 - RE981 Optometry. Opticians. Eyeglasses",44,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD84 - DD257.4 History|DD121 - DD257.4 By period|DD121 - DD124 Earliest to 481",43,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT546.1 - DT546.49 French-speaking Equatorial Africa|DT546.3 - DT546.39 Central African Republic. Central African Empire. Ubangi-Shari",43,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K37 - K44 Bibliography",43,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3745 - LC3747 Children of immigrants (First generation)",43,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education|LC45 - LC45.8 Nonformal education",43,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH1001 - PH1079 Permic",43,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ601 - PJ989 Special groups|PJ701 - PJ989 Islamic",43,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8650 - PT8733 Collections",43,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ1040 - TJ1119 Machinery exclusive of prime movers",43,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT205 - TT267 Metalworking",43,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering|VM298.5 - VM301 Shipbuilding industry. Shipyards",43,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL175 - BL265 Natural theology|BL224 - BL227 Creation. Theory of the Earth",42,
        "C - Auxiliary Sciences of History|CJ1 - CJ6661 Numismatics|CJ4801 - CJ5450 Tokens",42,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E784 - E805 1919-1933. Harding-Coolidge-Hoover era. The twenties|E791 - E796 Coolidge's administration, August 2, 1923-1929",42,
        "H - Social sciences|HG1 - HG9999 Finance|HG4301 - HG4480.9 Trust services. Trust companies",42,
        "L - Education|LF14 - LF5627 Individual institutions|LF1541 - LF1549 Czech Republic",42,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT560 - MT570 Banjo",42,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German|PF5971 - PF5999 Slang. Argot, etc.",42,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG7900 - PG7925 Lechitic dialects",42,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6101 - PK6119 Avestan",42,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9650 - PT9876.36 Individual authors or works|PT9674 - PT9715 16th-18th centuries",42,
        "R - Medicine|RD1 - RD811 Surgery|RD151 - RD498 Military and naval surgery",42,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS139 - RS141.9 Pharmacopoeias",42,
        "U - Military science (General)|U1 - U900 Military science (General)|U310 - U310.2 War games",42,
        "V - Naval science|V1 - V995 Naval science (General)|V210 - V214.5 Submarine warfare",42,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT3161 - DT3257 Malawi. Nyasaland",41,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC200 - GC376 Dynamics of the ocean|GC228.5 - GC228.6 Ocean circulation",41,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC6601 - LC6660.4 Reading circles and correspondence clubs",41,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL6601 - PL6621 Papuan languages",41,
        "R - Medicine|RD1 - RD811 Surgery|RD49 - RD52 Surgical therapeutics. Preoperative and postoperative care",41,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG104 - RG104.7 Operative gynecology",41,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA177.4 - TA185 Engineering economy",41,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA715 - TA787 Earthwork. Foundations",41,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE279.5 - TE298 Pedestrian facilities",41,
        "U - Military science (General)|UG1500 - UG1530 Military astronautics. Space warfare. Space surveillance|UG1523 - UG1525 By region or country",41,
        "V - Naval science|VC10 - VC580 Naval maintenance",41,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B790 - B5802 Modern|B5800 - B5802 By religion",40,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography|GA192 - GA197.3 Map libraries, collections of maps, globes, etc.",40,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC150 - GC182 Physical oceanography",40,
        "M - Music|MT1 - MT960 Musical instruction and study|MT820 - MT915 Singing and vocal technique|MT825 - MT850 Systems and methods",40,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism|PQ9097 - PQ9119 Prose",40,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG801 - RG871 Puerperal state",40,
        "S - Agriculture|SK1 - SK663 Hunting|SK281 - SK293 Special methods and types of hunting (including bolos, game calling, tracking, trapping, dressing)",40,
        "T - Technology.|TH1 - TH9745 Building construction|TH845 - TH895 Architectural engineering. Structural engineering of buildings",40,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History|DH571 - DH694 By period|DH620 - DH676 1794-1909",39,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E431 - E435 Pierce's administration, 1853-1857",39,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS2101 - JS2143 Mexico",39,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2630 - LC2638 Asian Americans. Asians in the United States",39,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ255 - TJ265 Heat engines",39,
        "T - Technology.|TS1 - TS2301 Manufactures|TS940 - TS1047 Leather industries. Tanning",39,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1783 - BF1815 Seers. Prophets. Prophecies",38,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR51 - CR79 Crests, monograms, devices, badges, mottoes",38,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS491 - DS492.9 Bhutan",38,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary|HV8081 - HV8099 Private detectives. Detective bureaus",38,
        "J - Political Science|J1 - J981 General legislative and executive papers|J10 - J98 United States|J80 - J82 Presidents' messages and other executive papers",38,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6101 - JN6371 Belgium",38,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ118 - KZ194 Treaties and other international agreements",38,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT640 - MT654 Lute, balalaika, etc.",38,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6135 - PK6199.9 Middle Iranian languages",38,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6141 - PN6145 Essays",38,
        "R - Medicine|RD1 - RD811 Surgery|RD63 - RD76 Operating rooms and theaters. Instruments, apparatus, and appliances",38,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF191 - SF275 Cattle|SF221 - SF250 Horses",38,
        "T - Technology.|TR1 - TR1050 Photography|TR510 - TR545 Color Photography",38,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology|CC83 - CC97 Study and teaching. Research",37,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6630 - JN6639 Ukraine",37,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC241 - LC245 Foundations, endowments, funds",37,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1160 - NK1590 Decoration and ornament. Design|NK1160 - NK1174 General",37,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK1 - PK85 General",37,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9201 - PT9499 Literary history and criticism|PT9375 - PT9404 Poetry",37,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM283 - RM298 Endocrinotherapy. Organotherapy",37,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF84.82 - SF85.6 Rangelands. Range management. Grazing",37,
        "T - Technology.|TS1 - TS2301 Manufactures|TS195 - TS198.8 Packaging",37,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1501 - HS2460.7 Other societies. By classes|HS1601 - HS2265 Race socieities",36,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN5001 - JN5191 Greece",36,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN7011 - JN7066 Scandinavia. Northern Europe",36,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6130 - PN6140 Letters",36,
        "R - Medicine|RD1 - RD811 Surgery|RD75 - RD79 Examinations. Diagnosis",36,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ242 - RJ243 Hospital care",36,
        "R - Medicine|RZ201 - RZ999 Other systems of medicine|RZ409.7 - RZ999 Miscellaneous systems and treatments (including magnetotherapy, mesmerism, naturopathy, organomic medicine, phrenology, radiesthesia, etc.)",36,
        "T - Technology.|TC1501 - TC1800 Ocean engineering",36,
        "T - Technology.|TH1 - TH9745 Building construction|TH3301 - TH3411 Maintenance and repair",36,
        "V - Naval science|V1 - V995 Naval science (General)|V160 - V165 Strategy",36,
        "V - Naval science|VF1 - VF580 Naval ordnance",36,
        "A - General Works|AP1 - AP230 Periodicals|AP101 - AP115 Humorous periodicals",35,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF638 - BF648 New Thought. Menticulture, etc.",35,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9701 - BX9743 Salvation Army",35,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK61 - DJK77 Local history and description|DJK61 - DJK66 Black Sea region",35,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK680 - DK689.5 Armenia (Republic). Armenian S.S.R.",35,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.5 - DS646.59 Timor",35,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU350 - DU380 Western Australia",35,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5419 - HF5422 Wholesale trade",35,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBP1 - KBP4860 Islamic law. Shari'ah. Fiqh|KBP50 - KBP69 History, development and application of Islamic law",35,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC390 - NC670 Study and teaching",35,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2351 - PK2418 Marathi",35,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2701 - PK2708.9 Rajasthani",35,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2801 - PK2891 Sinhalese (Singhalese)",35,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages|PL3551 - PL4001 Tibeto-Burman languages|PL3851 - PL4001 Assam and Burma",35,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9547 - PT9639 Collections|PT9580 - PT9599 Poetry",35,
        "Q - Science|QL1 - QL991 Zoology|QL750 - QL795 Animal behavior|QL791 - QL795 Stories and anecdotes",35,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG491 - RG499 Diseases of the breast",35,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC530 - TC537 River protective works. Regulation. Flood control",35,
        "T - Technology.|TS1 - TS2301 Manufactures|TS1950 - TS1982 Animal products",35,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1100 - BL1107.5 General",34,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E838 - E840.8 General|E840.6 - E840.8 Biography (General)",34,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT5220 - GT5286 Customs relative to transportation and travel",34,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE323 - HE328 Transportation geography. Trade routes",34,
        "H - Social sciences|HG1 - HG9999 Finance|HG6105 - HG6270.9 Lotteries",34,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG9956 - HG9969 Casualty insurance",34,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KM - Asia and Eurasia, Africa, Pacific Area, and Antarctica. Asia",34,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1255 - KZ1273 Theory and principles|KZ1267 - KZ1273 Domain of the law of nations",34,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT259 - MT338 String instruments|MT320 - MT334 Double bass",34,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1370 - ND1375 Marine painting",34,
        "N - Fine Arts|NE1 - NE3002 Print media|NE2236 - NE2240.6 Serigraphy",34,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature|PL8015 - PL8021 Languages. By region or country",34,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ250 - RJ250.3 Premature infants",34,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF411 - SF459 Pets|SF456 - SF458.83 Fishes. Aquariums",34,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP934 - TP945 Paints, pigments, varnishes, etc.",34,
        "T - Technology.|TR1 - TR1050 Photography|TR250 - TR265 Cameras",34,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7801 - BX7843 German Baptist Brethren. Church of the Brethren. Dunkards",33,
        "E - History: America|E151 - E889 United States|E660 - E738 Late nineteenth century, 1865-1900|E660 - E664 General|E663 - E664 Biography",33,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1221 - GV1469.62 Indoor games and amusements|GV1301 - GV1311 Gambling. Chance and banking games",33,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K190 - K195 Ethnological jurisprudence. Primitive law",33,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KDZ1 - KDZ4999 Law of America. North America|KDZ1101 - KDZ1199 Organization of American States (OAS)",33,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH1101 - PH1109 Udmurt",33,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1001 - PK1095 Pali",33,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL490 - PL495 Far Eastern languages and literature",33,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1341 - PN1347 Folk poetry",33,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA771 - RA771.7 Rural health and hygiene. Rural health services",33,
        "R - Medicine|RL1 - RL803 Dermatology|RL201 - RL331 Hyperemias, inflammations, and infections of the skin",33,
        "R - Medicine|RX1 - RX681 Homeopathy",33,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S602 - S604.37 Methods and systems of culture. Cropping systems",33,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF405.5 - SF407 Laboratory animals",33,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T59.7 - T59.77 Human engineering in industry. Man-machine systems",33,
        "A - General Works|AZ101 - AZ999 History of scholarship and learning. The humanities|AZ191 - AZ193 Evaluation",32,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF207 - BF209 Psychotropic drugs and other substances",32,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1153.69 - BL1168 By region or country",32,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ20.5 - DQ26 Description and travel",32,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E371 - E375 Monroe's administrations, 1817-1825",32,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC65 - GC78 Underwater exploration",32,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K540 - K546 Trials",32,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7340 - K7512 Commercial law",32,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence",32,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1340 - KZA1417 Concepts and principles",32,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT259 - MT338 String instruments|MT280 - MT298 Viola",32,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT339 - MT533 Wind instruments|MT360 - MT379 Oboe",32,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1400 - NE1879 Metal engraving|NE1850 - NE1879 Color prints",32,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH1201 - PH1409 Ugric languages",32,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2781 - PK2790 Sindhi",32,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN821 - PN840 Germanic literature",32,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6066 - PN6069 Special classes of authors",32,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF670 - TF851 Local and light railways|TF840 - TF851 Elevated railways and subways",32,
        "T - Technology.|TH1 - TH9745 Building construction|TH6014 - TH6081 Environmental engineering of buildings. Sanitary engineering of buildings",32,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period|DR268 - DR269.6 -1989",31,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E386 - E390 Van Buren's administration, 1837-1841",31,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1493 - HD1493.5 Government owned and operated farms. State farms. Sovkhozes",31,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KM - Asia and Eurasia, Africa, Pacific Area, and Antarctica. Asia|KM1 - KM999 General",31,
        "L - Education|LF14 - LF5627 Individual institutions|LF4203 - LF4209 Poland",31,
        "P - Language and literature|PR1 - PR9680 English literature|PR921 - PR928 Essays",31,
        "T - Technology.|TH1 - TH9745 Building construction|TH5011 - TH5701 Construction by phase of work",31,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK4125 - TK4399 Electric lighting",31,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT950 - TT979 Hairdressing. Beauty culture. Barbers' work",31,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG637 - UG639 Education and training",31,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ4965 - BQ5030 Ceremonies and rites. Ceremonial rules",30,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR50 - DR50.84 Thrace",30,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E396 - E400 Tyler's administration, April 4, 1841-1845",30,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E761 - E765 Tafts' administration, 1909-1913",30,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography|GA110 - GA115 Projection",30,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC190 - GC190.5 Ocean-atmosphere interaction",30,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1470 - GV1511 Parties. Party games and stunts|GV1491 - GV1507 Puzzles",30,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1711 - HD1741 Irrigation",30,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC5900 - LC6101 Correspondence schools",30,
        "L - Education|LF14 - LF5627 Individual institutions|LF14 - LF1257 Great Britain|LF800 - LF957 Ireland",30,
        "L - Education|LF14 - LF5627 Individual institutions|LF5051 - LF5627 Turkey and the Baltic states",30,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2335 - NA2360 Competitions",30,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN20 - PN30 Societies",30,
        "P - Language and literature|PR1 - PR9680 English literature|PR911 - PR918 Letters",30,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA601 - RA602 Food and food supply in relation to public health",30,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD159 - TD168 Municipal engineering",30,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ751 - TJ805 Miscellaneous motors and engines (including gas, gasoline, diesel engines)",30,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology|CC200 - CC260 Bells. Campanology. Cowbells",29,
        "G - Geography. Anthropology. Recreation|GF1 - GF900 Human ecology. Anthropogeography|GF53 - GF71 Environmental influences on humans",29,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5484 - HF5495 Warehouses. Storage",29,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ981 - HQ996 Polygamy",29,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV4005 - HV4013 Immigrants",29,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF201 - JF619 Organs and functions of government|JF331 - JF341 Parliamentary government",29,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS8001 - JS8490 Australia. New Zealand. Pacific Ocean islands",29,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1287 - KZ1296 Codification of the law of nations",29,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG55 - LG57 Taiwan",29,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML465 - ML471 By period",29,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1940 - NE2232.5 Etching and aquatint|NE2120 - NE2140 General works",29,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH801 - PH836 Mari",29,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH20.3 - SH191 Aquaculture|SH33 - SH134.6 By region or country",29,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA170 - TA171 Environmental engineering",29,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA190 - TA195 Management of engineering works",29,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ940 - TJ940.5 Vacuum technology",29,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK9900 - TK9971 Electricity for amateurs. Amateur constructors' manuals",29,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK798 - VK997 Sailing directions. Pilot guides",29,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA5050 - ZA5185 Information from specific providers",29,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA5050 - ZA5185 Information from specific providers|ZA5050 - ZA5185 Government information",29,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works|AC901 - AC995 Pamphlet collections",28,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF2050 - BF2055 Human-alien encounters. Contact between humans and extraterrestrials",28,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions|BL1640 - BL1645 Syrian. Palestinian. Samaritan",28,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History|DL1050 - DL1141.6 By period|DL1055 - DL1141.6 Modern, 1523-|DL1090 - DL1105 1939-1945",28,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History|DL1050 - DL1141.6 By period|DL1055 - DL1141.6 Modern, 1523-|DL1090 - DL1105 1939-1945|DL1095 - DL1105 Russo-Finnish War, 1939-1940",28,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1780 - G2799 Eastern Hemisphere. Eurasia, Africa, etc.|G2740 - G2799 Australasia",28,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ998 - HQ999 Illegitimacy. Unmarried mothers",28,
        "J - Political Science|J1 - J981 General legislative and executive papers|J1 - J9 Gazettes",28,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1340 - KZA1417 Concepts and principles|KZA1348 - KZA1405 Mare liberum doctrine",28,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE36 - LE38 Chile",28,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3375 - NK3496.3 Wallpapers",28,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN3175 - PN3191 College and school theatricals",28,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6155 - PQ6167 Folk literature",28,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF391 - SF397.83 Swine",28,
        "T - Technology.|TR1 - TR1050 Photography|TR550 - TR581 Studio and Laboratory",28,
        "T - Technology.|TS1 - TS2301 Manufactures|TS2220 - TS2283 Tobacco industry",28,
        "U - Military science (General)|UD1 - UD495 Infantry|UD157 - UD302 Tactics. Maneuvers. Drill regulations",28,
        "U - Military science (General)|UH20 - UH910 Other services|UH600 - UH629.5 Military hygiene and sanitation",28,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7020 - BX7060 Church of God",27,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ401 - DJ411 Local history and description",27,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE5880 - HE5990 Express service",27,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ1305 - JZ2060 Scope of international relations|JZ1328 - JZ1395 By period",27,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3661 - K3674 Public safety",27,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML475 - ML547 By region or country|ML475 - ML486 America",27,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT339 - MT533 Wind instruments|MT400 - MT415 Bassoon",27,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE218 - NE330 Engraved portraits. Self",27,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3501 - PL3509 Non-Aryan languages of India and Southeastern Asia in general",27,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6080 - PN6095 Quotations|PN6086 - PN6089 French",27,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6080 - PN6095 Quotations|PN6090 - PN6110 German",27,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5901 - PT5980 Provincial, local, foreign",27,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7001 - PT7099 Scandinavian literature|PT7001 - PT7099 General|PT7090 - PT7099 Collections",27,
        "Q - Science|QD1 - QD999 Chemistry|QD450 - QD801 Physical and theoretical chemistry|QD625 - QD655 Radiation chemistry",27,
        "R - Medicine|RK1 - RK715 Dentistry|RK529 - RK535 Oral surgery",27,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF41 - SF55 History",27,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF95 - SF99 Feeds and feeding. Animal nutrition",27,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH346 - SH351 Fishery for individual species",27,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF501 - TF668 Railway operation and management",27,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z49 - Z51 Typewriters. Typewriting. Keyboards. Keyboarding",27,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z681 - Z681.3 Reproduction of library materials. Storage media of library materials",27,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History|DQ78 - DQ210 By period|DQ124 - DQ191 19th century",26,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada|F1121 - F1139 Newfoundland and Labrador|F1135 - F1139 Labrador",26,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA51 - GA87 Surveys (General)",26,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology|GB471 - GB478.99 Islands",26,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB980 - GB992 Watersheds. Runoff. Drainage",26,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3400 - K3431 Administrative law|K3402 - K3417 The administrative process",26,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3625 - K3649 Food. Drugs. Cosmetics",26,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K600 - K615 Private law|K605 - K615 Unification",26,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7120 - K7197 Persons",26,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR27 - KBR41.7 Official acts of the Holy See",26,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2574 - LC2576 Gays. Lesbians. Bisexuals",26,
        "M - Music|ML1 - ML3930 Literature on music|ML40 - ML44 Programs",26,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1550 - PK1569 Assamese",26,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6701 - PK6821 Afghan (Pashto, Pushto, Pushtu, etc.)",26,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6244 - PN6246 Literary extracts. Commonplace books",26,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1341 - PR1349 Letters",26,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7101 - PT7211 Literary history and criticism|PT7170 - PT7176 Poetry",26,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC91 - RC103 Diseases due to physical and chemical agents",26,
        "R - Medicine|RF1 - RF547 Otorhinolaryngology|RF341 - RF437 Rhinology. Diseases of the nose, accessory sinuses, and nasopharynx",26,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S589.75 - S589.76 Agriculture and the environment",26,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB175 - SB177 Food crops",26,
        "S - Agriculture|SK1 - SK663 Hunting|SK281 - SK293 Special methods and types of hunting (including bolos, game calling, tracking, trapping, dressing)|SK284 - SK287 Fox hunting",26,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT174 - TT176 Articles for children",26,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions|BL1620 - BL1625 Assyro-Babylonian",25,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period|DR241 - DR241.5 Phanariote regime, 1601-1822",25,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E391 - E393 William H. Harrison's administration, March 4-April 4, 1841",25,
        "F - America: local history|F1 - F975 United States local history|F296 - F301 Gulf States. West Florida",25,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See",25,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLF1 - KLF490 Belarus (Republic)",25,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1249 - KZ1252 International law and other disciplines",25,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1035 - LC1035.8 Basic education. Basic skills education",25,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1400 - NE1879 Metal engraving|NE1634 - NE1749 History",25,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK4990 - PK5046 Prakrit literature",25,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6135 - PK6199.9 Middle Iranian languages|PK6141 - PK6199.5 Pahlavi",25,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6500 - PT6592.36 Afrikaans literature|PT6500 - PT6530 Literary history and criticism",25,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF781 - SF809 Communicable diseases of animals (General)",25,
        "T - Technology.|TH1 - TH9745 Building construction|TH6101 - TH6887 Plumbing and pipefitting",25,
        "T - Technology.|TH1 - TH9745 Building construction|TH7700 - TH7975 Illumination. Lighting",25,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ241 - TJ254.7 Machine construction (General)",25,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP751 - TP762 Gas industry",25,
        "U - Military science (General)|UB1 - UB900 Military administration|UB275 - UB277 Psychological warfare. Propaganda",25,
        "U - Military science (General)|UB1 - UB900 Military administration|UB370 - UB375 Military pensions, etc.",25,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z52 - Z52.5 Word processing",25,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions|BL1600 - BL1605 General",24,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH901 - DH925 Luxembourg",24,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL443 - DL537 History|DL460 - DL537 By period|DL527 - DL537 20th century. Period of World War II, 1939-1945",24,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT160 - DT177 North Africa|DT167 - DT176 History|DT168 - DT169.5 Carthaginian period",24,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E421 - E423 Taylor's administiration, 1849-July 9, 1850",24,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ809 - HQ809.3 Family violence",24,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV4961 - HV4995 Degeneration",24,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3280 - K3282 Church and state",24,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLN1 - KLN489 Russian S.F.S.R. (to 1991)",24,
        "L - Education|LT6 - LT501 Textbooks",24,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH751 - PH785 Mordvin",24,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK3591 - PK4485 Sanskrit|PK4471 - PK4485 Translations",24,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1371 - PT1374 Early to 1950. Old and Middle High German",24,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7312 - PT7318 Scientific and learned literature",24,
        "Q - Science|QL1 - QL991 Zoology|QL799 - QL799.5 Morphology",24,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA619 - RA637 Disposal of the dead. Undertaking. Burial. Cremation. Cemeteries",24,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS192 - RS199 Pharmaceutical technology",24,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF105 - SF109 Breeding",24,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF811 - SF909 Veterinary medicine of special organs, regions, and systems",24,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE250 - TE278.8 Pavements and paved roads",24,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z703.5 - Z703.6 Moving. Disposition of books on shelves, etc. Including discarding, weeding",24,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF908 - BF940 The hand. Palmistry",23,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology|CC300 - CC350 Crosses",23,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT411 - DT411.9 Djibouti. French Territory of the Afars and Issas. French Somaliland",23,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV1 - JV5399 Colonies and colonization|JV412 - JV461 Administration and organization",23,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1370 - K1395 Insolvency and bankruptcy. Creditors' rights",23,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3566 - K3578 Public health",23,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL700 - KL2215 Mesopotamia. Assyro",23,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE66 - LE68 Peru",23,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2400 - NA2460 Museums. Exhibitions",23,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC1981 - PC1984 Sardinian",23,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages|PL4501 - PL4587 Munda languages (Kolarian languages)",23,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN611 - PN649 Ancient",23,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7450 - PT7495 Collections",23,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8301 - PT8574 Literary history and criticism|PT8420 - PT8456 Special periods",23,
        "R - Medicine|RE1 - RE994 Opthamology|RE925 - RE939 Refraction and errors of refraction and accommodation",23,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ50 - RJ51 Examination. Diagnosis",23,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM265 - RM267 Antibiotic therapy. Antibiotics",23,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA365 - TA367 Acoustics in engineering. Acoustical engineering",23,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD201 - TD500 Water supply for domestic and industrial purposes|TD481 - TD493 Water distribution systems",23,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG590 - UG613.5 Military telegraphy and telephony",23,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9901 - BX9969 Universalism. Universalists",22,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR4501 - CR6305 Chivalry and knighthood (Orders, decorations, etc.)|CR4571 - CR4595 Duels and dueling",22,
        "C - Auxiliary Sciences of History|CS1 - CS3090 Genealogy|CS23 - CS35 Genealogical lists, etc., covering more than one country or continent",22,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS600 - DS605 Malay Archipelago",22,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU300 - DU330 South Australia",22,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7260 - K7338 Obligations",22,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE11 - LE13 Central America",22,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG60 - LG170.2 India. Pakistan. Bangladesh. Burma. Sri Lanka. Nepal",22,
        "P - Language and literature|PE1 - PE3729 English language|PE814 - PE896 Early Modern English",22,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1201 - PK1409.5 Prakrit",22,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL700 - PL889 Japanese literature|PL885 - PL889 Local literature",22,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB418 - SB418.4 Container gardening",22,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP250 - TP261 Industrial electrochemistry",22,
        "T - Technology.|TS1 - TS2301 Manufactures|TS800 - TS937 Wood technology. Lumber|TS920 - TS937 Chemical processing of wood",22,
        "V - Naval science|VB15 - VB345 Naval administration|VB21 - VB124 By region or country",22,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA3150 - ZA3159 Information services. Information centers",22,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL425 - BL490 Religious doctrines (General)|BL465 - BL470 Worship of human beings",21,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1300 - BL1380 Jainism|BL1376 - BL1378.85 Forms of worship",21,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions|BL1615 - BL1616 Sumerian",21,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC941 - DC947 Monaco",21,
        "J - Political Science|JA1 - JA92 Political science (General)|JA27 - JA34 Societies",21,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1118 - KZA1122 Treaties and other international agreements",21,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH501 - PH509 Karelian",21,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2131 - PN2193 By period|PN2152 - PN2160 Medieval",21,
        "R - Medicine|R5 - R920 Medicine (General)|R722 - R722.32 Missionary medicine. Medical missionaries",21,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB992 - SB998 Economic zoology applied to crops. Agricultural zoology (including animals injurious and beneficial to plants)",21,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF855 - TF1127 Electric railways",21,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT300 - TT382.8 Painting. Wood finishing",21,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG470 - UG474 Military surveying, topography, and mapping",21,
        "U - Military science (General)|UH20 - UH910 Other services|UH20 - UH25 Chaplains",21,
        "U - Military science (General)|UH20 - UH910 Other services|UH520 - UH551 Care of sick and wounded. Relief societies",21,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK600 - VK794 Tide and current tables",21,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP186 - BP186.97 Special days and seasons, fasts, feasts, festivals, etc.",20,
        "C - Auxiliary Sciences of History|C1 - C51 Auxiliary Sciences of History (General)",20,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS591 - DS599 Malaysia. Malay Peninsula. Straits Settlements|DS597.33 - DS597.34 Sabah. British North Borneo",20,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT1991 - DT2054 Cape Province. Cape of Good Hope",20,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3260 - G3272 Polar regions",20,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV733 - GV734.5 Professionalism in sports. Professional sports (General)",20,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE9719 - HE9721 Artificial satellite telecommunications",20,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1501 - HS2460.7 Other societies. By classes|HS1501 - HS1510 Benevolent and friendly societies and mutual assessment fraternities",20,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS55 - JS67 History",20,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K280 - K286 Sources of law",20,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB2001 - PB3029 Brittanic group|PB2501 - PB2621 Cornish",20,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2896 - PK2899 Romani",20,
        "R - Medicine|RK1 - RK715 Dentistry|RK60.7 - RK60.8 Preventive dentistry",20,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH327.5 - SH327.7 Fishery resources. Fishery conservation",20,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF340 - TF499 Railway equipment and supplies",20,
        "U - Military science (General)|UE1 - UE500 Cavalry. Armor. Including horse cavalry, armored cavalry, mechanized cavalry|UE157 - UE302 Tactics. Maneuvers. Drill regulations",20,
        "V - Naval science|V1 - V995 Naval science (General)|V390 - V395 Naval research",20,
        "V - Naval science|VC10 - VC580 Naval maintenance|VC260 - VC268 Supplies and stores",20,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z684 - Z685 Supplies. Shelving. Bookstacks",20,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL70 - BL71 Sacred books (General)",19,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU182 - DU198 Tasmania. Van Diemen's Land",19,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3195 - G3199 Moon",19,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR620 - GR640 Cosmic phenomena",19,
        "H - Social sciences|HA1 - HA4737 Statistics|HA36 - HA37 Statistical services. Statistical bureaus",19,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ63 - JZ1153 Sources",19,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K215 - K218 History",19,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K795 - K798 Trusts and trustees",19,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ24 - KZ38 Societies, etc.",19,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli|KZ6540 - KZ6660 Warfare on sea",19,
        "L - Education|LF14 - LF5627 Individual institutions|LF14 - LF1257 Great Britain|LF960 - LF1137 Scotland",19,
        "L - Education|LF14 - LF5627 Individual institutions|LF4831 - LF4887 Portugal",19,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2190 - M2196 Sacred vocal music for children",19,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ991 - PJ995 Afroasiatic languages",19,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures|PK1981 - PK2000 Hindustani language",19,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4186 - PQ4199 Folk literature",19,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9201 - PT9499 Literary history and criticism|PT9460 - PT9499 Prose",19,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC924 - RC924.5 Diseases of the connective tissues",19,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ59 - RJ60 Infant and neonatal morbidity and mortality",19,
        "R - Medicine|RV1 - RV431 Botanic, Thomsonian, and eclectic medicine",19,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF461 - SF473 Birds",19,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF911 - SF914.4 Veterinary surgery",19,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG730 - UG735 Air defenses",19,
        "V - Naval science|VG20 - VG2029 Minor services of navies|VG100 - VG475 Medical service",19,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History|DH571 - DH694 By period|DH585 - DH619 1555-1794. Spanish and Austrian rule",18,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History|DQ78 - DQ210 By period|DQ78 - DQ110 Early and medieval to 1516",18,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS560 - DS560.72 Democratic Republic (North Vietnam), 1945-",18,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS650 - DS650.99 Brunei",18,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU392 - DU398 Northern Territory of Australia",18,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR650 - GR690 Geographical topics",18,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV750 - GV770.27 Air sports: Airplane flying, kiteflying, bungee-jumping, etc.",18,
        "H - Social sciences|HA1 - HA4737 Statistics|HA38 - HA39 Registration of vital events. Vital records",18,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1501 - HS2460.7 Other societies. By classes|HS1525 - HS1560 Religious socieities",18,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN7101 - JN7367 Denmark",18,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ3675 - JZ3875 State territory and its different parts",18,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC5701 - LC5771 Vacation schools. Summer schools",18,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC215 - LC238.4 Community and the school|LC230 - LC235 Parent-teacher associations. Home and school associations",18,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2147 - M2188 Liturgy and ritual|M2161 - M2183 Protestant churches",18,
        "M - Music|MT1 - MT960 Musical instruction and study|MT90 - MT146 Analysis and appreciation of musical works|MT110 - MT115 Oratorios, cantatas, etc.",18,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1290 - ND1293 Human figure",18,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1421 - PK1429.5 Apabhrams'a",18,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism|PQ9083 - PQ9095 Drama",18,
        "Q - Science|QR1 - QR502 Microbiology|QR99.6 - QR99.8 Cyanobacteria",18,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH213 - SH216.55 By oceans and seas",18,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK4001 - TK4102 Applications of electric power",18,
        "T - Technology.|TR1 - TR1050 Photography|TR504 - TR508 Transparencies, Diapositives",18,
        "V - Naval science|VB15 - VB345 Naval administration|VB320 - VB325 Minorities, women, etc. in navies",18,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA3201 - ZA3250 Information superhighway",18,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL443 - DL537 History|DL460 - DL537 By period|DL460 - DL478 Early and medieval to 1387",17,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT2541 - DT2686 Lesotho. Basutoland",17,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E426 - E430 Fillmore's administration, July 9, 1850-1853",17,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1218.5 - GV1220.8 Toys",17,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV200.6 - GV200.66 Caving. Spelunking",17,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD2321 - HD4730.9 Industry|HD2331 - HD2336 Home labor. Home-based businesses",17,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1685 - HG1704 Drafts. Checks",17,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ2042 - HQ2044 Life style",17,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary|HV8031 - HV8080 Police duty. Methods of protection|HV8079.5 - HV8079.55 Traffic control. Traffic accident investigation",17,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN7401 - JN7695 Norway",17,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3700 - K3705 Control of social activities",17,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7120 - K7197 Persons|K7125 - K7140 Natural persons",17,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1040 - KZA1065 Intergovernmental congresses and conferences",17,
        "L - Education|LF14 - LF5627 Individual institutions|LF4539 - LF4607 Sweden",17,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2147 - M2188 Liturgy and ritual|M2156 - M2160.87 Orthodox churches",17,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1220 - NE1233 General works",17,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX420 - NX430 Exhibitions",17,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4101 - PJ4197 West and North Semitic languages|PJ4171 - PJ4197 Phoenician-Punic",17,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1560 - PN1590 The performing arts. Show business|PN1585 - PN1589 Centers for the performing arts",17,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2131 - PN2193 By period|PN2171 - PN2179 Renaissance",17,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5351 - PT5395 Folk literature",17,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6000 - PT6466.36 Flemish literature since 1830|PT6000 - PT6199 Literary history and criticism",17,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7351 - PT7418 Literary history and criticism",17,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS151.2 - RS151.9 Dispensatories",17,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD390 - SD390.43 Forest soils",17,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF541 - SF560 Sericulture. Silk culture",17,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH388.7 - SH391.5 Algae culture. Seaweed",17,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA800 - TA820 Tunneling. Tunnels",17,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ170 - TJ179 Mechanics applied to machinery. Dynamics",17,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG760 - UG765 Aerial reconnaissance",17,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z691 - Z692 Special classes of materials. Including manuscripts, maps, microforms, serials",17,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History|DR1259 - DR1321 By period|DR1273 - DR1280 1800-1918",16,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.6 - DS646.69 Moluccas. Maluku",16,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT367 - DT367.8 Northeast Africa",16,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV743 - GV749 Athletic and sporting goods, supplies, etc.",16,
        "H - Social sciences|HN1 - HN995 Social history and conditions. Social problems. Social reform|HN41 - HN46 Community centers. Social centers",16,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK9663 - JK9993 Confederate States of America",16,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS1840 - JS2058 West Indies. Caribbean Area",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3184 - K3188 Form and structure of government",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3289 - K3367 Organs of government|K3310 - K3329 The legislature",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3289 - K3367 Organs of government|K3332 - K3363 Heads of state and the central government",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K68 - K70 Directories",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLP1 - KLP4989 Ukraine (1919-1991)",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ118 - KZ194 Treaties and other international agreements|KZ184 - KZ194 Peace treaties",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1430 - KZA1690 Maritime boundaries|KZA1630 - KZA1664 Continental shelf",16,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC5451 - LC5493 Aged education",16,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE71 - LE73 Uruguay",16,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG240 - LG277 Japan",16,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH701 - PH735 Sami",16,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM101 - PM2711 American languages (Aboriginal)|PM231 - PM355 American languages of British North America",16,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN661 - PN694 Medieval (to 1500)|PN692 - PN693 Prose. Prose fiction",16,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7326 - PT7338 Individual authors or works before 1540",16,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA604 - RA618 Parks, public baths, public carriers, buildings, etc.",16,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC1000 - RC1020 Submarine medicine",16,
        "S - Agriculture|SK1 - SK663 Hunting|SK295 - SK305 Big game",16,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ181 - TJ210 Mechanical movements",16,
        "T - Technology.|TS1 - TS2301 Manufactures|TS2120 - TS2159 Cereals and grain. Milling industry",16,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC400 - UC440 Barracks. Quarters. Camps",16,
        "U - Military science (General)|UD1 - UD495 Infantry|UD480 - UD485 Airborne troops. Parachute troops",16,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK1300 - VK1491 Saving of life and property",16,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions|BL1670 - BL1672 Canaanite",15,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6195 - BX6197 Arminians. Remonstrants",15,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX800 - BX4795 Catholic Church|BX4716.4 - BX4795 Dissenting sects other than Protestant",15,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E337.8 - E340 General|E339 - E340 Biography",15,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology|GB461 - GB468.99 Reefs",15,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1428 - HD1431 International cooperation",15,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ2035 - HQ2039 Life skills. Coping skills. Everyday living skills",15,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ961 - HQ967 Free love",15,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1241 - K1287 Insurance",15,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K4360 - K4375 Professions and occupations",15,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4720 - K4780 National defense. Military law",15,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT540 - MT557 Harp",15,
        "M - Music|MT1 - MT960 Musical instruction and study|MT20 - MT32 Special methods",15,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism|PT5201 - PT5243 Poetry",15,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6500 - PT6592.36 Afrikaans literature|PT6550 - PT6575 Collections",15,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9950 - PT9999 Provincial, local, foreign",15,
        "R - Medicine|RL1 - RL803 Dermatology|RL130 - RL169 Diseases of the glands, hair, nails",15,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM270 - RM282 Immunotherapy. Serum therapy",15,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF915 - SF919.5 Veterinary pharmacology",15,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE177 - TE178.8 Roadside development. Landscaping",15,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE200 - TE205 Materials for roadmaking",15,
        "T - Technology.|TX1 - TX1110 Home economics.|TX955 - TX985 Building operations and housekeeping",15,
        "U - Military science (General)|UB1 - UB900 Military administration|UB180 - UB197 Civilian personnel departments",15,
        "V - Naval science|V1 - V995 Naval science (General)|V720 - V743 Naval life, manners and customs, antiquities, etc.",15,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing|Z235 - Z236 Printer's marks, mottoes, etc.",15,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL350 - BL385 Classification of religions",14,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ5140 - BQ5355 Buddhist ministry. Priesthood. Organization",14,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT1029 - BT1040 Catechisms",14,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR4480 - CR4485 Royalty. Insignia. Regalia, crown and coronets, etc.",14,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL101 - DL291 Denmark|DL143 - DL263.3 History|DL160 - DL263.3 By period|DL160 - DL183.9 Early and medieval to 1523",14,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT468 - DT469 Islands (East African coast)",14,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT591 - DT615.9 Portuguese-speaking West Africa|DT615 - DT615.9 Sao Tome and Principe",14,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR890 - GR910 Occupations",14,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8053.5 - HG8054.45 Insurance for professions. Malpractice",14,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT251 - HT265 Mental and moral life",14,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5511.2 - JZ6299 Promotion of peace. Peaceful change|JZ5514 - JZ5526 Societies. Associations, etc.",14,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5511.2 - JZ6299 Promotion of peace. Peaceful change|JZ5527 - JZ5532 Congresses and conferences",14,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1700 - K1973 Social legislation|K1861 - K1929 Social insurance",14,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1700 - K1973 Social legislation|K1960 - K1973 Public welfare. Public assistance",14,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3289 - K3367 Organs of government|K3290 - K3304 The people. Election law",14,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7051 - K7054 International unification, approximation, and harmonization",14,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR190 - KBR2154.5 Sources",14,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLR1 - KLR490 Kazakhstan",14,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KWX - Antarctica",14,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2799 - LB2799.3 Educational consultants and consulting",14,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB3497 - LB3499 Hygiene in universities and colleges",14,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3503 - LC3520 Romanies. Gypsies",14,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1049 - LC1049.8 Cooperative education",14,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE31 - LE33 Brazil",14,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE41 - LE43 Colombia",14,
        "L - Education|LF14 - LF5627 Individual institutions|LF4440 - LF4441 Estonia",14,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK4501 - PK4681 Pali literature",14,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3301 - PL3311 Non-Chinese languages of China",14,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages|PL4301 - PL4470 Mon-Khmer (Mon-Anam) languages|PL4423 - PL4470 Bru, Chrau, Khasi, Muong, etc.",14,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6000 - PT6466.36 Flemish literature since 1830|PT6300 - PT6397 Collections",14,
        "R - Medicine|RL1 - RL803 Dermatology|RL110 - RL120 Therapeutics",14,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM671 - RM671.5 Nonprescription drugs. Patent medicines",14,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S604.5 - S604.64 Agricultural conservation",14,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB170 - SB172.5 Tree crops",14,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP875 - TP888 Cement industries",14,
        "U - Military science (General)|UF1 - UF910 Artillery|UF540 - UF545 Arsenals, magazines, armories, etc.",14,
        "V - Naval science|V1 - V995 Naval science (General)|V167 - V178 Tactics",14,
        "V - Naval science|VB15 - VB345 Naval administration|VB310 - VB315 Officers",14,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL576 - DL596 Local history and description",13,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History|DQ78 - DQ210 By period|DQ111 - DQ123 1516-1798",13,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC100 - GC103 Seawater",13,
        "H - Social sciences|HA1 - HA4737 Statistics|HA154 - HA4737 Statistical data|HA154 - HA155 Universal statistics",13,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE5751 - HE5870 Ferries",13,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5446 - HF5459 Canvassing. Peddling",13,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC345 - JC347 Symbolism",13,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K300 - K304 Classification of law. Typology",13,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3921 - K3925 Manufacturing industries",13,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL147 - KL177 Ancient legal systems compared",13,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL2800 - KL3099 Egypt",13,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC6571 - LC6581 Radio and television extension courses. Instruction by radio and television",13,
        "L - Education|LF14 - LF5627 Individual institutions|LF1561 - LF1697 Hungary",13,
        "L - Education|LF14 - LF5627 Individual institutions|LF4901 - LF5047 Switzerland",13,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML3300 - ML3354 Program music",13,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC1280 - NC1284 Printed ephemera. Imagerie populaire",13,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1400 - ND1403 Flowers. Fruit. Trees",13,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX798 - NX820 Arts centers and facilities",13,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6249 - PN6258 Ana",13,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7298 - PT7309 Religious works",13,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases|SB617 - SB618 Poisonous plants",13,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP700 - TP746 Illuminating industries (Nonelectric)",13,
        "U - Military science (General)|UF1 - UF910 Artillery|UF820 - UF830 Ballistics. Velocities and motions of projectiles",13,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG640 - UG645 Military aeronautical research",13,
        "V - Naval science|VF1 - VF580 Naval ordnance|VF346 - VF348 Naval weapons systems",13,
        "W - Health Sciences|W1 - W925 Health Professions",13,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL630 - BL632 Religious organization",12,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History|DH571 - DH694 By period|DH571 - DH584 Early and medieval to 1555",12,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK61 - DJK77 Local history and description|DJK76.2 - DJK76.8 Danube River Valley",12,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ1051 - HQ1057 The church and marriage",12,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ1058 - HQ1058.5 Widows and widowers. Widowhood",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1100 - K1109 Secured transactions",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3740 - K3762 Education",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K805 - K821 Succession upon death",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1234 - KZ1236 Legal research. Legal bibliography",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ24 - KZ38 Societies, etc.|KZ27 - KZ37 National",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4850 - KZ5490 Intergovernmental organizations. IGOs|KZ4853 - KZ4934 The League of Nations",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli|KZ6427 - KZ6437 Warfare on land",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD3489 - KZD4406 Peaceful uses of outer space",12,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC5501 - LC5560 Evening schools",12,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1036 - LC1036.8 Community education",12,
        "L - Education|LF14 - LF5627 Individual institutions|LF3911 - LF4067 Belgium",12,
        "L - Education|LF14 - LF5627 Individual institutions|LF4071 - LF4197 Netherlands",12,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG481 - LG505 West Africa",12,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M1356 - M1356.2 Dance orchestra and instrumental ensembles",12,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1000 - NE1027 General",12,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH91 - PH98.5 Finnic. Baltic-Finnic",12,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5211 - PJ5289 West Aramaic|PJ5211 - PJ5219.5 Biblical (Chaldaic)",12,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT881 - PT951 Folk literature|PT923 - PT937 Faust legend",12,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8301 - PT8574 Literary history and criticism|PT8540 - PT8574 Prose",12,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA646 - RA648.3 War and public health",12,
        "R - Medicine|RZ201 - RZ999 Other systems of medicine|RZ201 - RZ275 Chiropractic",12,
        "R - Medicine|RZ201 - RZ999 Other systems of medicine|RZ301 - RZ397.5 Osteopathy",12,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF84 - SF84.64 Economic zoology",12,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH334.9 - SH336.5 Fishery processing",12,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT161 - TT170.7 Manual training. School shops",12,
        "V - Naval science|VG20 - VG2029 Minor services of navies|VG50 - VG55 Coast guard and coast signal service",12,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works|AC801 - AC895 Inaugural and program dissertations",11,
        "A - General Works|AS1 - AS945 Academies and learned societies|AS2.5 - AS4 International associations, congresses, conferences, etc.",11,
        "C - Auxiliary Sciences of History|CN1 - CN1355 Inscriptions. Epigraphy|CN805 - CN865 By language",11,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK61 - DJK77 Local history and description|DJK71 - DJK76 Carpathian Mountain region",11,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT2181 - DT2278 KwaZulu-Natal. Natal",11,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E784 - E805 1919-1933. Harding-Coolidge-Hoover era. The twenties|E785 - E786 Harding's administration, 1921-August 2, 1923",11,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1059 - G1061 Maritime atlases (General)",11,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR940 - GR941 Mythical places",11,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ3675 - JZ3875 State territory and its different parts|JZ3686 - JZ3875 International waters",11,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ4835 - JZ5490 International organizations and associations|JZ4850 - JZ5490 Intergovernmental organizations. IGOs|JZ4853 - JZ4934 The League of Nations",11,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1094 - K1096 Loan of money",11,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3615 - K3622 Veterinary laws. Veterinary medicine and hygiene. Prevention of cruelty to animals",11,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K5000 - K5582 Criminal law and procedure|K5575 - K5582 Juvenile criminal law and procedure",11,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB162 - KB250 Legal systems compared",11,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2335.86 - LB2335.88 Trade unions",11,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC68 - LC70 Demographic aspects of education",11,
        "L - Education|LF14 - LF5627 Individual institutions|LF4449.2 - LF4449.5 Ukraine",11,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT728 - MT728.3 Chamber music",11,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG8001 - PG9146 Baltic|PG8201 - PG8208 Old Prussian",11,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6121 - PK6129 Old Persian",11,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6233 - PN6238 Anacreontic literature",11,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ781 - PQ841 Folk literature",11,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism|PT5250 - PT5295 Drama",11,
        "R - Medicine|RD1 - RD811 Surgery|RD98 - RD98.4 Surgical complications",11,
        "R - Medicine|RL1 - RL803 Dermatology|RL87 - RL94 Care and hygiene",11,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH344 - SH344.8 Methods and gear. Catching of fish",11,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ1350 - TJ1418 Hoisting and conveying machinery",11,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA940 - UA945 Military communication",11,
        "U - Military science (General)|UB1 - UB900 Military administration|UB440 - UB449.5 Retired military personnel",11,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1300 - BL1380 Jainism|BL1310 - BL1314.2 Sacred books. Sources",10,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions|BL1660 - BL1665 Phoenician. Carthaginian, etc.",10,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV700 - BV707 Parish. Congregation. The local church",10,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9884 - BX9886 United Church of Christ",10,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR927 - DR978.52 History|DR954 - DR978.52 By period|DR961 - DR969 1501-1912. Turkish rule",10,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8111 - HG8123 Government policy. State supervision",10,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT51 - HT65 Human settlements. Communities",10,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT621 - HT635 Orgin of social classes",10,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KQ - Africa",10,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education|LC47 - LC58.7 Private school education|LC58 - LC58.7 Preparatory schools. Preparatory school education",10,
        "M - Music|ML1 - ML3930 Literature on music|ML32 - ML33 Institutions",10,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT600 - MT612 Mandolin",10,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4150 - NA4160 Classed by form",10,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB2001 - PB3029 Brittanic group|PB3001 - PB3029 Gaulish",10,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL6145 - PL6167 Taiwan languages",10,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6319 - PN6328 Sayings, bon mots, etc.",10,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8301 - PT8574 Literary history and criticism|PT8460 - PT8489 Poetry",10,
        "Q - Science|QZ1 - QZ380 Pathology",10,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG484 - RG485 Urogynecology and obstetric urology. Urogynecologic surgery",10,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ52 - RJ53 Therapeutics",10,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS200 - RS201 Pharmaceutical dosage forms",10,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T59 - T59.2 Standardization",10,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF1300 - TF1620 High speed ground transportation",10,
        "U - Military science (General)|UD1 - UD495 Infantry|UD330 - UD335 Firing. Military sharpshooting",10,
        "U - Military science (General)|UF1 - UF910 Artillery|UF157 - UF302 Tactics. Maneuvers. Drill regulations",10,
        "U - Military science (General)|UF1 - UF910 Artillery|UF400 - UF405 Field artillery",10,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG615 - UG620 Military motor vehicles",10,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK321 - VK369.8 Harbors. Ports",10,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4600 - BQ4610 Relation to other religious and philosophical systems",9,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ5130 - BQ5137 Temple. Temple organization",9,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV1620 - BV1652 Social life, recreation, etc. in the church",9,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8799 - BX8809 Plymouth Brethren. Darbyites",9,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden|DL643 - DL879 History|DL660 - DL879 By period|DL660 - DL700.9 Early and medieval to 1523. Union of Kalmar, 1397",9,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT56.8 - DT69.5 Antiquities|DT68 - DT68.8 Religious antiquities",9,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training|GV450 - GV451.4 Nudism. Sunbathing",9,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD2321 - HD4730.9 Industry|HD2337 - HD2339 Sweatshops",9,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE331 - HE380 Traffic engineering. Roads and highways. Streets|HE374 - HE377 Bridges",9,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ4919 - HJ4936 Capitation. Poll tax",9,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7120 - K7197 Persons|K7155 - K7197 Domestic relations. Family law",9,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7260 - K7338 Obligations|K7265 - K7305 Contracts",9,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM531 - KBM619 Domestic relations. Family law",9,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli|KZ6665 - KZ6714 Air warfare",9,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3551 - LC3593 Jews",9,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1330 - NE1336 Linoleum block prints",9,
        "N - Fine Arts|NE1 - NE3002 Print media|NE2242 - NE2246 Monotype (Printmaking)",9,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB1801 - PB1867 Manx",9,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5211 - PJ5289 West Aramaic|PJ5281 - PJ5289 Neo-Aramaic",9,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5301 - PJ5329.5 East Aramaic",9,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4070 - PL4074 Miao-Yao languages",9,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM101 - PM2711 American languages (Aboriginal)|PM401 - PM501 American languages of the United States (and Mexico)",9,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1321 - PR1329 Oratory",9,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT7900 - PT7930 Folk literature",9,
        "Q - Science|QC1 - QC999 Physics|QC851 - QC999 Meteorology. Climatology (including the earth's atmosphere)|QC974.5 - QC976 Meteorological optics",9,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S588.4 - S589.6 Agricultural physics",9,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD813 - TD870 Street cleaning. Litter and its removal",9,
        "U - Military science (General)|U1 - U900 Military science (General)|U250 - U255 Maneuvers (combined arms)",9,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC700 - UC780 Subsistence",9,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ5100 - BQ5125 Symbols and symbolism",8,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR1101 - CR1131 Ecclesiastical and sacred heraldry",8,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G3100 - G3102 Antarctica",8,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR931 - GR935 Signs and symbols",8,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV200.4 - GV200.5 Orienteering. Wilderness survival",8,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5482 - HF5482.4 Secondhand trade",8,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ2336 - HJ2337 Tax exemption",8,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1150 - K1231 Maritime law|K1195 - K1223 Maritime social legislation",8,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7340 - K7512 Commercial law|K7350 - K7444 Commercial contracts",8,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLW1 - KLW490 Uzbekistan",8,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1319 - KZ1327 International legal regimes",8,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ118 - KZ194 Treaties and other international agreements|KZ170 - KZ173 -1920",8,
        "L - Education|L7 - L991 Education (General)|L797 - L898 Educational exhibitions and museums",8,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2667 - LC2698 Latin Americans. Hispanic Americans|LC2690 - LC2698 Puerto Ricans. Puerto Ricans in the United States",8,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE61 - LE63 Paraguay",8,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG200 - LG227 Philippines",8,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG351 - LG357 Lebanon",8,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG481 - LG505 West Africa|LG481 - LG483 Nigeria",8,
        "L - Education|LG21 - LG961 Individual institutions|LG715 - LG720 Australia",8,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2147 - M2188 Liturgy and ritual|M2186 - M2187 Jewish",8,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1199 - NB1200 Restoration of sculptures",8,
        "N - Fine Arts|NE1 - NE3002 Print media|NE2800 - NE2880 Printing of engravings",8,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5211 - PJ5289 West Aramaic|PJ5251 - PJ5259 Jewish Palestinian",8,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6309 - PN6318 Mottoes",8,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism|PT5300 - PT5348 Prose",8,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8600 - PT8637 Folk literature",8,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9547 - PT9639 Collections|PT9626 - PT9639 Prose",8,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC501 - QC718.8 Electricity|QC676 - QC678.6 Radio waves (Theory)",8,
        "Q - Science|QV1 - QV835 Pharmacology",8,
        "Q - Science|QZ1 - QZ380 Pathology|QZ200 - QZ380 Neoplasms. Cysts",8,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM146 - RM146.7 Misues of therapeutic drugs. Medication Errors",8,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD390.5 - SD390.7 Forest meteorology. Forest microclimatology",8,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK401 - VK529 Study and teaching",8,
        "W - Health Sciences|W1 - W925 Health Professions|W1 - W28 Reference Works. General Works",8,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ5035 - BQ5065 Hymns. Chants. Recitations",7,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.4 - DS646.49 Celebes. Sulawesi",7,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E415.6 - E415.9 General|E415.8 - E415.9 Biography",7,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3210 - G3222 Northern and Southern Hemispheres",7,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography|GA260 - GA288 Globe making, globes",7,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8205 - HG8220 Government insurance",7,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6730 - JN6739 Latvia",7,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS2145 - JS2219 Central America",7,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV9290 - JV9470 Pacific Ocean islands",7,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4720 - K4780 National defense. Military law|K4740 - K4760 Military criminal law and procedure",7,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM1 - KBM523.72 Halakah",7,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU3075 - KBU3165 Sacraments. Administration of sacraments. De sacramentis et administratione",7,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB3525 - LB3575 Special days",7,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2580 - LC2582 Student",7,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE46 - LE48 Ecuador",7,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA7910 - NA8125 Clubhouses, guild houses, etc.",7,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3175 - NK3296.3 Upholstery. Drapery",7,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH3801 - PH3820 Samoyedic languages",7,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ4951 - PJ4996 Medieval Hebrew",7,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2461 - PK2479 Marwari",7,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4001 - PN4355 Oratory. Elocution, etc.|PN4331 - PN4355 Recitations in foreign languages",7,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6340 - PN6348 Toasts",7,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR481 - PR488 21st century",7,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB354 - SB402 Fruit culture and orchard care|SB381 - SB386 Berries and Small Fruits",7,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF402 - SF405 Fur-bearing animals",7,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF408 - SF408.6 Zoo animals",7,
        "S - Agriculture|SK1 - SK663 Hunting|SK590 - SK593 Wild animal trade",7,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE206 - TE209.5 Location engineering",7,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ227 - TJ240 Machine design and drawing",7,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK301 - TK399 Electric meters",7,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA910 - UA915 Mobilization",7,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK573 - VK587 Nautical instruments",7,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6551 - BX6593 Catholic Apostolic Church. Irvingites",6,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6801 - BX6843 Christian Reformed Church",6,
        "C - Auxiliary Sciences of History|CN1 - CN1355 Inscriptions. Epigraphy|CN750 - CN753 Early Christian inscriptions",6,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR927 - DR978.52 History|DR954 - DR978.52 By period|DR954 - DR960.5 To 1501",6,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS631 - DS632 Ethnography",6,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.1 - DS646.15 Sumatra",6,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT2701 - DT2825 Swaziland",6,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1000 - G1000.5 Atlases of the moon, planets, etc.",6,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB2801 - GB2998 Hydrometerology",6,
        "J - Political Science|JJ1000 - JJ1019 Political institutions and public administration",6,
        "J - Political Science|JJ1000 - JJ1019 Political institutions and public administration|JJ1000 - JJ1019 North America",6,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ24 - JZ38 Societies. Associations, etc.",6,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ63 - JZ1153 Sources|JZ221 - JZ1153 By region or country",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7200 - K7218 Property",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7260 - K7338 Obligations|K7315 - K7338 Torts",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7340 - K7512 Commercial law|K7510 - K7512 Insolvency and bankruptcy. Creditors' rights",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM524.12 - KBM524.26 The concept of Jewish law",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU3500 - KBU3774 Sanctions in the Church. Criminal law. De sanctionibus in Ecclesia. De lege poenali",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL190 - KL420 Sources",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KQ - Africa|KQ2010 - KQ9000 Law of indigenous peoples",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1284 - KZ1285.5 Methodology",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security|KZ5615 - KZ5893 Arms control and disarmament regimes|KZ5687 - KZ5788.5 Nuclear weapon free zones and zones of peace",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD1118 - KZD1122 Treaties and other international agreements",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD3489 - KZD4406 Peaceful uses of outer space|KZD4030 - KZD4326 Public order in space and outer space",6,
        "L - Education|LF14 - LF5627 Individual institutions|LF3211 - LF3247 Greece",6,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1380 - ND1383 Animals. Birds",6,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1400 - NE1879 Metal engraving|NE1750 - NE1775 Copper engraving",6,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1700 - NK2195 Interior decoration. House decoration|NK2190 - NK2192 Church decoration",6,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF1001 - PF1184 Flemish",6,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5211 - PJ5289 West Aramaic|PJ5271 - PJ5279 Samaritan",6,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7581 - PT7599 Faroese literature",6,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8750 - PT8951.36 Individual authors or works|PT8750 - PT8775 16th-18th centuries",6,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH705 - QH705.5 Economic biology",6,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ47.3 - RJ47.4 Genetic aspects",6,
        "R - Medicine|RL1 - RL803 Dermatology|RL391 - RL489 Atrophies. Hypertrophies",6,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ950 - TJ1030 Pneumatic machinery",6,
        "U - Military science (General)|U1 - U900 Military science (General)|U320 - U325 Physical training of soldiers",6,
        "U - Military science (General)|UB1 - UB900 Military administration|UB160 - UB165 Records, returns, muster rolls, etc.",6,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC600 - UC695 Horses. Mules. Remount service",6,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG500 - UG565 Technical troops and other special corps",6,
        "U - Military science (General)|UH20 - UH910 Other services|UH750 - UH769 Military social work. Social welfare services",6,
        "V - Naval science|VB15 - VB345 Naval administration|VB260 - VB275 Enlisted personnel",6,
        "V - Naval science|VD7 - VD430 Naval seamen",6,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK588 - VK597 Marine hydrography. Hydrographic surveying",6,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP170.3 - BP170.5 Missionary work of Islam",5,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP188 - BP190 Islamic religious life|BP189.68 - BP189.7 Monasticism",5,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9875 - BX9877.1 United Brethren in Christ. Church of the United Brethren in Christ",5,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9881 - BX9882.95 United Church of Canada",5,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB881 - DB898 Liechtenstein",5,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History|DL1050 - DL1141.6 By period|DL1055 - DL1141.6 Modern, 1523-|DL1070 - DL1078 Revolution, 1917-1918. Civil War",5,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL443 - DL537 History|DL460 - DL537 By period|DL503 - DL526 1814-1905. 19th century",5,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT2291 - DT2378 Transvaal. South African Republic",5,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT179.2 - DT179.9 Northwest Africa",5,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G905 - G910 Tropics (General)",5,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1050 - G1052 Northern and Southern Hemispheres",5,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology|GN397 - GN397.5 Applied anthropology",5,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD6941 - HD6948 Employers' associations",5,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K109 - K110 Law societies. International bar associations",5,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM3790 - KBM4855 Criminal law and procedure",5,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4850 - KZ5490 Intergovernmental organizations. IGOs|KZ5330 - KZ5490 Regional organizations",5,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD3489 - KZD4406 Peaceful uses of outer space|KZD4030 - KZD4326 Public order in space and outer space|KZD4080 - KZD4210 Space flight",5,
        "L - Education|LF14 - LF5627 Individual institutions|LF14 - LF1257 Great Britain|LF1140 - LF1257 Wales",5,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG341 - LG345 Israel. Palestine",5,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG421 - LG423 Uganda",5,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG551 - LG552 Senegal",5,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG553 - LG554 Benin",5,
        "M - Music|ML1 - ML3930 Literature on music|ML3928 - ML3930 Literature for children",5,
        "M - Music|MT1 - MT960 Musical instruction and study|MT820 - MT915 Singing and vocal technique|MT898 - MT915 Techniques for children",5,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3475 - PG3476 1917-1960",5,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.|PN4825 - PN4830 Amateur journalism",5,
        "P - Language and literature|PR1 - PR9680 English literature|PR901 - PR907.2 Oratory",5,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9650 - PT9876.36 Individual authors or works|PT9650 - PT9651 Medieval",5,
        "Q - Science|QV1 - QV835 Pharmacology|QV701 - QV835 Pharmacy and Pharmaceutics",5,
        "R - Medicine|RL1 - RL803 Dermatology|RL760 - RL785 Diseases due to parasites",5,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S770 - S790.3 Agricultural structures. Farm buildings",5,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF101 - SF103.5 Brands and branding, and other means of identifying",5,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF114 - SF121 Exhibitions",5,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF411 - SF459 Pets|SF451 - SF455 Rabbits and hares",5,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA2001 - TA2040 Plasma engineering. Applied plasma dynamics",5,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC183 - TC201 General preliminary operations. Dredging. Submarine building",5,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK4601 - TK4661 Electric heating",5,
        "T - Technology.|TX1 - TX1110 Home economics.|TX851 - TX885 Dining-room service",5,
        "U - Military science (General)|UE1 - UE500 Cavalry. Armor. Including horse cavalry, armored cavalry, mechanized cavalry|UE460 - UE475 Horses",5,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG360 - UG390 Field engineering",5,
        "V - Naval science|VC10 - VC580 Naval maintenance|VC280 - VC345 Clothing and equipment",5,
        "V - Naval science|VC10 - VC580 Naval maintenance|VC350 - VC410 Subsistence. Provisioning",5,
        "V - Naval science|VF1 - VF580 Naval ordnance|VF21 - VF124 Naval ordnance",5,
        "V - Naval science|VF1 - VF580 Naval ordnance|VF350 - VF375 Ordnance and arms (General)",5,
        "W - Health Sciences|WZ1 - WZ350 History of Medicine",5,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA4050 - ZA4750 Information in specific formats or media|ZA4050 - ZA4460 Electronic information resources|ZA4450 - ZA4460 Databases",5,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP188 - BP190 Islamic religious life|BP188.2 - BP188.3 Devotional literature",4,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7079 - BX7097 Churches of God",4,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7401 - BX7430 Dowieism. Christian Catholic Church",4,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC921 - DC930 Andorra",4,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR996 - DR998 Local history and description",4,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E310 - E337 1789-1809. Constitutional period|E331 - E337 Jefferson's administrations, 1801-1809|E336 - E336.5 Neutral trade and its restrictions, 1800-1810",4,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB2601 - GB2798 Snow. Snow surveys",4,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV198.94 - GV198.97 Dude ranches",4,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE5746 - HE5749 Stage lines",4,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE9751 - HE9756 Messenger service",4,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5482.6 - HF5482.65 Black market",4,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5520 - HF5541 Office equipment and supplies",4,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ2326 - HJ2327 Progressive taxation",4,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ1001 - HQ1006 The state and marriage",4,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS951 - HS1179 Odd Fellows",4,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV701 - HV1420.5 Children|HV835 - HV847 Foundlings",4,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN7390 - JN7399 Finland",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K270 - K274 Acts and events",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K486 - K487 Relation of law to other topics",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1010 - K1014 The merchant. Business enterprises",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1054 - K1065.5 Negotiable instruments",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3440 - K3460 Civil service. Government officials and employees",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3926 - K3935 Food processing industries",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7060 - K7081 Choice of law",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7550 - K7582 Intellectual property",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB400 - KB4855 Interdisciplinary discussion of subjects",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM3098 - KBM3122 Medical legislation",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF1 - KF9827 Federal law. Common and collective state law",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL2 - KL135 General",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL4700 - KL4999 Hittite law",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA4130 - KZA4205 Public order of the oceans",4,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5161 - LC5163 Fundamental education",4,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG281 - LG285 Korea",4,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG302.2 - LG320 Former Soviet republics in Asia",4,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG471 - LG475 Transvaal",4,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG581 - LG593 German Africa (Former)",4,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT620 - MT634 Zither",4,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1293 - NB1895 Special forms|NB1312 - NB1313 Equestrian statues",4,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1400 - NE1879 Metal engraving|NE1620 - NE1630 General works",4,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1940 - NE2232.5 Etching and aquatint|NE2141 - NE2149 Special subjects",4,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB1101 - PB1200 Goidelic. Gaelic",4,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5301 - PJ5329.5 East Aramaic|PJ5321 - PJ5329.5 Mandaean",4,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK3591 - PK4485 Sanskrit|PK3801 - PK4251 Special subjects",4,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism|PQ9121 - PQ9128 Folk literature",4,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7500 - PT7511 Individual authors or works",4,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9547 - PT9639 Collections|PT9605 - PT9625 Drama",4,
        "R - Medicine|RE1 - RE994 Opthamology|RE986 - RE988 Artificial eyes and other prostheses",4,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS250 - RS252 Commercial preparations. Patent medicines",4,
        "U - Military science (General)|UB1 - UB900 Military administration|UB407 - UB409 Warrant officers. Noncommissioned officers",4,
        "V - Naval science|VD7 - VD430 Naval seamen|VD21 - VD124 By region or country",4,
        "V - Naval science|VG20 - VG2029 Minor services of navies|VG70 - VG85 Naval communication by telegraphy, telephone, etc.",4,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1170 - DL1180 Local history and description",3,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT2075 - DT2145 Orange Free State. Oranje Vrystaat",3,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU400 - DU430 New Zealand|DU428 - DU430 Local history and description",3,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada|F1141 - F1145.3 Nunavut",3,
        "G - Geography. Anthropology. Recreation|G3160 - G3171 Globes",3,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3190 - G3192 Celestial maps",3,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT5320 - GT6737 Customs relative to special classes|GT5320 - GT5690 By birth, rank, etc.",3,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1201 - HS1350 Knights of Pythias",3,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV701 - HV1420.5 Children|HV931 - HV941 Fresh-air funds",3,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6640 - JN6649 Belarus",3,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6680 - JN6689 Moldova",3,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ6422 - JZ6422.5 Neutrality",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1021 - K1022 Commercial agency",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1150 - K1231 Maritime law|K1226 - K1231 Marine insurance",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K578 - K579 Concepts applying to several branches of law",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7120 - K7197 Persons|K7155 - K7197 Domestic relations. Family law|K7181 - K7197 Parent and child. Guardian and ward",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7230 - K7245 Succession upon death",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7340 - K7512 Commercial law|K7449 - K7460 Maritime law",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM1572 - KBM1942 Courts and procedure",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM524.6 - KBM530 Persons",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM639 - KBM1424 Dinei mamonot",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR3077 - KBR3165 Sacraments. Administration of sacraments. De sacramentis et administratione",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL2200 - KL2499 Babylonia",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLM1 - KLM490 Moldova",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLT1 - KLT490 Tadjikistan",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security|KZ5615 - KZ5893 Arms control and disarmament regimes|KZ5870 - KZ5893 Mutual and balanced reduction of armed forces",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli|KZ6730 - KZ6785 The end of war. Armistice. Surrender. Postliminy",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD1340 - KZD1400 Concepts and principles. Theory",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD5614 - KZD6715 Un-peaceful uses of outer space",3,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3530 - LC3540 Lapps",3,
        "L - Education|LF14 - LF5627 Individual institutions|LF1550 - LF1550.8 Slovakia",3,
        "L - Education|LF14 - LF5627 Individual institutions|LF4445 - LF4446 Lithuania",3,
        "L - Education|LF14 - LF5627 Individual institutions|LF4451 - LF4487 Denmark",3,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG171 - LG172 Indochina",3,
        "L - Education|LG21 - LG961 Individual institutions|LG741 - LG745 New Zealand",3,
        "M - Music|ML1 - ML3930 Literature on music|ML112.8 - ML158.8 Bibliography|ML158.4 - ML158.6 Video recordings",3,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE965 - NE965.3 Tradesmen's cards",3,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH551 - PH559 Ingrian",3,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ2340 - PJ2399 Libyco-Berber languages. Berber languages|PJ2353 - PJ2367 Libyan group",3,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2261 - PK2270.9 Lahnda",3,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2892 - PK2892.95 Siraiki",3,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4051 - PL4054 Karen languages",3,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2131 - PN2193 By period|PN2131 - PN2145 Ancient",3,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7001 - PT7099 Scandinavian literature|PT7001 - PT7099 General|PT7088 - PT7089 Folk literature",3,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8301 - PT8574 Literary history and criticism|PT8500 - PT8534 Drama",3,
        "Q - Science|QS1 - QS681 Human Anatomy",3,
        "Q - Science|QV1 - QV835 Pharmacology|QV701 - QV835 Pharmacy and Pharmaceutics|QV738 - QV772 Drug Standardization. Pharmacognosy. Medicinal Plants",3,
        "R - Medicine|RD1 - RD811 Surgery|RD91 - RD91.5 Asepsis and antisepsis. Sterilization (Operative)",3,
        "R - Medicine|RL1 - RL803 Dermatology|RL701 - RL751 Diseases due to psychosomatic and nerve disorders. Dermatoneuroses",3,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS355 - RS356 Pharmaceutical supplies",3,
        "R - Medicine|RX1 - RX681 Homeopathy|RX601 - RX675 Materia medica and therapeutics",3,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB442.8 - SB443.4 Marketing, cut flower industry",3,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB444 - SB446.6 Horticultural service industry",3,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF361 - SF361.73 Donkeys",3,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF380 - SF388 Goats",3,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF511 - SF511.5 Ostrich",3,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH360 - SH363 Seal fisheries. Fur sealing",3,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE279.5 - TE298 Pedestrian facilities|TE280 - TE295 Sidewalks. Footpaths. Flagging",3,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ1501 - TJ1519 Sewing machines",3,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT980 - TT999 Laundry work",3,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA920 - UA925 Plans for attack and defense",3,
        "U - Military science (General)|UB1 - UB900 Military administration|UB380 - UB385 Soldiers' and sailors' homes",3,
        "U - Military science (General)|UE1 - UE500 Cavalry. Armor. Including horse cavalry, armored cavalry, mechanized cavalry|UE144 - UE145 Horse cavalry",3,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG570 - UG582 Military signaling",3,
        "U - Military science (General)|UH20 - UH910 Other services|UH800 - UH910 Recreation and information services",3,
        "V - Naval science|VB15 - VB345 Naval administration|VB170 - VB187 Civil department",3,
        "V - Naval science|VC10 - VC580 Naval maintenance|VC270 - VC279 Equipment of vessels, supplies, allowances, etc.",3,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK1500 - VK1661 Pilots and pilotage",3,
        "W - Health Sciences|W1 - W925 Health Professions|W32 - W64 Law. Ethics. Professional-Patient Relations",3,
        "W - Health Sciences|WX1 - WX225 Hospitals and Other Health Facilities",3,
        "W - Health Sciences|WX1 - WX225 Hospitals and Other Health Facilities|WX1 - WX100 Reference Works. General Works",3,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1108.19 - BL1108.7 Religious education",2,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1300 - BL1380 Jainism|BL1315 - BL1317 Jain literature",2,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ5070 - BQ5075 Altar, liturgical objects, ornaments, memorials, etc.",2,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV895 - BV896 Shrines. Holy places",2,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6051 - BX6093 Reformed Episcopal Church",2,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6751 - BX6793 Christian Church",2,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7451 - BX7493 Evangelical and Reformed Church",2,
        "C - Auxiliary Sciences of History|CS1 - CS3090 Genealogy|CS38 - CS39 Family history covering more than one country",2,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS331 - DS349.9 Southern Asia. Indian Ocean Region|DS349.8 - DS349.9 Islands of the Indian Ocean",2,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT669 - DT671 Islands",2,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3180 - G3182 Universe. Solar system",2,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC170 - GC190 Environmental policy",2,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC200 - GC376 Dynamics of the ocean|GC297 - GC299 Water masses and ocean mixing",2,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ3863 - HJ3925 Direct taxation",2,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV3025 - HV3174 Special classes. By occupation",2,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV3025 - HV3174 Special classes. By occupation|HV3025 - HV3163 Mariners",2,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV9029 - JV9036 Atlantic Ocean islands",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K321 - K474 Schools of legal theory|K325 - K328 Historical jurisprudence",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4720 - K4780 National defense. Military law|K4725 - K4734 The military establishment. Armed forces",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7120 - K7197 Persons|K7155 - K7197 Domestic relations. Family law|K7157 - K7179 Marriage. Husband and wife",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB400 - KB4855 Interdisciplinary discussion of subjects|KB2101 - KB2862 Constitutions and religion. Constitutional and administrative law",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM2070 - KBM2614 Constitutional law. Constitutional principles of the Jewish community",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM632 - KBM636.2 Inheritance and succession",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR2310 - KBR3026 Constitution of the Church",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR4000 - KBR4090 Church and state relationships. De relationibus inter ecclesiam et status. Ius publicum ecclesiae",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU2210 - KBU2212 The codes of canon law",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU3040 - KBU3070 The teaching office of the Church. Magisterium. De ecclesiae munere docendi",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KDZ1 - KDZ4999 Law of America. North America|KDZ2001 - KDZ2499.2 Bermuda",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KDZ1 - KDZ4999 Law of America. North America|KDZ3001 - KDZ3499 Greenland",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL5300 - KL5599 Persia",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLH1 - KLH490 Georgia (Republic)",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KQ - Africa|KQ2 - KQ197 History of law",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1329 - KZ3085 Early/Medieval development to ca. 1900. Ius Naturae et Gentium|KZ1330 - KZ1339 Peace of Westphalia to the French Revolution (1648",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ2 - KZ5.5 Bibliography",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ118 - KZ194 Treaties and other international agreements|KZ176 - KZ182.5 Boundary treaties",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD1420 - KZD1455 Boundaries",2,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1025 - LC1027 Collective education",2,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE27 - LE29 Bolivia",2,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG405 - LG411 South Africa",2,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG431 - LG438 Natal",2,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1293 - NB1895 Special forms|NB1750 - NB1793 Religious monuments and shrines",2,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1115 - ND1120 Study and teaching",2,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1350 - NE1352 Other materials used in relief printing",2,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1400 - NE1879 Metal engraving|NE1400 - NE1422 General",2,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1940 - NE2232.5 Etching and aquatint|NE1940 - NE1975 General",2,
        "N - Fine Arts|NE1 - NE3002 Print media|NE3000 - NE3002 Copying art. Copying machine art",2,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH541 - PH549 Veps",2,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH561 - PH569 Votic",2,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH581 - PH589 Livonian",2,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5211 - PJ5289 West Aramaic|PJ5241 - PJ5249 Christian Palestinian",2,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ601 - PJ989 Special groups|PJ601 - PJ621 Christian Oriental",2,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1471 - PK1490 Middle Indo-Aryan dialects",2,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages|PL3551 - PL4001 Tibeto-Burman languages|PL3561 - PL3801 Tibeto-Himalayan languages|PL3781 - PL3801 Himalayan languages",2,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages|PL4490 - PL4498 Chamic languages",2,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL950 - PL998 Korean literature|PL997 - PL998 Local literature",2,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7520 - PT7550 Provincial, local, foreign",2,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7581 - PT7599 Faroese literature|PT7598 - PT7599 Individual authors or works",2,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9201 - PT9499 Literary history and criticism|PT9415 - PT9449 Drama",2,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9509 - PT9542 Folk literature",2,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9547 - PT9639 Collections|PT9565 - PT9570 Translations",2,
        "Q - Science|QB1 - QB991 Astronomy|QB455 - QB456 Astrogelogy",2,
        "Q - Science|QS1 - QS681 Human Anatomy|QS1 - QS132 Anatomy",2,
        "Q - Science|QV1 - QV835 Pharmacology|QV1 - QV55 Reference Works. General Works",2,
        "Q - Science|QV1 - QV835 Pharmacology|QV701 - QV835 Pharmacy and Pharmaceutics|QV773 - QV835 Pharmaceutical Processes. Packaging. Labeling",2,
        "Q - Science|QW1 - QW949 Microbiology. Immunology",2,
        "R - Medicine|RX1 - RX681 Homeopathy|RX211 - RX581 Diseases, treatment, etc.",2,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S119 - S124 Propagation (including breeding, selection, grafting, air layering)",2,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S71 - S87 History",2,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF111 - SF113 Cost, yield, and profit. Accounting",2,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF780.2 - SF780.7 Veterinary microbiology, bacteriology, virology, mycology",2,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH400 - SH400.8 Seafood gathering",2,
        "S - Agriculture|SK1 - SK663 Hunting|SK650 - SK664 Wildlife-related recreation",2,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T58.7 - T58.8 Production capacity. Manufacturing capacity",2,
        "T - Technology.|TH1 - TH9745 Building construction|TH900 - TH915 Construction equipment in buildings",2,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ1425 - TJ1475 Lifting and pressing machinery",2,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ1480 - TJ1496 Agricultural machinery. Farm machinery",2,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ266 - TJ267.5 Turbines. Turbomachines (General)",2,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT201 - TT203 Lathework. Turning",2,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA929.5 - UA929.95 War damage in industry. Industrial defense",2,
        "U - Military science (General)|UD1 - UD495 Infantry|UD460 - UD464 Mountain troops",2,
        "U - Military science (General)|UF1 - UF910 Artillery|UF460 - UF465 Siege artillery",2,
        "U - Military science (General)|UF1 - UF910 Artillery|UF848 - UF856 Artillery instruments. Fire control, etc.",2,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG160 - UG302 Tactics and regulations",2,
        "U - Military science (General)|UH20 - UH910 Other services|UH700 - UH705 Public relations. Press. War correspondents",2,
        "V - Naval science|V1 - V995 Naval science (General)|V396 - V396.5 Military oceanography",2,
        "V - Naval science|VE7 - VE500 Marines|VE430 - VE435 Training camps",2,
        "V - Naval science|VF1 - VF580 Naval ordnance|VF390 - VF510 Ordnance material (Ordnance proper)",2,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK381 - VK397 Signaling",2,
        "W - Health Sciences|WB1 - WB962 Practice of Medicine",2,
        "W - Health Sciences|WB1 - WB962 Practice of Medicine|WB300 - WB962 Therapeutics",2,
        "W - Health Sciences|WE1 - WE890 Musculoskeletal System",2,
        "W - Health Sciences|WE1 - WE890 Musculoskeletal System|WE500 - WE600 Muscles and Tendons",2,
        "W - Health Sciences|WK1 - WK920 Endocrine System",2,
        "W - Health Sciences|WW1 - WW722.1 Ophthalmology",2,
        "W - Health Sciences|WY1 - WY300 Nursing",2,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ1365 - BJ1385 Positivist ethics",1,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1109.19 - BL1109.7 Antiquities. Archaeology. Inscriptions",1,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1300 - BL1380 Jainism|BL1375.3 - BL1375.7 Jaina pantheon. Deities",1,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX5996 - BX6030 Protestant Episcopal Church outside the United States",1,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6651 - BX6693 Christadelphians. Brothers of Christ",1,
        "C - Auxiliary Sciences of History|CE1 - CE97 Technical Chronology. Calendar|CE91 - CE92 Perpetual calendars. Century calendars, etc.",1,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ95 - DJ292 History|DJ151 - DJ292 By period|DJ151 - DJ152 Early and medieval to 1555",1,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL443 - DL537 History|DL460 - DL537 By period|DL480 - DL502 1387-1814. Union of Kalmar, 1397",1,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History|DR1259 - DR1321 By period|DR1259 - DR1265 Early and medieval to 1500",1,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History|DR1259 - DR1321 By period|DR1266 - DR1272 1500-1800",1,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT2831 - DT2864 British Central Africa. Federation of Rhodesia and Nyasaland",1,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1054 - G1055 Polar regions",1,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR865 - GR874 Transportation, travel, commerce, etc.",1,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1564 - GV1565 Darts",1,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV650 - HV670 Life saving",1,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN7370 - JN7379 Greenland",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1130 - K1132 Carriage of goods and passengers. Carriers",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4430 - K4675 Public finance|K4650 - K4675 State and local finance",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4700 - K4705 Government measures in time of war, national emergency, or economic crisis",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K524 - K525 Treaties and other international agreements",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K592 - K597 Regional divisions. Interregional comparative law",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7340 - K7512 Commercial law|K7485 - K7495 Business associations. Business corporations",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7550 - K7582 Intellectual property|K7555 - K7557 Copyright",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7550 - K7582 Intellectual property|K7570 - K7582 Industrial property",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7585 - K7595 Social legislation",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB400 - KB4855 Interdisciplinary discussion of subjects|KB1572 - KB1690 Courts and procedure",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB400 - KB4855 Interdisciplinary discussion of subjects|KB632 - KB636.2 Inheritance and succession",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM1468 - KBM1547 Social laws and legislation",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBP1 - KBP4860 Islamic law. Shari'ah. Fiqh|KBP100 - KBP136.8 Sources",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBP1 - KBP4860 Islamic law. Shari'ah. Fiqh|KBP70 - KBP75.4 Biography",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR2155 - KBR2157 Canon law and other disciplines or subjects",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR2160 - KBR2204.5 Canonical jurisprudence. Canonical science",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR2224 - KBR2295 Ius ecclesiasticum privatum",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR3500 - KBR3774 Penal (Criminal) law. De lege poenali",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR3780 - KBR3983 Judiciary. Ecclesiastical courts and procedure. De processibus",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU2 - KBU19 Bibliography",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU2160 - KBU2204 Canonical jurisprudence. Theory and science of canon law",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU2310 - KBU3026 Constitution of the Church",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU3780 - KBU3985 Courts and procedure. De processibus",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU4112 - KBU4820 Local Church government",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLS1 - KLS490 Kyrgyzstan",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLV1 - KLV490 Turkmenistan",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KN - South Asia. Southeast Asia. East Asia",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1329 - KZ3085 Early/Medieval development to ca. 1900. Ius Naturae et Gentium|KZ1373 - KZ1387.2 American Civil War to the First Conference of the Hague (1861-1899)",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security|KZ5615 - KZ5893 Arms control and disarmament regimes|KZ5637 - KZ5645 Conventional arms control",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security|KZ5615 - KZ5893 Arms control and disarmament regimes|KZ5834 - KZ5865 Other weapons of mass destruction",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ60 - KZ62.5 Intergovernmental congresses and conferences",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ118 - KZ194 Treaties and other international agreements|KZ119 - KZ165 To 1920",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ118 - KZ194 Treaties and other international agreements|KZ183 - KZ183.5 Treaties of arbitration, investigation, etc.",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA3481 - KZA3900 Marine resources conservation and development",1,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC361 - LC629 Christian education. Church education|LC446 - LC454 Orthodox Eastern Church",1,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1001 - LC1024 Humanistic education. liberal education|LC1022 - LC1022.25 Computer-assisted education",1,
        "L - Education|LF14 - LF5627 Individual institutions|LF1705 - LF1709 Finland",1,
        "L - Education|LF14 - LF5627 Individual institutions|LF4493 - LF4537 Norway",1,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG181 - LG184 Indonesia",1,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG361 - LG367 Syria",1,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG461 - LG462 Zimbabwe",1,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG541 - LG543 Madagascar",1,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG545 - LG547 Rwanda",1,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M1350 - M1353 Reduced orchestra",1,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT200 - MT208 Reed organ",1,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1120 - NB1133 Study and teaching",1,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC673 - NC677 Competitions",1,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE390 - NE395 Collected works",1,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE975 - NE975.4 Competitions",1,
        "N - Fine Arts|NE1 - NE3002 Print media|NE2685 - NE2685.8 Lumiprints",1,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH531 - PH539 Ludic",1,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages|PL4471 - PL4471.5 Nicobarese",1,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM9001 - PM9021 Secret languages",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7420 - PT7438 Folk literature",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7500 - PT7511 Individual authors or works|PT7500 - PT7501 16th-18th centuries",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7500 - PT7511 Individual authors or works|PT7510 - PT7511 19th-20th centuries",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7581 - PT7599 Faroese literature|PT7581 - PT7592 Literary history and criticism",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7581 - PT7599 Faroese literature|PT7593 - PT7596.5 Collections",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT8205 - PT8260 Provincial, local, foreign",1,
        "Q - Science|QS1 - QS681 Human Anatomy|QS604 - QS681 Embryology",1,
        "Q - Science|QT1 - QT275 Physiology",1,
        "Q - Science|QT1 - QT275 Physiology|QT1 - QT33.1 Reference Works. General Works",1,
        "Q - Science|QU1 - QU500 Biochemistry",1,
        "Q - Science|QU1 - QU500 Biochemistry|QU145 - QU220 Vitamins",1,
        "Q - Science|QW1 - QW949 Microbiology. Immunology|QW1 - QW300 Microbiology",1,
        "Q - Science|QW1 - QW949 Microbiology. Immunology|QW1 - QW300 Microbiology|QW55 - QW85 Environmental Microbiology",1,
        "Q - Science|QW1 - QW949 Microbiology. Immunology|QW501 - QW949 Immunology",1,
        "Q - Science|QW1 - QW949 Microbiology. Immunology|QW501 - QW949 Immunology|QW800 - QW949 Immunotherapy and Hypersensitivity",1,
        "Q - Science|QZ1 - QZ380 Pathology|QZ1 - QZ39 Reference Works. General Works",1,
        "Q - Science|QZ1 - QZ380 Pathology|QZ40 - QZ109 Pathogenesis. Etiology",1,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S107 - S109 Economic botany",1,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S113.2 - S118.46 Seeds. Seed technology",1,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S589.8 - S589.87 Plant growing media. Potting soils",1,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB406.7 - SB406.83 Plant propagation",1,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF170 - SF180 Working animals",1,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF911 - SF914.4 Veterinary surgery|SF914.3 - SF914.4 Veterinary traumatology. Veterinary emergencies",1,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH334.5 - SH334.7 Fishery technology",1,
        "S - Agriculture|SK1 - SK663 Hunting|SK281 - SK293 Special methods and types of hunting (including bolos, game calling, tracking, trapping, dressing)|SK291 - SK292 Coursing",1,
        "S - Agriculture|SK1 - SK663 Hunting|SK37 - SK39.5 Shooting",1,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA197 - TA198 Engineering meteorology",1,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD940 - TD949 Low temperature sanitary engineering",1,
        "T - Technology.|TH1 - TH9745 Building construction|TH8001 - TH8581 Decoration and decorative furnishings",1,
        "T - Technology.|TX1 - TX1110 Home economics.|TX1100 - TX1105 Mobile home living",1,
        "U - Military science (General)|UD1 - UD495 Infantry|UD490 - UD495 Airmobile operations",1,
        "U - Military science (General)|UF1 - UF910 Artillery|UF450 - UF455 Seacoast artillery",1,
        "U - Military science (General)|UF1 - UF910 Artillery|UF470 - UF475 Howitzer artillery. Mortar batteries",1,
        "V - Naval science|VB15 - VB345 Naval administration|VB307 - VB309 Warrant officers",1,
        "V - Naval science|VC10 - VC580 Naval maintenance|VC20 - VC258 Organization of service",1,
        "V - Naval science|VC10 - VC580 Naval maintenance|VC412 - VC425 Navy yards and stations. Shore facilities",1,
        "V - Naval science|VD7 - VD430 Naval seamen|VD160 - VD302 Drill regulations",1,
        "V - Naval science|VD7 - VD430 Naval seamen|VD360 - VD390 Small arms",1,
        "V - Naval science|VE7 - VE500 Marines|VE160 - VE302 Drill regulations",1,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering|VM165 - VM276 Study and teaching",1,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering|VM295 - VM296 Contracts and specifications",1,
        "W - Health Sciences|W1 - W925 Health Professions|W601 - W925 Forensic Sciences",1,
        "W - Health Sciences|W1 - W925 Health Professions|W601 - W925 Forensic Sciences|W775 - W867 Medicolegal Examination",1,
        "W - Health Sciences|W1 - W925 Health Professions|W74 - W80 Medical Economics",1,
        "W - Health Sciences|WA1 - WA950 Public Health",1,
        "W - Health Sciences|WA1 - WA950 Public Health|WA108 - WA245 Preventive Medicine",1,
        "W - Health Sciences|WB1 - WB962 Practice of Medicine|WB300 - WB962 Therapeutics|WB700 - WB760 Medical Climatology",1,
        "W - Health Sciences|WB1 - WB962 Practice of Medicine|WB300 - WB962 Therapeutics|WB880 - WB962 Complementary and Alternative Therapies",1,
        "W - Health Sciences|WH1 - WH700 Hemic and Lymphatic Systems",1,
        "W - Health Sciences|WH1 - WH700 Hemic and Lymphatic Systems|WH120 - WH540 Hematologic Diseases. Immunologic Factors. Blood Banks",1,
        "W - Health Sciences|WK1 - WK920 Endocrine System|WK1 - WK148 Reference Works. General Works",1,
        "W - Health Sciences|WK1 - WK920 Endocrine System|WK800 - WK885 Islets of Langerhans",1,
        "W - Health Sciences|WM1 - WM611 Psychiatry",1,
        "W - Health Sciences|WM1 - WM611 Psychiatry|WM400 - WM460.7 Therapies",1,
        "W - Health Sciences|WS1 - WS463 Pediatrics",1,
        "W - Health Sciences|WW1 - WW722.1 Ophthalmology|WW202 - WW290 Eye Structures",1,
        "W - Health Sciences|WY1 - WY300 Nursing|WY1 - WY49 Reference Works",1,
        "W - Health Sciences|WY1 - WY300 Nursing|WY150 - WY164 Nursing Techniques in Special Fields of Medicine",1,
        "W - Health Sciences|WZ1 - WZ350 History of Medicine|WZ1 - WZ40 Reference Works. General Works",1,
        "W - Health Sciences|WZ1 - WZ350 History of Medicine|WZ100 - WZ150 Biography",1],
      "language_f":[
        "English",5370515,
        "French",303671,
        "German",301869,
        "Spanish",290479,
        "Russian",183226,
        "Chinese",117537,
        "Italian",109867,
        "Latin",71053,
        "Portuguese",37429,
        "Czech",25985,
        "Arabic",25065],
      "publication_year_isort":[
        "2020",182365,
        "2010",125969,
        "2012",119678,
        "2009",119296,
        "2011",116129,
        "2006",115768,
        "2013",115474,
        "2008",115427,
        "2007",114335,
        "2014",111868,
        "2005",110237,
        "2000",108710,
        "2004",107212,
        "2016",107061,
        "2001",104176,
        "2015",102414,
        "2003",102191,
        "2002",101058,
        "1999",100094,
        "1998",93926,
        "1984",91962,
        "1997",90680,
        "1996",90448,
        "2017",89890,
        "1995",89371,
        "1994",88877,
        "1980",85457,
        "1992",84983,
        "1985",84912,
        "1983",82675,
        "1993",81591,
        "1991",81143,
        "1982",80435,
        "1986",79749,
        "2018",79684,
        "1981",79578,
        "1988",77644,
        "1990",77184,
        "1979",77120,
        "1989",76846,
        "1987",75842,
        "1978",75482,
        "1977",72335,
        "1974",68374,
        "1976",68309,
        "1975",61963,
        "1973",55643,
        "1972",52977,
        "1970",51571,
        "1971",50401,
        "1969",49905,
        "1968",47508,
        "1967",47400,
        "1966",43051,
        "1965",40586,
        "1964",40364,
        "2019",37333,
        "1963",34662,
        "1962",32429,
        "1949",30780,
        "1961",29735,
        "1960",29401,
        "1959",27046,
        "1958",24654,
        "1957",23395,
        "1954",22331,
        "1956",22029,
        "1955",20896,
        "1953",18796,
        "1950",17882,
        "1952",17611,
        "1951",17075,
        "1948",16418,
        "1947",16119,
        "1937",15089,
        "1938",14734,
        "1939",14729,
        "1946",14617,
        "1934",14411,
        "1941",14066,
        "1936",13981,
        "1940",13975,
        "1930",13912,
        "1935",13563,
        "1928",13553,
        "1942",13525,
        "1929",13426,
        "1944",13126,
        "1945",13124,
        "1927",13029,
        "1924",12895,
        "1931",12677,
        "1926",12608,
        "1943",12538,
        "1925",12455,
        "1800",12026,
        "1933",11921,
        "1932",11799,
        "1916",11058,
        "1923",10802],
      "author_facet_f":[
        "Geological Survey (U.S.)",47655,
        "Library of Congress. Congressional Research Service",32251,
        "EBSCO Publishing (Firm)",30070,
        "United States. National Aeronautics and Space Administration",27516,
        "National Bureau of Economic Research",27081,
        "United States. General Accounting Office",23043,
        "United States. Bureau of the Census",20824,
        "United States",20048,
        "United States. Department of Agriculture",15871,
        "Bibliothèque nationale de France",14003,
        "United States. Department of the Army",13712],
      "subject_genre_f":[
        "Nonfiction",5146881,
        "Biography",354974,
        "Fiction",298868,
        "Electronic journals",221728,
        "Reference",208897,
        "Early works to 1800",206987,
        "Periodicals",203671,
        "Congresses",174001,
        "Primary sources",94644,
        "Electronic books",92434,
        "Bibliography",84211],
      "subject_geographic_f":[
        "United States",1025473,
        "Great Britain",205864,
        "North Carolina",134559,
        "England",92556,
        "France",90820,
        "China",78966,
        "Germany",65911,
        "Europe",56647,
        "Soviet Union",53339,
        "India",46691,
        "Italy",44835],
      "subject_chronological_f":[
        "20th century",219426,
        "19th century",96329,
        "18th century",59052,
        "17th century",42884,
        "21st century",38470,
        "Civil War, 1861-1865",22899,
        "16th century",16571,
        "1945-",14524,
        "Revolution, 1775-1783",11421,
        "To 1500",10177,
        "Civil War, 1642-1649",9436]},
    "facet_ranges":{},
    "facet_intervals":{},
    "facet_heatmaps":{}},
  "stats":{
    "stats_fields":{
      "publication_year_isort":{
        "min":500.0,
        "max":2021.0,
        "count":6866230,
        "missing":176971,
        "sum":1.3425216158E10,
        "sumOfSquares":2.6298441453208E13,
        "mean":1955.2529055973948,
        "stddev":84.26005111204573}}}}

    http_version: null
  recorded_at: Fri, 25 Oct 2019 20:00:35 GMT
- request:
    method: get
    uri: https://query.discovery.trln.org/trlnbib/select?f.author_facet_f.facet.limit=11&f.available_f.facet.limit=11&f.date_cataloged_dt.facet.limit=11&f.language_f.facet.limit=11&f.lcc_callnum_classification_f.facet.limit=4501&f.location_hierarchy_f.facet.limit=201&f.location_hierarchy_f.facet.sort=count&f.physical_media_f.facet.limit=11&f.resource_type_f.facet.limit=11&f.subject_chronological_f.facet.limit=11&f.subject_genre_f.facet.limit=11&f.subject_geographic_f.facet.limit=11&f.subject_topical_f.facet.limit=11&facet=true&facet.field=subject_chronological_f&facet.query=date_cataloged_dt:%5BNOW-3MONTH/DAY%20TO%20NOW%5D&fq=institution_f:unc&q=book&rows=20&sort=score%20desc,%20publication_year_isort%20desc,%20title_sort_ssort_single%20asc&stats=true&stats.field=publication_year_isort&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.7.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 30 Nov 2022 15:14:03 GMT
      Content-Type:
      - application/json;charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - nginx/1.18.0
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {
  "responseHeader":{
    "zkConnected":true,
    "status":0,
    "QTime":2637,
    "params":{
      "f.lcc_callnum_classification_f.facet.limit":"4501",
      "facet.field":["access_type_f",
        "available_f",
        "{!ex=rollup}location_hierarchy_f",
        "resource_type_f",
        "physical_media_f",
        "subject_topical_f",
        "lcc_callnum_classification_f",
        "language_f",
        "{!ex=publication_year_isort_single}publication_year_isort",
        "author_facet_f",
        "subject_genre_f",
        "subject_geographic_f",
        "subject_chronological_f"],
      "f.available_f.facet.limit":"11",
      "f.date_cataloged_dt.facet.limit":"11",
      "f.location_hierarchy_f.facet.sort":"count",
      "f.subject_chronological_f.facet.limit":"11",
      "f.subject_genre_f.facet.limit":"11",
      "fq":"institution_f:unc",
      "sort":"score desc, publication_year_isort desc, title_sort_ssort_single asc",
      "rows":"20",
      "f.subject_geographic_f.facet.limit":"11",
      "facet.query":["date_cataloged_dt:[NOW-7DAY/DAY TO NOW]",
        "date_cataloged_dt:[NOW-1MONTH/DAY TO NOW]",
        "date_cataloged_dt:[NOW-3MONTH/DAY TO NOW]"],
      "q":"book",
      "f.language_f.facet.limit":"11",
      "f.location_hierarchy_f.facet.limit":"201",
      "stats":"true",
      "f.physical_media_f.facet.limit":"11",
      "f.author_facet_f.facet.limit":"11",
      "f.resource_type_f.facet.limit":"11",
      "f.subject_topical_f.facet.limit":"11",
      "facet":"true",
      "wt":"json",
      "stats.field":"publication_year_isort"}},
  "response":{"numFound":903164,"start":0,"docs":[
      {
        "id":"UNCb4676857",
        "isbn_number_a":["0439135257",
          "0439135265"],
        "isbn_qualifying_info_a":["",
          ""],
        "items_a":["{\"item_id\":\"i6146101\",\"loc_b\":\"lljd\",\"loc_n\":\"lljd\",\"status\":\"Available\",\"call_no\":\"JE Bruss\",\"cn_scheme\":\"ALPHANUM\"}"],
        "author_suggest":["Bruss, Deborah",
          "Beeke, Tiphanie"],
        "names_a":["{\"name\":\"Bruss, Deborah\",\"type\":\"creator\",\"id\":\"http://id.loc.gov/authorities/names/n99256940\"}",
          "{\"name\":\"Beeke, Tiphanie\",\"rel\":\"illustrator\",\"type\":\"contributor\",\"id\":\"http://id.loc.gov/authorities/names/nb98011425\"}"],
        "owner_a":["unc"],
        "edition_a":["1st ed."],
        "misc_id_a":["LCCN: 99059758"],
        "barcodes_a":["00024328283"],
        "language_a":["English"],
        "local_id":"b4676857",
        "shelfkey":"lc:PZ.0007.B828755--BO2001",
        "available_a":["Available"],
        "publisher_a":["Arthur A. Levine Books"],
        "rollup_id":"OCLC42955427",
        "title_suggest":["Book! book! book!"],
        "title_main":"Book! book! book!",
        "title_sort_ssort_single":"book book book",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number_old_a":["56025623"],
        "oclc_number":"42955427",
        "creator_main_a":["Bruss, Deborah"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"New York : Arthur A. Levine Books, 2001.\"}"],
        "note_general_a":["Unbound in two separate signatures."],
        "note_summary_a":["When the children go back to school, the animals on the farm are bored, so they go into the library in town trying to find something to do."],
        "primary_isbn_a":["0439135257",
          "0439135265"],
        "primary_oclc_a":["42955427"],
        "resource_type_a":["Book"],
        "shelf_numbers_a":["JE Bruss"],
        "subject_genre_a":["Fiction",
          "Novels"],
        "date_cataloged":"2005-04-28T04:00:00Z",
        "genre_headings_a":["Fiction"],
        "subject_suggest":["Fiction",
          "Domestic animals -- Fiction",
          "Animal sounds -- Fiction",
          "Libraries -- Fiction",
          "Books and reading -- Fiction"],
        "physical_media_a":["Print"],
        "subject_topical_a":["Domestic animals",
          "Animal sounds",
          "Libraries",
          "Books and reading"],
        "publication_year_sort":"2001",
        "reverse_shelfkey":"lc:A0}ZZZS}ORXRSUU~~OBXZZY",
        "subject_headings_a":["Domestic animals -- Fiction",
          "Animal sounds -- Fiction",
          "Libraries -- Fiction",
          "Books and reading -- Fiction"],
        "lc_call_nos_normed_a":["PZ.0007.B828755--BO2001"],
        "location_hierarchy_a":["unc",
          "unc:uncinfy"],
        "publisher_location_a":["New York"],
        "record_data_source_a":["ILSMARC"],
        "call_number_schemes_a":["ALPHANUM",
          "LC"],
        "origin_place_search_a":["New York",
          "New York (State)",
          "United States"],
        "physical_description_a":["29 unnumbered pages : color illustrations ; 26 cm"],
        "lcc_callnum_classification_a":["P - Language and literature",
          "P - Language and literature|PZ1 - PZ90 Fiction and juvenile belles lettres",
          "P - Language and literature|PZ1 - PZ90 Fiction and juvenile belles lettres|PZ5 - PZ90 Juvenile belles lettres"],
        "statement_of_responsibility_a":["by Deborah Bruss ; illustrated by Tiphanie Beeke."],
        "index_date":"2022-11-03T19:36:25Z"},
      {
        "id":"UNCb8553285",
        "isbn_number_a":["9780983381525",
          "0983381526"],
        "isbn_qualifying_info_a":["",
          ""],
        "items_a":["{\"item_id\":\"i11085059\",\"loc_b\":\"aada\",\"loc_n\":\"aada\",\"status\":\"Available\",\"call_no\":\"PS508.B53 A58 2011\",\"cn_scheme\":\"LC\"}"],
        "author_suggest":["Agu, Regina",
          "Donnett, Nathaniel",
          "Flowers, Quincy",
          "Ighile, Egie",
          "Jemison, Steffani, 1981-",
          "Jones, Otabenga",
          "McCloud, Ayanna Jolivet",
          "Taylor, MIchael Kahlil"],
        "names_a":["{\"name\":\"Agu, Regina\",\"rel\":\"author\",\"type\":\"creator\"}",
          "{\"name\":\"Donnett, Nathaniel\",\"rel\":\"author\",\"type\":\"creator\"}",
          "{\"name\":\"Flowers, Quincy\",\"rel\":\"author\",\"type\":\"creator\"}",
          "{\"name\":\"Ighile, Egie\",\"rel\":\"author\",\"type\":\"creator\"}",
          "{\"name\":\"Jemison, Steffani, 1981-\",\"rel\":\"author, editor\",\"type\":\"creator\",\"id\":\"http://id.loc.gov/authorities/names/no2013040425\"}",
          "{\"name\":\"Jones, Otabenga\",\"rel\":\"author\",\"type\":\"creator\"}",
          "{\"name\":\"McCloud, Ayanna Jolivet\",\"rel\":\"author\",\"type\":\"creator\"}",
          "{\"name\":\"Taylor, MIchael Kahlil\",\"rel\":\"author\",\"type\":\"creator\"}"],
        "owner_a":["unc"],
        "barcodes_a":["00048327602"],
        "language_a":["English"],
        "local_id":"b8553285",
        "note_toc_a":["Egie Ighile -- Doing what is necessary and needs to be done : a roundtable -- Talk amongst yourselves / Nathaniel Donnett -- Two buckets back east / Quincy Flowers -- When the page hits the fan / Michael Kahlil Taylor --- Dissident  / Ayanna Jolivet McCloud -- Instruction manual / Ayanna Jolivet McCloud -- Other : from noun to verb : a Book Club meeting -- Introspection / Stefani Jamison -- Index: black mo'nin' / Regina Agu."],
        "shelfkey":"lc:PS.0508.B53.A58--2011",
        "available_a":["Available"],
        "publisher_a":["Future Plan and Program"],
        "rollup_id":"OCLC935947766",
        "title_suggest":["Book Club book"],
        "title_main":"Book Club book",
        "title_sort_ssort_single":"book club book",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"935947766",
        "creator_main_a":["Agu, Regina, author"],
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"[Houston, Texas?] : Future Plan and Program, [2011]\"}"],
        "note_summary_a":["\"Book Club is a reading group and think tank incubated by Project Row Houses in Houston, Texas. The group convenes biweekly to investigate progressive, experimental, and provocative texts, with a particular focus on hard-to-find work by black authors. Book Club Book is a collection of emails, dialogues, poems, questions, fiction and memoranda by artists and writers involved with Book Club in 2010-2011.\""],
        "primary_isbn_a":["9780983381525",
          "0983381526"],
        "primary_oclc_a":["935947766"],
        "resource_type_a":["Book"],
        "subject_genre_a":["Literary collections"],
        "date_cataloged":"2016-08-23T04:00:00Z",
        "genre_headings_a":["Literary collections"],
        "subject_suggest":["Literary collections",
          "2000-2099",
          "American literature -- African American authors",
          "African Americans -- Literary collections",
          "African Americans",
          "American literature -- 21st century",
          "American literature"],
        "physical_media_a":["Print"],
        "subject_topical_a":["American literature",
          "African American authors",
          "African Americans"],
        "publication_year_sort":"2011",
        "reverse_shelfkey":"lc:A7}ZUZR}OUW}PUR~~XZYY",
        "subject_headings_a":["2000-2099",
          "American literature -- African American authors",
          "African Americans -- Literary collections",
          "African Americans",
          "American literature -- 21st century",
          "American literature"],
        "lc_call_nos_normed_a":["PS.0508.B53.A58--2011",
          "PS.0508.N3.A58--2011"],
        "location_hierarchy_a":["unc",
          "unc:uncarty"],
        "publisher_location_a":["Houston, Texas?"],
        "record_data_source_a":["ILSMARC"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["[Houston, Texas?]",
          "Texas",
          "United States"],
        "physical_description_a":["165 pages : illustrations ; 22 cm"],
        "subject_chronological_a":["2000-2099",
          "21st century"],
        "lcc_callnum_classification_a":["P - Language and literature",
          "P - Language and literature|PS1 - PS3626 American literature. Canadian literature",
          "P - Language and literature|PS1 - PS3626 American literature. Canadian literature|PS1 - PS3626 American literature",
          "P - Language and literature",
          "P - Language and literature|PS1 - PS3626 American literature. Canadian literature",
          "P - Language and literature|PS1 - PS3626 American literature. Canadian literature|PS1 - PS3626 American literature"],
        "statement_of_responsibility_a":["Regina Agu, Nathaniel Donnett, Quincy Flowers, Egie Ighile, Steffani Jemison, Otabenga Jones & Associates, Ayanna Jolivet McCloud, Michael Kahlil Taylor. ; series editor, Steffani Jemison."],
        "index_date":"2022-11-14T23:36:23Z"},
      {
        "id":"UNCb1363648",
        "issn_primary_a":["0069-1372"],
        "items_a":["{\"item_id\":\"i1857451\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1975\",\"call_no\":\"GV54.N7 N44\",\"cn_scheme\":\"LC\"}"],
        "author_suggest":["Celebrity Service International"],
        "names_a":["{\"name\":\"Celebrity Service International\",\"type\":\"no_rel\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: sn 86003002",
          "LCCN (canceled or invalid): 44034955"],
        "barcodes_a":["00046629610"],
        "holdings_a":["{\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"call_no\":\"GV54.N7 N44\",\"summary\":\"1975\"}"],
        "language_a":["English"],
        "local_id":"b1363648",
        "shelfkey":"lc:GV.0054.N7.N44",
        "available_a":["Available"],
        "frequency_former_a":["Semiannual"],
        "frequency_current_a":["Annual <, 1986->"],
        "publisher_a":["Times Pub. Group, Inc., etc."],
        "rollup_id":"OCLC2088633",
        "title_suggest":["Contact book."],
        "title_main":"Contact book.",
        "title_sort_ssort_single":"contact book",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"2088633",
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"[Towson, MD, etc., Times Pub. Group, Inc., etc.]\"}"],
        "note_general_a":["\"A trade directory of film, stage, radio, agent, hotel, producer, newspaper, night club, publishing contacts in New York city.\""],
        "primary_oclc_a":["2088633"],
        "note_issuance_a":["Issued by Celebrity Service, Inc., <1958->; by Celebrity Service International, Inc., <1986->"],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Directories",
          "Reference"],
        "title_variant_a":["Cover title: Celebrity Service International contact book <1975->"],
        "date_cataloged":"2004-10-01T04:00:00Z",
        "genre_headings_a":["Directories"],
        "subject_suggest":["Directories",
          "Amusements -- New York (State) -- New York -- Directories",
          "Amusements -- England -- London -- Directories",
          "Amusements -- France -- Paris -- Directories",
          "Amusements -- Italy -- Rome -- Directories",
          "Amusements -- California -- Hollywood (Los Angeles) -- Directories"],
        "physical_media_a":["Print"],
        "subject_topical_a":["Amusements"],
        "publication_year_sort":"2023",
        "reverse_shelfkey":"lc:J4}ZZUV}CS}CVV",
        "subject_headings_a":["Amusements -- New York (State) -- New York -- Directories",
          "Amusements -- England -- London -- Directories",
          "Amusements -- France -- Paris -- Directories",
          "Amusements -- Italy -- Rome -- Directories",
          "Amusements -- California -- Hollywood (Los Angeles) -- Directories"],
        "lc_call_nos_normed_a":["GV.0054.N7.N44"],
        "location_hierarchy_a":["unc",
          "unc:unclibr"],
        "publisher_location_a":["Towson, MD, etc."],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["New York (State)",
          "New York",
          "England",
          "London",
          "France",
          "Paris",
          "Italy",
          "Rome",
          "California",
          "Hollywood (Los Angeles)"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["[Towson, MD, etc.,",
          "Maryland",
          "United States"],
        "physical_description_a":["volumes ; 25 cm"],
        "lcc_callnum_classification_a":["G - Geography. Anthropology. Recreation",
          "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure"],
        "index_date":"2022-11-24T23:21:24Z"},
      {
        "id":"UNCb2111685",
        "isbn_number_a":["0224020749"],
        "isbn_qualifying_info_a":[":"],
        "items_a":["{\"item_id\":\"i3050926\",\"loc_b\":\"llda\",\"loc_n\":\"llda\",\"status\":\"Available\",\"copy_no\":\"c. 2\",\"call_no\":\"Z323 .B58 1985\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i3050925\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"call_no\":\"Z323 .B58 1985\",\"cn_scheme\":\"LC\"}"],
        "author_suggest":["Blond, Anthony"],
        "names_a":["{\"name\":\"Blond, Anthony\",\"type\":\"creator\",\"id\":\"http://id.loc.gov/authorities/names/n85326602\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 85191505"],
        "barcodes_a":["00008576409",
          "00003355648"],
        "language_a":["English"],
        "local_id":"b2111685",
        "shelfkey":"lc:Z..0323.B58.1985",
        "available_a":["Available"],
        "publisher_a":["J. Cape"],
        "rollup_id":"OCLC13498684",
        "title_suggest":["The book book"],
        "title_main":"The book book",
        "title_sort_ssort_single":"book book",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"13498684",
        "creator_main_a":["Blond, Anthony"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"London : J. Cape, 1985.\"}"],
        "note_general_a":["Includes index.",
          "Bibliography: pages 197-199."],
        "primary_isbn_a":["0224020749"],
        "primary_oclc_a":["13498684"],
        "resource_type_a":["Book"],
        "subject_genre_a":["Nonfiction"],
        "date_cataloged":"2004-10-01T04:00:00Z",
        "physical_media_a":["Print"],
        "subject_topical_a":["Book industries and trade",
          "Publishers and publishing"],
        "publication_year_sort":"1985",
        "reverse_shelfkey":"lc:0}}ZWXW}OUR}YQRU",
        "subject_headings_a":["Book industries and trade -- Great Britain",
          "Publishers and publishing -- Great Britain"],
        "subject_suggest":["Book industries and trade -- Great Britain",
          "Publishers and publishing -- Great Britain"],
        "lc_call_nos_normed_a":["Z..0323.B58.1985"],
        "location_hierarchy_a":["unc",
          "unc:uncinfy",
          "unc:unclibr"],
        "publisher_location_a":["London"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["Great Britain"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["London",
          "England",
          "United Kingdom"],
        "physical_description_a":["xi, 226 pages ; 23 cm"],
        "lcc_callnum_classification_a":["Z - Bibliography. Library Science. Information resources (general)",
          "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade",
          "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z278 - Z549 Bookselling and publishing"],
        "statement_of_responsibility_a":["Anthony Blond."],
        "index_date":"2022-11-28T01:06:24Z"},
      {
        "id":"UNCb1998034",
        "isbn_number_a":["0517467836"],
        "isbn_qualifying_info_a":[""],
        "items_a":["{\"item_id\":\"i2890247\",\"loc_b\":\"llda\",\"loc_n\":\"llda\",\"status\":\"Available\",\"call_no\":\"Z1035 .G53 1985\",\"cn_scheme\":\"LC\"}"],
        "author_suggest":["Gilbar, Steven"],
        "names_a":["{\"name\":\"Gilbar, Steven\",\"type\":\"creator\",\"id\":\"http://id.loc.gov/authorities/names/n80160650\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 84024304"],
        "barcodes_a":["00002840527"],
        "language_a":["English"],
        "local_id":"b1998034",
        "shelfkey":"lc:Z..1035.G53.1985",
        "available_a":["Available"],
        "publisher_a":["Bell Pub. Co."],
        "rollup_id":"OCLC11399145",
        "title_suggest":["The book book"],
        "title_main":"The book book",
        "title_sort_ssort_single":"book book",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"11399145",
        "creator_main_a":["Gilbar, Steven"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"New York : Bell Pub. Co., 1985, c1981.\"}"],
        "primary_isbn_a":["0517467836"],
        "primary_oclc_a":["11399145"],
        "resource_type_a":["Book"],
        "subject_genre_a":["Miscellanea",
          "Nonfiction"],
        "date_cataloged":"2004-10-01T04:00:00Z",
        "genre_headings_a":["Miscellanea"],
        "subject_suggest":["Miscellanea",
          "Best books",
          "Books -- Miscellanea",
          "Literary prizes",
          "Literature -- Miscellanea"],
        "physical_media_a":["Print"],
        "subject_topical_a":["Best books",
          "Books",
          "Literary prizes",
          "Literature"],
        "publication_year_sort":"1981",
        "reverse_shelfkey":"lc:0}}YZWU}JUW}YQRU",
        "subject_headings_a":["Best books",
          "Books -- Miscellanea",
          "Literary prizes",
          "Literature -- Miscellanea"],
        "lc_call_nos_normed_a":["Z..1035.G53.1985"],
        "location_hierarchy_a":["unc",
          "unc:uncinfy"],
        "publisher_location_a":["New York"],
        "record_data_source_a":["ILSMARC"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["New York",
          "New York (State)",
          "United States"],
        "physical_description_a":["229 pages ; 22 cm"],
        "lcc_callnum_classification_a":["Z - Bibliography. Library Science. Information resources (general)",
          "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography",
          "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography",
          "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1035 - Z1035.9 Best books"],
        "statement_of_responsibility_a":["Steven Gilbar."],
        "index_date":"2022-11-27T13:51:19Z"},
      {
        "id":"UNCb3231190",
        "isbn_number_a":["0312088035"],
        "isbn_qualifying_info_a":[":"],
        "items_a":["{\"item_id\":\"i4589713\",\"loc_b\":\"ydda\",\"loc_n\":\"ydda\",\"status\":\"Available\",\"call_no\":\"Z1034 .G54 1981\",\"cn_scheme\":\"LC\"}"],
        "author_suggest":["Gilbar, Steven"],
        "names_a":["{\"name\":\"Gilbar, Steven\",\"type\":\"creator\",\"id\":\"http://id.loc.gov/authorities/names/n80160650\"}"],
        "owner_a":["unc"],
        "edition_a":["1st ed."],
        "misc_id_a":["LCCN: 80027703"],
        "barcodes_a":["PL00012232"],
        "language_a":["English"],
        "local_id":"b3231190",
        "shelfkey":"lc:Z..1034.G54.1981",
        "available_a":["Available"],
        "publisher_a":["St. Martin's Press"],
        "rollup_id":"OCLC7168926",
        "title_suggest":["The book book"],
        "title_main":"The book book",
        "title_sort_ssort_single":"book book",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"7168926",
        "creator_main_a":["Gilbar, Steven"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"New York : St. Martin's Press, c1981.\"}"],
        "primary_isbn_a":["0312088035"],
        "primary_oclc_a":["7168926"],
        "resource_type_a":["Book"],
        "subject_genre_a":["Miscellanea",
          "Nonfiction"],
        "date_cataloged":"2004-10-01T04:00:00Z",
        "genre_headings_a":["Miscellanea"],
        "subject_suggest":["Miscellanea",
          "Books -- Miscellanea",
          "Literature -- Miscellanea"],
        "physical_media_a":["Print"],
        "subject_topical_a":["Books",
          "Literature"],
        "publication_year_sort":"1981",
        "reverse_shelfkey":"lc:0}}YZWV}JUV}YQRY",
        "subject_headings_a":["Books -- Miscellanea",
          "Literature -- Miscellanea"],
        "lc_call_nos_normed_a":["Z..1034.G54.1981"],
        "location_hierarchy_a":["unc",
          "unc:uncpark"],
        "publisher_location_a":["New York"],
        "record_data_source_a":["ILSMARC"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["New York",
          "New York (State)",
          "United States"],
        "physical_description_a":["229 pages ; 22 cm"],
        "lcc_callnum_classification_a":["Z - Bibliography. Library Science. Information resources (general)",
          "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography",
          "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography"],
        "statement_of_responsibility_a":["Steven Gilbar."],
        "index_date":"2022-10-29T02:36:18Z"},
      {
        "id":"UNCb3398424",
        "isbn_number_a":["0679840125",
          "067994012X"],
        "isbn_qualifying_info_a":[":",
          ""],
        "items_a":["{\"item_id\":\"i4820787\",\"loc_b\":\"lljd\",\"loc_n\":\"lljd\",\"status\":\"Available\",\"call_no\":\"J002 Brookfield\",\"cn_scheme\":\"ALPHANUM\"}"],
        "author_suggest":["Brookfield, Karen"],
        "names_a":["{\"name\":\"Brookfield, Karen\",\"type\":\"creator\",\"id\":\"http://id.loc.gov/authorities/names/n91052086\"}"],
        "owner_a":["unc"],
        "edition_a":["1st American ed."],
        "misc_id_a":["LCCN: 93018833"],
        "barcodes_a":["00017437463"],
        "language_a":["English"],
        "local_id":"b3398424",
        "shelfkey":"lc:Z..0004.B78.1993",
        "available_a":["Available"],
        "publisher_a":["A.A. Knopf",
          "Distributed by Random House"],
        "rollup_id":"OCLC27897806",
        "title_suggest":["Book",
          "Eyewitness books."],
        "title_main":"Book",
        "title_sort_ssort_single":"book",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"27897806",
        "series_work_a":["{\"title\":[\"Eyewitness books.\"]}"],
        "creator_main_a":["Brookfield, Karen"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"New York : A.A. Knopf : Distributed by Random House, 1993.\"}"],
        "note_general_a":["Includes index."],
        "note_summary_a":["Text and photographs trace the evolution of the written word, how the alphabet grew out of pictures, the development of papermaking, bookbinding, children's books, and more."],
        "primary_isbn_a":["0679840125",
          "067994012X"],
        "primary_oclc_a":["27897806"],
        "resource_type_a":["Book"],
        "shelf_numbers_a":["J002 Brookfield"],
        "subject_genre_a":["Juvenile literature",
          "Nonfiction"],
        "date_cataloged":"2004-10-01T04:00:00Z",
        "genre_headings_a":["Juvenile literature"],
        "subject_suggest":["Juvenile literature",
          "Books -- History -- Juvenile literature",
          "Books -- History"],
        "physical_media_a":["Print"],
        "subject_topical_a":["Books",
          "History"],
        "publication_year_sort":"1993",
        "reverse_shelfkey":"lc:0}}ZZZV}OSR}YQQW",
        "series_statement_a":["Eyewitness books"],
        "subject_headings_a":["Books -- History -- Juvenile literature",
          "Books -- History"],
        "lc_call_nos_normed_a":["Z..0004.B78.1993"],
        "location_hierarchy_a":["unc",
          "unc:uncinfy"],
        "publisher_location_a":["New York"],
        "record_data_source_a":["ILSMARC"],
        "call_number_schemes_a":["ALPHANUM",
          "LC"],
        "origin_place_search_a":["New York",
          "New York (State)",
          "United States"],
        "physical_description_a":["63 pages : color illustrations ; 29 cm."],
        "lcc_callnum_classification_a":["Z - Bibliography. Library Science. Information resources (general)",
          "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography",
          "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z4 - Z8 History of books and bookmaking"],
        "statement_of_responsibility_a":["written by Karen Brookfield ; photographed by Laurence Pordes."],
        "variant_names_vern":["カレン・ブルックフィールド"],
        "index_date":"2022-10-29T19:06:17Z"},
      {
        "id":"UNCb1303977",
        "issn_linking_a":["8756-6788"],
        "issn_primary_a":["8756-6788"],
        "items_a":["{\"item_id\":\"i1615783\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1956\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1615784\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1959\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8539084\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1960\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1615786\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1964\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8539130\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1966\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8539131\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1967\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8539132\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1968\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8539133\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1969\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8539136\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1972\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8539137\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1973\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8539138\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1974\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8539139\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1975\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8539761\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1976\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8539762\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1977\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8539783\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1978\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8539763\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1979\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8539764\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1980\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8539765\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1981\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8539776\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1982\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8539777\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1983\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8539778\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1984\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8539779\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1985\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8539780\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1986\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8539784\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1987\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8539785\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1988\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8539786\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1989\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8539141\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1990\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8539142\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1991\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1615787\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1992\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1615788\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1993\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1615789\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1994\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1615790\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1995\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1615791\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1996\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i8491111\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1998\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1615792\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1999\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1615793\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"2000\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i1615794\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"2001\",\"call_no\":\"HG4571 .N56\",\"cn_scheme\":\"LC\"}"],
        "author_suggest":["New York Stock Exchange"],
        "names_a":["{\"name\":\"New York Stock Exchange\",\"type\":\"creator\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 85641633",
          "LCCN (canceled or invalid): 56010699"],
        "barcodes_a":["00034862818",
          "00039681460",
          "00039681585",
          "00039681709",
          "00039681237",
          "00039681353",
          "00039681479",
          "00039681594",
          "00039681718",
          "00039681246",
          "00039681362",
          "00039681488",
          "00039681825",
          "00039681941",
          "00039682209",
          "00039682067",
          "00039682183",
          "00039682307",
          "00039682076",
          "00039682192",
          "00039682316",
          "00039681843",
          "00039681969",
          "00039682325",
          "00039681852",
          "00039681978",
          "00039681601",
          "00039681727",
          "00009436336",
          "00013033335",
          "00012694220",
          "00014788303",
          "00017340502",
          "00039281981",
          "00039281990",
          "00039282007",
          "00021181329"],
        "holdings_a":["{\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"call_no\":\"HG4571 .N56\",\"summary\":\"1956, 1959-1960, 1964, 1966-1969, 1972-1996, 1998-2001\"}"],
        "language_a":["English"],
        "local_id":"b1303977",
        "shelfkey":"lc:HG.4571.N56",
        "available_a":["Available"],
        "frequency_current_a":["Annual"],
        "publisher_a":["The New York Stock Exchange"],
        "rollup_id":"OCLC3805583",
        "title_suggest":["Fact book"],
        "title_main":"Fact book",
        "title_sort_ssort_single":"fact book",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number_old_a":["1303443",
          "1538251",
          "1588276",
          "2265028",
          "26114345",
          "39817038",
          "183315270",
          "183907421",
          "191710829",
          "427352121",
          "612788434",
          "640007788"],
        "oclc_number":"3805583",
        "creator_main_a":["New York Stock Exchange"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"[New York, N.Y.] : The New York Stock Exchange, [1956]-c2001.\"}"],
        "note_general_a":["Title from cover."],
        "primary_oclc_a":["3805583"],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals"],
        "title_variant_a":["Vols. for <1991-> have title: Fact book for the year ...",
          "Cover title: Fact book data <1996>-2001"],
        "date_cataloged":"2014-09-15T04:00:00Z",
        "genre_headings_a":["Periodicals"],
        "subject_suggest":["Periodicals",
          "New York Stock Exchange -- Periodicals",
          "New York Stock Exchange"],
        "physical_media_a":["Print"],
        "subject_topical_a":["New York Stock Exchange"],
        "publication_year_sort":"2001",
        "reverse_shelfkey":"lc:IJ}VUSY}CUT",
        "subject_headings_a":["New York Stock Exchange -- Periodicals",
          "New York Stock Exchange"],
        "note_related_work_a":["Continued as a online resource called:  Facts & figures."],
        "note_serial_dates_a":["1956-2001."],
        "lc_call_nos_normed_a":["HG.4571.N56"],
        "location_hierarchy_a":["unc",
          "unc:unclibr"],
        "publisher_location_a":["New York, N.Y."],
        "record_data_source_a":["ILSMARC"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["[New York, N.Y.]",
          "New York (State)",
          "United States"],
        "physical_description_a":["volumes : illustrations ; 23 cm"],
        "lcc_callnum_classification_a":["H - Social sciences",
          "H - Social sciences|HG1 - HG9999 Finance"],
        "statement_of_responsibility_a":["New York Stock Exchange."],
        "index_date":"2022-11-24T17:36:56Z"},
      {
        "id":"UNCb3460824",
        "issn_primary_a":["0739-3229"],
        "items_a":["{\"item_id\":\"i4887445\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"In-Library Use Only\",\"vol\":\"2018\",\"call_no\":\"D 210.17/3:2018\",\"cn_scheme\":\"SUDOC\"}"],
        "author_suggest":["Naval Research Laboratory (U.S.)"],
        "names_a":["{\"name\":\"Naval Research Laboratory (U.S.)\",\"type\":\"creator\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 83644603",
          "GPO Item Number: 407-C-2 (microfiche)"],
        "barcodes_a":["00053482783"],
        "language_a":["English"],
        "local_id":"b3460824",
        "shelfkey":"sudoc:D 210.17/3:2018",
        "available_a":["Available"],
        "frequency_current_a":["Annual"],
        "publisher_a":["The Laboratory"],
        "rollup_id":"OCLC9697689",
        "title_suggest":["Fact book",
          "NRL publication."],
        "title_main":"Fact book",
        "title_sort_ssort_single":"fact book",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"9697689",
        "series_work_a":["{\"title\":[\"NRL publication.\"]}"],
        "creator_main_a":["Naval Research Laboratory (U.S.)"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Washington, D.C. : The Laboratory.\"}"],
        "primary_oclc_a":["9697689"],
        "resource_type_a":["Government publication",
          "Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals"],
        "title_variant_a":["Spine title: NRL fact book <1982>-198"],
        "date_cataloged":"2004-10-01T04:00:00Z",
        "genre_headings_a":["Periodicals"],
        "subject_suggest":["Periodicals",
          "Naval Research Laboratory (U.S.) -- Periodicals",
          "Naval research -- United States -- Periodicals"],
        "note_numbering_a":["Report year ends Sept. 30."],
        "physical_media_a":["Print"],
        "vendor_marc_id_a":["87001883"],
        "subject_topical_a":["Naval Research Laboratory (U.S.)",
          "Naval research"],
        "publication_year_sort":"2023",
        "reverse_shelfkey":"sudoc:M~XYZ}YS~W~XZYR",
        "series_statement_a":["NRL publication"],
        "subject_headings_a":["Naval Research Laboratory (U.S.) -- Periodicals",
          "Naval research -- United States -- Periodicals"],
        "location_hierarchy_a":["unc",
          "unc:uncdavy",
          "unc:uncdavy:uncdavdoc"],
        "publisher_location_a":["Washington, D.C."],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["United States"],
        "call_number_schemes_a":["SUDOC"],
        "origin_place_search_a":["Washington, D.C.",
          "District of Columbia",
          "United States"],
        "physical_description_a":["volumes : illustrations, maps, portraits ; 28 cm."],
        "statement_of_responsibility_a":["Naval Research Laboratory."],
        "index_date":"2022-10-30T00:51:21Z"},
      {
        "id":"UNCb7865882",
        "items_a":["{\"notes\":[\"With autograph of Lucy B. Patterson--Cover.\"],\"item_id\":\"i10406442\",\"loc_b\":\"wbda\",\"loc_n\":\"wbda\",\"status\":\"In-Library Use Only\",\"vol\":\"undated\",\"call_no\":\"Cp369.6 W78m\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i10406443\",\"loc_b\":\"wbda\",\"loc_n\":\"wbda\",\"status\":\"In-Library Use Only\",\"copy_no\":\"c. 2\",\"vol\":\"undated\",\"call_no\":\"Cp369.6 W78m\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i10406444\",\"loc_b\":\"wbda\",\"loc_n\":\"wbda\",\"status\":\"In-Library Use Only\",\"vol\":\"1903/1904\",\"call_no\":\"Cp369.6 W78m\",\"cn_scheme\":\"ALPHANUM\"}"],
        "author_suggest":["Monday Afternoon Book Club (Winston-Salem, N.C.)",
          "Patterson, Lindsay, Mrs., 1865-1942"],
        "names_a":["{\"name\":\"Monday Afternoon Book Club (Winston-Salem, N.C.)\",\"rel\":\"author\",\"type\":\"creator\"}",
          "{\"name\":\"Patterson, Lindsay, Mrs., 1865-1942\",\"rel\":\"former owner\",\"type\":\"owner\",\"id\":\"http://id.loc.gov/authorities/names/no2009184246\"}"],
        "owner_a":["unc"],
        "barcodes_a":["00048452351",
          "00048452360",
          "00048452379"],
        "holdings_a":["{\"loc_b\":\"wbda\",\"loc_n\":\"wbda\",\"call_no\":\"Cp369.6 W78m\",\"summary\":\"undated issue, 1903/1904\"}"],
        "language_a":["English"],
        "local_id":"b7865882",
        "available_a":["Available"],
        "frequency_current_a":["Annual"],
        "publisher_a":["Monday Afternoon Book Club"],
        "rollup_id":"OCLC883625484",
        "title_suggest":["Year book"],
        "title_main":"Year book",
        "title_sort_ssort_single":"year book",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"883625484",
        "creator_main_a":["Monday Afternoon Book Club (Winston-Salem, N.C.), author"],
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"[Winston-Salem, North Carolina] : [Monday Afternoon Book Club]\"}"],
        "primary_oclc_a":["883625484"],
        "later_work_a":["{\"label\":\"Continued by\",\"author\":\"Monday Afternoon Book Club (Winston-Salem, N.C.).\",\"title\":[\"Annual program of the Monday Afternoon Book Club\"]}"],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "shelf_numbers_a":["Cp369.6 W78m"],
        "subject_genre_a":["Periodicals"],
        "date_cataloged":"2014-07-14T04:00:00Z",
        "genre_headings_a":["Periodicals"],
        "subject_suggest":["Periodicals",
          "Monday Afternoon Book Club (Winston-Salem, N.C.) -- Periodicals",
          "Women -- North Carolina -- Winston-Salem -- Societies and clubs -- Periodicals"],
        "physical_media_a":["Print"],
        "subject_topical_a":["Monday Afternoon Book Club (Winston-Salem, N.C.)",
          "Women",
          "Societies and clubs"],
        "subject_headings_a":["Monday Afternoon Book Club (Winston-Salem, N.C.) -- Periodicals",
          "Women -- North Carolina -- Winston-Salem -- Societies and clubs -- Periodicals"],
        "note_serial_dates_a":["Ceased between 1904 and 1911."],
        "location_hierarchy_a":["unc",
          "unc:uncnorn",
          "unc:uncwil",
          "unc:uncwil:uncwilncc"],
        "publisher_location_a":["Winston-Salem, North Carolina"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["North Carolina",
          "Winston-Salem"],
        "call_number_schemes_a":["ALPHANUM"],
        "origin_place_search_a":["[Winston-Salem, North Carolina]",
          "North Carolina",
          "United States"],
        "physical_description_a":["volumes ; 12-17 cm"],
        "statement_of_responsibility_a":["Monday Afternoon Book Club."],
        "index_date":"2022-11-13T01:06:29Z"},
      {
        "id":"UNCb6042132",
        "isbn_number_a":["9781580052993",
          "1580052991"],
        "isbn_qualifying_info_a":["",
          ""],
        "items_a":["{\"item_id\":\"i7939024\",\"loc_b\":\"llda\",\"loc_n\":\"llda\",\"status\":\"Available\",\"call_no\":\"LC6619 .H83 2009\",\"cn_scheme\":\"LC\"}"],
        "author_suggest":["Hudson, Cindy, 1960-"],
        "names_a":["{\"name\":\"Hudson, Cindy, 1960-\",\"type\":\"creator\",\"id\":\"http://id.loc.gov/authorities/names/n2009026619\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 2009018099"],
        "barcodes_a":["00033749203"],
        "language_a":["English"],
        "local_id":"b6042132",
        "shelfkey":"lc:LC.6619.H83.2009",
        "available_a":["Available"],
        "publisher_a":["Seal Press",
          "Distributed by Publishers Group West"],
        "rollup_id":"OCLC316026600",
        "title_suggest":["Book by book : the complete guide to creating mother-daughter book clubs"],
        "title_main":"Book by book : the complete guide to creating mother-daughter book clubs",
        "title_sort_ssort_single":"book by book the complete guide to creating mother daughter book clubs",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"316026600",
        "creator_main_a":["Hudson, Cindy, 1960-"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Berkeley, Calif. : Seal Press : Distributed by Publishers Group West, c2009.\"}"],
        "note_general_a":["Includes bibliographical references and index."],
        "primary_isbn_a":["9781580052993",
          "1580052991"],
        "primary_oclc_a":["316026600"],
        "resource_type_a":["Book"],
        "subject_genre_a":["Nonfiction"],
        "date_cataloged":"2010-01-04T05:00:00Z",
        "physical_media_a":["Print"],
        "subject_topical_a":["Book clubs (Discussion groups)",
          "Group reading",
          "Mothers and daughters",
          "Social networks"],
        "publication_year_sort":"2009",
        "reverse_shelfkey":"lc:EN}TTYQ}IRW}XZZQ",
        "subject_headings_a":["Book clubs (Discussion groups)",
          "Group reading",
          "Mothers and daughters -- Social networks"],
        "subject_suggest":["Book clubs (Discussion groups)",
          "Group reading",
          "Mothers and daughters -- Social networks"],
        "lc_call_nos_normed_a":["LC.6619.H83.2009"],
        "location_hierarchy_a":["unc",
          "unc:uncinfy"],
        "publisher_location_a":["Berkeley, Calif."],
        "record_data_source_a":["ILSMARC"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["Berkeley, Calif.",
          "California",
          "United States"],
        "physical_description_a":["297 pages ; 21 cm"],
        "lcc_callnum_classification_a":["L - Education",
          "L - Education|LC8 - LC6691 Special aspects of education",
          "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education",
          "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC6601 - LC6660.4 Reading circles and correspondence clubs"],
        "statement_of_responsibility_a":["Cindy Hudson."],
        "index_date":"2022-11-07T05:21:23Z"},
      {
        "id":"UNCb3138956",
        "isbn_number_a":["068815252X"],
        "isbn_qualifying_info_a":[""],
        "items_a":["{\"item_id\":\"i4454755\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"call_no\":\"PN2287.G578 A3 1997\",\"cn_scheme\":\"LC\"}"],
        "author_suggest":["Goldberg, Whoopi, 1955-"],
        "names_a":["{\"name\":\"Goldberg, Whoopi, 1955-\",\"type\":\"creator\",\"id\":\"http://id.loc.gov/authorities/names/n85176762\"}"],
        "owner_a":["unc"],
        "edition_a":["1st ed."],
        "misc_id_a":["LCCN: 97034470 //r97"],
        "barcodes_a":["00015473364"],
        "language_a":["English"],
        "local_id":"b3138956",
        "shelfkey":"lc:PN.2287.G578.A3--1997",
        "available_a":["Available"],
        "publisher_a":["Rob Weisbach Books"],
        "rollup_id":"OCLC37640445",
        "title_suggest":["Book"],
        "title_main":"Book",
        "title_sort_ssort_single":"book",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"37640445",
        "creator_main_a":["Goldberg, Whoopi, 1955-"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"New York : Rob Weisbach Books, c1997.\"}"],
        "primary_isbn_a":["068815252X"],
        "primary_oclc_a":["37640445"],
        "resource_type_a":["Book"],
        "subject_genre_a":["Biography",
          "Nonfiction"],
        "date_cataloged":"2004-10-01T04:00:00Z",
        "genre_headings_a":["Biography"],
        "subject_suggest":["Biography",
          "Goldberg, Whoopi, 1955-",
          "Comedians -- United States -- Biography",
          "Motion picture actors and actresses -- United States -- Biography"],
        "physical_media_a":["Print"],
        "subject_topical_a":["Goldberg, Whoopi, 1955-",
          "Comedians",
          "Motion picture actors and actresses"],
        "publication_year_sort":"1997",
        "reverse_shelfkey":"lc:AC}XXRS}JUSR}PW~~YQQS",
        "subject_headings_a":["Goldberg, Whoopi, 1955-",
          "Comedians -- United States -- Biography",
          "Motion picture actors and actresses -- United States -- Biography"],
        "lc_call_nos_normed_a":["PN.2287.G578.A3--1997"],
        "location_hierarchy_a":["unc",
          "unc:unclibr"],
        "publisher_location_a":["New York"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["United States"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["New York",
          "New York (State)",
          "United States"],
        "physical_description_a":["240 pages ; 22 cm"],
        "lcc_callnum_classification_a":["P - Language and literature",
          "P - Language and literature|PN1 - PN6790 Literature (General)",
          "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama",
          "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater",
          "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2219.3 - PN3030 Special regions or countries"],
        "statement_of_responsibility_a":["Whoopi Goldberg."],
        "variant_names_vern":["Голдбърг, Упи, 1955-",
          "Голдберг, Вупи, 1955-",
          "琥碧·戈柏, 1955-",
          "Джонсон, Кэрин Элейн, 1955-",
          "Джонсан, Кэрын Элейн, 1955-",
          "Голдберг, Вупі, 1955-"],
        "index_date":"2022-10-28T17:51:21Z"},
      {
        "id":"UNCb3122776",
        "issn_linking_a":["1055-4742"],
        "issn_primary_a":["1055-4742"],
        "items_a":["{\"item_id\":\"i4432777\",\"loc_b\":\"llhb\",\"loc_n\":\"llhb\",\"status\":\"Available\",\"vol\":\"v.8(1998-1999)\"}",
          "{\"item_id\":\"i4432778\",\"loc_b\":\"llhb\",\"loc_n\":\"llhb\",\"status\":\"Available\",\"vol\":\"v.9(1999-2000)\"}",
          "{\"item_id\":\"i4432779\",\"loc_b\":\"llhb\",\"loc_n\":\"llhb\",\"status\":\"Available\",\"vol\":\"v.10(2000-2001)\"}",
          "{\"item_id\":\"i4432780\",\"loc_b\":\"llhb\",\"loc_n\":\"llhb\",\"status\":\"Available\",\"vol\":\"v.11(2001-2002)\"}",
          "{\"item_id\":\"i4432781\",\"loc_b\":\"llhb\",\"loc_n\":\"llhb\",\"status\":\"Available\",\"vol\":\"v.13(2003-2004)\"}",
          "{\"item_id\":\"i6280267\",\"loc_b\":\"llhb\",\"loc_n\":\"llhb\",\"status\":\"Available\",\"vol\":\"v.12:no.2-6(2002-2003)\"}",
          "{\"item_id\":\"i6280268\",\"loc_b\":\"llhb\",\"loc_n\":\"llhb\",\"status\":\"Available\",\"vol\":\"v.14(2004-2005)\"}",
          "{\"item_id\":\"i6352204\",\"loc_b\":\"llhb\",\"loc_n\":\"llhb\",\"status\":\"Available\",\"vol\":\"v.5:no.1,3-v.6:no.1(1995-1996)\"}",
          "{\"item_id\":\"i6352205\",\"loc_b\":\"llhb\",\"loc_n\":\"llhb\",\"status\":\"Available\",\"vol\":\"v.7:no.1,3-6(1997-1998)\"}",
          "{\"item_id\":\"i6508451\",\"loc_b\":\"llhb\",\"loc_n\":\"llhb\",\"status\":\"Available\",\"vol\":\"v.15(2005-2006)\"}",
          "{\"item_id\":\"i7011778\",\"loc_b\":\"llhb\",\"loc_n\":\"llhb\",\"status\":\"Available\",\"vol\":\"v.16(2006-2007)\"}",
          "{\"item_id\":\"i7556142\",\"loc_b\":\"llhb\",\"loc_n\":\"llhb\",\"status\":\"Available\",\"vol\":\"v.17(2007-2008)\"}",
          "{\"item_id\":\"i9025572\",\"loc_b\":\"llhb\",\"loc_n\":\"llhb\",\"status\":\"Available\",\"vol\":\"v.18(2008-2009)\"}",
          "{\"item_id\":\"i9025575\",\"loc_b\":\"llhb\",\"loc_n\":\"llhb\",\"status\":\"Available\",\"vol\":\"v.19(2009-2010)\"}",
          "{\"item_id\":\"i9790070\",\"loc_b\":\"llhb\",\"loc_n\":\"llhb\",\"status\":\"Available\",\"vol\":\"v.20(2010-2011)\"}",
          "{\"item_id\":\"i10524734\",\"loc_b\":\"llhb\",\"loc_n\":\"llhb\",\"status\":\"Available\",\"vol\":\"v.23(2013-2014)\"}",
          "{\"item_id\":\"i10695624\",\"loc_b\":\"llhb\",\"loc_n\":\"llhb\",\"status\":\"Available\",\"vol\":\"v.[21](2011-2012)\"}",
          "{\"item_id\":\"i10695629\",\"loc_b\":\"llhb\",\"loc_n\":\"llhb\",\"status\":\"Available\",\"vol\":\"v.22(2012-2013)\"}",
          "{\"item_id\":\"i10945508\",\"loc_b\":\"llhb\",\"loc_n\":\"llhb\",\"status\":\"Available\",\"vol\":\"v.24(2014-2015)\"}",
          "{\"item_id\":\"i11319489\",\"loc_b\":\"llhb\",\"loc_n\":\"llhb\",\"status\":\"Available\",\"vol\":\"v.25(2015-2016)\"}",
          "{\"item_id\":\"i11537878\",\"loc_b\":\"llhb\",\"loc_n\":\"llhb\",\"status\":\"Available\",\"vol\":\"v.26(2016-2017)\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 92648932",
          "LCCN (canceled or invalid): sn 91001865",
          "Deutsche Nationalbibliografie: 018471048"],
        "barcodes_a":["00017546498",
          "00017546452",
          "00019629341",
          "00020157768",
          "00024049904",
          "00024057654",
          "00024057850",
          "00025872351",
          "00025872342",
          "00025892375",
          "00027142869",
          "00025918320",
          "00040799617",
          "00040799537",
          "10003156512",
          "00043906041",
          "00043906504",
          "00043906498",
          "00025934197",
          "00027141307",
          "00051217388"],
        "holdings_a":["{\"holdings_id\":\"c2802539\",\"loc_b\":\"llhb\",\"loc_n\":\"llhb\",\"summary\":\"v.5(1995)-v.27(2018) Some issues missing\"}"],
        "language_a":["English"],
        "local_id":"b3122776",
        "shelfkey":"lc:Z..1037.B7218",
        "available_a":["Available"],
        "frequency_former_a":["Bimonthly, 1991-"],
        "frequency_current_a":["Quarterly, Oct. 2009-"],
        "publisher_a":["American Library Association"],
        "rollup_id":"OCLC23189539",
        "title_suggest":["Book links."],
        "title_main":"Book links.",
        "title_sort_ssort_single":"book links",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number_old_a":["25857831",
          "731489548"],
        "oclc_number":"23189539",
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Chicago, IL : American Library Association, c1991-\"}"],
        "note_general_a":["Title from cover."],
        "primary_oclc_a":["23189539"],
        "supplement_to_work_a":["{\"title\":[\"Booklist\",\"(Chicago, Ill. :\",\"1969)\"],\"details\":\"Oct. 2009-\",\"issn\":\"0006-7385\"}"],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals",
          "Book lists",
          "Ressource Internet (Descripteur de forme)",
          "Périodique électronique (Descripteur de forme)",
          "Lists"],
        "date_cataloged":"2008-10-30T04:00:00Z",
        "genre_headings_a":["Periodicals",
          "Book lists",
          "Ressource Internet (Descripteur de forme)",
          "Périodique électronique (Descripteur de forme)",
          "Lists"],
        "subject_suggest":["Periodicals",
          "Book lists",
          "Ressource Internet (Descripteur de forme)",
          "Périodique électronique (Descripteur de forme)",
          "Lists",
          "Children -- Books and reading -- United States -- Periodicals",
          "Best books -- United States -- Periodicals",
          "School libraries -- United States -- Book lists -- Periodicals",
          "Children's libraries -- United States -- Book lists -- Periodicals",
          "Best books",
          "Children -- Books and reading",
          "Children's libraries",
          "School libraries",
          "United States"],
        "note_numbering_a":["Preceded by two preliminary issues, dated May 1991 and July 1991."],
        "physical_media_a":["Print"],
        "subject_topical_a":["Children",
          "Books and reading",
          "Best books",
          "School libraries",
          "Children's libraries"],
        "publication_year_sort":"2023",
        "reverse_shelfkey":"lc:0}}YZWS}OSXYR",
        "subject_headings_a":["Children -- Books and reading -- United States -- Periodicals",
          "Best books -- United States -- Periodicals",
          "School libraries -- United States -- Book lists -- Periodicals",
          "Children's libraries -- United States -- Book lists -- Periodicals",
          "Best books",
          "Children -- Books and reading",
          "Children's libraries",
          "School libraries",
          "United States"],
        "note_related_work_a":["Previously issued as an insert to: Booklist (Chicago, Ill. : 1969)."],
        "note_serial_dates_a":["Vol. 1, no. 1 (Sept. 1991)-"],
        "lc_call_nos_normed_a":["Z..1037.B7218"],
        "location_hierarchy_a":["unc",
          "unc:uncinfy"],
        "publisher_location_a":["Chicago, IL"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["United States"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["Chicago, IL",
          "Illinois",
          "United States"],
        "physical_description_a":["volumes : illustrations ; 28 cm"],
        "lcc_callnum_classification_a":["Z - Bibliography. Library Science. Information resources (general)",
          "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography",
          "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography",
          "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1037 - Z1039 Books for special classes of persons, institutions, etc."],
        "index_date":"2022-10-28T16:06:21Z"},
      {
        "id":"UNCb4242908",
        "issn_primary_a":["1098-7371"],
        "items_a":["{\"item_id\":\"i6369849\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"v.1(1998)\",\"call_no\":\"Z4 .B645\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i6369854\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"v.2(1999)\",\"call_no\":\"Z4 .B645\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i6833497\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"v.9(2006)\",\"call_no\":\"Z4 .B645\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i6369856\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"v.3(2000)\",\"call_no\":\"Z4 .B645\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i5808027\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"v.5(2002)\",\"call_no\":\"Z4 .B645\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i5808031\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"v.6(2003)\",\"call_no\":\"Z4 .B645\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i6143055\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"v.7(2004)\",\"call_no\":\"Z4 .B645\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i6350937\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"v.8(2005)\",\"call_no\":\"Z4 .B645\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7642366\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"v.10(2007)\",\"call_no\":\"Z4 .B645\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7642367\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"v.11(2008)\",\"call_no\":\"Z4 .B645\",\"cn_scheme\":\"LC\"}"],
        "author_suggest":["Society for the History of Authorship, Reading, and Publishing"],
        "names_a":["{\"name\":\"Society for the History of Authorship, Reading, and Publishing\",\"type\":\"no_rel\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 98641124",
          "LCCN (canceled or invalid): sn 98000459",
          "LCCN (canceled or invalid): 00274550"],
        "barcodes_a":["00026268100",
          "00026268119",
          "00027989918",
          "00026268128",
          "00021638854",
          "00022302964",
          "00024506027",
          "00026070938",
          "00032335054",
          "00033152828"],
        "holdings_a":["{\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"call_no\":\"Z4 .B645\",\"summary\":\"v.1 (1998) - v.3 (2000), v.5 (2002) - v.11 (2008)\"}"],
        "language_a":["English"],
        "local_id":"b4242908",
        "shelfkey":"lc:Z..0004.B645",
        "available_a":["Available"],
        "frequency_current_a":["Annual"],
        "publisher_a":["Pennsylvania State University Press"],
        "rollup_id":"OCLC38861285",
        "title_suggest":["Book history."],
        "title_main":"Book history.",
        "title_sort_ssort_single":"book history",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"38861285",
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"University Park, Pa. : Pennsylvania State University Press, 1998-\"}"],
        "primary_oclc_a":["38861285"],
        "note_issuance_a":["\"Annual journal of the Society for the History of Authorship, Reading and Publishing, Inc. (SHARP).\""],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals"],
        "date_cataloged":"2004-10-01T04:00:00Z",
        "genre_headings_a":["Periodicals"],
        "subject_suggest":["Periodicals",
          "Books -- History -- Periodicals",
          "Bibliography -- Periodicals",
          "Books and reading -- History -- Periodicals",
          "Book industries and trade -- History -- Periodicals",
          "Books -- English-speaking countries -- History -- Periodicals",
          "Books and reading -- English-speaking countries -- History -- Periodicals",
          "Book industries and trade -- English-speaking countries -- History -- Periodicals"],
        "physical_media_a":["Print"],
        "subject_topical_a":["Books",
          "History",
          "Bibliography",
          "Books and reading",
          "Book industries and trade"],
        "publication_year_sort":"2023",
        "reverse_shelfkey":"lc:0}}ZZZV}OTVU",
        "subject_headings_a":["Books -- History -- Periodicals",
          "Bibliography -- Periodicals",
          "Books and reading -- History -- Periodicals",
          "Book industries and trade -- History -- Periodicals",
          "Books -- English-speaking countries -- History -- Periodicals",
          "Books and reading -- English-speaking countries -- History -- Periodicals",
          "Book industries and trade -- English-speaking countries -- History -- Periodicals"],
        "note_serial_dates_a":["Vol. 1 (1998)-"],
        "lc_call_nos_normed_a":["Z..0004.B645"],
        "location_hierarchy_a":["unc",
          "unc:unclibr"],
        "publisher_location_a":["University Park, Pa."],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["English-speaking countries"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["University Park, Pa.",
          "Pennsylvania",
          "United States"],
        "physical_description_a":["volumes : illustrations ; 24 cm"],
        "lcc_callnum_classification_a":["Z - Bibliography. Library Science. Information resources (general)",
          "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography",
          "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z4 - Z8 History of books and bookmaking"],
        "index_date":"2022-11-02T10:21:36Z"},
      {
        "id":"UNCb5815059",
        "url_a":["{\"href\":\"http://VB3LK7EB4T.search.serialssolutions.com/?V=1.0&L=VB3LK7EB4T&S=JCs&C=BOOKLIN&T=marc\",\"type\":\"fulltext\",\"text\":\"Full text available via the UNC-Chapel Hill Libraries\"}"],
        "issn_linking_a":["1055-4742"],
        "issn_primary_a":["2163-5269"],
        "author_suggest":["EBSCO Publishing (Firm)"],
        "names_a":["{\"name\":\"EBSCO Publishing (Firm)\",\"type\":\"no_rel\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 2011202374"],
        "language_a":["English"],
        "local_id":"b5815059",
        "shelfkey":"lc:Z..1037.B7218",
        "available_a":["Available"],
        "frequency_former_a":["Bimonthly, 1991-"],
        "frequency_current_a":["Quarterly, Oct. 2009-"],
        "publisher_a":["American Library Association"],
        "rollup_id":"OCLC676000694",
        "this_work_a":["{\"title\":[\"Book links (Online)\"]}"],
        "title_suggest":["Book links.",
          "Australia New Zealand Reference Centre electronic journal collection."],
        "title_main":"Book links.",
        "title_sort_ssort_single":"book links",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "oclc_number":"676000694",
        "series_work_a":["{\"title\":[\"Australia New Zealand Reference Centre electronic journal collection.\"]}"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Chicago, IL : American Library Association, ©1991-\"}"],
        "primary_oclc_a":["676000694"],
        "supplement_to_work_a":["{\"title\":[\"Booklist\",\"(Chicago, Ill. :\",\"1969)\"],\"details\":\"Oct. 2009-\"}"],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals",
          "Book lists"],
        "date_cataloged":"2021-11-22T05:00:00Z",
        "genre_headings_a":["Periodicals",
          "Book lists"],
        "subject_suggest":["Periodicals",
          "Book lists",
          "Children -- Books and reading -- United States -- Periodicals",
          "Best books -- United States -- Periodicals",
          "School libraries -- United States -- Book lists -- Periodicals",
          "Children's libraries -- United States -- Book lists -- Periodicals",
          "Best books",
          "Children -- Books and reading",
          "Children's libraries",
          "School libraries",
          "Bibliothèque pour enfants",
          "Bibliothèque scolaire",
          "Enfant",
          "Littérature de jeunesse",
          "Lecture",
          "Livre",
          "United States",
          "États-Unis"],
        "note_numbering_a":["Preceded by two preliminary issues, dated May 1991 and July 1991."],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["SSJ0012502"],
        "subject_topical_a":["Children",
          "Books and reading",
          "Best books",
          "School libraries",
          "Children's libraries",
          "Bibliothèque pour enfants",
          "Bibliothèque scolaire",
          "Enfant",
          "Littérature de jeunesse",
          "Lecture",
          "Livre"],
        "publication_year_sort":"2023",
        "reverse_shelfkey":"lc:0}}YZWS}OSXYR",
        "subject_headings_a":["Children -- Books and reading -- United States -- Periodicals",
          "Best books -- United States -- Periodicals",
          "School libraries -- United States -- Book lists -- Periodicals",
          "Children's libraries -- United States -- Book lists -- Periodicals",
          "Best books",
          "Children -- Books and reading",
          "Children's libraries",
          "School libraries",
          "Bibliothèque pour enfants",
          "Bibliothèque scolaire",
          "Enfant",
          "Littérature de jeunesse",
          "Lecture",
          "Livre",
          "United States",
          "États-Unis"],
        "note_related_work_a":["Previously issued as an insert to: Booklist (Chicago, Ill. : 1969)."],
        "note_serial_dates_a":["Began with vol. 1, no. 1 (Sept. 1991)."],
        "lc_call_nos_normed_a":["Z..1037.B7218"],
        "publisher_location_a":["Chicago, IL"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["United States",
          "États-Unis"],
        "call_number_schemes_a":["LC"],
        "note_system_details_a":["Mode of access: World Wide Web."],
        "origin_place_search_a":["Chicago, IL",
          "Illinois",
          "United States"],
        "lcc_callnum_classification_a":["Z - Bibliography. Library Science. Information resources (general)",
          "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography",
          "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography",
          "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1037 - Z1039 Books for special classes of persons, institutions, etc."],
        "index_date":"2022-11-06T15:51:22Z"},
      {
        "id":"UNCb5815058",
        "url_a":["{\"href\":\"http://VB3LK7EB4T.search.serialssolutions.com/?V=1.0&L=VB3LK7EB4T&S=JCs&C=BOOKHISONL&T=marc\",\"type\":\"fulltext\",\"text\":\"Full text available via the UNC-Chapel Hill Libraries\"}"],
        "issn_linking_a":["1098-7371"],
        "issn_primary_a":["1529-1499"],
        "author_suggest":["Society for the History of Authorship, Reading, and Publishing",
          "EBSCO Publishing (Firm)",
          "Project MUSE"],
        "names_a":["{\"name\":\"Society for the History of Authorship, Reading, and Publishing\",\"type\":\"no_rel\"}",
          "{\"name\":\"EBSCO Publishing (Firm)\",\"type\":\"no_rel\"}",
          "{\"name\":\"Project MUSE\",\"type\":\"no_rel\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 00227000"],
        "language_a":["English"],
        "local_id":"b5815058",
        "shelfkey":"lc:Z..0004",
        "available_a":["Available"],
        "frequency_current_a":["Annual"],
        "publisher_a":["Pennsylvania State University Press",
          "Johns Hopkins University Press"],
        "rollup_id":"OCLC42631160",
        "this_work_a":["{\"title\":[\"Book history (Online)\"]}"],
        "title_suggest":["Book history."],
        "title_main":"Book history.",
        "title_sort_ssort_single":"book history",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "oclc_number":"42631160",
        "imprint_main_a":["{\"type\":\"imprint\",\"label\":\"<2010->\",\"value\":\"Baltimore, MD : Johns Hopkins University Press\"}"],
        "primary_oclc_a":["42631160"],
        "note_issuance_a":["Sponsored by: the Society for the History of Authorship, Reading and Publishing."],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals"],
        "date_cataloged":"2022-08-10T04:00:00Z",
        "genre_headings_a":["Periodicals"],
        "subject_suggest":["Periodicals",
          "Books -- History -- Periodicals",
          "Bibliography -- Periodicals",
          "Books and reading -- History -- Periodicals",
          "Book industries and trade -- History -- Periodicals",
          "Books -- English-speaking countries -- History -- Periodicals",
          "Books and reading -- English-speaking countries -- History -- Periodicals",
          "Book industries and trade -- English-speaking countries -- History -- Periodicals",
          "History (General)",
          "Book Industry",
          "Bibliography",
          "Book industries and trade",
          "Books",
          "Books and reading",
          "English-speaking countries"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["SSJ0011617"],
        "subject_topical_a":["Books",
          "History",
          "Bibliography",
          "Books and reading",
          "Book industries and trade",
          "History (General)",
          "Book Industry"],
        "imprint_multiple_a":["{\"type\":\"imprint\",\"value\":\"[University Park, Pa.] : Pennsylvania State University Press, ©1998-\"}",
          "{\"type\":\"imprint\",\"label\":\"<2010->\",\"value\":\"Baltimore, MD : Johns Hopkins University Press\"}"],
        "publication_year_sort":"2023",
        "reverse_shelfkey":"lc:0}}ZZZV",
        "subject_headings_a":["Books -- History -- Periodicals",
          "Bibliography -- Periodicals",
          "Books and reading -- History -- Periodicals",
          "Book industries and trade -- History -- Periodicals",
          "Books -- English-speaking countries -- History -- Periodicals",
          "Books and reading -- English-speaking countries -- History -- Periodicals",
          "Book industries and trade -- English-speaking countries -- History -- Periodicals",
          "History (General)",
          "Book Industry",
          "Bibliography",
          "Book industries and trade",
          "Books",
          "Books and reading",
          "English-speaking countries"],
        "note_serial_dates_a":["Vol. 1 (1998)-"],
        "lc_call_nos_normed_a":["Z..0004"],
        "publisher_location_a":["Baltimore, MD"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["English-speaking countries"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["[University Park, Pa.]",
          "Baltimore, MD",
          "Pennsylvania",
          "United States"],
        "lcc_callnum_classification_a":["Z - Bibliography. Library Science. Information resources (general)",
          "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography",
          "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z4 - Z8 History of books and bookmaking"],
        "index_date":"2022-11-06T15:51:22Z"},
      {
        "id":"UNCb6369430",
        "isbn_number_a":["9781897141335",
          "1897141335"],
        "isbn_qualifying_info_a":["",
          ""],
        "items_a":["{\"item_id\":\"i8402998\",\"loc_b\":\"ddda\",\"loc_n\":\"ddda\",\"status\":\"Available\",\"call_no\":\"PR9199.3.S615 B66 2010\",\"cn_scheme\":\"LC\"}"],
        "author_suggest":["Sparling, Ken, 1959-"],
        "names_a":["{\"name\":\"Sparling, Ken, 1959-\",\"type\":\"creator\",\"id\":\"http://id.loc.gov/authorities/names/n95074573\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 2010444744"],
        "barcodes_a":["00034808922"],
        "language_a":["English"],
        "local_id":"b6369430",
        "shelfkey":"lc:PR.91993.S615.B66--2010",
        "available_a":["Available"],
        "publisher_a":["Pedlar Press"],
        "rollup_id":"OCLC473375649",
        "title_suggest":["Book"],
        "title_main":"Book",
        "title_sort_ssort_single":"book",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"473375649",
        "creator_main_a":["Sparling, Ken, 1959-"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Toronto : Pedlar Press, c2010.\"}"],
        "primary_isbn_a":["9781897141335",
          "1897141335"],
        "primary_oclc_a":["473375649"],
        "resource_type_a":["Book"],
        "subject_genre_a":["Novels"],
        "date_cataloged":"2010-09-16T04:00:00Z",
        "physical_media_a":["Print"],
        "publication_year_sort":"2010",
        "reverse_shelfkey":"lc:A8}QYQQW}7TYU}OTT~~XZYZ",
        "lc_call_nos_normed_a":["PR.91993.S615.B66--2010"],
        "location_hierarchy_a":["unc",
          "unc:uncdavy"],
        "publisher_location_a":["Toronto"],
        "record_data_source_a":["ILSMARC"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["Toronto",
          "Ontario",
          "Canada"],
        "physical_description_a":["226 pages ; 19 cm"],
        "lcc_callnum_classification_a":["P - Language and literature",
          "P - Language and literature|PR1 - PR9680 English literature",
          "P - Language and literature|PR1 - PR9680 English literature|PR8309 - PR9680 English literature: Provincial, local, etc."],
        "statement_of_responsibility_a":["Ken Sparling."],
        "index_date":"2022-11-07T23:21:28Z"},
      {
        "id":"UNCb3917178",
        "isbn_number_a":["0751526339"],
        "isbn_qualifying_info_a":[""],
        "items_a":["{\"item_id\":\"i5404091\",\"loc_b\":\"ddda\",\"loc_n\":\"ddda\",\"status\":\"Available\",\"call_no\":\"PN2287.G578 A3 1999\",\"cn_scheme\":\"LC\"}"],
        "author_suggest":["Goldberg, Whoopi, 1955-"],
        "names_a":["{\"name\":\"Goldberg, Whoopi, 1955-\",\"type\":\"creator\",\"id\":\"http://id.loc.gov/authorities/names/n85176762\"}"],
        "owner_a":["unc"],
        "misc_id_a":["National Bibliography Number: GB98-V5784"],
        "barcodes_a":["00019426916"],
        "language_a":["English"],
        "local_id":"b3917178",
        "shelfkey":"lc:PN.2287.G578.A3--1999",
        "available_a":["Available"],
        "publisher_a":["Warner"],
        "rollup_id":"OCLC46848205",
        "title_suggest":["Book"],
        "title_main":"Book",
        "title_sort_ssort_single":"book",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"46848205",
        "creator_main_a":["Goldberg, Whoopi, 1955-"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"London : Warner, 1999, c1997.\"}"],
        "note_general_a":["Originally published: New York, N.Y. : Rob Weisbach, 1997."],
        "primary_isbn_a":["0751526339"],
        "primary_oclc_a":["46848205"],
        "resource_type_a":["Book"],
        "subject_genre_a":["Biography",
          "Nonfiction"],
        "date_cataloged":"2004-10-01T04:00:00Z",
        "genre_headings_a":["Biography"],
        "subject_suggest":["Biography",
          "African American motion picture actors and actresses -- United States -- Biography"],
        "physical_media_a":["Print"],
        "subject_topical_a":["African American motion picture actors and actresses"],
        "publication_year_sort":"1997",
        "reverse_shelfkey":"lc:AC}XXRS}JUSR}PW~~YQQQ",
        "subject_headings_a":["African American motion picture actors and actresses -- United States -- Biography"],
        "lc_call_nos_normed_a":["PN.2287.G578.A3--1999"],
        "location_hierarchy_a":["unc",
          "unc:uncdavy"],
        "publisher_location_a":["London"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["United States"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["London",
          "England",
          "United Kingdom"],
        "physical_description_a":["273 pages ; 18 cm"],
        "lcc_callnum_classification_a":["P - Language and literature",
          "P - Language and literature|PN1 - PN6790 Literature (General)",
          "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama",
          "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater",
          "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2219.3 - PN3030 Special regions or countries"],
        "statement_of_responsibility_a":["Whoopi Goldberg."],
        "variant_names_vern":["Голдбърг, Упи, 1955-",
          "Голдберг, Вупи, 1955-",
          "琥碧·戈柏, 1955-",
          "Джонсон, Кэрин Элейн, 1955-",
          "Джонсан, Кэрын Элейн, 1955-",
          "Голдберг, Вупі, 1955-"],
        "index_date":"2022-11-01T01:36:23Z"},
      {
        "id":"UNCb2345674",
        "items_a":["{\"item_id\":\"i3373033\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1985\",\"call_no\":\"Z323 .B65\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i9005942\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"vol\":\"1986\",\"call_no\":\"Z323 .B65\",\"cn_scheme\":\"LC\"}"],
        "author_suggest":["Publishers' Association"],
        "names_a":["{\"name\":\"Publishers' Association\",\"type\":\"no_rel\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: sn 90016164"],
        "barcodes_a":["00041146777",
          "00041146893"],
        "holdings_a":["{\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"call_no\":\"Z323 .B65\",\"summary\":\"1985 - 1986\"}"],
        "language_a":["English"],
        "local_id":"b2345674",
        "shelfkey":"lc:Z..0323.B65",
        "available_a":["Available"],
        "frequency_current_a":["Annual"],
        "publisher_a":["The Publishers Association"],
        "rollup_id":"OCLC21434223",
        "title_suggest":["Book trade year book."],
        "title_main":"Book trade year book.",
        "title_sort_ssort_single":"book trade year book",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"21434223",
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"London : The Publishers Association.\"}"],
        "primary_oclc_a":["21434223"],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals"],
        "date_cataloged":"2004-10-01T04:00:00Z",
        "genre_headings_a":["Periodicals"],
        "subject_suggest":["Periodicals",
          "Book industries and trade -- Great Britain -- Periodicals"],
        "physical_media_a":["Print"],
        "subject_topical_a":["Book industries and trade"],
        "publication_year_sort":"2023",
        "reverse_shelfkey":"lc:0}}ZWXW}OTU",
        "subject_headings_a":["Book industries and trade -- Great Britain -- Periodicals"],
        "lc_call_nos_normed_a":["Z..0323.B65"],
        "location_hierarchy_a":["unc",
          "unc:unclibr"],
        "publisher_location_a":["London"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["Great Britain"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["London",
          "England",
          "United Kingdom"],
        "physical_description_a":["volumes : illustrations ; 30 cm"],
        "lcc_callnum_classification_a":["Z - Bibliography. Library Science. Information resources (general)",
          "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade",
          "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z278 - Z549 Bookselling and publishing"],
        "index_date":"2022-11-29T00:36:57Z"},
      {
        "id":"UNCb5216346",
        "items_a":["{\"item_id\":\"i6841167\",\"loc_b\":\"trln\",\"loc_n\":\"trln\",\"status\":\"Available\",\"call_no\":\"Z250.A1 W55 1955\",\"cn_scheme\":\"LC\"}"],
        "author_suggest":["Williamson, Hugh Albert Fordyce, 1918-",
          "National Book League (Great Britain)"],
        "names_a":["{\"name\":\"Williamson, Hugh Albert Fordyce, 1918-\",\"type\":\"creator\",\"id\":\"http://id.loc.gov/authorities/names/n82037850\"}",
          "{\"name\":\"National Book League (Great Britain)\",\"type\":\"no_rel\"}"],
        "owner_a":["unc"],
        "misc_id_a":["National Bibliography Number: GB55-9269"],
        "barcodes_a":["00028823408"],
        "language_a":["English"],
        "local_id":"b5216346",
        "shelfkey":"lc:Z..0250.A1.W55--1955",
        "available_a":["Available"],
        "publisher_a":["Published for the National Book League by the Cambridge University Press"],
        "rollup_id":"OCLC5098140",
        "title_suggest":["Book typography : a handlist for book designers",
          "Book (National Book League (Great Britain))"],
        "title_main":"Book typography : a handlist for book designers",
        "title_sort_ssort_single":"book typography a handlist for book designers",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"5098140",
        "series_work_a":["{\"title\":[\"Book (National Book League (Great Britain))\"],\"details\":\"no. 1.\"}"],
        "creator_main_a":["Williamson, Hugh Albert Fordyce, 1918-"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"London : Published for the National Book League by the Cambridge University Press, 1955.\"}"],
        "primary_oclc_a":["5098140"],
        "resource_type_a":["Book"],
        "subject_genre_a":["Bibliography",
          "Nonfiction",
          "Reference"],
        "date_cataloged":"2007-07-11T04:00:00Z",
        "genre_headings_a":["Bibliography"],
        "subject_suggest":["Bibliography",
          "Type and type-founding -- Bibliography",
          "Layout (Printing) -- Bibliography"],
        "physical_media_a":["Print"],
        "subject_topical_a":["Type and type-founding",
          "Layout (Printing)"],
        "publication_year_sort":"1955",
        "reverse_shelfkey":"lc:0}}ZXUZ}PY}3UU~~YQUU",
        "series_statement_a":["The Book ; no. 1"],
        "subject_headings_a":["Type and type-founding -- Bibliography",
          "Layout (Printing) -- Bibliography"],
        "lc_call_nos_normed_a":["Z..0250.A1.W55--1955"],
        "location_hierarchy_a":["unc",
          "unc:unclibr"],
        "publisher_location_a":["London"],
        "record_data_source_a":["ILSMARC"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["London",
          "England",
          "United Kingdom"],
        "physical_description_a":["15 pages ; 21 cm."],
        "lcc_callnum_classification_a":["Z - Bibliography. Library Science. Information resources (general)",
          "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade",
          "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing",
          "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing|Z242.9 - Z264.5 Practical printing. Including printing as a business, layout, paper and ink, machinery, type and type founding, electrotyping, desktop publishing"],
        "statement_of_responsibility_a":["by Hugh Williamson."],
        "index_date":"2022-11-05T19:21:21Z"}]
  },
  "facet_counts":{
    "facet_queries":{
      "date_cataloged_dt:[NOW-7DAY/DAY TO NOW]":123,
      "date_cataloged_dt:[NOW-1MONTH/DAY TO NOW]":12945,
      "date_cataloged_dt:[NOW-3MONTH/DAY TO NOW]":78928},
    "facet_fields":{
      "access_type_f":[
        "Online",556735,
        "At the Library",348956],
      "available_f":[
        "Available",895061],
      "location_hierarchy_f":[
        "unc",344832,
        "unc:uncdavy",150171,
        "unc:unclibr",76168,
        "unc:uncwil",47975,
        "unc:uncrarn",31494,
        "unc:uncwil:uncwilrbc",31494,
        "unc:uncinfy",24541,
        "unc:uncul",16281,
        "unc:uncnorn",13404,
        "unc:uncwil:uncwilncc",13404,
        "unc:uncarty",13215,
        "law",11277,
        "law:lawuncw",11277,
        "unc:unclawy",11277,
        "unc:uncmusy",10068,
        "unc:uncdavy:uncdavdoc",9561,
        "unc:uncscix",7357,
        "hsl",6671,
        "hsl:hsluncy",6671,
        "unc:unchsl",6671,
        "unc:uncmedr",2277,
        "unc:uncsoun",1757,
        "unc:uncwil:uncwilshc",1757,
        "unc:uncnory",1610,
        "unc:uncsouz",1603,
        "unc:uncwil:uncwilsfc",1603,
        "unc:uncpark",1405,
        "unc:uncstoy",1154,
        "unc:uncdavy:uncdavref",1030,
        "unc:uncul:unculpop",838,
        "unc:uncdavy:uncstor",701,
        "unc:uncschy",590,
        "unc:unclgby",359,
        "unc:uncmedr:uncmedrmeks",238,
        "unc:uncmary",136,
        "unc:unccarr",122,
        "unc:unccarn",117,
        "unc:uncarchives",110,
        "unc:uncwil:uncwilar",110,
        "unc:uncdavy:uncdavmap",99,
        "unc:uncmusy:uncmusymult",99,
        "unc:uncmedr:uncmedrmets",79,
        "unc:uncherb",34,
        "unc:unclaty",31,
        "unc:uncdavy:uncdavglo",21,
        "unc:unckeny",13,
        "unc:unchigy",3,
        "unc:uncgloy",1],
      "resource_type_f":[
        "Book",868191,
        "Government publication",19931,
        "Journal, Magazine, or Periodical",9106,
        "Music score",6279,
        "Video",5145,
        "Archival and manuscript material",3524,
        "Music recording",3333,
        "Thesis/Dissertation",3046,
        "Non-musical sound recording",2408,
        "Map",812,
        "Web page or site",477],
      "physical_media_f":[
        "Online",556735,
        "Print",318717,
        "Microform",20288,
        "Microfiche",9216,
        "Microfilm",4474,
        "Microopaque",2294,
        "CD",2233,
        "DVD",1725,
        "Vinyl record",896,
        "33 1/3 rpm record",847,
        "12\" record",835],
      "subject_topical_f":[
        "History",74875,
        "History and criticism",19946,
        "Politics and government",16219,
        "Social aspects",11708,
        "Women",9340,
        "Social conditions",9244,
        "Philosophy",8956,
        "Social life and customs",7506,
        "Books and reading",7063,
        "Education",6918,
        "Criticism and interpretation",6870],
      "lcc_callnum_classification_f":[
        "P - Language and literature",117913,
        "Q - Science",68502,
        "H - Social sciences",65885,
        "T - Technology.",38965,
        "B - Philosophy. Psychology. Religion",38082,
        "P - Language and literature|PS1 - PS3626 American literature. Canadian literature",32632,
        "P - Language and literature|PS1 - PS3626 American literature. Canadian literature|PS1 - PS3626 American literature",32632,
        "D - History (General) and History of Europe",31092,
        "Q - Science|QA1 - QA939 Mathematics",29179,
        "P - Language and literature|PR1 - PR9680 English literature",27026,
        "R - Medicine",23276,
        "Z - Bibliography. Library Science. Information resources (general)",19885,
        "P - Language and literature|PN1 - PN6790 Literature (General)",19477,
        "K - Law in general. Comparative and uniform law. Jurisprudence",19042,
        "N - Fine Arts",17870,
        "Q - Science|QA1 - QA939 Mathematics|QA71 - QA90 Instruments and machines",15938,
        "Q - Science|QA1 - QA939 Mathematics|QA71 - QA90 Instruments and machines|QA75 - QA76.95 Calculating machines",15901,
        "Q - Science|QA1 - QA939 Mathematics|QA71 - QA90 Instruments and machines|QA75 - QA76.95 Calculating machines|QA75.5 - QA76.95 Electronic computers. Computer science",15888,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor",15381,
        "L - Education",14706,
        "G - Geography. Anthropology. Recreation",14543,
        "J - Political Science",12607,
        "M - Music",11251,
        "E - History: America",10716,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.",10142,
        "P - Language and literature|PZ1 - PZ90 Fiction and juvenile belles lettres",10067,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia",10027,
        "R - Medicine|RC31 - RC1245 Internal medicine",8725,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence",8651,
        "E - History: America|E151 - E889 United States",8532,
        "L - Education|LB5 - LB3640 Theory and practice of education",8394,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography",8261,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama",8159,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology",7947,
        "P - Language and literature|PZ1 - PZ90 Fiction and juvenile belles lettres|PZ5 - PZ90 Juvenile belles lettres",7789,
        "Q - Science|QC1 - QC999 Physics",7454,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)",7281,
        "F - America: local history",7208,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women",7186,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature",7113,
        "H - Social sciences|HF1 - HF6182 Commerce",6919,
        "N - Fine Arts|N1 - N9211 Visual arts",6780,
        "S - Agriculture",6120,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD28 - HD70 Management. Industrial management",6113,
        "M - Music|ML1 - ML3930 Literature on music",5999,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology",5823,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries",5817,
        "H - Social sciences|HC1 - HC1085 Economic history and conditions",5722,
        "P - Language and literature|PR1 - PR9680 English literature|PR8309 - PR9680 English literature: Provincial, local, etc.",5692,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business",5373,
        "D - History (General) and History of Europe|D1 - D2009 History (General)",5302,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States",5260,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK5101 - TK6720 Telecommunication (including telegraphy, telephone, radio, radar, television)",5076,
        "H - Social sciences|HG1 - HG9999 Finance",5043,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)",5021,
        "Q - Science|Q1 - Q390 Science (General)",5015,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure",4906,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language",4861,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic",4803,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations",4799,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC321 - RC571 Neurosciences. Biological psychiatry. Neuropsychiatry",4587,
        "P - Language and literature|PR1 - PR9680 English literature|PR6050 - PR6076 1961-2000",4547,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1993 - PN1999 Motion pictures",4466,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible",4436,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade",4354,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period",4327,
        "Q - Science|QD1 - QD999 Chemistry",4267,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain",4216,
        "Q - Science|QH301 - QH705.5 Biology (General)",4149,
        "Q - Science|QP1 - QP801 Physiology",4115,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature",4114,
        "P - Language and literature|P1 - P1091 Philology. Linguistics",4099,
        "F - America: local history|F1 - F975 United States local history",4094,
        "L - Education|LC8 - LC6691 Special aspects of education",4068,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography",4022,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism",3967,
        "M - Music|M1 - M5000 Music",3815,
        "H - Social sciences|HC1 - HC1085 Economic history and conditions|HC94 - HC1085 By region or country",3778,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science",3776,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism",3748,
        "Q - Science|QA1 - QA939 Mathematics|QA299.6 - QA433 Analysis",3738,
        "N - Fine Arts|ND25 - ND3416 Painting",3711,
        "P - Language and literature|PR1 - PR9680 English literature|PR3991 - PR5990 19th century, 1770/1800-1890/1900",3693,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography",3566,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature",3564,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK7800 - TK8360 Electronics",3485,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine",3443,
        "P - Language and literature|PR1 - PR9680 English literature|PR6000 - PR6049 1900-1960",3254,
        "U - Military science (General)",3222,
        "N - Fine Arts|N1 - N9211 Visual arts|N5300 - N7418 History",3196,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature",3194,
        "H - Social sciences|HM401 - HM1281 Sociology (General)",3173,
        "Q - Science|QL1 - QL991 Zoology",3162,
        "R - Medicine|R5 - R920 Medicine (General)",3117,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports",3110,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England",3107,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class",3106,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B790 - B5802 Modern",3092,
        "Q - Science|QE1 - QE996.5 Geology",3013,
        "T - Technology.|TP1 - TP1185 Chemical technology.",2956,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania",2954,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works",2941,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery",2936,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology",2878,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades",2869,
        "C - Auxiliary Sciences of History",2838,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature",2810,
        "Q - Science|Q1 - Q390 Science (General)|Q300 - Q390 Cybernetics",2804,
        "J - Political Science|JC11 - JC607 Political theory",2751,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state",2751,
        "S - Agriculture|SB1 - SB1110 Plant culture",2746,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home",2730,
        "T - Technology.|T1 - T995 Technology (General)",2713,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America",2711,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature",2696,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology",2611,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music",2611,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races",2569,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books",2546,
        "Q - Science|QA1 - QA939 Mathematics|QA273 - QA280 Probabilities. Mathematical statistics",2529,
        "Q - Science|QA1 - QA939 Mathematics|QA150 - QA272.5 Algebra",2502,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA28 - DA592 History",2496,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS101 - DS151 Israel (Palestine). The Jews",2493,
        "N - Fine Arts|NA1 - NA9428 Architecture",2460,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity",2458,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature",2437,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics",2435,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA401 - TA492 Materials of engineering and construction. Mechanics of materials",2405,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1025 - LB1050.75 Teaching (Principles and practice)",2395,
        "T - Technology.|TR1 - TR1050 Photography",2391,
        "H - Social sciences|HN1 - HN995 Social history and conditions. Social problems. Social reform",2360,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B790 - B5802 Modern|B850 - B5739 By region or country",2354,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa",2352,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6700 - PN6790 Comic books, strips, etc.",2300,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater",2272,
        "Q - Science|QK1 - QK989 Botany",2226,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature",2219,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX800 - BX4795 Catholic Church",2217,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism",2209,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law",2187,
        "E - History: America|E151 - E889 United States|E184 - E185.98 Elements in the population",2178,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.",2178,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology",2154,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology|HV6251 - HV6773.55 Crimes and offenses",2153,
        "Q - Science|Q1 - Q390 Science (General)|Q1 - Q295 General",2149,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1101 - HQ2030.7 Women. Feminism",2140,
        "Q - Science|QB1 - QB991 Astronomy",2115,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF0001 - KF999",2098,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z278 - Z549 Bookselling and publishing",2080,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA28 - DA592 History|DA129 - DA592 By period",2038,
        "Q - Science|QC1 - QC999 Physics|QC170 - QC197 Atomic physics. Constitution and properties of matter (including molecular physics, relativity, quantum theory, and solid state physics)",2015,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z5051 - Z7999 Subject bibliography. Subjects arranged in alphabetical sequence",2014,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine",1961,
        "P - Language and literature|PR1 - PR9680 English literature|PR6100 - PR6126 -2001",1959,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar",1950,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML385 - ML429 Biography",1928,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city",1922,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature",1914,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS701 - BS1830 Old Testament",1900,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology",1885,
        "P - Language and literature|PR1 - PR9680 English literature|PR2199 - PR3195 English renaissance (1500-1640)",1881,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing",1859,
        "A - General Works",1849,
        "H - Social sciences|HN1 - HN995 Social history and conditions. Social problems. Social reform|HN50 - HN995 By region or country",1849,
        "N - Fine Arts|N1 - N9211 Visual arts|N7420 - N7525.8 General works",1842,
        "Q - Science|QP1 - QP801 Physiology|QP501 - QP801 Animal biochemistry",1829,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration",1816,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography",1797,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ7000 - PQ8929 Provincial, local, colonial, etc.",1796,
        "T - Technology.|TL1 - TL4050 Motor vehicles. Aeronautics. Astronautics",1777,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ7000 - PQ8929 Provincial, local, colonial, etc.|PQ7081 - PQ8560 Spanish America",1767,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration",1752,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States",1751,
        "J - Political Science|JZ2 - JZ6530 International relations",1743,
        "E - History: America|E11 - E143 America",1742,
        "P - Language and literature|PE1 - PE3729 English language",1740,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration",1724,
        "P - Language and literature|PZ1 - PZ90 Fiction and juvenile belles lettres|PZ1 - PZ4 Fiction in English",1717,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history",1714,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA28 - DA592 History|DA129 - DA592 By period|DA300 - DA592 Modern, 1485-",1695,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions",1694,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature",1692,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine",1689,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ12 - HQ449 Sexual life",1683,
        "T - Technology.|TS1 - TS2301 Manufactures",1673,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS401 - DS486.8 India (Bharat)",1672,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)",1671,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music",1662,
        "T - Technology.|TX1 - TX1110 Home economics.",1644,
        "T - Technology.|TR1 - TR1050 Photography|TR624 - TR835 Applied photography (Including artistic, commercial, medical photography, photocopying processes)",1624,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV861 - GV1017 Ball games: Baseball, football, golf, etc.",1598,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History",1567,
        "Q - Science|QA1 - QA939 Mathematics|QA1 - QA43 General",1567,
        "Q - Science|QL1 - QL991 Zoology|QL605 - QL739.8 Chordates. Vertebrates",1525,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education",1522,
        "N - Fine Arts|ND25 - ND3416 Painting|ND49 - ND813 History",1519,
        "Q - Science|QR1 - QR502 Microbiology",1519,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China",1514,
        "N - Fine Arts|ND25 - ND3416 Painting|ND2889 - ND3416 Illuminating of manuscripts and books",1503,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.",1493,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS101 - DS151 Israel (Palestine). The Jews|DS133 - DS151 Jews outside of Palestine",1470,
        "Q - Science|QH1 - QH278.5 Natural history (General)",1464,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA1501 - TA1820 Applied optics. Photonics",1462,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.",1449,
        "Q - Science|QA1 - QA939 Mathematics|QA440 - QA699 Geometry. Trigonometry. Topology",1446,
        "Q - Science|QD1 - QD999 Chemistry|QD450 - QD801 Physical and theoretical chemistry",1440,
        "Q - Science|QE1 - QE996.5 Geology|QE1 - QE350.62 General (including geographical divisions)",1410,
        "P - Language and literature|PE1 - PE3729 English language|PE1001 - PE1693 Modern English",1407,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology",1402,
        "S - Agriculture|S1 - S946.5 Agriculture (General)",1390,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD2321 - HD4730.9 Industry",1383,
        "Q - Science|QD1 - QD999 Chemistry|QD241 - QD441 Organic chemistry",1383,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1993 - PN1999 Motion pictures|PN1997 - PN1997.85 Plays, scenarios, etc.",1381,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization",1371,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief",1368,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5410 - HF5417.5 Marketing. Disribution of products",1367,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy",1365,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2219.3 - PN3030 Special regions or countries",1354,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics",1352,
        "H - Social sciences|HC1 - HC1085 Economic history and conditions|HC72 - HC88 Economic growth, development, planning",1348,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF309 - BF499 Consciousness. Cognition",1340,
        "N - Fine Arts|NK1 - NK9990 Decorative arts",1322,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering",1316,
        "E - History: America|E151 - E889 United States|E184 - E185.98 Elements in the population|E184.5 - E185.98 Afro-Americans",1314,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons",1309,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations",1304,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education",1297,
        "Q - Science|QH1 - QH278.5 Natural history (General)|QH1 - QH198 General (including nature conservation, geographical distribution)",1293,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam",1281,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature",1281,
        "H - Social sciences|HE1 - HE9990 Transportation and communications",1279,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works",1259,
        "E - History: America|E151 - E889 United States|E456 - E655 Civil War period, 1861-1865",1233,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS1901 - BS2970 New Testament",1232,
        "Q - Science|QC1 - QC999 Physics|QC851 - QC999 Meteorology. Climatology (including the earth's atmosphere)",1220,
        "Q - Science|QP1 - QP801 Physiology|QP351 - QP495 Neurophysiology and neuropsychology",1217,
        "R - Medicine|RJ1 - RJ570 Pediatrics",1213,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KD - Law of the United Kingdom and Ireland",1208,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KD - Law of the United Kingdom and Ireland|KD51 - KD9500 England and Wales",1208,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature",1192,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism",1184,
        "P - Language and literature|PR1 - PR9680 English literature|PR3291 - PR3785 17th and 18th centuries (1640-1770)",1184,
        "E - History: America|E151 - E889 United States|E171 - E183.9 History",1183,
        "L - Education|LA5 - LA2396 History of education",1168,
        "M - Music|MT1 - MT960 Musical instruction and study",1160,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration",1157,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1037 - Z1039 Books for special classes of persons, institutions, etc.",1125,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC254 - RC282 Neoplasms. Tumors. Oncology (including cancer and carcinogens)",1120,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental",1116,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology",1114,
        "D - History (General) and History of Europe|DC1 - DC947 History of France",1108,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy",1107,
        "T - Technology.|TS1 - TS2301 Manufactures|TS155 - TS194 Production management. Operations management",1102,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature",1099,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN45 - PN57 Theory. Philosophy. Esthetics",1097,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity|BR140 - BR1510 History",1085,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861",1082,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration",1082,
        "R - Medicine|RD1 - RD811 Surgery",1081,
        "H - Social sciences|HX1 - HX970.7 Socialism. Communism. Anarchism",1076,
        "Q - Science|QP1 - QP801 Physiology|QP1 - QP345 General (including influence of the environment)",1071,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration",1041,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes",1030,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1990 - PN1992.92 Broadcasting",1025,
        "E - History: America|E151 - E889 United States|E456 - E655 Civil War period, 1861-1865|E461 - E655 The Civil War, 1861-1865",1022,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature",1022,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature",1009,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography",1006,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism",1006,
        "S - Agriculture|SF1 - SF1100 Animal culture",1003,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ2600 - PQ2651 1900-1960",995,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration",992,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC501 - JC607 Purpose, functions, and relations of the state",977,
        "Q - Science|QC1 - QC999 Physics|QC1 - QC75 General",968,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)",966,
        "U - Military science (General)|U1 - U900 Military science (General)",965,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS410 - BS680 Works about the Bible",964,
        "T - Technology.|TN1 - TN997 Mining engineering. Metallurgy.",964,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation",954,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL2250 - PL3208 Chinese literature",949,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany",940,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography",935,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B108 - B708 Ancient",930,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961",926,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography",924,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM1001 - HM1281 Social psychology",919,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ370 - RJ550 Diseases of children and adolescents",918,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.|PN4840 - PN5648 By region or country",916,
        "Q - Science|QB1 - QB991 Astronomy|QB495 - QB903 Descriptive astronomy",915,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature",911,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS1901 - BS2970 New Testament|BS2547 - BS2970 Special parts of the New Testament",910,
        "G - Geography. Anthropology. Recreation|GE1 - GE350 Environmental sciences",903,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music",903,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1241 - PR1273 Drama",898,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America",886,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA190 - NA1555.5 History",882,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1990 - PN1992.92 Broadcasting|PN1992 - PN1992.92 Television broadcasts",878,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period",878,
        "H - Social sciences|H1 - H99 Social sciences (General)",876,
        "T - Technology.|TX1 - TX1110 Home economics.|TX642 - TX840 Cookery",874,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH540 - QH549.5 Ecology",866,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History",853,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration",849,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV8301 - HV9920.7 Penology. Prisons. Corrections",848,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism",847,
        "Q - Science|QE1 - QE996.5 Geology|QE500 - QE639.5 Dynamic and structural geology",837,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1555 - LB1602 Elementary or public school education",827,
        "J - Political Science|JA1 - JA92 Political science (General)",819,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA21 - UA885 By region or country",818,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature|PA6202 - PA6971 Individual authors",815,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ1305 - JZ2060 Scope of international relations",813,
        "E - History: America|E11 - E143 America|E75 - E99 Indians of North America",810,
        "N - Fine Arts|NX1 - NX820 Arts in general",808,
        "Q - Science|QC1 - QC999 Physics|QC770 - QC798 Nuclear and particle physics. Atomic energy. Radioactivity",800,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music",797,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF4000 - KF4999",795,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC501 - QC718.8 Electricity",779,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN3311 - PN3503 Prose. Prose fiction",770,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature|PA3818 - PA4505 Individual authors",764,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF511 - BF593 Affection. Feeling. Emotion",760,
        "E - History: America|E151 - E889 United States|E184 - E185.98 Elements in the population|E184.5 - E185.98 Afro-Americans|E185.2 - E185.89 Status and development since emancipation",757,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC189 - LC214.53 Educational sociology",754,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration",749,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC348 - JC497 Forms of the state",746,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary",745,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS733 - DS779.32 History",743,
        "Q - Science|QA1 - QA939 Mathematics|QA71 - QA90 Instruments and machines|QA75 - QA76.95 Calculating machines|QA75.5 - QA76.95 Electronic computers. Computer science|QA76.75 - QA76.76 Computer software",742,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN101 - PN245 Authorship",741,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z2000 - Z2959 Europe",741,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore",740,
        "H - Social sciences|HJ9 - HJ9940 Public finance",734,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P87 - P96 Communication. Mass media",732,
        "Q - Science|QL1 - QL991 Zoology|QL360 - QL599.82 Invertebrates",728,
        "Q - Science|QA1 - QA939 Mathematics|QA801 - QA939 Analytic mechanics",727,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking",722,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1 - JQ1849 Asia",721,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period",718,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1 - RA418.5 Medicine and the state",712,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century",711,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC321 - RC571 Neurosciences. Biological psychiatry. Neuropsychiatry|RC346 - RC429 Neurology. Diseases of the nervous system",709,
        "T - Technology.|TH1 - TH9745 Building construction",709,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5546 - HF5548.6 Office management",706,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern",705,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries",704,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV4485 - BV5099 Practical religion. The Christian life",693,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P1 - P85 General",693,
        "Q - Science|QK1 - QK989 Botany|QK1 - QK474.5 General (including geographical distribution)",693,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM831 - HM901 Social change",689,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9000 - HD9495 Agricultural industries",685,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology",684,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)",684,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica",683,
        "P - Language and literature|PC1 - PC5498 Romanic languages",668,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula",667,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ767.8 - HQ792.2 Children. Child development (including child rearing, child care, child life)",657,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture",655,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT165.5 - HT169.9 City planning",654,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH426 - QH470 Genetics",654,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics",653,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z1201 - Z1946 America",649,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity|BR140 - BR1510 History|BR500 - BR1510 By region or country",640,
        "N - Fine Arts|N1 - N9211 Visual arts|N7560 - N8266 Special subjects of art",640,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages",640,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ370 - RJ550 Diseases of children and adolescents|RJ499 - RJ507 Mental disorders. Child psychiatry",634,
        "L - Education|LA5 - LA2396 History of education|LA410 - LA2284 Other regions or countries",632,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT210 - CT3150 National biography",631,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings",631,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA630 - TA695 Structural engineering (General)",631,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations",630,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH573 - QH671 Cytology",630,
        "R - Medicine|RB1 - RB214 Pathology",630,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B790 - B5802 Modern|B808 - B849 Special topics and schools of philosophy",629,
        "Q - Science|QL1 - QL991 Zoology|QL605 - QL739.8 Chordates. Vertebrates|QL700 - QL739.8 Mammals",627,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS401 - DS486.8 India (Bharat)|DS433 - DS481 History",625,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1101 - HQ2030.7 Women. Feminism|HQ1451 - HQ1870.7 By region or country",625,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD201 - TD500 Water supply for domestic and industrial purposes",625,
        "D - History (General) and History of Europe|DF10 - DF951 History of Greece",621,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description",621,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works|PT2600 - PT2653 1860/70-1960",620,
        "E - History: America|E151 - E889 United States|E151 - E169.13 General",618,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML3469 - ML3541 Popular music",617,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use",617,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ212 - TJ225 Control engineering systems. Automatic machinery (General)",617,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5601 - HF5689 Accounting. Bookkeeping",616,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period|DC110 - DC424 Modern, 1515-",614,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF712 - BF724.85 Developmental psychology",613,
        "C - Auxiliary Sciences of History|CB3 - CB482 History of Civilization",610,
        "T - Technology.|TL1 - TL4050 Motor vehicles. Aeronautics. Astronautics|TL787 - TL4050 Astronautics. Space travel",610,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG11 - DG365 Ancient Italy. Rome to 476",609,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D1 - D24.5 General",608,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1201 - F1393 Mexico",608,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF8000 - KF8999",603,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages",603,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1170 - PR1228 Poetry",603,
        "N - Fine Arts|NE1 - NE3002 Print media",602,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia",597,
        "P - Language and literature|PR1 - PR9680 English literature|PR750 - PR890 Prose",595,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD101 - HD1395.5 Land use",593,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects",593,
        "T - Technology.|TL1 - TL4050 Motor vehicles. Aeronautics. Astronautics|TL500 - TL777 Aeronautics. Aeronautical engineering",591,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA349 - TA359 Mechanics of engineering. Applied mechanics",590,
        "Q - Science|QB1 - QB991 Astronomy|QB1 - QB139 General",589,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water",588,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica",586,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ210.2 - TJ211.47 Mechanical devices and figures. Automata. Ingenious mechanisms. Robots (General)",585,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants",584,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T58.5 - T58.64 Information technology",582,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ12 - HQ449 Sexual life|HQ75 - HQ76.8 Homosexuality. Lesbianism",581,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators",578,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB848 - HB3697 Demography. Population. Vital events",572,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature",568,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM300 - RM666 Drugs and their actions",568,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1035 - Z1035.9 Best books",568,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF3000 - KF3999",565,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN700 - GN890 Prehistoric archaeology",564,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1580 - GV1799.4 Dancing",562,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD84 - DD257.4 History",560,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology|GN406 - GN517 Cultural traits, customs, and institutions",559,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB75 - HB130 History of economics",559,
        "Q - Science|QK1 - QK989 Botany|QK710 - QK899 Plant physiology",559,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z696 - Z697 Classification and notation",558,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3950 - LC4806.5 Exceptional children and youth. Special education",556,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX5011 - BX5207 Church of England",554,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements",553,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN1008.2 - PN1009.5 Juvenile literature",551,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3320 - PG3447 1800-1870",546,
        "M - Music|ML1 - ML3930 Literature on music|ML3800 - ML3923 Philosophy and physics of music",543,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK266 - DK292 Soviet regime, 1918-1991",541,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM711 - HM806 Groups and organizations",541,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts",541,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period",536,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z987 - Z997 Private libraries. Book collecting. Including bibliophilism, bookplates",533,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC950 - NC996 Illustration",532,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF173 - BF175.5 Psychoanalysis",531,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1003 - Z1003.5 Choice of books. Books and reading. Book reviews",531,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government",526,
        "G - Geography. Anthropology. Recreation|GF1 - GF900 Human ecology. Anthropogeography",521,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9506 - HD9624 Mineral industries. Metal trade",520,
        "T - Technology.|TL1 - TL4050 Motor vehicles. Aeronautics. Astronautics|TL1 - TL484 Motor vehicles. Cycles",520,
        "N - Fine Arts|NB1 - NB1952 Sculpture",517,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF1338 - JF2112 Public administration",515,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF1000 - KF1999",515,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education",515,
        "V - Naval science",510,
        "Q - Science|QL1 - QL991 Zoology|QL605 - QL739.8 Chordates. Vertebrates|QL671 - QL699 Birds",503,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z729 - Z871 Library reports. History. Statistics",502,
        "E - History: America|E151 - E889 United States|E171 - E183.9 History|E171 - E180 General",500,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism",497,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA900 - DA995 Ireland",497,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing|Z124 - Z228 History",497,
        "H - Social sciences|HA1 - HA4737 Statistics",495,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD6050 - HD6305 Classes of labor (including women, children, students, middle-aged and older persons, minorities)",493,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC666 - RC701 Diseases of the circulatory (cardiovascular) system",491,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences",488,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1500 - M1527.8 Dramatic music",485,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD84 - DD257.4 History|DD121 - DD257.4 By period",476,
        "Q - Science|QC1 - QC999 Physics|QC350 - QC467 Optics. Light",476,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2060 - M2101.5 Choruses, part-songs, etc., with accompaniment of keyboard or other solo instrument, or unaccompanied",475,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS801 - DS897 Japan",473,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5801 - HF6182 Advertising",471,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5511.2 - JZ6299 Promotion of peace. Peaceful change",471,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T57 - T57.97 Applied mathematics. Quantitative methods",471,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA329 - TA348 Engineering mathematics. Engineering analysis",469,
        "H - Social sciences|HG1 - HG9999 Finance|HG201 - HG1496 Money",467,
        "Q - Science|QB1 - QB991 Astronomy|QB495 - QB903 Descriptive astronomy|QB500.5 - QB785 Solar system",466,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD300 - BD450 Ontology",465,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX800 - BX4795 Catholic Church|BX4650 - BX4750 Biography and portraits",464,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD84 - DD257.4 History|DD121 - DD257.4 By period|DD175 - DD257.4 Modern, 1519-",463,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT198 - BT590 Christology",462,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period",462,
        "Q - Science|QL1 - QL991 Zoology|QL1 - QL355 General (including geographical distribution)",462,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-",460,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases",460,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB3011 - LB3095 School management and discipline",458,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB522 - HB715 Income. Factor shares",457,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare",456,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR99.6 - GR390 By region or country",455,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9680 - HD9714 Mechanical industries (including electric utilities, electronic industries, and machinery)",455,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina",454,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1019 - Z1033 Special classes of books. Including prohibited books, rare books, paperbacks, reprints",454,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography",453,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV1551 - HV3024 People with disabilities (including blind, deaf, people with physical and mental disabilities)",453,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT695 - BT749 Creation",452,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G149 - G180 Travel. Voyages and travels (General)",452,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL2250 - PL3208 Chinese literature|PL2661 - PL2979 Individual authors and works",452,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP248.13 - TP248.65 Biotechnology",451,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1627 - M1853 National music",448,
        "J - Political Science|JA1 - JA92 Political science (General)|JA71 - JA80.2 Theory. Relations to other subjects",446,
        "R - Medicine|R5 - R920 Medicine (General)|R735 - R854 Medical education. Medical schools. Research",446,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z8001 - Z8999 Personal bibliography. Names of individuals arranged in alphabetical sequence",446,
        "Q - Science|QD1 - QD999 Chemistry|QD71 - QD142 Analytical chemistry",441,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E740 - E749 General",436,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA643 - RA645 Disease (Communicable and noninfectious) and public health",436,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL700 - PL889 Japanese literature",435,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK112.8 - DK264.8 House of Romanov, 1613-1917",434,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast",434,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ807 - TJ830 Renewable energy sources",433,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS41 - DS66 Middle East. Southwestern Asia. Ancient Orient. Arab East. Near East",431,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T57 - T57.97 Applied mathematics. Quantitative methods|T57.6 - T57.97 Operations research. Systems analysis",431,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing|Z242.9 - Z264.5 Practical printing. Including printing as a business, layout, paper and ink, machinery, type and type founding, electrotyping, desktop publishing",431,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD143 - BD237 Epistomology. Theory of knowledge",429,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law",429,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z1201 - Z1946 America|Z1215 - Z1363 United States",429,
        "M - Music|ML1 - ML3930 Literature on music|ML112.8 - ML158.8 Bibliography",427,
        "H - Social sciences|HG1 - HG9999 Finance|HG4001 - HG4285 Finance management, Business finance. Corporation finance",426,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1050.9 - LB1091 Educational psychology",426,
        "D - History (General) and History of Europe|DF10 - DF951 History of Greece|DF10 - DF289 Ancient Greece",423,
        "Q - Science|QL1 - QL991 Zoology|QL360 - QL599.82 Invertebrates|QL461 - QL599.82 Insects",419,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E441 - E453 Slavery in the United States. Antislavery movements",418,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters",414,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML1400 - ML3275 Vocal music",414,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine",414,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G149 - G180 Travel. Voyages and travels (General)|G154.9 - G180 Travel and state, Tourist Trade",413,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ2149 - PQ2551 19th century",413,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK1001 - TK1841 Production of electric energy or power. Powerplants. Central stations",413,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew",412,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB131 - HB147 Methodology",411,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9720 - HD9975 Manufacturing industries",410,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB60 - NB1115 History. Including collective biography",410,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8601 - BX8695 Mormons. Church of Jesus Christ of Latter-Day Saints",409,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ3800 - PQ3999 Provincial, local, colonial, etc.",408,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS401 - DS486.8 India (Bharat)|DS483 - DS486.8 Local history and description",407,
        "S - Agriculture|SD1 - SD669.5 Forestry",406,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA670 - DA690 Local history and description",405,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD5701 - HD6000.9 Labor market. Labor supply. Labor demand (including unemployment, manpower policy, occupational training, employment agencies)",405,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law",404,
        "R - Medicine|RD1 - RD811 Surgery|RD520 - RD599.5 Surgery by region, system, or organ",402,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling",402,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry",398,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3477 - PG3490 1961-2000",396,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9502 - HD9502.5 Energy industries. Energy policy. Fuel trade",394,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M6 - M175.5 Solo instruments",394,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ2660 - PQ2686 1961-2000",390,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ1518 - BJ1697 Individual ethics. Character. Virtue",388,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1221 - GV1469.62 Indoor games and amusements",388,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3450 - PG3470 1870-1917",388,
        "Q - Science|QD1 - QD999 Chemistry|QD146 - QD197 Inorganic chemistry",388,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2500 - NA2599 General works",384,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology|CC72 - CC81 Philosophy. Theory",383,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ755.7 - HQ759.92 Parents. Parenthood",383,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK1717 - JK2248 Political rights. Practical politics",382,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3950 - LC4806.5 Exceptional children and youth. Special education|LC4001 - LC4806.5 Children and youth with disabilities. Learning disabled children and youth",382,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity|BR140 - BR1510 History|BR160 - BR481 By period",381,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z881 - Z980 Library catalogs and bulletins",379,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology",377,
        "U - Military science (General)|UB1 - UB900 Military administration",376,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM1001 - HM1281 Social psychology|HM1176 - HM1281 Social influence. Social pressure",374,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN695 - PN779 Modern",374,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV701 - HV1420.5 Children",372,
        "Q - Science|QD1 - QD999 Chemistry|QD1 - QD65 General (including alchemy)",372,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC1300 - NC1766 Pictorial humor, caricature, etc.",370,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes",369,
        "F - America: local history|F1001 - F1145.3 British America",367,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada",367,
        "H - Social sciences|HG1 - HG9999 Finance|HG3810 - HG4000 Foreign exchange. International finance",367,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z716.2 - Z718.8 Libraries in relation to special topics. Including libraries and community, libraries and television, children's libraries, libraries and students",367,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country",361,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology|GN537 - GN673 Ethnic groups and races",361,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS556 - DS559.93 Vietnam. Annam",360,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT2400 - GT3390.5 Customs relative to private life (including children, marriage, eating and drinking, funeral customs, etc.)",357,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism",357,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism",354,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt",353,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics",352,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS67 - DS79.9 Iraq (Assyria, Babylonia, Mesopotamia)",351,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN49 - GN298 Physical anthropology. Somatology",350,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works",349,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN1 - JN97 Europe (General)",348,
        "Q - Science|QR1 - QR502 Microbiology|QR180 - QR189.5 Immunology",347,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK265 - DK265.95 Revolution, 1917-1921",345,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB183 - SB317 Field crops (including cereals, forage crops, grasses, legumes, root crops, sugar plants, textile plants, alkaloidal plants, medicinal plants)",344,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S590 - S599.9 Soils. Soil science (Including soil surveys, soil chemistry, soil structure, soil-plant relationships)",343,
        "L - Education|LA5 - LA2396 History of education|LA201 - LA398 United States",340,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV551.2 - HV639 Emergency management",339,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB5 - LB45 General",336,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH359 - QH425 Evolution",336,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain",334,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP368 - TP456 Food processing and manufacture",334,
        "E - History: America|E151 - E889 United States|E201 - E298 The Revolution, 1775-1783",333,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia",332,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period|DC110 - DC424 Modern, 1515-|DC139 - DC249 Revolutionary and Napoleonic period, 1789-1815",332,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB450.9 - SB467.8 Gardens and gardening",332,
        "A - General Works|AS1 - AS945 Academies and learned societies",330,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX440 - NX632 History of the arts",329,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL1001 - PL1960 Chinese language",329,
        "Q - Science|QB1 - QB991 Astronomy|QB495 - QB903 Descriptive astronomy|QB799 - QB903 Stars",329,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.",329,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z3001 - Z3496 Asia",329,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA28 - DA592 History|DA129 - DA592 By period|DA129 - DA260 Early and medieval to 1485",327,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH501 - QH531 Life",327,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works|AC1 - AC195 Collections of monographs, essays, etc.",326,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA4170 - NA7020 Public buildings",323,
        "Q - Science|QK1 - QK989 Botany|QK504 - QK635 Cryptogams",322,
        "R - Medicine|R5 - R920 Medicine (General)|R131 - R687 History of medicine. Medical expeditions",322,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC71 - LC120.4 Education and the state",320,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA773 - RA788 Personal health and hygiene",320,
        "E - History: America|E151 - E889 United States|E184 - E185.98 Elements in the population|E184.5 - E185.98 Afro-Americans|E185.96 - E185.98 Biography. Genealogy",319,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government",319,
        "Q - Science|QC1 - QC999 Physics|QC851 - QC999 Meteorology. Climatology (including the earth's atmosphere)|QC980 - QC999 Climatology and weather",318,
        "T - Technology.|TN1 - TN997 Mining engineering. Metallurgy.|TN799.5 - TN948 Nonmetallic minerals",315,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN3311 - PN3503 Prose. Prose fiction|PN3355 - PN3383 Technique. Authorship",314,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM1001 - HM1281 Social psychology|HM1106 - HM1171 Interpersonal relations. Social behavior",313,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z4 - Z8 History of books and bookmaking",313,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques",312,
        "A - General Works|AP1 - AP230 Periodicals",311,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia",311,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC110 - RC216 Infectious and parasitic diseases",311,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK2896 - TK2985 Production of electricity by direct electricity conversion",311,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving",310,
        "P - Language and literature|PR1 - PR9680 English literature|PR1803 - PR2165 Anglo-Norman period. Early English. Middle English",310,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX200 - BX756 Orthodox Eastern Church",309,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology",309,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature",309,
        "P - Language and literature|PR1 - PR9680 English literature|PR500 - PR614 Poetry",309,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa",308,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT500 - GT2370 Costume. Dress. Fashion",308,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1547 - M1600 Choruses, part-songs, etc., with accompaniment of keyboard or other solo instrument, or unaccompanied",308,
        "R - Medicine|RT1 - RT120 Nursing",307,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN80 - PN99 Criticism",306,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB3711 - HB3840 Business cycles. Economic fluctuations",305,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC131 - JC273 Modern state",305,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ1305 - JZ2060 Scope of international relations|JZ1464 - JZ2060 By country, territory, or region",305,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education",305,
        "Q - Science|QL1 - QL991 Zoology|QL750 - QL795 Animal behavior",304,
        "Q - Science|QR1 - QR502 Microbiology|QR1 - QR74.5 General",304,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)",304,
        "R - Medicine|RK1 - RK715 Dentistry",303,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ760 - HQ767.7 Family size",300,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training",297,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS556 - DS559.93 Vietnam. Annam|DS557 - DS559.9 Vietnamese Conflict",292,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM621 - HM656 Culture",292,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z700.9 - Z701.5 Preservation, conservation and restoration of books, etc.",292,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3224 - K3278 Individual and state",291,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV2000 - BV3705 Missions",290,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD172 - TD193.5 Environmental pollution",289,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P201 - P299 Comparative grammar",288,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1870 - JQ3981 Africa",287,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK3001 - TK3521 Distribution or transmission of electric power",287,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music",285,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA703 - TA712 Engineering geology. Rock mechanics. Soil mechanics. Underground construction",285,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD878 - TD894 Special types of environmental pollution (including soil, air, and noise pollution)",284,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG6001 - PG7446 Polish",282,
        "M - Music|M1 - M5000 Music|M1 - M2.3 Collections",280,
        "M - Music|ML1 - ML3930 Literature on music|ML47 - ML54.8 Librettos. Scenarios",280,
        "Q - Science|QA1 - QA939 Mathematics|QA299.6 - QA433 Analysis|QA303 - QA316 Calculus",280,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV5800 - HV5840 Drug habits. Drug abuse",279,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works|PT2660 - PT2688 1961-2000",279,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1190 - RA1270 Toxiciology. Poisons",279,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1401 - F1419 Latin America (General)",278,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG2397 - HG3550 By region or country",278,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV85 - HV525 By region or country",278,
        "R - Medicine|R5 - R920 Medicine (General)|R858 - R859.7 Computer applications to medicine",278,
        "A - General Works|AS1 - AS945 Academies and learned societies|AS11 - AS785 By region or country",277,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD6350 - HD6940.7 Trade unions. Labor unions. Worker's associations",276,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary|HV8130 - HV8280.7 By region or country",276,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D299 - D472 -1789",275,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN101 - JN1179 Great Britain",275,
        "M - Music|M1 - M5000 Music|M1 - M2.3 Collections|M2 - M2.3 Collections of musical sources",274,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature",273,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1 - JQ1849 Asia|JQ1499 - JQ1749 East Asia. Including China, Japan, Korea",272,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML1400 - ML3275 Vocal music|ML1600 - ML2881 Secular vocal music",271,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL700 - PL889 Japanese literature|PL784 - PL866 Individual authors and works",271,
        "Q - Science|QE1 - QE996.5 Geology|QE500 - QE639.5 Dynamic and structural geology|QE521 - QE545 Volcanoes and earthquakes",270,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)",268,
        "H - Social sciences|HF1 - HF6182 Commerce|HF3000 - HF4055 By region or country",267,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP315 - TP360 Fuel",267,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works|PT1799 - PT2592 1700-ca. 1860/70",266,
        "F - America: local history|F1 - F975 United States local history|F590.3 - F596.3 The West. Trans-Mississippi Region. Great Plains",265,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK501 - JK901 Executive branch",264,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA7100 - NA7884 Domestic architecture. Houses. Dwellings",264,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL175 - BL265 Natural theology",263,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT17 - DT39 History",263,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1221 - GV1469.62 Indoor games and amusements|GV1469.15 - GV1469.62 Computer games. Video games. Fantasy games",262,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV40 - HV69 Social service. Social work. Charity organization and practice (including social case work, private/public relief, institutional care, etc.)",262,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC50 - NC266 History of drawing",262,
        "B - Philosophy. Psychology. Religion|BF1001 - BF1389 Parapsychology",261,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary|HV8031 - HV8080 Police duty. Methods of protection",261,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue",259,
        "Q - Science|QC1 - QC999 Physics|QC251 - QC338.5 Heat",259,
        "Q - Science|QC1 - QC999 Physics|QC770 - QC798 Nuclear and particle physics. Atomic energy. Radioactivity|QC793 - QC793.5 Elementary particle physics",259,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM1 - BM449 General",258,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP1 - BP68 General",258,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX1 - NX260 General",258,
        "R - Medicine|R5 - R920 Medicine (General)|R856 - R857 Biomedical engineering. Electronics. Instrumentation",258,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions",257,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL2250 - PL3208 Chinese literature|PL2450 - PL2659 Collections",256,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC4001 - PC4977 Spanish",254,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages",253,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature",252,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL51 - BL65 Philosophy of religion. Psychology of religion. Religion in relation to other subjects",251,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT98 - BT180 God",251,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB421 - SB439.8 Classes of plants (including annuals, climbers, ferns, lawns, perennials, shrubs)",251,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ71 - BJ1185 History and general works",250,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV8301 - HV9920.7 Penology. Prisons. Corrections|HV9441 - HV9920.7 By region or country",250,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM495 - BM532 Sources of Jewish religion. Rabbinical literature",249,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS1901 - BS2970 New Testament|BS2280 - BS2545 Works about the New Testament",247,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey",247,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5381 - HF5386 Vocational guidance. Career development",247,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures",247,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA750 - DA890 Scotland",246,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML3544 - ML3775 National music",246,
        "T - Technology.|TS1 - TS2301 Manufactures|TS200 - TS770 Metal manufactures. Metalworking",246,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature",245,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ793 - HQ799.2 Youth. Adolescents. Teenagers",244,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6201 - PK6599.7 New Persian",244,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z693 - Z695.83 Cataloging",244,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS901 - DS937 Korea",243,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF2000 - KF2999",243,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2001 - PG2826 Russian language",243,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6146.5 - PN6231 Wit and humor",243,
        "A - General Works|AM1 - AM401 Museums. Collectors and collecting",241,
        "B - Philosophy. Psychology. Religion|BC1 - BC199 Logic",241,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX800 - BX4795 Catholic Church|BX2400 - BX4563 Monasticism. Religious orders",241,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS251 - DS326 Iran (Persia)",241,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA960 - RA1000.5 Medical centers. Hospitals. Dispensaries. Clinics (including ambulance service and nursing homes)",241,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP785 - TP869 Clay industries. Ceramics. Glass",241,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance",240,
        "C - Auxiliary Sciences of History|CB3 - CB482 History of Civilization|CB305 - CB430 By period",239,
        "A - General Works|AY10 - AY2001 Yearbooks. Almanacs. Directories",238,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS801 - DS897 Japan|DS833 - DS891.5 History",238,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1025 - LB1050.75 Teaching (Principles and practice)|LB1049.9 - LB1050.75 Reading (General)",238,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK510 - DK651 Russia (Federation). Russian S.F.S.R.",237,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6271 - PQ6498 Individual authors and works to 1700",237,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History",234,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature",234,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration",233,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU520 - DU950 Smaller Island Groups",232,
        "Q - Science|QL1 - QL991 Zoology|QL605 - QL739.8 Chordates. Vertebrates|QL614 - QL639.8 Fishes",232,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1421 - F1440 Central America",231,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL689 - BL980 European. Occidental",230,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P121 - P149 Science of language (Linguistics)",230,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF800 - JF1177 Political rights. Political participation",229,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1635 - HD1702 Utilization and culture of special classes of lands (including pasture lands, water resources development)",228,
        "H - Social sciences|HG1 - HG9999 Finance|HG3810 - HG4000 Foreign exchange. International finance|HG3879 - HG3898 International monetary system",228,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP1 - BP68 General|BP50 - BP68 History",227,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity|BR60 - BR67 Early Christian literature. Fathers of the Church, etc.",227,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa",226,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation",226,
        "H - Social sciences|HA1 - HA4737 Statistics|HA29 - HA32 Theory and method of social science statistics",226,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works|AC1 - AC195 Collections of monographs, essays, etc.|AC1 - AC8 American and English",225,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature",225,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ5001 - PJ5060 Literature",224,
        "Q - Science|QR1 - QR502 Microbiology|QR100 - QR130 Microbial ecology",224,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia",223,
        "Q - Science|QM1 - QM695 Human anatomy",223,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK7800 - TK8360 Electronics|TK7885 - TK7895 Computer engineering. Computer hardware",223,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV712 - GV725 Athletic contests. Sports Events",222,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1160 - NK1590 Decoration and ornament. Design",222,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG4001 - PG5146 Czech",221,
        "P - Language and literature|PR1 - PR9680 English literature|PR500 - PR614 Poetry|PR521 - PR614 By period",220,
        "R - Medicine|R5 - R920 Medicine (General)|R723 - R726 Medical philosophy. Medical ethics",220,
        "H - Social sciences|HG1 - HG9999 Finance|HG201 - HG1496 Money|HG451 - HG1496 By region or country",219,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4860 - PQ4886 Individual authors, 1961-2000",219,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR451 - PR469 19th century",219,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z711 - Z711.92 Reference work. Library service to special groups",219,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases",218,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT851 - HT1445 Slavery",218,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1401 - K1578 Intellectual property",218,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law",218,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA8001 - PA8595 Medieval and modern Latin literature",218,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6201 - PK6599.7 New Persian|PK6400 - PK6599.7 Literature",218,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC799 - RC869 Diseases of the digestive system. Gastroenterology",218,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP155 - TP156 Chemical engineering",218,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG401 - DG583.8 Medieval and modern Italy, 476-",217,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ12 - HQ449 Sexual life|HQ101 - HQ440.7 Prostitution",217,
        "R - Medicine|RE1 - RE994 Opthamology",217,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5549 - HF5549.5 Personnel management. Employment management",216,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K5000 - K5582 Criminal law and procedure",216,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries",216,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV640 - HV645 Refugee problems",215,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV6403 - JV7127 United States",215,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages",214,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z105 - Z115.5 Manuscripts. Paleography",214,
        "N - Fine Arts|N1 - N9211 Visual arts|N400 - N3990 Art museums, galleries, etc.",213,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9400 - PQ9999 Provincial, local, colonial, etc.",213,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments",212,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P306 - P310 Translating and interpreting",211,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4265 - PQ4556 Individual authors and works to 1400",211,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG1100 - UG1435 Equipment and supplies",211,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P118 - P118.75 Language acquisition",210,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC750 - QC766 Magnetism",210,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT697 - TT927 Home arts. Homecrafts (including sewing, embroidery, decorative crafts)",210,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam",209,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF38 - BF64 Philosophy. Relation to other topics",208,
        "L - Education|LF14 - LF5627 Individual institutions",208,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF5000 - KF5999",207,
        "T - Technology.|TR1 - TR1050 Photography|TR845 - TR899 Cinematography. Motion pictures",207,
        "Q - Science|QA1 - QA939 Mathematics|QA101 - QA141.8 Elementary mathematics. Arithmetic",206,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT3400 - GT5090 Customs relative to public and social life (including town life, court life, festivals, holidays, ceremonies of royalty, etc.)",205,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania",205,
        "Q - Science|QK1 - QK989 Botany|QK900 - QK989 Plant ecology",204,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF6000 - KF6999",203,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period",202,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK2255 - JK2391 Political parties",201,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4001 - PN4355 Oratory. Elocution, etc.",201,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D111 - D203 Medieval history",200,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT491 - DT516.9 British West Africa",199,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E310 - E337 1789-1809. Constitutional period",199,
        "H - Social sciences|HA1 - HA4737 Statistics|HA154 - HA4737 Statistical data",199,
        "M - Music|ML1 - ML3930 Literature on music|ML112.8 - ML158.8 Bibliography|ML136 - ML158 Catalogs. Discography",199,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML198 - ML360 By region or country",199,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T58.5 - T58.64 Information technology|T58.6 - T58.62 Management information systems",199,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z266 - Z276 Bookbinding. Book decoration",199,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature",198,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9400 - PQ9999 Provincial, local, colonial, etc.|PQ9500 - PQ9698.43 Brazil",198,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL1790 - BL1975 China",197,
        "E - History: America|E151 - E889 United States|E456 - E655 Civil War period, 1861-1865|E456 - E459 Lincoln's administrations, 1861-April 15, 1865",197,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV4000 - BV4470 Pastoral theology",196,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography",196,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE400 - NE773 History of printmaking",196,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN500 - PN519 Collections",196,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving",195,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL2250 - PL3208 Chinese literature|PL2250 - PL2443 History and criticism",195,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4601 - PL4890 Dravidian languages",195,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV7590 - JV8349 Europe",194,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1651 - PK1799 Bengali",194,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)",193,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages",193,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB469 - SB476 Landscape gardening. Landscape architecture",192,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography",191,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK1001 - JK1443 Congress. Legislative branch",191,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature",191,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL175 - BL265 Natural theology|BL239 - BL265 Religion and science",190,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK3700 - NK4695 Ceramics",190,
        "R - Medicine|RB1 - RB214 Pathology|RB37 - RB56.5 Clinical pathology. Laboratory technique",190,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3701 - LC3740 Immigrants or ethnic and linguistic minorities. Bilingual schools and bilingual education",189,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL2700 - BL2790 Rationalism",188,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1201 - F1393 Mexico|F1218.5 - F1221 Antiquities. Indians",188,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1139.2 - LB1139.5 Early childhood education",188,
        "Q - Science|QE1 - QE996.5 Geology|QE420 - QE499 Petrology",188,
        "H - Social sciences|HA1 - HA4737 Statistics|HA154 - HA4737 Statistical data|HA175 - HA4737 By region or country",187,
        "P - Language and literature|PE1 - PE3729 English language|PE1700 - PE3602 Dialects. Provincialisms, etc.",187,
        "Q - Science|QD1 - QD999 Chemistry|QD901 - QD999 Crystallography",187,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC600 - DC801 Local history and description",186,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV551.2 - HV639 Emergency management|HV553 - HV639 Relief in case of disasters",186,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1603 - LB1696.6 Secondary education. High schools",185,
        "Q - Science|Q1 - Q390 Science (General)|Q300 - Q390 Cybernetics|Q350 - Q390 Information theory",184,
        "R - Medicine|RB1 - RB214 Pathology|RB151 - RB214 Theories of disease. Etiology. Pathogenesis",184,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ12 - HQ449 Sexual life|HQ19 - HQ30.7 Sexual behavior and attitudes. Sexuality",183,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6600 - PQ6647 Individual authors, 1868-1960",183,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6146.5 - PN6231 Wit and humor|PN6157 - PN6222 By region or country",182,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM1 - BM449 General|BM150 - BM449 History",181,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA9000 - NA9428 Aesthetics of cities. City planning and beautifying",181,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects",181,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN49 - GN298 Physical anthropology. Somatology|GN281 - GN289 Human evolution",180,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education",180,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z998 - Z1000.5 Booksellers' catalogs. Book prices",180,
        "Q - Science|QR1 - QR502 Microbiology|QR75 - QR99.5 Bacteria",179,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D299 - D472 -1789|D410 - D472 20th century",178,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E838 - E840.8 General",178,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1 - JQ1849 Asia|JQ200 - JQ620 India",177,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA4050 - ZA4750 Information in specific formats or media",177,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS781 - DS796 Local history and description",176,
        "Q - Science|QC1 - QC999 Physics|QC120 - QC168.85 Descriptive and experimental mechanics",176,
        "T - Technology.|T1 - T995 Technology (General)|T173.2 - T174.5 Technological change",176,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1111 - BL1143.2 Sacred books. Sources",175,
        "C - Auxiliary Sciences of History|CS1 - CS3090 Genealogy",175,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ4835 - JZ5490 International organizations and associations",175,
        "Q - Science|QC1 - QC999 Physics|QC474 - QC496.9 Radiation physics (General)",175,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5387 - HF5387.5 Business ethics",174,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6201 - PK6599.7 New Persian|PK6400 - PK6599.7 Literature|PK6450.9 - PK6562.35 Individual authors or works",174,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4800 - PQ4851 Individual authors, 1900-1960",174,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9650 - PT9876.36 Individual authors or works",174,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements",173,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD493 - BD701 Cosmology",172,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ1188 - BJ1295 Religious ethics",172,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G369 - G503 Special voyages and travels",172,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G575 - G890 Arctic and Antarctic regions",172,
        "P - Language and literature|PR1 - PR9680 English literature|PR621 - PR744 Drama",172,
        "Q - Science|QE1 - QE996.5 Geology|QE760.8 - QE899.2 Paleozoology",172,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL624 - BL629.5 Religious life",171,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada|F1001 - F1035 General",171,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism",171,
        "Q - Science|QB1 - QB991 Astronomy|QB980 - QB991 Cosmogony. Cosmology",171,
        "L - Education|LD13 - LD7501 Individual institutions",170,
        "L - Education|LD13 - LD7501 Individual institutions|LD13 - LD7501 United States",170,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3000 - PA3049 Classical literature",170,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB3011 - LB3095 School management and discipline|LB3050 - LB3060.87 Educational tests, measurements, evaluations and examinations",168,
        "B - Philosophy. Psychology. Religion|BH1 - BH301 Aesthetics",167,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2501 - F2659 Brazil",167,
        "A - General Works|AZ101 - AZ999 History of scholarship and learning. The humanities",166,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K1 - K36.5 Periodicals",166,
        "Q - Science|QM1 - QM695 Human anatomy|QM1 - QM511 General",166,
        "E - History: America|E151 - E889 United States|E171 - E183.9 History|E171 - E180 General|E176 - E176.8 Biography",165,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845",165,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ163.12 - TJ163.25 Power resources",165,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA4050 - ZA4750 Information in specific formats or media|ZA4050 - ZA4460 Electronic information resources",165,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF698 - BF698.9 Personality",164,
        "L - Education|LD13 - LD7501 Individual institutions|LD13 - LD7501 United States|LD13 - LD7251 Universities. Colleges",164,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF411 - SF459 Pets",164,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK9001 - TK9401 Nuclear engineering. Atomic power",164,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia",163,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject",163,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC149 - LC161 Literacy. Illiteracy",163,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections",163,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA648.5 - RA767 Epidemics. Epidemology. Quarantine. Disinfection",163,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z657 - Z659 Freedom of the press. Censorship",163,
        "F - America: local history|F1 - F975 United States local history|F206 - F220 The South. South Atlantic States",162,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology|HV6774 - HV7220.5 Crimes and criminal classes",162,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB1775 - LB1785 Professional aspects of teaching and school administrators. Vocational guidance",162,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States",161,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5437 - HF5444 Purchasing. Selling. Sales personnel. Sales executives",161,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT1501 - HT1595 Races (including race as a social group and race relations in general)",161,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5511.2 - JZ6299 Promotion of peace. Peaceful change|JZ5586 - JZ6009 International security. Disarmament",161,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1611 - M1624.8 Songs",161,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6080 - PN6095 Quotations",161,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA166 - TA167 Human engineering",161,
        "E - History: America|E151 - E889 United States|E660 - E738 Late nineteenth century, 1865-1900",160,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB71 - HB74 Economics as a science. Relation to other subjects",160,
        "C - Auxiliary Sciences of History|CD1 - CD6471 Diplomatics. Archives. Seals",159,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K5000 - K5582 Criminal law and procedure|K5015.4 - K5350 Criminal law",159,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature",159,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB320 - SB353.5 Vegetables",159,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS350 - DS375 Afghanistan",158,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV8301 - HV9920.7 Penology. Prisons. Corrections|HV9051 - HV9230.7 The juvenile offender. Juvenile delinquency. Reform schools, etc.",158,
        "R - Medicine|RB1 - RB214 Pathology|RB127 - RB150 Manifestation of disease",158,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT341 - TT641 Nutrition. Foods and food supply",158,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ1100 - BQ3340 Tripitaka (Canonical literature)",157,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ12 - HQ449 Sexual life|HQ31 - HQ64 Sex instruction and sexual ethics",157,
        "M - Music|ML1 - ML3930 Literature on music|ML62 - ML90 Special aspects. Including writings of musicians",157,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language",157,
        "P - Language and literature|PR1 - PR9680 English literature|PR621 - PR744 Drama|PR641 - PR744 By period",157,
        "Q - Science|QC1 - QC999 Physics|QC350 - QC467 Optics. Light|QC450 - QC467 Spectroscopy",157,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA565 - RA600 Environmental health (including sewage disposal, air pollution, nuisances, water supply)",157,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA8001 - PA8595 Medieval and modern Latin literature|PA8200 - PA8595 Individual authors",156,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP500 - TP660 Fermentation industries. Beverages. Alcohol",156,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV6201 - JV6348 Immigration",155,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law",155,
        "L - Education|LF14 - LF5627 Individual institutions|LF14 - LF1257 Great Britain",155,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG1201 - PG1749 Serbo-Croatian",155,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN661 - PN694 Medieval (to 1500)",155,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC870 - RC923 Diseases of the genitourinary system. Urology",155,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP100 - BP137 Sacred books",154,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE1001 - HE5600 Railroads. Rapid transit systems",154,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK1717 - JK2248 Political rights. Practical politics|JK1961 - JK2248 Electoral system",154,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC189 - LC214.53 Educational sociology|LC213 - LC214.53 Educational equalization. Right to education",154,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK8800 - NK9505.5 Textiles",154,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering",154,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL1 - BL50 Religion (General)",153,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL2500 - BL2592 American",152,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5717 - HF5734.7 Business communication",152,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM481 - HM554 Theory. Method. Relations to other subjects",152,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French",152,
        "Q - Science|QE1 - QE996.5 Geology|QE701 - QE760 Paleontology",152,
        "Q - Science|QH1 - QH278.5 Natural history (General)|QH201 - QH278.5 Microscopy",152,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B720 - B765 Medieval",151,
        "R - Medicine|RL1 - RL803 Dermatology",151,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB1 - DB879 Austria. Austro-Hungarian Empire",150,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ1947 - PQ2147 18th century",150,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS400 - RS431 Pharmaceutical chemistry",150,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z719 - Z725 Libraries (General)",150,
        "L - Education|LF14 - LF5627 Individual institutions|LF14 - LF1257 Great Britain|LF14 - LF797 England",149,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-",147,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology|GB561 - GB649 Other natural landforms: floodplains, caves, deserts, dunes, etc.",147,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ1060 - HQ1064 Aged. Gerontology (Social aspects). Retirement",147,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ5001 - PJ5060 Literature|PJ5050 - PJ5055.51 Individual authors and works",147,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA790 - RA790.95 Mental health. Mental illness prevention",147,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1011 - Z1017 General bibliographies",147,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z689 - Z689.8 Acquisition (selection, purchase, gifts, duplicates)",147,
        "C - Auxiliary Sciences of History|CB3 - CB482 History of Civilization|CB195 - CB281 Civilization and race",146,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC51 - JC93 Ancient state",146,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB51 - LB885 Systems of individual educators and writers",146,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1001 - RA1171 Forensic medicine. Medical jurisprudence. Legal medicine",146,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP1080 - TP1185 Polymers and polymer manufacture",146,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS901 - DS937 Korea|DS904.8 - DS922.46 History",145,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E740 - E749 General|E744 - E744.5 Diplomatic history. Foreign and general relations",145,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F3401 - F3619 Peru",145,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2699 - LC2913 Blacks. African Americans",144,
        "M - Music|ML1 - ML3930 Literature on music|ML100 - ML109 Dictionaries. Encyclopedias",144,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6099 - PN6110 Poetry",144,
        "T - Technology.|TN1 - TN997 Mining engineering. Metallurgy.|TN600 - TN799 Metallurgy",144,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM661 - HM696 Social control",143,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV1 - JV5399 Colonies and colonization",143,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1110 - PN1279 History and criticism",143,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History",142,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE380.8 - HE971 Water transportation",142,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT851 - HT1445 Slavery|HT1048 - HT1444 By region or country",142,
        "Q - Science|QB1 - QB991 Astronomy|QB460 - QB466 Astrophysics",142,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC581 - RC607 Immunologic diseases. Allergy",142,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD201 - TD500 Water supply for domestic and industrial purposes|TD419 - TD428 Water pollution",142,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing|Z240 - Z241.5 Incunabula. Block books. Including broadsides, playing cards",142,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV5001 - HV5720.5 Alcoholism. Intemperance. Temperance reform",141,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology|HV6035 - HV6197 Criminal anthropology (including criminal types, criminal psychology, prison psychology, causes of crime)",141,
        "A - General Works|AY10 - AY2001 Yearbooks. Almanacs. Directories|AY10 - AY29 Annuals",140,
        "P - Language and literature|PF1 - PF5999 West Germanic languages",140,
        "C - Auxiliary Sciences of History|CD1 - CD6471 Diplomatics. Archives. Seals|CD921 - CD4280 Archives",139,
        "Q - Science|QL1 - QL991 Zoology|QL605 - QL739.8 Chordates. Vertebrates|QL640 - QL669.3 Reptiles and amphibians",139,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF951 - SF997.5 Diseases of special classes of animals",139,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL689 - BL980 European. Occidental|BL700 - BL820 Classical (Etruscan, Greek, Roman)",138,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law",138,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes",138,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2115 - M2146 Hymnals. Hymn collections",138,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA4170 - NA7020 Public buildings|NA4590 - NA5621 Religious architecture",138,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD511 - TD780 Sewage collection and disposal systems",138,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation",138,
        "U - Military science (General)|U1 - U900 Military science (General)|U21 - U22.3 War. Philosophy. Military sociology",138,
        "U - Military science (General)|UG1 - UG620 Military engineering",138,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology|CC135 - CC137 Preservation, restoration, and conservation of antiquities.  Antiquities and state",137,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS501 - DS518.9 East Asia. The Far East",137,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD783 - TD812.5 Municipal refuse. Solid wastes",137,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC648 - RC665 Diseases of the endocrine glands",136,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC997 - NC1003 Commercial art. Advertising art",135,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC705 - RC779 Diseases of the respiratory system",135,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD101 - HD1395.5 Land use|HD1361 - HD1395.5 Real estate business",134,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV2000 - BV3705 Missions|BV2750 - BV3695 Missions in individual countries",133,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV4701 - HV4890.9 Protection of animals. Animal rights. Animal welfare",133,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC189 - LC214.53 Educational sociology|LC212 - LC212.86 Discrimination in education",133,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1900 - M1978 Songs (part and solo) of special character",133,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2695 - NA2793 Architectural drawing and design",133,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL501 - PL699 Japanese language",133,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2061 - PN2071 Art of acting",133,
        "Q - Science|QE1 - QE996.5 Geology|QE351 - QE399.2 Mineralogy",133,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases|SB621 - SB795 Plant pathology",133,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing",133,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1350 - DR2285 Local history and description",132,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K321 - K474 Schools of legal theory",132,
        "L - Education|L7 - L991 Education (General)",132,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR421 - PR429 Elizabethan era (1550-1640)",132,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S419 - S482 History",132,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland",131,
        "E - History: America|E11 - E143 America|E101 - E135 Discovery of America and early explorations",131,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR251 - PR369 Medieval. Middle English (1066-1500)",131,
        "H - Social sciences|HG1 - HG9999 Finance|HG3691 - HG3769 Credit. Debt. Loans (including credit institutions, credit instruments, consumer credit, bankruptcy)",130,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature|PL8035 - PL8844 Special languages (alphabetically)",130,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1865 - PN1988 Special types",130,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1119 - PR1151 By period",130,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT1772 - DT1974 History",129,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6650 - PQ6676 Individual authors, 1961-2000",129,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8750 - PT8951.36 Individual authors or works",129,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC501 - QC718.8 Electricity|QC717.6 - QC718.8 Plasma physics. Ionized gasses",129,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP188 - BP190 Islamic religious life",128,
        "C - Auxiliary Sciences of History|CS1 - CS3090 Genealogy|CS42 - CS2209 By region or country",128,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1101 - GV1150.9 Fighting sports: Bullfighting, boxing, fencing, etc.",128,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA2001 - PA2915 Latin philology and language",128,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E841 - E843 Kennedy's administration, 1961-November 22, 1963",127,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.",127,
        "M - Music|MT1 - MT960 Musical instruction and study|MT1 - MT5 History and criticism",127,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ5061 - PJ5192 Other languages used by Jews",127,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN3311 - PN3503 Prose. Prose fiction|PN3427 - PN3448 Special kinds of fiction. Fiction genres",127,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS651 - DS689 Philippines",126,
        "Q - Science|QE1 - QE996.5 Geology|QE640 - QE699 Stratigraphy",126,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL1790 - BL1975 China|BL1899 - BL1942.85 Taoism",125,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country",125,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV770.3 - GV840 Water sports: Canoeing, sailing, yachting, scuba diving, etc.",125,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism|PG2900 - PG2998 General",125,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1990 - PN1992.92 Broadcasting|PN1991 - PN1991.9 Radio broadcasts",125,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases|SB950 - SB990.5 Pest control and treatment of diseases. Plant protection",125,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB1001 - GB1199.6 Groundwater. Hydrogeology",124,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ450 - HQ472 Erotica",124,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK2403 - JK9593 State government",124,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K2400 - K2405 Arbitration and award",123,
        "N - Fine Arts|N1 - N9211 Visual arts|N81 - N390 Study and teaching. Research",123,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1300 - PQ1595 Old French literature (To ca. 1500/1550)",123,
        "G - Geography. Anthropology. Recreation|GF1 - GF900 Human ecology. Anthropogeography|GF500 - GF900 By region or country",122,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1811 - HG2351 Special classes of banks and financial institutions",122,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature|PA3051 - PA3285 Literary history",122,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ5061 - PJ5192 Other languages used by Jews|PJ5111 - PJ5192 Yiddish",122,
        "Q - Science|QC1 - QC999 Physics|QC251 - QC338.5 Heat|QC310.15 - QC319 Thermodynamics",122,
        "P - Language and literature|PR1 - PR9680 English literature|PR1490 - PR1799 Anglo-Saxon literature",121,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-|DP233 - DP272.4 20th century. 1886-",120,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training|GV460 - GV555 Gymnastics. Gymnastic exercises (including calisthenics, heavy exercises, acrobatics, etc.)",120,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD2321 - HD4730.9 Industry|HD2340.8 - HD2346.5 Small and medium-sized businesses, artisans, handicrafts, trades",120,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1 - JQ1849 Asia|JQ1758 - JQ1852 Middle East. Including Turkey, Iran, Israel, Arabian Peninsula",120,
        "M - Music|MT1 - MT960 Musical instruction and study|MT90 - MT146 Analysis and appreciation of musical works",120,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P98 - P98.5 Computational linguistics. Natural language processing",120,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR441 - PR449 18th century",120,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1 - RA418.5 Medicine and the state|RA410 - RA410.9 Medical economics. Economics of medical care. Employment",120,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK2000 - TK2891 Dynamoelectric machinery and auxiliaries (including generators, transformers, motors)",120,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL425 - BL490 Religious doctrines (General)",119,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT74 - DT107.87 History",119,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2801 - F3021 Argentina",119,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ4835 - JZ5490 International organizations and associations|JZ4850 - JZ5490 Intergovernmental organizations. IGOs",119,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA5000 - PA5660 Byzantine and modern Greek literature",119,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB1201 - PB1449 Irish",119,
        "V - Naval science|V1 - V995 Naval science (General)",119,
        "D - History (General) and History of Europe|DE1 - DE100 History of the Greco-Roman world",118,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2341 - LB2341.95 Supervision and administration. Business management",118,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P302 - P302.87 Discourse analysis",118,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1 - PL481 Ural-Altaic languages",118,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN101 - PN245 Authorship|PN172 - PN239 Technique. Literary composition, etc.",118,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT93 - CT206 General collective biography",117,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL74 - BL99 Religions of the world",116,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA600 - DA667 Description and travel. Guidebooks",116,
        "D - History (General) and History of Europe|DF10 - DF951 History of Greece|DF701 - DF951 Modern Greece",116,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG691 - DG817.3 Central Italy",116,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1099 - LC1099.5 Multicultural education (General)",116,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT491 - DT516.9 British West Africa|DT515 - DT515.9 Nigeria",115,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV701 - HV1420.5 Children|HV873 - HV887 Destitute, neglected, and abandoned children. Street children",115,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ226 - PQ310 Modern",115,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT750 - BT811 Salvation. Soteriology",114,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS201 - DS248 Arabian Peninsula. Saudi Arabia",114,
        "H - Social sciences|HX1 - HX970.7 Socialism. Communism. Anarchism|HX821 - HX970.9 Anarchism",114,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML1400 - ML3275 Vocal music|ML2900 - ML3275 Sacred vocal music",114,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL950 - PL998 Korean literature",114,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1 - RA418.5 Medicine and the state|RA418 - RA418.5 Medicine and society. Social medicine. Medical sociology",114,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT56.8 - DT69.5 Antiquities",113,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ241 - HJ1620 By region or country",113,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC1401 - LC2572 Women",113,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German",113,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1 - PL481 Ural-Altaic languages|PL21 - PL396 Turkic languages",113,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1031 - PN1049 Theory, philosophy, relations, etc.",113,
        "R - Medicine|RD1 - RD811 Surgery|RD701 - RD811 Orthopedic surgery",113,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ1040 - TJ1119 Machinery exclusive of prime movers",113,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS125 - BS355 Modern texts and versions",112,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members",112,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK6400 - NK8459 Metalwork",112,
        "R - Medicine|RF1 - RF547 Otorhinolaryngology",112,
        "H - Social sciences|HF1 - HF6182 Commerce|HF1701 - HF2701 Tariff. Free trade. Protectionism",111,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF201 - JF619 Organs and functions of government",111,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations",111,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature|PA3601 - PA3681 Translations",110,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature|PA6001 - PA6095.5 Literary history",110,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB354 - SB402 Fruit culture and orchard care",110,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH20.3 - SH191 Aquaculture",110,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry",109,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD258 - DD262 West Germany",109,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2201 - F2239 General",109,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV199 - GV199.6 Hiking. Pedestrian tours",109,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ2361 - HJ3192.7 By region or country",109,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology|HV6201 - HV6249 Criminal classes",109,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF231 - BF299 Sensation. Aesthesiology",108,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR471 - PR479 20th century",108,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ255 - TJ265 Heat engines",108,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP191 - BP253 Branches, sects, etc.",107,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB2000 - DB3150 Czechoslovakia",107,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E806 - E813 Franklin Delano Roosevelt's administrations, 1933-April 12, 1945",107,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1501 - LB1547 Primary education",107,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN451 - PN497 Biography",107,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ1710 - PQ1935 17th century",107,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS36 - DS39.2 Arab countries",106,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC200 - GC376 Dynamics of the ocean",106,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education",106,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages",106,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures|PK2030 - PK2142 Hindi, Hindustani literatures",106,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism",106,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL2000 - BL2032 India",105,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV840.7 - GV857 Winter sports: Ice hockey, skiing, bobsledding, snowmobiling, etc.",105,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control",105,
        "Q - Science|QD1 - QD999 Chemistry|QD241 - QD441 Organic chemistry|QD415 - QD436 Biochemistry",105,
        "Q - Science|QK1 - QK989 Botany|QK474.8 - QK495 Spermatophyta. Phanerogams",105,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG133 - RG137.6 Conception. Artificial insemination. Contraception",105,
        "T - Technology.|TX1 - TX1110 Home economics.|TX901 - TX946.5 Hospitality industry. Hotels, clubs, restaurants, food service, etc.",105,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z1201 - Z1946 America|Z1411 - Z1939 Latin America",105,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period|DC60 - DC109 Early and medieval to 1515",104,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5548.7 - HF5548.85 Industrial psychology",104,
        "T - Technology.|TS1 - TS2301 Manufactures|TS1300 - TS1865 Textile industries",104,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS798.92 - DS799.9 Taiwan",103,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC215 - LC238.4 Community and the school",103,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX650 - NX694 Special subjects, characters, persons, religious arts, etc.",103,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ1125 - TJ1345 Machine shops and machine shops practice",103,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX5800 - BX5995 Protestant Episcopal Church in the United States of America",102,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT3200 - CT9999 Biography. By subject",102,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP200 - TP248 Manufacture and use of chemicals",102,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z699 - Z699.5 Machine methods of information and retrieval. Mechanized bibliographic control",102,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1060.5 - GV1098 Track and field athletics",101,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC311 - JC314 Nationalism. Nation state",101,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli",101,
        "T - Technology.|TS1 - TS2301 Manufactures|TS1080 - TS1268 Paper manufacture and trade",101,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3581 - K3598 Environmental law",100,
        "S - Agriculture|SK1 - SK663 Hunting",100,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF636 - BF637 Applied psychology",99,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E876 - E880 Reagan's administrations, 1981-1989",99,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1001 - PJ1989 Egyptology",99,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature",99,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD169 - TD171.8 Environmental protection",99,
        "A - General Works|AY10 - AY2001 Yearbooks. Almanacs. Directories|AY30 - AY1730 Almanacs",98,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP100 - BP137 Sacred books|BP100 - BP134 Koran",98,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G521 - G539 Adventures, shipwrecks, buried treasure, etc.",98,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE9761 - HE9900 Air transportation. Airlines",98,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV1450 - HV1494 Aged",98,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism|PG3001 - PG3026 Special periods",98,
        "Q - Science|QC1 - QC999 Physics|QC221 - QC246 Acoustics. Sound",98,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD159 - TD168 Municipal engineering",98,
        "T - Technology.|TH1 - TH9745 Building construction|TH9025 - TH9745 Protection of fuildings (including protection from dampness, fire, burglary)",98,
        "A - General Works|AG2 - AG600 Dictionaries and other general reference works",97,
        "B - Philosophy. Psychology. Religion|BC1 - BC199 Logic|BC171 - BC199 Special topics",97,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments",97,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1160 - NK1590 Decoration and ornament. Design|NK1175 - NK1498 History",97,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.|PN4775 - PN4784 Technique. Practical journalism",97,
        "Q - Science|QK1 - QK989 Botany|QK640 - QK673 Plant anatomy",97,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)",96,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E885 - E889 Clinton administration, 1993-2001",96,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG551 - RG591 Pregnancy",96,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS300 - JS1583 United States",95,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1101 - LB1139 Child study",95,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3950 - LC4806.5 Exceptional children and youth. Special education|LC3991 - LC4000 Gifted children and youth",95,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1030 - NE1196.3 History",95,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL5051 - PL5497 Malayan (Indonesian) languages",95,
        "R - Medicine|RE1 - RE994 Opthamology|RE91 - RE912 Particular diseases of the eye",95,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine",95,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History",94,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE331 - HE380 Traffic engineering. Roads and highways. Streets",94,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6400 - PN6525 Proverbs",94,
        "Q - Science|QR1 - QR502 Microbiology|QR355 - QR502 Virology",94,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF411 - SF459 Pets|SF421 - SF440.2 Dogs. Dog racing",94,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD201 - TD500 Water supply for domestic and industrial purposes|TD429.5 - TD480.7 Water purification. Water treatment and conditioning. Saline water conversion",94,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT1095 - BT1255 Apologetics. Evidences of Christianity",93,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9401 - BX9640 Reformed or Calvinistic Churches",93,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE380.8 - HE971 Water transportation|HE561 - HE971 Shipping",93,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1700 - ND2495 Watercolor painting",93,
        "P - Language and literature|PR1 - PR9680 English literature|PR1 - PR56 Literary history and criticism",93,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC925 - RC935 Diseases of the musculoskeletal system",93,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ251 - BQ799 History",92,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period|DC110 - DC424 Modern, 1515-|DC361 - DC424 20th century",92,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1075 - HQ1075.5 Sex role",92,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K830 - K968 Obligations",92,
        "L - Education|LA5 - LA2396 History of education|LA2301 - LA2396 Biography",92,
        "M - Music|MT1 - MT960 Musical instruction and study|MT5.5 - MT7 Music theory",92,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3515 - PG3550 Outside the Russian Federation",92,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC86 - RC88.9 Medical emergencies. Critical care. Intensive care. First aid",92,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E300 - E302.6 General",91,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5428 - HF5429.6 Retail trade",91,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8751 - HG9295 Life insurance",91,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK2901 - PK2979 General",91,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ1600 - PQ1709 16th century",91,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9650 - PT9876.36 Individual authors or works|PT9876 - PT9876.36 1961-2000",91,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1 - RA418.5 Medicine and the state|RA407 - RA409.5 Health status indicators. Medical statistics and surveys",91,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC401 - TC506 River, lake, and water-supply engineering (General)",91,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology|GN378 - GN396 Collected dthnographies",90,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH2001 - PH3445 Hungarian",90,
        "U - Military science (General)|U1 - U900 Military science (General)|U27 - U43 History of military science",90,
        "B - Philosophy. Psychology. Religion|BF1001 - BF1389 Parapsychology|BF1048 - BF1108 Hallucinations. Sleep. Dreaming. Visions",89,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8201 - BX8495 Methodism",89,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB2832 - LB2844.1 Teaching personnel",89,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA5000 - PA5660 Byzantine and modern Greek literature|PA5301 - PA5637 Individual authors",89,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC71 - RC78.7 Examination. Diagnosis (including radiography)",89,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG600 - RG650 The embryo and fetus",89,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF697 - BF697.5 Differential psychology. Individuality. Self",88,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1585 - BF1623 Magic. Hermetics. Necromancy",88,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU120 - DU125 Ethnography",88,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT170 - HT178 Urban renewal. Urban redevelopment",88,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT390 - HT395 Regional planning",88,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM695 - RM893 Physical medicine. Physical therapy (including massage, exercise, occupational therapy, hydrotherapy, phototherapy, radiotherapy, thermotherapy, elect",88,
        "T - Technology.|TH1 - TH9745 Building construction|TH845 - TH895 Architectural engineering. Structural engineering of buildings",88,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL2390 - BL2490 African",87,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK508 - DK508.95 Ukraine",87,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History|DR481 - DR605 By period",87,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS331 - DS349.9 Southern Asia. Indian Ocean Region",87,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU108 - DU117.2 History",87,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB1201 - GB1598 Rivers. Stream measurements",87,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9715 - HD9717.5 Construction industry",87,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1088 - HQ1090.7 Men",87,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV4480 - HV4630 Mendicancy. Vagabondism. Tramps. Homelessness",87,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC627.5 - RC632 Metabolic diseases",87,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation",87,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS376 - DS392.2 Pakistan",86,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9665 - HD9675 Pharmaceutical industry",86,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV8301 - HV9920.7 Penology. Prisons. Corrections|HV9261 - HV9430.7 Reformation and reclamation of adult prisoners",86,
        "Q - Science|QD1 - QD999 Chemistry|QD450 - QD801 Physical and theoretical chemistry|QD701 - QD731 Photochemistry",86,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC1200 - RC1245 Sports medicine",86,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA170 - TA171 Environmental engineering",86,
        "U - Military science (General)|U1 - U900 Military science (General)|U400 - U714 Military education and training",86,
        "B - Philosophy. Psychology. Religion|BJ1801 - BJ2195 Social usages. Etiquette",85,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP160 - BP165 General works on Islam",85,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D51 - D90 Ancient history",85,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV551.2 - HV639 Emergency management|HV553 - HV639 Relief in case of disasters|HV599 - HV639 Special types of disasters",85,
        "R - Medicine|R5 - R920 Medicine (General)|R728 - R733 Practice of medicine. Medical practice economics",85,
        "U - Military science (General)|U1 - U900 Military science (General)|U263 - U264.5 Atomic warfare. Atomic weapons",85,
        "U - Military science (General)|UF1 - UF910 Artillery",85,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP188 - BP190 Islamic religious life|BP188.45 - BP189.65 Sufism. Mysticism. Dervishes",84,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary|HV7935 - HV8025 Administration and organization",84,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration|JL1850 - JL3899 South America",84,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1100 - PQ1297 Collections",84,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC633 - RC647.5 Diseases of the blood and blood-forming organs",84,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4061 - BQ4570 Doctrinal and systematic Buddhism",83,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBP1 - KBP4860 Islamic law. Shari'ah. Fiqh",83,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures|PK2151 - PK2212 Urdu literature",83,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature",83,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM214 - RM258 Diet therapy. Diet and dietetics in disease. Dietary cookbooks",83,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS160 - RS167 Pharmacognosy. Pharmaceutical substances (plant, animal, and inorganic)",83,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF191 - SF275 Cattle",83,
        "T - Technology.|TG1 - TG470 Bridge engineering.",83,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS31 - DS35.2 History",82,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E310 - E337 1789-1809. Constitutional period|E311 - E320 Washington's administrations, 1789-1797",82,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN3201 - JN4980 Germany",82,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK2200 - NK2750 Furniture",82,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ601 - PQ771 Prose and prose fiction",82,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1562.5 - BF1584 Witchcraft",81,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS561 - DS589 Thailand (Siam)",81,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU520 - DU950 Smaller Island Groups|DU620 - DU629 Hawaiian Islands. Hawaii",81,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML198 - ML360 By region or country|ML240 - ML325 Europe",81,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM3001 - PM4566 Languages of Mexico and Central America",81,
        "T - Technology.|T1 - T995 Technology (General)|T351 - T385 Mechanical drawing. Engineering graphics",81,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC160 - TC181 Technical hydraulics",81,
        "V - Naval science|VA10 - VA750 Navies: Organization, distribution, naval situation",81,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT19 - BT37 Doctrine and dogma",80,
        "H - Social sciences|HX1 - HX970.7 Socialism. Communism. Anarchism|HX519 - HX550 Communism/socialism in relation to special topics",80,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KU1 - KU4999 Australia",80,
        "M - Music|ML1 - ML3930 Literature on music|ML3800 - ML3923 Philosophy and physics of music|ML3845 - ML3877 Aesthetics",80,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1700 - NK2195 Interior decoration. House decoration",80,
        "Q - Science|QE1 - QE996.5 Geology|QE500 - QE639.5 Dynamic and structural geology|QE601 - QE613.5 Structural geology",80,
        "R - Medicine|RD1 - RD811 Surgery|RD92 - RD97.8 Emergency surgery. Wounds and injuries",80,
        "R - Medicine|RK1 - RK715 Dentistry|RK301 - RK493 Oral and dental medicine. Pathology. Diseases",80,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT1313 - BT1480 History of specific doctrines and movements. Heresies and schisms",79,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT361 - HT384 Urbanization. City and country",79,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS3000 - JS6949.8 Europe",79,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1041 - LC1048 Vocational education (General)",79,
        "N - Fine Arts|N1 - N9211 Visual arts|N61 - N72 Theory. Philosophy. Aesthetics of the visual arts",79,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1160 - NK1590 Decoration and ornament. Design|NK1505 - NK1535 General works",79,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA4050 - ZA4750 Information in specific formats or media|ZA4050 - ZA4460 Electronic information resources|ZA4150 - ZA4390 Computer network resources",79,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM480 - BM488.8 Pre-Talmudic Jewish literature (non-Biblical)",78,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP166 - BP166.94 Theology (Kalam)",78,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity|BR1690 - BR1725 Biography",78,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT819 - BT891 Eschatology. Last things",78,
        "D - History (General) and History of Europe|DF10 - DF951 History of Greece|DF501 - DF649 Medieval Greece. Byzantine Empire, 323-1453",78,
        "N - Fine Arts|N1 - N9211 Visual arts|N5198 - N5299 Private collections and collectors",78,
        "R - Medicine|RD1 - RD811 Surgery|RD118 - RD120.5 Plastic surgery. Reparative surgery",78,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D299 - D472 -1789|D351 - D400 19th century. 1801-1914/1920",77,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History",77,
        "E - History: America|E11 - E143 America|E51 - E73 Pre-Columbian America. The Indians",77,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E341 - E370 Madison's administrations, 1809-1817",77,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD4909 - HD5100.9 Wages",77,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1700 - NK2195 Interior decoration. House decoration|NK1700 - NK2138 General. History, etc.  Including special rooms",77,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6080 - PN6095 Quotations|PN6081 - PN6084 English",77,
        "R - Medicine|RD1 - RD811 Surgery|RD1 - RD31.7 General works",77,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ836 - TJ927 Hydraulic machinery",77,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG633 - UG635 By region or country",77,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)|BV169 - BV199 Liturgy and ritual",76,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period|DC110 - DC424 Modern, 1515-|DC251 - DC354.9 19th century",76,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD701 - DD901 Local history and description",76,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E310 - E337 1789-1809. Constitutional period|E331 - E337 Jefferson's administrations, 1801-1809",76,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD101 - HD1395.5 Land use|HD1241 - HD1339 Land tenure",76,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K625 - K709 Persons",76,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2331.7 - LB2335.8 Teaching personnel",76,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P87 - P96 Communication. Mass media|P95 - P95.6 Oral communication. Speech",76,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1001 - PJ1989 Egyptology|PJ1481 - PJ1989 Literature. Inscriptions",76,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL901 - PL949 Korean language",76,
        "Q - Science|QB1 - QB991 Astronomy|QB275 - QB343 Geodesy",76,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)|BV205 - BV287 Prayer",75,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel",75,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps",75,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2005 - HJ2216 Income and expenditure. Budget",75,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6500 - JN6598 Soviet Union. Russia. Former Soviet Republics",75,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV8490 - JV8758 Asia",75,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K2100 - K2385 Courts. Procedure",75,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC251 - LC318 Moral education. Character building",75,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ1 - PQ150 General",75,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD131 - SD247.5 History of forestry. Forest conditions",75,
        "T - Technology.|TH1 - TH9745 Building construction|TH1000 - TH1725 Systems of building construction.",75,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE305 - HE311 Urban transportation",74,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6170 - PQ6269 Collections",74,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD95 - BD131 Metaphysics",73,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL425 - BL490 Religious doctrines (General)|BL473 - BL490 Other",73,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7601 - BX7795 Friends. Society of Friends. Quakers",73,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History|DR1259 - DR1321 By period",73,
        "E - History: America|E151 - E889 United States|E186 - E199 Colonial history (1607-1775)",73,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ6360 - JZ6377 Non-military coercion",73,
        "M - Music|M1 - M5000 Music|M3 - M3.3 Collected works of individual composers",73,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML162 - ML197 Special periods",73,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL700 - PL889 Japanese literature|PL700 - PL751.5 History and criticism",73,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD391 - SD410.9 Sylviculture",73,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB901 - DB999 Hungary",72,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History|DR1259 - DR1321 By period|DR1281 - DR1321 -1918",72,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF201 - JF619 Organs and functions of government|JF441 - JF619 Legislation. Legislative process. Law",72,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1401 - K1578 Intellectual property|K1411 - K1485 Copyright",72,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement",72,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK7800 - TK8360 Electronics|TK8300 - TK8360 Photoelectronic devices (General)",72,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP670 - TP699 Oils, fats, and waxes",72,
        "B - Philosophy. Psychology. Religion|BF1001 - BF1389 Parapsychology|BF1001 - BF1045 Psychic research. Psychology of the conscious",71,
        "C - Auxiliary Sciences of History|CJ1 - CJ6661 Numismatics",71,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS92 - DS99 Syria",71,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1040 - GV1060.4 Cycling. Bicycling. Motorcycling",71,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ799.5 - HQ799.9 Young men and women",71,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT580 - MT599 Guitar",71,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2835 - NA4050 Details and decoration",71,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ2700 - PQ2726 -2001",71,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature|PT236 - PT405 Modern",71,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB409 - SB413 Culture of Individual plants",71,
        "T - Technology.|T1 - T995 Technology (General)|T14.7 - T33 History of technology",71,
        "T - Technology.|T1 - T995 Technology (General)|T55 - T55.3 Industrial satety. Industrial accident prevention",71,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP600 - BP610 Other beliefs and movements",70,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D242 - D283.5 1601-1715. 17th century",70,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E838 - E840.8 General|E840 - E840.3 Diplomatic history. Foreign and general relations",70,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1421 - F1440 Central America|F1435 - F1435.3 Mayas",70,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F3051 - F3285 Chile",70,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1780 - G2799 Eastern Hemisphere. Eurasia, Africa, etc.",70,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB5000 - GB5030 Natural disasters",70,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ3995 - JQ6651 Australia. New Zealand. Pacific Ocean islands",70,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK5100 - NK5440 Glass",70,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1560 - PN1590 The performing arts. Show business",70,
        "R - Medicine|R5 - R920 Medicine (General)|R726.5 - R726.8 Medicine and disease in relation to psychology, terminal care, dying",70,
        "D - History (General) and History of Europe|DX101 - DX301 History of Gypsies",69,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1501 - HD1542 Agricultural classes (including farm tenancy, agricultural laborers",69,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD5306 - HD5474 Labor disputes. Strikes and lockouts",69,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV4023 - HV4470.7 Poor in cities. Slums",69,
        "L - Education|L7 - L991 Education (General)|L900 - L991 Directories of educational institutions",69,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL950 - PL998 Korean literature|PL986 - PL993 Individual authors and works",69,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections",69,
        "Q - Science|QL1 - QL991 Zoology|QL801 - QL950.9 Anatomy",69,
        "T - Technology.|TH1 - TH9745 Building construction|TH7005 - TH7699 Heating and ventilation. Air conditioning",69,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1444 - BF1486 Ghosts. Apparitions. Hauntings",68,
        "N - Fine Arts|N1 - N9211 Visual arts|N1 - N58 General",68,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC601 - PC872 Romanian",68,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK3591 - PK4485 Sanskrit",68,
        "Q - Science|QB1 - QB991 Astronomy|QB349 - QB421 Theoretical astronomy and celestial mechanics",68,
        "A - General Works|AE1 - AE88 Encyclopedias",67,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1225.2 - BL1243.58 Religious life",67,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT348 - DT363.3 Central Sub-Saharan Africa",67,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1001 - G1046 World atlases",67,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology|GN357 - GN367 Culture and cultural processes",67,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE5601 - HE5725 Automotive transportation (including trucking, bus lines, and taxicab service)",67,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM1001 - HM1281 Social psychology|HM1041 - HM1101 Social perception. Social cognition (including perception of the self and others, prejudices, stereotype)",67,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KE - Law of Canada",67,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KE - Law of Canada|KE1 - KE9450 Federal law. Common and collective provincial law",67,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature|PA6155 - PA6191 Translations",67,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature|PL8009.5 - PL8014 Literature",67,
        "Q - Science|QC1 - QC999 Physics|QC801 - QC809 Geophysics. Cosmic physics",67,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC321 - RC571 Neurosciences. Biological psychiatry. Neuropsychiatry|RC346 - RC429 Neurology. Diseases of the nervous system|RC423 - RC429 Speech and language disorders",67,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH20.3 - SH191 Aquaculture|SH151 - SH179 Fish culture",67,
        "T - Technology.|TH1 - TH9745 Building construction|TH4021 - TH4977 Buildings: Construction with reference to use (including public buildings, dwellings)",67,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL550 - BL619 Worship. Cultus",66,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ8001 - HJ8899 Public debts",66,
        "N - Fine Arts|N1 - N9211 Visual arts|N8700 - N9165 Art and the state. Public art",66,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA1 - PA199 Classical philology",66,
        "Q - Science|QB1 - QB991 Astronomy|QB468 - QB480 Non-optical methods of astronomy",66,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB317.5 - SB319.86 Horticulture. Horticultural crops",66,
        "U - Military science (General)|UH20 - UH910 Other services",66,
        "A - General Works|AM1 - AM401 Museums. Collectors and collecting|AM111 - AM160 Museology. Museum methods, technique, etc.",65,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR4501 - CR6305 Chivalry and knighthood (Orders, decorations, etc.)",65,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ801 - HQ801.83 Man-woman relationships. Courtship. Dating",65,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV1 - JV5399 Colonies and colonization|JV500 - JV5399 Colonizing nations",65,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLA1 - KLA9999 Russia. Soviet Union",65,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian",65,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S604.8 - S621.5 Melioration: Improvement, reclamation, fertilization, irrigation, etc. of lands",65,
        "U - Military science (General)|UB1 - UB900 Military administration|UB250 - UB271 Intelligence",65,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT3200 - CT9999 Biography. By subject|CT3200 - CT3830 Biography of women (Collective)",64,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS80 - DS90 Lebanon (Phenicia)",64,
        "F - America: local history|F1 - F975 United States local history|F1 - F15 New England",64,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE6000 - HE7500 Postal service. Stamps. Philately",64,
        "J - Political Science|J1 - J981 General legislative and executive papers",64,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3820 - K3836 Economic constitution, policy, planning, and development",64,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1140 - LB1140.5 Preschool education. Nursery schools",64,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC361 - LC629 Christian education. Church education",64,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC165 - LC182 Higher education and the state",64,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2010 - M2017.6 Services",64,
        "M - Music|MT1 - MT960 Musical instruction and study|MT40 - MT67 Composition. Elements and techniques of music",64,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG3801 - PG3987 Ukrainian",64,
        "T - Technology.|T1 - T995 Technology (General)|T61 - T173 Technical education. Technical schools",64,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS527 - DS530.9 Burma",63,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS591 - DS599 Malaysia. Malay Peninsula. Straits Settlements",63,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU400 - DU430 New Zealand",63,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1800 - GV1860 Circuses, spectacles, etc. (including rodeos, waxworks, amusement parks, etc.)",63,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB2831.6 - LB2831.99 Administrative personnel",63,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC65 - LC67.68 Economic aspects of education",63,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3491.2 - PG3493.96 -2001",63,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD411 - SD428 Conservation and protection",63,
        "A - General Works|AZ101 - AZ999 History of scholarship and learning. The humanities|AZ101 - AZ111 Philosophy. Theory",62,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries",62,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861",62,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E855 - E861 Nixon's administrations, 1969-August 9, 1974",62,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1401 - K1578 Intellectual property|K1500 - K1578 Industrial property",62,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBP1 - KBP4860 Islamic law. Shari'ah. Fiqh|KBP173.25 - KBP0.6 Islamic law and other disciplines or subjects",62,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB3602 - LB3640 School life. Student manners and customs",62,
        "R - Medicine|R5 - R920 Medicine (General)|R690 - R697 Medicine as a profession. Physicians",62,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF692 - BF692.5 Psychology of sex. Sexual behavior",61,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL300 - BL325 The myth. Comparative mythology",61,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country",61,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR700 - GR860 Animals, plants, and minerals",61,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK501 - JK901 Executive branch|JK631 - JK873 Civil Service. Departments and agencies",61,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC5001 - PC5498 Portuguese",61,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4561 - PQ4664 Individual authors, 1400-1700",61,
        "R - Medicine|R5 - R920 Medicine (General)|R895 - R920 Medical physics. Medical radiology. Nuclear medicine",61,
        "T - Technology.|T1 - T995 Technology (General)|T201 - T342 Patents. Trademarks",61,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B69 - B99 General works",60,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL500 - BL547 Eschatology",60,
        "C - Auxiliary Sciences of History|CJ1 - CJ6661 Numismatics|CJ1 - CJ4625 Coins",60,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5691 - HF5716 Business mathematics. Commercial arithmetic",60,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG1 - PG499 Slavic philology and languages (General)",60,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN3311 - PN3503 Prose. Prose fiction|PN3329 - PN3352 Philosophy, theory, etc.",60,
        "R - Medicine|RF1 - RF547 Otorhinolaryngology|RF110 - RF320 Otology. Diseases of the ear",60,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S631 - S667 Fertilizers and improvement of the soil",60,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV2000 - BV3705 Missions|BV2123 - BV2595 Special churches",59,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG600 - DG684.72 Northern Italy",59,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS36 - DS39.2 Arab countries|DS37 - DS39.2 History",59,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF1338 - JF2112 Public administration|JF2011 - JF2112 Political parties",59,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ4835 - JZ5490 International organizations and associations|JZ4850 - JZ5490 Intergovernmental organizations. IGOs|JZ4935 - JZ5160 The United Nations",59,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea",59,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1200 - LC1203 Inclusive education",59,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3230 - PG3238 Poetry",59,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z3501 - Z3975 Africa",59,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF608 - BF635 Will. Volition. Choice. Control",58,
        "B - Philosophy. Psychology. Religion|BF1001 - BF1389 Parapsychology|BF1228 - BF1389 Spiritualism",58,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT595 - BT680 Mary, Mother of Jesus Christ. Mariology",58,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV800 - BV873 Sacraments. Ordinances",58,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)",58,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS901 - DS937 Korea|DS904.8 - DS922.46 History|DS918 - DS921.8 War and intervention, 1950-1953",58,
        "E - History: America|E151 - E889 United States|E186 - E199 Colonial history (1607-1775)|E186 - E189 General",58,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN49 - GN298 Physical anthropology. Somatology|GN62.8 - GN263 Human variation",58,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1221 - GV1469.62 Indoor games and amusements|GV1312 - GV1469 Board games. Move games",58,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1710 - HG1710.5 Electronic funds transfers",58,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS6950 - JS7509 Asia",58,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1090 - LC1091 Political education",58,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT220 - MT255 Piano",58,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA201 - PA899 Greek philology and language",58,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6700 - PQ6726 Individual authors, 2001-",58,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT8050 - PT8176.36 Individual authors or works",58,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8750 - PT8951.36 Individual authors or works|PT8800 - PT8942 19th century",58,
        "Q - Science|QC1 - QC999 Physics|QC81 - QC114 Weights and measures",58,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH401 - SH691 Angling (including tackle, casting, methods of angling, angling for special kinds of fish)",58,
        "U - Military science (General)|UB1 - UB900 Military administration|UB416 - UB419 Minorities, women, etc. in armed forces",58,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1271.2 - BL1295 Modifications. Sects",57,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D101 - D110.5 Medieval and modern history, 476-",57,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS41 - DS66 Middle East. Southwestern Asia. Ancient Orient. Arab East. Near East|DS51 - DS54.95 Local history and description",57,
        "E - History: America|E11 - E143 America|E101 - E135 Discovery of America and early explorations|E111 - E120 Columbus",57,
        "E - History: America|E151 - E889 United States|E171 - E183.9 History|E171 - E180 General|E175 - E175.7 Historiography",57,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR500 - GR615 Supernatural beings, demonology, fairies, ghosts, charms, etc.",57,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1020 - GV1038.2 Automobile travel. Motoring. Automobile racing",57,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K830 - K968 Obligations|K840 - K917 Contracts",57,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML198 - ML360 By region or country|ML198 - ML239 America",57,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB2001 - PB3029 Brittanic group",57,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG1801 - PG1962 Slovenian",57,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S900 - S946.5 Conservation of natural resources (Including land conservation)",57,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA1001 - TA1280 Transportation engineering",57,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP171 - BP173 Relation of Islam to other religions",56,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT433.5 - DT434 Kenya",56,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E341 - E370 Madison's administrations, 1809-1817|E351.5 - E364.9 War of 1812",56,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G200 - G336 History of discoveries, explorations, and travel",56,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G80 - G99 History of geography",56,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7435 - HV7439 Gun control",56,
        "R - Medicine|RD1 - RD811 Surgery|RD120.6 - RD129.8 Transplantation of organs, tissues, etc.",56,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB801 - HB843 Consumption. Demand",55,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4430 - K4675 Public finance",55,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC5800 - LC5808 Distance education",55,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1 - PB431 Modern languages",55,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL700 - PL889 Japanese literature|PL752 - PL783 Collections",55,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC963 - RC969 Industrial medicine. Industrial hygiene",55,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ751 - TJ805 Miscellaneous motors and engines (including gas, gasoline, diesel engines)",55,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8001 - BX8080 Lutheran churches",54,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8901 - BX9225 Presbyterianism. Calvinistic Methodism",54,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK751 - DK781 Siberia",54,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP285 - DP402 Local history and description",54,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT154.1 - DT159.9 Sudan. Anglo-Egyptian Sudan",54,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography|GA341 - GA1776 Maps. By region or country",54,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB2401 - GB2598 Ice. Glaciers. Ice sheets. Sea ice",54,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K321 - K474 Schools of legal theory|K366 - K380 Sociology of law. Sociological jurisprudence",54,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1 - PD780 General",54,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ4543 - PJ4937 Language (Biblical and modern)",54,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM101 - PM2711 American languages (Aboriginal)",54,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA791 - RA954 Medical geography. Climatology. Meteorology",54,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC952 - RC954.6 Geriatrics",54,
        "J - Political Science|JA1 - JA92 Political science (General)|JA81 - JA84 History",53,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC319 - JC323 Political geography",53,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK1717 - JK2248 Political rights. Practical politics|JK1846 - JK1936 Suffrage",53,
        "N - Fine Arts|N1 - N9211 Visual arts|N8600 - N8675 Economics of art",53,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1310 - NE1326.5 Japanese prints",53,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB2001 - PB3029 Brittanic group|PB2101 - PB2499 Welsh. Cymric",53,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK5401 - PK5471 Modern Indo-Aryan literature",53,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases|SB610 - SB615 Weeds, parasitic plants, etc.",53,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG443 - UG449 Attack and defense. Siege warfare",53,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV3750 - BV3799 Evangelism. Revivals",52,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK30 - DJK51 History",52,
        "F - America: local history|F1 - F975 United States local history|F786 - F790 New Southwest. Colorado River, Canyon, and Valley",52,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ125 - RJ145 Physiology of children and adolescents",52,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA715 - TA787 Earthwork. Foundations",52,
        "A - General Works|AM1 - AM401 Museums. Collectors and collecting|AM10 - AM100 By country",51,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal",51,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT450 - DT450.49 Rwanda. Ruanda-Urundi",51,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT641 - DT665 Zaire. Congo (Democratic Republic). Belgian Congo",51,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1470 - GV1511 Parties. Party games and stunts",51,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD4861 - HD4895 Labor systems",51,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3476 - K3560 Public property. Public restraint on private property",51,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P325 - P325.5 Semantics",51,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC3801 - PC3976 Catalan",51,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN3311 - PN3503 Prose. Prose fiction|PN3451 - PN3503 History",51,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6110.5 - PN6120 Drama",51,
        "R - Medicine|RD1 - RD811 Surgery|RD78.3 - RD87.3 Anesthesiology",51,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF756.5 - SF769.5 Special preclinical sciences (including veterinary genetics, ethology, anatomy, physiology, embryology)",51,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS633 - DS644.46 History",50,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV9950 - HV9960 By region or country",50,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ1249 - JZ1254 Relation to other disciplines and topics",50,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts",50,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4900 - PQ4926 Individual authors, 2001-",50,
        "P - Language and literature|PR1 - PR9680 English literature|PR111 - PR116 Women authors",50,
        "T - Technology.|TL1 - TL4050 Motor vehicles. Aeronautics. Astronautics|TL780 - TL785.8 Rocket propulsion. Rockets",50,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z662 - Z664 Collections",50,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT371 - DT390 Ethiopia (Abyssinia)",49,
        "E - History: America|E11 - E143 America|E101 - E135 Discovery of America and early explorations|E121 - E135 Post-Columbian period. El Dorado",49,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT655 - MT725 Percussion and other instruments",49,
        "M - Music|MT1 - MT960 Musical instruction and study|MT820 - MT915 Singing and vocal technique",49,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL5501 - PL6135 Philippine languages",49,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF191 - SF275 Cattle|SF250.5 - SF275 Horse sports. Horse shows",49,
        "V - Naval science|VA10 - VA750 Navies: Organization, distribution, naval situation|VA400 - VA750 Other regions or countries",49,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z678 - Z678.88 Library administration and organization. Constitution",49,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z679 - Z680 Library buildings. Library architecture. Including planning, space utilization, security, safety, lighting, etc.",49,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1100 - G1779 America. Western Hemisphere",48,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC200 - GC376 Dynamics of the ocean|GC205 - GC226 Waves",48,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K321 - K474 Schools of legal theory|K400 - K474 Natural law",48,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1700 - K1973 Social legislation",48,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1990 - M1998 Secular music for children",48,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML198 - ML360 By region or country|ML330 - ML345 Asia",48,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT339 - MT533 Wind instruments",48,
        "Q - Science|QL1 - QL991 Zoology|QL951 - QL991 Embryology",48,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1 - RA418.5 Medicine and the state|RA411 - RA415 Provisions for personal medical care. Medical care plans",48,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA639 - RA642 Transmission of disease",48,
        "U - Military science (General)|U1 - U900 Military science (General)|U161 - U163 Strategy",48,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)|BV301 - BV530 Hymnology",47,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA10 - DA18.2 British Empire. Commonwealth of Nations. The Commonwealth",47,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP97.3 - DP160.8 711-1516. Moorish domination and the Reconquest",47,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History|DR1259 - DR1321 By period|DR1281 - DR1321 -1918|DR1313 - DR1313.8 Yugoslav War, 1991-1995",47,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT1754 - DT1770 Ethnography",47,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1100 - G1779 America. Western Hemisphere|G1100 - G1692 North America",47,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF7000 - KF7999",47,
        "L - Education|LA5 - LA2396 History of education|LA31 - LA135 By period",47,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2326.4 - LB2330 Institutions of higher education",47,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian",47,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1 - PJ489 General",47,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1651 - BF1729 Astrology",46,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ840 - BQ999 Biography",46,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD280 - DD289.5 East Germany",46,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2155 - F2191 Caribbean area. Caribbean Sea",46,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC401 - GC881 Oceanography. By region",46,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE380.8 - HE971 Water transportation|HE380.8 - HE560 Waterways",46,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ811 - HQ960.7 Divorce",46,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K2100 - K2385 Courts. Procedure|K2201 - K2385 Civil procedure",46,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1001 - LC1024 Humanistic education. liberal education",46,
        "N - Fine Arts|N1 - N9211 Visual arts|N4390 - N5098 Exhibitions",46,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE830 - NE898 General works",46,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8750 - PT8951.36 Individual authors or works|PT8951 - PT8951.36 1961-2000",46,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM147 - RM180 Administration of drugs and other therapeutic agents",46,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP670 - TP699 Oils, fats, and waxes|TP690 - TP692.5 Petroleum refining. Petroleum products",46,
        "U - Military science (General)|U1 - U900 Military science (General)|U799 - U897 History of arms and armor",46,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM1 - BM449 General|BM150 - BM449 History|BM201 - BM449 By region or country",45,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship",45,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ840 - BQ999 Biography|BQ860 - BQ999 Individual",45,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS554 - DS554.98 Cambodia",45,
        "E - History: America|E151 - E889 United States|E171 - E183.9 History|E183 - E183.3 Political history",45,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K237 - K264 The concept of law",45,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4430 - K4675 Public finance|K4453 - K4640 National revenue",45,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX280 - NX410 Study and teaching. Research",45,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1 - PN9 Periodicals",45,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6500 - PQ6576 Individual authors, 1700-ca. 1868",45,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR431 - PR439 17th century",45,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works|PT1501 - PT1695 Middle High German, ca. 1050-1450/1500",45,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG940 - RG991 Maternal care. Prenatal care services",45,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases|SB818 - SB945 Economic entomology",45,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE210 - TE228.3 Construction details (including foundations, maintenance, equipment)",45,
        "T - Technology.|TN1 - TN997 Mining engineering. Metallurgy.|TN400 - TN580 Ore deposits and mining of particular metals",45,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD10 - BD41 General philosophical works",44,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6201 - BX6495 Baptists",44,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL43 - DL87 History",44,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania",44,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS41 - DS66 Middle East. Southwestern Asia. Ancient Orient. Arab East. Near East|DS51 - DS54.95 Local history and description|DS54 - DS54.95 Cyprus",44,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2301 - F2349 Venezuela",44,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology|GB450 - GB460 Coasts",44,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV199.8 - GV200.3 Mountaineering",44,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9650 - HD9663 Chemistry industries",44,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5469.7 - HF5481 Markets. Fairs",44,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM711 - HM806 Groups and organizations|HM786 - HM806 Organizational sociology. Organization theory",44,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC1860 - NC1896 Greeting cards, postcards, invitations, book jackets, etc.",44,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6001 - PQ6056 General",44,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature|PT711 - PT871 Prose",44,
        "Q - Science|QB1 - QB991 Astronomy|QB140 - QB237 Practical and spherical astronomy",44,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC501 - QC718.8 Electricity|QC701 - QC715.4 Electric discharge",44,
        "T - Technology.|TC1501 - TC1800 Ocean engineering",44,
        "V - Naval science|V1 - V995 Naval science (General)|V750 - V995 War vessels: Construction, armament, etc.",44,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS901 - DS937 Korea|DS930 - DS937 Democratic People's Republic, 1948-",43,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2251 - F2299 Colombia",43,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR72 - GR79 Folk literature (General)",43,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ8001 - HJ8899 Public debts|HJ8101 - HJ8899 By region or country",43,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K4011 - K4343 Transportation and communication",43,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC6601 - LC6660.4 Reading circles and correspondence clubs",43,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1410 - ND1460 Other subjects",43,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC1001 - PC1977 Italian",43,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH219 - SH321 By region or country",43,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD194 - TD195 Environmental effects of industries and plants",43,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS35.3 - DS35.77 The Islamic World",42,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS801 - DS897 Japan|DS894.21 - DS897 Local history and description",42,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E838 - E840.8 General|E839.5 - E839.8 Political history",42,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ4629 - HJ4830 Income tax",42,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2667 - LC2698 Latin Americans. Hispanic Americans",42,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1470 - ND1625 Technique and materials",42,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG801 - PG1146 Bulgarian",42,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG8001 - PG9146 Baltic",42,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages",42,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ170 - TJ179 Mechanics applied to machinery. Dynamics",42,
        "U - Military science (General)|UB1 - UB900 Military administration|UB356 - UB369.5 Provision for veterans",42,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA700 - DA745 Wales",41,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS608 - DS610.9 Singapore",41,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC70 - GC90 Environmental education",41,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB846 - HB846.8 Welfare theory",41,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT401 - HT485 Rural groups. Rural sociology",41,
        "H - Social sciences|HX1 - HX970.7 Socialism. Communism. Anarchism|HX626 - HX696 Communism: Utopian socialism, collective settlements",41,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2361 - LB2365 Curriculum",41,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC730 - NC758 Technique",41,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1300 - ND1337 Portraits",41,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P99 - P99.4 Semiotics. Signs and symbols",41,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC2700 - PC3708 Dialects. Provincialisms",41,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9650 - PT9876.36 Individual authors or works|PT9725 - PT9850 19th century",41,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC306 - RC320.5 Tuberculosis",41,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB419 - SB419.3 Indoor gardening and houseplants",41,
        "B - Philosophy. Psychology. Religion|BH1 - BH301 Aesthetics|BH81 - BH208 History",40,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS13 - DS28 Ethnography",40,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E740 - E749 General|E743 - E743.5 Political history",40,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB238 - HB251 Competition. Production. Wealth",40,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD5106 - HD5267 Hours of labor (including overtime, shift work, sick leave, vacations)",40,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ9701 - HJ9940 Public accounting. Auditing",40,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT321 - HT325 The city as economic factor. City promotion",40,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ4835 - JZ5490 International organizations and associations|JZ4841 - JZ4848 Political non-governmental organizations. NGOs",40,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages|PL3551 - PL4001 Tibeto-Burman languages",40,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN59 - PN72 Study and teaching",40,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF811 - SF909 Veterinary medicine of special organs, regions, and systems",40,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA190 - TA195 Management of engineering works",40,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD240 - BD260 Methodology",39,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX100 - BX189 Eastern churches. Oriental churches",39,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8101 - BX8144 Mennonites",39,
        "C - Auxiliary Sciences of History|CB3 - CB482 History of Civilization|CB440 - CB482 Relation to special topics",39,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG819 - DG875 Southern Italy",39,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2020 - M2036 Choruses, cantatas, etc.",39,
        "N - Fine Arts|NE1 - NE3002 Print media|NE2250 - NE2570 Lithography",39,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT3701 - PT3971 Provincial, local, colonial, etc.",39,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD895 - TD899 Industrial and factory sanitation",39,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD895 - TD899 Industrial and factory sanitation|TD896 - TD899 Industrial and factory wastes",39,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing|Z231 - Z232 Printers and printing establishments",39,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z682 - Z682.4 Personnel",39,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP70 - BP80 Biography",38,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV1460 - BV1615 Religious education (General)",38,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D25 - D27 Military and naval history",38,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM711 - HM806 Groups and organizations|HM756 - HM781 Community",38,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS351 - HS929 Freemasons",38,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology|HV6250 - HV6250.4 Victims of crimes. Victimology",38,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV697 - HV700.7 Families. Mothers. Widow's pensions",38,
        "H - Social sciences|HX1 - HX970.7 Socialism. Communism. Anarchism|HX806 - HX811 Utopias. The ideal state",38,
        "J - Political Science|J1 - J981 General legislative and executive papers|J100 - J981 Other regions and countries",38,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2381 - LB2391 Academic degrees",38,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB3201 - LB3325 School architecture and equipment. School physical facilities. Campus planning",38,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2198 - M2199 Gospel, revival, temperance, etc. songs M5000 Unidentified compositions",38,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism|PG3091 - PG3099 Prose",38,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6061 - PQ6073 Modern",38,
        "P - Language and literature|PR1 - PR9680 English literature|PR750 - PR890 Prose|PR767 - PR818 By period",38,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG159 - RG208 Functional and systemic disorders. Endocrine gynecology",38,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ206 - RJ235 Nutrition and feeding of children and adolescents",38,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD430 - SD557 Exploitation and utilization",38,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z695.9 - Z695.94 Indexing. Abstracting",38,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL43 - DL87 History|DL61 - DL87 By period",37,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History|DR481 - DR605 By period|DR576 - DR605 20th century. Constitutional movement",37,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN2301 - JN3007 France",37,
        "N - Fine Arts|ND25 - ND3416 Painting|ND2550 - ND2733 Mural painting",37,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1940 - NE2232.5 Etching and aquatint",37,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC1 - PC400 General",37,
        "P - Language and literature|PE1 - PE3729 English language|PE3701 - PE3729 Slang. Argot, etc.",37,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK3591 - PK4485 Sanskrit|PK3791 - PK3799 Individual authors and works",37,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6348.5 - PN6358 Emblems, devices",37,
        "P - Language and literature|PR1 - PR9680 English literature|PR125 - PR138.5 Relations to other literatures and countries",37,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR171 - PR236 Anglo-Saxon (Beginnings through 1066)",37,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB449 - SB450.87 Flower arrangement and decoration",37,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH328 - SH329 Fishery management. Fishery policy",37,
        "U - Military science (General)|UB1 - UB900 Military administration|UB320 - UB338 Enlistment, recruiting, etc.",37,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works|AC1 - AC195 Collections of monographs, essays, etc.|AC9 - AC195 Other languages",36,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP70 - BP80 Biography|BP75 - BP77.75 Muhammad, Prophet, d. 632",36,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States|DT271 - DT299 Algeria",36,
        "E - History: America|E151 - E889 United States|E660 - E738 Late nineteenth century, 1865-1900|E666 - E670 Johnson's administration, April 15, 1865-1869",36,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE8701 - HE9680.7 Telephone industry",36,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1073 - HQ1073.5 Thanatology. Death. Dying",36,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV7200 - JV7539 Canada, Latin America, etc.",36,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1700 - K1973 Social legislation|K1701 - K1841 Labor law",36,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K5000 - K5582 Criminal law and procedure|K5401 - K5570 Criminal procedure",36,
        "L - Education|L7 - L991 Education (General)|L7 - L97 Periodicals. Societies",36,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG5201 - PG5546 Slovak",36,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1720 - PN1861 History",36,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4001 - PQ4063 General",36,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4201 - PQ4263 Collections",36,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6131 - PQ6153 Prose",36,
        "T - Technology.|T1 - T995 Technology (General)|T391 - T995 Exhibitions. Trade shows. World's fairs",36,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z674.7 - Z674.83 Library information networks",36,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR4501 - CR6305 Chivalry and knighthood (Orders, decorations, etc.)|CR4651 - CR6305 Orders, etc.",35,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK845 - DK860 Soviet Central Asia. West Turkestan",35,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS2501 - HS3371 Clubs. Clubs and societies for special classes (including boys' societies, Boy Scouts, girls' societies)",35,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KG1 - KG999 Latin America (General)",35,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1255 - KZ1273 Theory and principles",35,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC760 - NC825 Special subjects",35,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures|PK1931 - PK1970 Hindi language",35,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4675 - PQ4734 Individual authors, 1701-1900",35,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature",35,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF411 - SF459 Pets|SF441 - SF450 Cats",35,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z43 - Z45 Calligraphy. Penmanship",35,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL2390 - BL2490 African|BL2420 - BL2460 Egyptian",34,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP500 - BP585 Theosophy",34,
        "C - Auxiliary Sciences of History|CN1 - CN1355 Inscriptions. Epigraphy",34,
        "C - Auxiliary Sciences of History|CS1 - CS3090 Genealogy|CS2300 - CS3090 Personal or family names",34,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR32 - DR48.5 History. Balkan War, 1912-1913",34,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS327 - DS329.4 Central Asia",34,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E756 - E760 Theodore Roosevelt's administrations, September 14, 1901-1909",34,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E784 - E805 1919-1933. Harding-Coolidge-Hoover era. The twenties",34,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ6603 - HJ7390 Customs administration",34,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1501 - HS2460.7 Other societies. By classes",34,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV1421 - HV1441 Young Adults. Youth. Teenagers",34,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4850 - KZ5490 Intergovernmental organizations. IGOs",34,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2371 - LB2372 Graduate education",34,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB3011 - LB3095 School management and discipline|LB3045 - LB3048 Textbooks",34,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK600 - NK806 History",34,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1660 - PN1693 Technique of dramatic composition",34,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7101 - PT7211 Literary history and criticism",34,
        "Q - Science|QE1 - QE996.5 Geology|QE901 - QE996.5 Paleobotany",34,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC71 - RC78.7 Examination. Diagnosis (including radiography)|RC78 - RC78.5 Radiography. Roentgenography",34,
        "T - Technology.|T1 - T995 Technology (General)|T175 - T178 Industrial research. Research and development",34,
        "T - Technology.|TH1 - TH9745 Building construction|TH6014 - TH6081 Environmental engineering of buildings. Sanitary engineering of buildings",34,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ268 - TJ740 Steam engineering",34,
        "A - General Works|AE1 - AE88 Encyclopedias|AE5 - AE88 By language",33,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP595 - BP597 Anthroposophy",33,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden",33,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal|DP535 - DP682.2 History",33,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States|DT301 - DT330 Morocco",33,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT2871 - DT3025 Zimbabwe. Southern Rhodesia",33,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E813 - E816 Truman's administrations, April 12, 1945-1953",33,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1780 - G2799 Eastern Hemisphere. Eurasia, Africa, etc.|G2200 - G2444.84 Asia",33,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.",33,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1221 - GV1469.62 Indoor games and amusements|GV1232 - GV1299 Card games: Poker, patience, whist, etc.",33,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4002 - KZ4080 The state",33,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1081 - LC1087.4 Industrial education (General)",33,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M1000 - M1075 Orchestra",33,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1130 - ND1156 General works",33,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM101 - PM2711 American languages (Aboriginal)|PM549 - PM2711 Special languages of the United States and Canada (alphabetically)",33,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM7801 - PM7895 Mixed languages",33,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1065 - PN1085 Relations to, and treatment of, special subjects",33,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC501 - QC718.8 Electricity|QC669 - QC675.8 Electromagnetic theory",33,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS189 - RS190 Assay methods. Standardization. Analysis",33,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S604.8 - S621.5 Melioration: Improvement, reclamation, fertilization, irrigation, etc. of lands|S606 - S621.5 Special classes of lands and reclamation methods (including woodlands, burning of lands, deserts, saline environments, moors)",33,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ163.26 - TJ163.5 Energy conservation",33,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC260 - UC267 Supplies and stores",33,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering|VM311 - VM466 Special types of vessels",33,
        "B - Philosophy. Psychology. Religion|BC1 - BC199 Logic|BC60 - BC99 General works",32,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR701 - DR741 Local history and description (European Turkey)",32,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States|DT211 - DT239 Libya",32,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E835 - E837.7 Eisenhower's administrations, 1953-1961",32,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1195 - GV1198.99 Wrestling",32,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB221 - HB236 Price",32,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV4997 - HV5000 Substance abuse",32,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV701 - HV1420.5 Children|HV888 - HV907 Children with disabilities",32,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K115 - K130 The legal profession",32,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1066 - K1089 Banking",32,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1301 - K1366 Business associations",32,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC361 - LC629 Christian education. Church education|LC461 - LC510 Roman Catholic",32,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2102 - M2114.8 Songs",32,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2147 - M2188 Liturgy and ritual",32,
        "M - Music|ML1 - ML3930 Literature on music|ML112.8 - ML158.8 Bibliography|ML113 - ML118 International",32,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG8001 - PG9146 Baltic|PG8501 - PG8772 Lithuanian",32,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH101 - PH405 Finnish",32,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4001 - PN4355 Oratory. Elocution, etc.|PN4199 - PN4321 Recitations (in English)",32,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA501 - TA625 Surveying",32,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z551 - Z656 Copyright",32,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK70 - DK112.42 Early to 1613",31,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History|DR481 - DR605 By period|DR485 - DR555.7 1281/1453-1789. Fall of Constantinople, 1453",31,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F3301 - F3359 Bolivia",31,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography|GA125 - GA155 Map drawing, modeling, printing, reading, etc.",31,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN5201 - JN5690 Italy",31,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5511.2 - JZ6299 Promotion of peace. Peaceful change|JZ6010 - JZ6299 Pacific settlement of international disputes",31,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1150 - K1231 Maritime law",31,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1165 - KZ1208 Trials",31,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli|KZ6440 - KZ6530 Humanitarian law",31,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC71 - LC120.4 Education and the state|LC72 - LC72.5 Academic freedom",31,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML162 - ML197 Special periods|ML169.8 - ML190 Medieval. Renaissance",31,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX700 - NX750 Patronage of the arts",31,
        "P - Language and literature|PE1 - PE3729 English language|PE101 - PE458 Anglo-Saxon. Old English",31,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3199 - PG3205 General",31,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages",31,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6366 - PN6377 Riddles, acrostics, charades, conundrums, etc.",31,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ151 - PQ221 Medieval. Old French",31,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ251 - RJ325 Newborn infants (including physiology, care, treatment, diseases)",31,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF521 - SF539.8 Bee culture",31,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA365 - TA367 Acoustics in engineering. Acoustical engineering",31,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ241 - TJ254.7 Machine construction (General)",31,
        "U - Military science (General)|UF1 - UF910 Artillery|UF560 - UF780 Ordnance material (Ordnance proper)",31,
        "W - Health Sciences",31,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z102.5 - Z104.5 Cryptography. Ciphers. Invisible writing",31,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1216 - BL1225 Hindu pantheon. Deities",30,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria",30,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS393 - DS396.9 Bangladesh. East Pakistan",30,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS524 - DS526.7 History",30,
        "E - History: America|E151 - E889 United States|E660 - E738 Late nineteenth century, 1865-1900|E660 - E664 General",30,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E766 - E783 Wilson's administrations, 1913-1921",30,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC1000 - GC1023 Marine resources. Applied oceanography",30,
        "G - Geography. Anthropology. Recreation|GF1 - GF900 Human ecology. Anthropogeography|GF101 - GF127 Settlements",30,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1541 - GV1561 Parlor magic and tricks",30,
        "H - Social sciences|HF1 - HF6182 Commerce|HF1021 - HF1027 Commercial geography. Economic geography",30,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5460 - HF5469.5 Department stores. Mail order business. Supermarkets. Convenience stores",30,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ9103 - HJ9695 Local finance. Municipal finance (including the revenue, budget, expenditures of counties, boroughs, municipalities, etc.)",30,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV8790 - JV9025 Africa",30,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K140 - K165 History of law",30,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K720 - K792 Property",30,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1165 - KZ1208 Trials|KZ1168 - KZ1208 War crime trials",30,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC1800 - NC1850 Posters",30,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG601 - PG716 Church Slavic",30,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN3151 - PN3171 Amateur theater",30,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN661 - PN694 Medieval (to 1500)|PN683 - PN687 Legends",30,
        "R - Medicine|RT1 - RT120 Nursing|RT89 - RT120 Specialties in nursing",30,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S600 - S600.7 Agricultural meteorology. Crops and climate",30,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC540 - TC558 Dams. Barrages",30,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD1020 - TD1066 Hazardous substances and their disposal",30,
        "T - Technology.|TH1 - TH9745 Building construction|TH2025 - TH3000 Details in building design and construction (including walls, roofs)",30,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ181 - TJ210 Mechanical movements",30,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z1201 - Z1946 America|Z1365 - Z1401 Canada. British North America",30,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1501 - BF1562 Demonology. Satanism. Possession",29,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ5360 - BQ5680 Religious life",29,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ95 - DJ292 History",29,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS488 - DS490 Sri Lanka",29,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT491 - DT516.9 British West Africa|DT509.97 - DT512.9 Ghana (Gold Coast)",29,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E881 - E884 Bush administration, 1989-1993",29,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1601 - F1629 West Indies",29,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training|GV401 - GV433 Physical education facilities. Sports facilities (including gymnasiums, athletic fields, playgrounds, etc.)",29,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ800 - HQ800.4 Single people",29,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1501 - HS2460.7 Other societies. By classes|HS2301 - HS2460.7 Political and patriotic societies",29,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV680 - HV696 Free professional services (including medical charities)",29,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1329 - KZ3085 Early/Medieval development to ca. 1900. Ius Naturae et Gentium",29,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1329 - KZ3085 Early/Medieval development to ca. 1900. Ius Naturae et Gentium|KZ2064 - KZ3085 Publicists. Writers on public international law",29,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2337.2 - LB2340.8 Student financial aid",29,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2351 - LB2359 Admissions and entrance requirements",29,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature|PA3300 - PA3516 Collections",29,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages|PL4301 - PL4470 Mon-Khmer (Mon-Anam) languages",29,
        "R - Medicine|RK1 - RK715 Dentistry|RK520 - RK528 Orthodontics",29,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S622 - S627 Soil conservation and protection",29,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB481 - SB485 Parks and public reservations (including works on theory, management, history)",29,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD561 - SD669.5 Administration. Policy",29,
        "T - Technology.|TR1 - TR1050 Photography|TR287 - TR500 Photographic Processing",29,
        "U - Military science (General)|UH20 - UH910 Other services|UH201 - UH515 Medical and sanitary services",29,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering|VM595 - VM989 Marine engineering",29,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z683 - Z683.5 Finance. Insurance",29,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV2000 - BV3705 Missions|BV2610 - BV2695 Special types of missions",28,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium",28,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT561 - DT581 Cameroon (Cameroun, Kamerun)",28,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT621 - DT637 Liberia",28,
        "E - History: America|E11 - E143 America|E11 - E29 General",28,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1491 - HD1492.5 Cooperative agriculture",28,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM811 - HM821 Deviant behavior. Social deviance",28,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF201 - JF619 Organs and functions of government|JF251 - JF289 Executive. Heads of state",28,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security",28,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML649.8 - ML747 Piano, clavichord, harpsichord, etc.",28,
        "M - Music|MT1 - MT960 Musical instruction and study|MT90 - MT146 Analysis and appreciation of musical works|MT95 - MT100 Opera, ballet, etc.",28,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1340 - ND1367 Landscape painting",28,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P301 - P301.5 Style. Composition. Rhetoric",28,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism|PG3041 - PG3065 Poetry",28,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3260 - PG3299 Prose",28,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1281 - PR1309 Prose (General)",28,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA645.5 - RA645.9 Emergency medical services",28,
        "R - Medicine|RL1 - RL803 Dermatology|RL201 - RL331 Hyperemias, inflammations, and infections of the skin",28,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH20.3 - SH191 Aquaculture|SH151 - SH179 Fish culture|SH171 - SH179 Diseases and adverse factors",28,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK452 - TK454.4 Electric apparatus and materials. Electric circuits. Electric networks",28,
        "U - Military science (General)|UD1 - UD495 Infantry",28,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1271.2 - BL1295 Modifications. Sects|BL1284.5 - BL1289.59 Vaishnavism",27,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)|BV30 - BV135 Times and seasons. The Church year",27,
        "C - Auxiliary Sciences of History|CE1 - CE97 Technical Chronology. Calendar",27,
        "C - Auxiliary Sciences of History|CN1 - CN1355 Inscriptions. Epigraphy|CN120 - CN740 Ancient inscriptions",27,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland",27,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E846 - E851 Johnson's administrations, November 22, 1963-1969",27,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F3701 - F3799 Ecuador",27,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8501 - HG8745 By region or country",27,
        "H - Social sciences|HN1 - HN995 Social history and conditions. Social problems. Social reform|HN30 - HN39 The church and social problems",27,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV5725 - HV5770 Tobacco habit",27,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK1001 - JK1443 Congress. Legislative branch|JK1308 - JK1443 House of Representatives",27,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6690 - JN6699 Russia (Federation)",27,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3842 - K3862 Trade regulations. Control of trade practices",27,
        "L - Education|LA5 - LA2396 History of education|LA5 - LA25 General",27,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC142 - LC148.5 Attendance. Dropouts",27,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1051 - LC1072 Professional education",27,
        "M - Music|ML1 - ML3930 Literature on music|ML93 - ML96.5 Manuscripts, autographs, etc.",27,
        "N - Fine Arts|N1 - N9211 Visual arts|N8350 - N8356 Art as a profession. Artists",27,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6120.15 - PN6120.95 Fiction",27,
        "P - Language and literature|PR1 - PR9680 English literature|PR57 - PR78 Criticism",27,
        "P - Language and literature|PR1 - PR9680 English literature|PR951 - PR981 Folk literature",27,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1151 - PT1241 Poetry",27,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT8050 - PT8176.36 Individual authors or works|PT8100 - PT8167 19th century",27,
        "Q - Science|QC1 - QC999 Physics|QC851 - QC999 Meteorology. Climatology (including the earth's atmosphere)|QC980 - QC999 Climatology and weather|QC994.95 - QC999 Weather forecasting",27,
        "R - Medicine|RD1 - RD811 Surgery|RD651 - RD678 Neoplasms. Tumors. Oncology",27,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC203 - TC380 Harbors and coast protective works. Coastal engineering. Lighthouses",27,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B770 - B785 Renaissance",26,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1500 - BL1590 Zoroastrianism (Mazdeism). Parseeism",26,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP173.25 - BP173.45 Islamic sociology",26,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS493 - DS495.8 Nepal",26,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE380.8 - HE971 Water transportation|HE561 - HE971 Shipping|HE730 - HE943 Merchant marine. Ocean shipping. Coastwise shipping",26,
        "J - Political Science|J1 - J981 General legislative and executive papers|J10 - J98 United States",26,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF51 - JF56 General works. History",26,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK1717 - JK2248 Political rights. Practical politics|JK1756 - JK1761 Citizenship",26,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ6378 - JZ6405 The armed conflict. War and order",26,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K212 - K213 Methodology",26,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3171 - K3179 Constitutional principles",26,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K830 - K968 Obligations|K923 - K968 Torts",26,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security|KZ5615 - KZ5893 Arms control and disarmament regimes",26,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC215 - LC238.4 Community and the school|LC225 - LC226.7 Home and school",26,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC215 - LC238.4 Community and the school|LC237 - LC238.4 College-university and the community",26,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT339 - MT533 Wind instruments|MT340 - MT359 Flute",26,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6201 - PK6599.7 New Persian|PK6201 - PK6399 Language",26,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6269 - PN6278 Aphorisms. Apothegms",26,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG491 - RG499 Diseases of the breast",26,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP267.5 - TP301 Explosives and pyrotechnics",26,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP890 - TP933 Textile bleaching, dyeing, printing, etc.",26,
        "T - Technology.|TS1 - TS2301 Manufactures|TS1950 - TS1982 Animal products",26,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT180 - TT200 Woodworking. Furniture making. Upholstering",26,
        "U - Military science (General)|UG1500 - UG1530 Military astronautics. Space warfare. Space surveillance",26,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG770 - UG1045 Organization. Personnel management",26,
        "V - Naval science|VA10 - VA750 Navies: Organization, distribution, naval situation|VA49 - VA395 United States",26,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z668 - Z669.7 Library education. Research",26,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF660 - BF685 Comparative psychology. Animal and human psychology",25,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS11 - BS115 Early versions",25,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT3200 - CT9999 Biography. By subject|CT9960 - CT9998 Other miscellaneous groups",25,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK670 - DK679.5 Georgia (Republic). Georgian S.S.R.  Georgian Sakartvelo",25,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1001 - DT1190 Southern Africa",25,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada|F1060 - F1060.97 Canadian Northwest. Northwest Territories",25,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM435 - HM477 History of sociology. History of sociological theory",25,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws",25,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC189 - LC214.53 Educational sociology|LC212.9 - LC212.93 Sex differences in education",25,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education|LC37 - LC44.3 Home education",25,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA100 - NA130 Architecture and the state",25,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1293 - NB1895 Special forms",25,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1 - PJ489 General|PJ306 - PJ489 Literature",25,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN851 - PN884 Comparative literature",25,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1 - PT80 Literary history and criticism",25,
        "R - Medicine|RD1 - RD811 Surgery|RD137 - RD145 Surgery in childhood, adolescence, pregnancy, old age",25,
        "R - Medicine|RK1 - RK715 Dentistry|RK641 - RK667 Prosthetic dentistry. Prosthodontics",25,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF501 - TF668 Railway operation and management",25,
        "T - Technology.|TS1 - TS2301 Manufactures|TS800 - TS937 Wood technology. Lumber",25,
        "T - Technology.|TX1 - TX1110 Home economics.|TX950 - TX953 Taverns, barrooms, saloons",25,
        "U - Military science (General)|U1 - U900 Military science (General)|U150 - U155 Military planning",25,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering|VM15 - VM124 History",25,
        "A - General Works|AZ101 - AZ999 History of scholarship and learning. The humanities|AZ501 - AZ908 By region or country",24,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL2000 - BL2032 India|BL2017 - BL2018.7 Sikhism",24,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9301 - BX9359 Puritanism",24,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH95 - DH207 History",24,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal|DP535 - DP682.2 History|DP558 - DP682.2 By period",24,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS153 - DS154.9 Jordan. Transjordan",24,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT436 - DT449 Tanzania. Tanganyika. German East Africa",24,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT115 - DT154 Local history and description",24,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU400 - DU430 New Zealand|DU419 - DU422 History",24,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E401 - E415.3 Mexican War, 1846-1848",24,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G3290 - G5668 America. Western Hemisphere",24,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB111 - GB398.7 By region or country",24,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB201 - HB206 Value. Utility",24,
        "H - Social sciences|HF1 - HF6182 Commerce|HF1040 - HF1054 Commodities. Commercial products",24,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ7461 - HJ7980 Expenditures. Government spending",24,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF1338 - JF2112 Public administration|JF1411 - JF1521 Civil service",24,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K100 - K103 Legal education",24,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3941 - K3974 Trade and commerce",24,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1141 - LB1489 Kindergarten",24,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2147 - M2188 Liturgy and ritual|M2147 - M2155.6 Roman Catholic Church",24,
        "N - Fine Arts|N1 - N9211 Visual arts|N8510 - N8553 Art studios, materials, etc.",24,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA1000 - PA1179 Medieval and modern Greek language",24,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3223 - PG3229.2 Special periods",24,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages|PL3551 - PL4001 Tibeto-Burman languages|PL3561 - PL3801 Tibeto-Himalayan languages",24,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2131 - PN2193 By period",24,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4001 - PN4355 Oratory. Elocution, etc.|PN4177 - PN4191 Debating",24,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ400 - PQ491 Poetry",24,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1361 - PR1369 Essays",24,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works|PT1701 - PT1797 1500-ca. 1700",24,
        "Q - Science|QC1 - QC999 Physics|QC811 - QC849 Geomagnetism",24,
        "Q - Science|QM1 - QM695 Human anatomy|QM550 - QM577.8 Human and comparative histology",24,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA645.3 - RA645.37 Home health care services",24,
        "U - Military science (General)|U1 - U900 Military science (General)|U750 - U773 Military life, manners and customs, antiquities, etc.",24,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works|AC901 - AC995 Pamphlet collections",23,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF501 - BF505 Motivation",23,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL1790 - BL1975 China|BL1830 - BL1883 Confucianism",23,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL2195 - BL2228 Japan",23,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP300 - BP395 Bahai Faith",23,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4000 - BQ4060 General works",23,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT960 - BT985 Invisible world (Saints, demons, etc.)",23,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History",23,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1501 - DT1685 Namibia. South-West Africa",23,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT433.2 - DT433.29 Uganda",23,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC1080 - GC1581 Marine pollution. Seawater pollution",23,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN49 - GN298 Physical anthropology. Somatology|GN269 - GN279 Race (General)",23,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT495 - GT499 Human body and its parts. Personal beauty",23,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ750 - HQ755.5 Eugenics",23,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT641 - HT657 Classes arising from birth",23,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration|JL1 - JL500 Canada",23,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration|JL1200 - JL1299 Mexico",23,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN8101 - JN8399 Spain",23,
        "L - Education|LA5 - LA2396 History of education|LA173 - LA186 Higher education",23,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML162 - ML197 Special periods|ML193 - ML197 -1601",23,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML929 - ML990 Wind instruments",23,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT259 - MT338 String instruments",23,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1940 - NE2232.5 Etching and aquatint|NE1980 - NE2055.5 History",23,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1160 - NK1590 Decoration and ornament. Design|NK1548 - NK1590 Special subjects for design",23,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF1 - PF979 Dutch",23,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK401 - PK976 Sanskrit",23,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL2250 - PL3208 Chinese literature|PL3030 - PL3208 Provincial, local, colonial, etc.",23,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6244 - PN6246 Literary extracts. Commonplace books",23,
        "Q - Science|QC1 - QC999 Physics|QC770 - QC798 Nuclear and particle physics. Atomic energy. Radioactivity|QC794.95 - QC798 Radioactivity and radioactive substances",23,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC1030 - RC1160 Transportation medicine (including automotive, aviation, and space medicine)",23,
        "R - Medicine|RD1 - RD811 Surgery|RD63 - RD76 Operating rooms and theaters. Instruments, apparatus, and appliances",23,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG651 - RG721 Labor. Parturition",23,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS192 - RS199 Pharmaceutical technology",23,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S530 - S559 Agricultural education",23,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC530 - TC537 River protective works. Regulation. Flood control",23,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE250 - TE278.8 Pavements and paved roads",23,
        "T - Technology.|TS1 - TS2301 Manufactures|TS195 - TS198.8 Packaging",23,
        "U - Military science (General)|UF1 - UF910 Artillery|UF500 - UF515 Weapons systems",23,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF699 - BF711 Genetic psychology",22,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV659 - BV683 Ministry. Clergy. Religious vocations",22,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8762 - BX8785 Pentecostal churches",22,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9751 - BX9793 Shakers. United Society of Believers. Millennial Church",22,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D219 - D234 1453-1648",22,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4600 - DK4800 Local history and description",22,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB1601 - GB1798.9 Lakes. Limnology. Ponds. Lagoons",22,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training|GV346 - GV351.5 School and college athletics. Intramural and interscholastic athletics",22,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC901 - LC915 Islamic education",22,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML1091.8 - ML1093 Electronic instruments",22,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2000 - NA2320 Study and teaching. Research",22,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC703 - NC725 General works",22,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG500 - PG585 Slavic literature (General)",22,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1 - PJ489 General|PJ1 - PJ195 Languages",22,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages|PL3551 - PL4001 Tibeto-Burman languages|PL3561 - PL3801 Tibeto-Himalayan languages|PL3601 - PL3775 Tibetan",22,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages|PL4301 - PL4470 Mon-Khmer (Mon-Anam) languages|PL4371 - PL4379 Vietnamese. Annamese",22,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM5001 - PM7356 Languages of South America and the West Indies",22,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN695 - PN779 Modern|PN715 - PN749 Renaissance (1500-1700)",22,
        "R - Medicine|RD1 - RD811 Surgery|RD32 - RD33.9 Operative surgery. Technique of surgical operations",22,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S560 - S571.5 Farm economics. Farm management. Agricultural mathematics",22,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF481 - SF507 Poultry. Eggs",22,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF911 - SF914.4 Veterinary surgery",22,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T59.7 - T59.77 Human engineering in industry. Man-machine systems",22,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC270 - UC360 Transportation",22,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG400 - UG442 Fortification",22,
        "A - General Works|AZ101 - AZ999 History of scholarship and learning. The humanities|AZ200 - AZ361 History",21,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1745 - BF1779 Oracles. Sibyls. Divinations",21,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1050 - BL1060 By region",21,
        "C - Auxiliary Sciences of History|CB3 - CB482 History of Civilization|CB158 - CB161 Forecasts of future progress",21,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D284 - D297 1715-1789. 18th century",21,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden|DL643 - DL879 History",21,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS401 - DS486.8 India (Bharat)|DS430 - DS432 Ethnography. Sects",21,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS781 - DS796 Local history and description|DS785 - DS786 Tibet",21,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT401 - DT409 Somalia. Somaliland and adjacent territory",21,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU400 - DU430 New Zealand|DU422.5 - DU424.5 Ethnography",21,
        "E - History: America|E11 - E143 America|E141 - E143 Descriptive accounts of America. Earliest to 1810",21,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E310 - E337 1789-1809. Constitutional period|E321 - E330 John Adams' administration, 1797-1801",21,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E381 - E385 Jackson's administrations, 1829-1837",21,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E872 - E875 Carter's administration, 1977-1981",21,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G3290 - G5668 America. Western Hemisphere|G3300 - G5184 North America",21,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV701 - HV1420.5 Children|HV959 - HV1420.5 Orphanages. Orphans",21,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space",21,
        "L - Education|L7 - L991 Education (General)|L111 - L791 Official documents, reports, etc.",21,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2601 - LC2611 Education in developing countries",21,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML430 - ML455 Composition",21,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML1049.8 - ML1091 Mechanical and other instruments",21,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA1 - NA60 General",21,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC1 - NC45 General. Including collective biography",21,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM7801 - PM7895 Mixed languages|PM7831 - PM7875 Creole languages",21,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.|PN4735 - PN4748 Relation to the state. Government and the press. Liberty of the press",21,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG725 - RG791 Obstetric operations. Operative obstetrics",21,
        "R - Medicine|RZ201 - RZ999 Other systems of medicine",21,
        "V - Naval science|VE7 - VE500 Marines",21,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z712 - Z714 Circulation. Loans. Charging systems",21,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ1298 - BJ1335 Evolutionary and genetic ethics",20,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1300 - BL1380 Jainism",20,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL689 - BL980 European. Occidental|BL900 - BL980 Other European",20,
        "D - History (General) and History of Europe|DAW1001 - DAW1051 History of Central Europe",20,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD301 - DD454 Prussia",20,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK70 - DK112.42 Early to 1613|DK70 - DK99.7 Rus'",20,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal|DP535 - DP682.2 History|DP558 - DP682.2 By period|DP620 - DP682.2 -1580",20,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS730 - DS731 Ethnography",20,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB980 - GB992 Watersheds. Runoff. Drainage",20,
        "J - Political Science|JA1 - JA92 Political science (General)|JA86 - JA88 Study and teaching. Research",20,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1037 - LC1037.8 Career education",20,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC845 - NC915 Graphic art materials",20,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE1 - NE90 General",20,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK9600 - NK9955 Woodwork",20,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures|PK1971 - PK1979.5 Urdu language",20,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2561 - PK2579.5 Oriya",20,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ500 - PQ591 Drama",20,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4161 - PQ4185 Prose",20,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6000 - PT6466.36 Flemish literature since 1830",20,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH471 - QH489 Reproduction",20,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC49 - RC52 Psychosomatic medicine",20,
        "R - Medicine|RD1 - RD811 Surgery|RD680 - RD688 Diseases of the locomotor system (Surgical treatment)",20,
        "S - Agriculture|SK1 - SK663 Hunting|SK351 - SK579 Wildlife management. Game protection",20,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA177.4 - TA185 Engineering economy",20,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA800 - TA820 Tunneling. Tunnels",20,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ227 - TJ240 Machine design and drawing",20,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK4001 - TK4102 Applications of electric power",20,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP751 - TP762 Gas industry",20,
        "U - Military science (General)|U1 - U900 Military science (General)|U310 - U310.2 War games",20,
        "A - General Works|AM1 - AM401 Museums. Collectors and collecting|AM200 - AM401 Collectors and collecting",19,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM1 - BM449 General|BM70 - BM135 Study and teaching",19,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ95 - DJ292 History|DJ151 - DJ292 By period",19,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania",19,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.17 - DS646.29 Java",19,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU28.11 - DU68 History",19,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E300 - E302.6 General|E302.5 - E302.6 Biography (Late eighteenth century)",19,
        "E - History: America|E151 - E889 United States|E660 - E738 Late nineteenth century, 1865-1900|E671 - E680 Grant's administrations, 1869-1877",19,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1621 - HG1638 Interest rates. Interest tables",19,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K85 - K89 Legal research",19,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica",19,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient",19,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3092 - KZ3405 20th century",19,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium",19,
        "M - Music|ML1 - ML3930 Literature on music|ML112 - ML112.5 Music printing and publishing",19,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML1200 - ML1270 Orchestra",19,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P901 - P1091 Extinct ancient or medieval languages",19,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1992.93 - PN1992.95 Nonbroadcast video recordings",19,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2085 - PN2091 The stage and accessories",19,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism",19,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6000 - PT6466.36 Flemish literature since 1830|PT6400 - PT6466.36 Individual authors or works",19,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT8050 - PT8176.36 Individual authors or works|PT8176 - PT8176.36 1961-2000",19,
        "Q - Science|QM1 - QM695 Human anatomy|QM601 - QM695 Human embryology",19,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA601 - RA602 Food and food supply in relation to public health",19,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM182 - RM190 Other therapeutic procedures (including acupuncture, pneumatic aspiration, spinal puncture, pericardial puncture)",19,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM270 - RM282 Immunotherapy. Serum therapy",19,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF391 - SF397.83 Swine",19,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF95 - SF99 Feeds and feeding. Animal nutrition",19,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP480 - TP498 Low temperature engineering. Cyrogenic engineering. Refrigeration",19,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA926 - UA929 Civil defense",19,
        "V - Naval science|VE7 - VE500 Marines|VE23 - VE124 By region or country",19,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL689 - BL980 European. Occidental|BL830 - BL875 Germanic and Norse",18,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT1029 - BT1040 Catechisms",18,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT899 - BT940 Future state. Future life",18,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX5001 - BX5009 Anglican Communion (General)",18,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH95 - DH207 History|DH141 - DH207 By period",18,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL101 - DL291 Denmark",18,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS161 - DS195.5 Armenia",18,
        "E - History: America|E11 - E143 America|E31 - E49.3 North America",18,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2661 - F2699 Paraguay",18,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC200 - GC376 Dynamics of the ocean|GC228.5 - GC228.6 Ocean circulation",18,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1203 - GV1218 Children's games and amusements",18,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD5650 - HD5660 Employee participation in management. Employee ownership. Industrial democracy. Works councils",18,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT675 - HT690 Classes arising from occupation",18,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV3176 - HV3199 Special classes. By race or ethnic group",18,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN1400 - JN1571.5 Ireland",18,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K2100 - K2385 Courts. Procedure|K2110 - K2155 Court organization and procedure",18,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K583 - K591 Legal systems compared",18,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law",18,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KJ - Europe",18,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KJ - Europe|KJ2 - KJ1040 History of Law",18,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4850 - KZ5490 Intergovernmental organizations. IGOs|KZ4935 - KZ5275 The United Nations",18,
        "L - Education|LG21 - LG961 Individual institutions",18,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1528 - M1529.5 Duets, trios, etc., for solo voices",18,
        "M - Music|ML1 - ML3930 Literature on music|ML110 - ML111.5 Music librarianship",18,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK2775 - NK2898 Rugs and carpets",18,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects",18,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL950 - PL998 Korean literature|PL950.2 - PL969.5 History and criticism",18,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2131 - PN2193 By period|PN2181 - PN2193 Modern",18,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6098.7 - PQ6129 Drama",18,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9262 - PQ9288 Individual authors, 1961-2000",18,
        "Q - Science|QR1 - QR502 Microbiology|QR99.6 - QR99.8 Cyanobacteria",18,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG211 - RG483 Abnormalities and diseases of the female genital organs",18,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB414.6 - SB417 Greenhouses and greenhouse culture",18,
        "T - Technology.|TH1 - TH9745 Building construction|TH3301 - TH3411 Maintenance and repair",18,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC460 - UC535 Clothing and equipment",18,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK1000 - VK1249 Lighthouse service",18,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK15 - VK124 History, conditions, etc.",18,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z4001 - Z4980 Australia. Oceania",18,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF180 - BF198.7 Experimental psychology",17,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP187 - BP187.9 Shrines, sacred places, etc.",17,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT990 - BT1010 Creeds, confessions, covenants, etc.",17,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT21 - CT22 Biography as an art or literary form",17,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB2000 - DB3150 Czechoslovakia|DB2300 - DB2650 Local history and description of Czech lands",17,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK505 - DK505.95 Lithuania",17,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History|DK4429 - DK4442 1945-1989. People's Republic",17,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden|DL643 - DL879 History|DL660 - DL879 By period",17,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT491 - DT516.9 British West Africa|DT516 - DT516.9 Sierra Leone",17,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1780 - G2799 Eastern Hemisphere. Eurasia, Africa, etc.|G1791 - G2082 Europe",17,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC109 - GC149 Chemical oceanography",17,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC190 - GC190.5 Ocean-atmosphere interaction",17,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC377 - GC399 Marine sediments",17,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT5320 - GT6737 Customs relative to special classes",17,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG9371 - HG9399 Health insurance",17,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT351 - HT352 Suburban cities and towns",17,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT713 - HT725 Caste system",17,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV1 - JV5399 Colonies and colonization|JV61 - JV151 History",17,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3625 - K3649 Food. Drugs. Cosmetics",17,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3092 - KZ3405 20th century|KZ3110 - KZ3405 Publicists. Writers on public international law",17,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4112 - KZ4820 By state",17,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC71 - LC120.4 Education and the state|LC107 - LC120.4 Public school question. Secularization. Religious instruction in the public schools",17,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education|LC45 - LC45.8 Nonformal education",17,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2000 - M2007 Oratorios",17,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1135 - NB1150 General works",17,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1203 - NB1270 Special materials",17,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1 - NK570 General",17,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB1501 - PB1709 Gaelic (Scottish Gaelic, Erse)",17,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG1151 - PG1199 Macedonian",17,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature|PL8000 - PL8009 Languages",17,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN101 - PN245 Authorship|PN241 - PN241.5 Translating as a literary pursuit",17,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6500 - PT6592.36 Afrikaans literature",17,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S583 - S587.73 Agricultural chemistry. Agricultural chemicals",17,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB354 - SB402 Fruit culture and orchard care|SB387 - SB399 Grape Culture, Viticulture",17,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK9900 - TK9971 Electricity for amateurs. Amateur constructors' manuals",17,
        "V - Naval science|V1 - V995 Naval science (General)|V25 - V55 History and antiquities of naval science",17,
        "B - Philosophy. Psychology. Religion|BC1 - BC199 Logic|BC11 - BC39 History",16,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX1 - BX9.5 Church unity. Ecumenical movement. Interdenominational cooperation",16,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX4872 - BX4924 Pre-Reformation",16,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9801 - BX9869 Unitarianism",16,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History|DK4186 - DK4348 To 1795",16,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G540 - G550 Seafaring life, ocean travel, etc.",16,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD5481 - HD5630.7 Industrial arbitration. Mediation and conciliation",16,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE199 - HE199.5 Freight (General)",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K37 - K44 Bibliography",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3289 - K3367 Organs of government",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6360 - KZ6373 Non-military coercion",16,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3745 - LC3747 Children of immigrants (First generation)",16,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1272 - NB1291 Mobiles, color, sculpture gardens, etc.",16,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK5500 - NK6060 Glyptic arts",16,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG9501 - PG9665 Albanian",16,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL950 - PL998 Korean literature|PL969.8 - PL985 Collections",16,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6075 - PQ6098 Poetry",16,
        "S - Agriculture|SK1 - SK663 Hunting|SK311 - SK335 Bird hunting. Fowling",16,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD920 - TD934 Rural and farm sanitary engineering",16,
        "T - Technology.|TR1 - TR1050 Photography|TR590 - TR620 Lighting",16,
        "T - Technology.|TS1 - TS2301 Manufactures|TS1870 - TS1935 Rubber industry",16,
        "V - Naval science|VB15 - VB345 Naval administration",16,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)|BV150 - BV168 Christian symbols and symbolism",15,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB2000 - DB3150 Czechoslovakia|DB2700 - DB3150 Slovakia",15,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden|DL643 - DL879 History|DL660 - DL879 By period|DL701 - DL879 Modern, 1523-",15,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period",15,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS541 - DS553.7 History",15,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT546.1 - DT546.49 French-speaking Equatorial Africa",15,
        "E - History: America|E11 - E143 America|E75 - E99 Indians of North America|E81 - E83 Indian wars",15,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E337.8 - E340 General",15,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G100.5 - G108.5 Toponymy",15,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8075 - HG8107 Insurance business. Insurance management",15,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV4905 - HV5959 Animal experimentation. Anti-vivisection",15,
        "J - Political Science|JA1 - JA92 Political science (General)|JA1 - JA26 Periodicals",15,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ1305 - JZ2060 Scope of international relations|JZ1400 - JZ1454 Diplomatic and consular service",15,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3770 - K3795 Science and arts. Research",15,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3670 - KZ3881 Objects of the law of nations. Territory and its different parts",15,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2574 - LC2576 Gays. Lesbians. Bisexuals",15,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3001 - LC3501 Asians",15,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education|LC47 - LC58.7 Private school education",15,
        "L - Education|LF14 - LF5627 Individual institutions|LF4251 - LF4437 Russia (Federation)",15,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML549.8 - ML649 Organ",15,
        "N - Fine Arts|N1 - N9211 Visual arts|N8554 - N8585 Examination and conservation of works of art",15,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA8200 - NA8260 Farm architecture",15,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA8300 - NA8480 Outbuildings, gates, fences, etc.",15,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1160 - NK1590 Decoration and ornament. Design|NK1160 - NK1174 General",15,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature|PA6101 - PA6140 Collections",15,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian|PD5001 - PD5929 Swedish",15,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3310 - PG3319 18th century",15,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN597 - PN605 Special relations, movements, and currents of literature",15,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1100 - PT1141 General",15,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7101 - PT7211 Literary history and criticism|PT7177 - PT7211 Prose",15,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7101 - PT7211 Literary history and criticism|PT7177 - PT7211 Prose|PT7181 - PT7193 Sagas",15,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ101 - RJ103 Child health. Child health services",15,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S589.75 - S589.76 Agriculture and the environment",15,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S602 - S604.37 Methods and systems of culture. Cropping systems",15,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB175 - SB177 Food crops",15,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF105 - SF109 Breeding",15,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF915 - SF919.5 Veterinary pharmacology",15,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH365 - SH380.92 Shellfish fisheries. Shellfish culture",15,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH381 - SH385 Whaling",15,
        "S - Agriculture|SK1 - SK663 Hunting|SK40 - SK268 By country",15,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF200 - TF320 Railway construction",15,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK4125 - TK4399 Electric lighting",15,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP875 - TP888 Cement industries",15,
        "T - Technology.|TS1 - TS2301 Manufactures|TS800 - TS937 Wood technology. Lumber|TS840 - TS915 Wood products. Furniture",15,
        "A - General Works|AI1 - AI21 Indexes",14,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL175 - BL265 Natural theology|BL175 - BL190 General",14,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL175 - BL265 Natural theology|BL205 - BL216 Nature and attributes of Deity",14,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV900 - BV1450 Religious societies, associations, etc.",14,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX4929 - BX4951 Post-Reformation",14,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7101 - BX7260 Congregationalism",14,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK901 - DK909.5 Kazakhstan. Kazakh S.S.R.",14,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History",14,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR927 - DR978.52 History",14,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT160 - DT177 North Africa",14,
        "E - History: America|E11 - E143 America|E101 - E135 Discovery of America and early explorations|E103 - E110 Pre-Columbian period",14,
        "E - History: America|E151 - E889 United States|E186 - E199 Colonial history (1607-1775)|E191 - E199 By period",14,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.|G5700 - G6967 Europe",14,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC96 - GC97.8 Estuarine oceanography",14,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR430 - GR487 Folklore relating to private life (including dreams, love, children, nursery rhymes, etc.)",14,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT170 - GT476 Houses. Dwellings",14,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1221 - GV1469.62 Indoor games and amusements|GV1301 - GV1311 Gambling. Chance and banking games",14,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV191.68 - GV198.9 Camping",14,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV8290 - HV8291 Private security services",14,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K50 - K54 Dictionaries. Words and phrases",14,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3870 - K3918 rimary production. Extractive industries",14,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL4110 - KL4399 Greek law",14,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1910 - NB1952 Special subjects",14,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE951 - NE962 Special subjects",14,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL6191 - PL6341 Micronesian and Melanesian languages",14,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM8001 - PM8995 Artificial languages",14,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism",14,
        "P - Language and literature|PR1 - PR9680 English literature|PR931 - PR938 Wit and humor",14,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature|PT175 - PT230 Medieval",14,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9201 - PT9499 Literary history and criticism",14,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC955 - RC962 Arctic medicine. Tropical medicine",14,
        "R - Medicine|RD1 - RD811 Surgery|RD101 - RD104 Fractures (General)",14,
        "R - Medicine|RK1 - RK715 Dentistry|RK501 - RK519 Operative dentistry. Restorative dentistry",14,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S671 - S760.5 Farm machinery and farm engineering",14,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ266 - TJ267.5 Turbines. Turbomachines (General)",14,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP934 - TP945 Paints, pigments, varnishes, etc.",14,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1041 - Z1121 Anonyms and pseudonyms",14,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL2600 - BL2630 Pacific Ocean Islands. Oceania",13,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP1 - BP68 General|BP42 - BP48 Study and teaching",13,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ1001 - BQ1045 Buddhist literature",13,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG987 - DG999 Malta. Maltese Islands",13,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ95 - DJ292 History|DJ151 - DJ292 By period|DJ154 - DJ210 1555-1795. United provinces",13,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK941 - DK949.5 Uzbekistan. Uzbek S.S.R.",13,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS5.95 - DS10 Description and travel",13,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1251 - DT1465 Angola",13,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT15 - DT16 Ethnography",13,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E855 - E861 Nixon's administrations, 1969-August 9, 1974|E860 - E861 Watergate Affair. Resignation",13,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology|GB471 - GB478.99 Islands",13,
        "G - Geography. Anthropology. Recreation|GF1 - GF900 Human ecology. Anthropogeography|GF53 - GF71 Environmental influences on humans",13,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1470 - GV1511 Parties. Party games and stunts|GV1491 - GV1507 Puzzles",13,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5735 - HF5746 Business records management",13,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ4113 - HJ4601 Property tax",13,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS101 - HS330.7 Secret societies",13,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV675 - HV677 Accidents. Prevention of accidents",13,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK1001 - JK1443 Congress. Legislative branch|JK1154 - JK1276 Senate",13,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS7525 - JS7819 Africa",13,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K540 - K546 Trials",13,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLB1 - KLB6499 Russia (Federation, 1992",13,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education|LC25 - LC33 Self-education. Self-culture",13,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML162 - ML197 Special periods|ML162 - ML169 Ancient",13,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT740 - MT810 Instrumental techniques for children",13,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P327 - P327.5 Lexicography",13,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3300 - PG3308 Early to 1700",13,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH5001 - PH5490 Basque",13,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL6401 - PL6551 Polynesian languages",13,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6500 - PT6592.36 Afrikaans literature|PT6590 - PT6592.36 Individual authors or works",13,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7001 - PT7099 Scandinavian literature",13,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7001 - PT7099 Scandinavian literature|PT7001 - PT7099 General",13,
        "Q - Science|QM1 - QM695 Human anatomy|QM531 - QM549 Regional anatomy",13,
        "R - Medicine|RF1 - RF547 Otorhinolaryngology|RF460 - RF547 Laryngology. Diseases of the throat",13,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF670 - TF851 Local and light railways",13,
        "T - Technology.|TR1 - TR1050 Photography|TR550 - TR581 Studio and Laboratory",13,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF176 - BF176.5 Psychological tests and testing",12,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF795 - BF839 Temperament. Character",12,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL425 - BL490 Religious doctrines (General)|BL435 - BL457 Nature worship",12,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL70 - BL71 Sacred books (General)",12,
        "C - Auxiliary Sciences of History|CE1 - CE97 Technical Chronology. Calendar|CE21 - CE46 Ancient",12,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR101 - CR115 Flags, banners, and standards",12,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland",12,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period",12,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU200 - DU230 Victoria",12,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU250 - DU280 Queensland",12,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E784 - E805 1919-1933. Harding-Coolidge-Hoover era. The twenties|E801 - E805 Hoover's administration, 1919-1933",12,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology|GB500 - GB555 Mountains. Orography",12,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE9713 - HE9715 Cellular telephone services industry. Wireless telephone",12,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5761 - HF5780 Shipment of goods. Delivery of goods",12,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV6061 - JV6149 Emigration",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3601 - K3611 Medical legislation",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3978 - K3992 Public utilities",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1430 - KZA1690 Maritime boundaries",12,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB2844.52 - LB2844.63 Trade unions",12,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1031 - LC1034.5 Competency based education",12,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2018 - M2019.5 Duets, trios, etc. for solo voices",12,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML1030 - ML1049 Percussion instruments",12,
        "M - Music|MT1 - MT960 Musical instruction and study|MT40 - MT67 Composition. Elements and techniques of music|MT58 - MT67 Forms",12,
        "M - Music|MT1 - MT960 Musical instruction and study|MT90 - MT146 Analysis and appreciation of musical works|MT125 - MT130 Orchestral music",12,
        "M - Music|MT1 - MT960 Musical instruction and study|MT955 - MT956 Musical theater",12,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4100 - NA4145 Classed by material",12,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P501 - P769 Indo-European (Indo-Germanic) philology",12,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.|PN4832 - PN4836 Magazines and other periodicals",12,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6066 - PN6069 Special classes of authors",12,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6141 - PN6145 Essays",12,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG104 - RG104.7 Operative gynecology",12,
        "R - Medicine|RL1 - RL803 Dermatology|RL130 - RL169 Diseases of the glands, hair, nails",12,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM265 - RM267 Antibiotic therapy. Antibiotics",12,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM930 - RM931 Rehabilitation therapy",12,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF371 - SF379 Sheep. Wool",12,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH334.9 - SH336.5 Fishery processing",12,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T58.7 - T58.8 Production capacity. Manufacturing capacity",12,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA2001 - TA2040 Plasma engineering. Applied plasma dynamics",12,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ268 - TJ740 Steam engineering|TJ603 - TJ695 Locomotives",12,
        "T - Technology.|TR1 - TR1050 Photography|TR250 - TR265 Cameras",12,
        "T - Technology.|TR1 - TR1050 Photography|TR925 - TR1050 Photomechanical processes",12,
        "U - Military science (General)|U1 - U900 Military science (General)|U164 - U167.5 Tactics",12,
        "U - Military science (General)|UF1 - UF910 Artillery|UF520 - UF537 Ordnance and small arms",12,
        "U - Military science (General)|UH20 - UH910 Other services|UH600 - UH629.5 Military hygiene and sanitation",12,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK549 - VK572 Science of navigation",12,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1212.32 - BL1215 Doctrines. Theology",11,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6901 - BX6997 Christian Science",11,
        "C - Auxiliary Sciences of History|CD1 - CD6471 Diplomatics. Archives. Seals|CD5001 - CD6471 Seals",11,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD84 - DD257.4 History|DD121 - DD257.4 By period|DD125 - DD174.6 Early and medieval to 1519",11,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History",11,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK70 - DK112.42 Early to 1613|DK99.8 - DK112.42 Muscovy",11,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK504 - DK504.95 Latvia",11,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK690 - DK699.5 Azerbaijan. Azerbaijan S.S.R.",11,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History",11,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway",11,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-|DP201 - DP232.6 1808-1886. 19th century",11,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.3 - DS646.34 Borneo. Kalimantan, Indonesia",11,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS781 - DS796 Local history and description|DS781 - DS784.2 Manchuria",11,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT3161 - DT3257 Malawi. Nyasaland",11,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT56.8 - DT69.5 Antiquities|DT63 - DT63.5 Pyramids",11,
        "E - History: America|E151 - E889 United States|E186 - E199 Colonial history (1607-1775)|E191 - E199 By period|E195 - E199 1689-1775",11,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E740 - E749 General|E747 - E748 Biography",11,
        "F - America: local history|F1 - F975 United States local history|F721 - F723 Rocky Mountains. Yellowstone National Park",11,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada|F1121 - F1139 Newfoundland and Labrador",11,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.|G7400 - G8198.54 Asia",11,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT5320 - GT6737 Customs relative to special classes|GT5750 - GT6390 By occupation",11,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1151 - GV1190 Shooting. Archery",11,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1706 - HG1708 Accounting. Bookkeeping",11,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ799.95 - HQ799.97 Adulthood",11,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN9600 - JN9689 Balkan States",11,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS141 - JS271 Municipal government and local government other than municipal",11,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV9100 - JV9269 Australia. New Zealand",11,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KDZ1 - KDZ4999 Law of America. North America",11,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2335.95 - LB2337 Endowments, trusts, etc.",11,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC361 - LC629 Christian education. Church education|LC531 - LC629 Protestant",11,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC6201 - LC6401 University extension",11,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M1375 - M1420 Instrumental music for children",11,
        "M - Music|MT1 - MT960 Musical instruction and study|MT70 - MT74 Instrumentation and orchestration",11,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1160 - NB1195 Designs and technique",11,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P321 - P324.5 Etymology",11,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC2700 - PC3708 Dialects. Provincialisms|PC3201 - PC3366 Provencal (Old)",11,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH601 - PH671 Estonian",11,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1841 - PK1870.95 Gujarati",11,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6329 - PN6338 Thoughts",11,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4077 - PQ4088 Modern",11,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4091 - PQ4131 Poetry",11,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1251 - PT1299 Drama",11,
        "Q - Science|QL1 - QL991 Zoology|QL750 - QL795 Animal behavior|QL791 - QL795 Stories and anecdotes",11,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA646 - RA648.3 War and public health",11,
        "R - Medicine|RB1 - RB214 Pathology|RB24 - RB33 Pathology anatomy and histology",11,
        "R - Medicine|RD1 - RD811 Surgery|RD49 - RD52 Surgical therapeutics. Preoperative and postoperative care",11,
        "R - Medicine|RK1 - RK715 Dentistry|RK529 - RK535 Oral surgery",11,
        "R - Medicine|RL1 - RL803 Dermatology|RL87 - RL94 Care and hygiene",11,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF855 - TF1127 Electric railways",11,
        "T - Technology.|TH1 - TH9745 Building construction|TH5011 - TH5701 Construction by phase of work",11,
        "T - Technology.|TH1 - TH9745 Building construction|TH6101 - TH6887 Plumbing and pipefitting",11,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ950 - TJ1030 Pneumatic machinery",11,
        "T - Technology.|TN1 - TN997 Mining engineering. Metallurgy.|TN950 - TN997 Building and ornamental stones",11,
        "U - Military science (General)|UB1 - UB900 Military administration|UB340 - UB345 Compulsory service. Conscription and exemption",11,
        "U - Military science (General)|UE1 - UE500 Cavalry. Armor. Including horse cavalry, armored cavalry, mechanized cavalry",11,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering|VM298.5 - VM301 Shipbuilding industry. Shipyards",11,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z41 - Z42.5 Autographs. Signatures",11,
        "A - General Works|AP1 - AP230 Periodicals|AP200 - AP230 Juvenile periodicals",10,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF2050 - BF2055 Human-alien encounters. Contact between humans and extraterrestrials",10,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ840 - BQ999 Biography|BQ860 - BQ999 Individual|BQ860 - BQ939 Gautama Buddha",10,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8525 - BX8528 Millennial Dawnists. Jehovah's Witnesses",10,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8701 - BX8749 New Jerusalem Church. New Church. Swedenborgianism",10,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D31 - D34 Political and diplomatic history",10,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK502.3 - DK502.75 Baltic States",10,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK921 - DK929.5 Tajikistan. Tajik S.S.R. Tadzhikistan",10,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History",10,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR927 - DR978.52 History|DR954 - DR978.52 By period",10,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States|DT331 - DT346 Sahara",10,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT421 - DT432.5 East Africa. British East Africa",10,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E303 - E309 1775-1789. The Confederation, 1783-1789",10,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E415.6 - E415.9 General",10,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E865 - E868 Ford's administration, August 9, 1974-1977",10,
        "F - America: local history|F1 - F975 United States local history|F850.5 - F851.5 Pacific States",10,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC65 - GC78 Underwater exploration",10,
        "H - Social sciences|HF1 - HF6182 Commerce|HF294 - HF343 Boards of trade. Chambers of commerce. Merchants' associations",10,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ5309 - HJ5510 Administrative fees. User charges. License fees",10,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT201 - HT221 City population (including children in cities, immigration)",10,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3184 - K3188 Form and structure of government",10,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3280 - K3282 Church and state",10,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3700 - K3705 Control of social activities",10,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence",10,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri",10,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1249 - KZ1252 International law and other disciplines",10,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1255 - KZ1273 Theory and principles|KZ1267 - KZ1273 Domain of the law of nations",10,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1298 - KZ1304 The law of treaties. System of treaty law",10,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security|KZ5615 - KZ5893 Arms control and disarmament regimes|KZ5647 - KZ5686 Nuclear (Strategic) arms limitation",10,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1340 - KZA1417 Concepts and principles",10,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC701 - LC775 Jewish education",10,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia",10,
        "L - Education|LJ3 - LJ165 Student fraternities and societies, United States",10,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1530 - M1546.5 Choruses with orchestra or other ensemble",10,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M1100 - M1160 String orchestra",10,
        "M - Music|ML1 - ML3930 Literature on music|ML35 - ML38 Festivals. Congresses",10,
        "M - Music|ML1 - ML3930 Literature on music|ML3928 - ML3930 Literature for children",10,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT259 - MT338 String instruments|MT260 - MT279.7 Violin",10,
        "M - Music|MT1 - MT960 Musical instruction and study|MT820 - MT915 Singing and vocal technique|MT855 - MT883 Special techniques",10,
        "M - Music|MT1 - MT960 Musical instruction and study|MT918 - MT948 School music",10,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1293 - NB1895 Special forms|NB1800 - NB1880 Sepulchral monuments",10,
        "P - Language and literature|PE1 - PE3729 English language|PE501 - PE693 Middle English",10,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3211 - PG3219 Translations",10,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2631 - PK2659 Panjabi",10,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1351 - PN1389 Lyric poetry",10,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN905 - PN1008 Folk literature",10,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9191 - PQ9255 Individual authors and works, 1500-1700",10,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT3701 - PT3971 Provincial, local, colonial, etc.|PT3701 - PT3746 East Germany",10,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT881 - PT951 Folk literature",10,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG801 - RG871 Puerperal state",10,
        "R - Medicine|RK1 - RK715 Dentistry|RK58 - RK59.3 Practice of dentistry. Dental economics",10,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS125 - RS131.9 Formularies. Collected prescriptions",10,
        "R - Medicine|RZ201 - RZ999 Other systems of medicine|RZ409.7 - RZ999 Miscellaneous systems and treatments (including magnetotherapy, mesmerism, naturopathy, organomic medicine, phrenology, radiesthesia, etc.)",10,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S588.4 - S589.6 Agricultural physics",10,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF191 - SF275 Cattle|SF221 - SF250 Horses",10,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF411 - SF459 Pets|SF456 - SF458.83 Fishes. Aquariums",10,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF461 - SF473 Birds",10,
        "T - Technology.|TR1 - TR1050 Photography|TR510 - TR545 Color Photography",10,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT174 - TT176 Articles for children",10,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT490 - TT695 Clothing manufacture. Dressmaking. Tailoring",10,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA985 - UA997 Military geography",10,
        "U - Military science (General)|UD1 - UD495 Infantry|UD380 - UD425 Small arms. Swords, etc.",10,
        "U - Military science (General)|UG1500 - UG1530 Military astronautics. Space warfare. Space surveillance|UG1523 - UG1525 By region or country",10,
        "A - General Works|AZ101 - AZ999 History of scholarship and learning. The humanities|AZ191 - AZ193 Evaluation",9,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF839.8 - BF885 Physiognomy. Phrenology",9,
        "B - Philosophy. Psychology. Religion|BJ1801 - BJ2195 Social usages. Etiquette|BJ2021 - BJ2078 Etiquette of entertaining",9,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP184 - BP184.9 Religious ceremonies, rites, etc.",9,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT31 - CT83 History of biographical literature. Lives of biographers",9,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History|DL1050 - DL1141.6 By period",9,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History|DL1050 - DL1141.6 By period|DL1055 - DL1141.6 Modern, 1523-",9,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL101 - DL291 Denmark|DL143 - DL263.3 History",9,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden|DL971 - DL991 Local history and description",9,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-|DP170 - DP189 1516-1700. Hapsburgs",9,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ301 - DQ851 Local history and description",9,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT549 - DT549.9 Senegal",9,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT591 - DT615.9 Portuguese-speaking West Africa",9,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E416 - E420 Polk's administration, 1845-1849",9,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E436 - E440.5 Buchanan's administration, 1857-1861",9,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2701 - F2799 Uruguay",9,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F3031 - F3031.5 Falkland Islands",9,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB2801 - GB2998 Hydrometerology",9,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC150 - GC182 Physical oceanography",9,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC200 - GC376 Dynamics of the ocean|GC229 - GC296.8 Currents",9,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT5220 - GT5286 Customs relative to transportation and travel",9,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1641 - HG1643 Bank loans. Bank credit. Commercial loans",9,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG9969.5 - HG9999 Other insurance (including automobile, burglary, disaster, title, etc.)",9,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM435 - HM477 History of sociology. History of sociological theory|HM461 - HM473 Schools of sociology. Schools of social thought",9,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT330 - HT334 Metropolitan areas",9,
        "J - Political Science|J1 - J981 General legislative and executive papers|J10 - J98 United States|J80 - J82 Presidents' messages and other executive papers",9,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3400 - K3431 Administrative law",9,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBP1 - KBP4860 Islamic law. Shari'ah. Fiqh|KBP50 - KBP69 History, development and application of Islamic law",9,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6374 - KZ6377 Threat of force",9,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB1805 - LB2151 State teachers colleges",9,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB2165 - LB2278 Teacher training in universities and colleges",9,
        "L - Education|LE3 - LE78 Individual institutions",9,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)",9,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT560 - MT570 Banjo",9,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC390 - NC670 Study and teaching",9,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1135 - NK1149.5 Arts and crafts movement",9,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX760 - NX770 Administration of the arts",9,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P99.5 - P99.6 Nonverbal communication",9,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3240 - PG3255 Drama",9,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG8001 - PG9146 Baltic|PG8801 - PG9146 Latvian",9,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1001 - PJ1989 Egyptology|PJ1111 - PJ1446 Language",9,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL490 - PL495 Far Eastern languages and literature",9,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1301 - PN1333 Epic poetry",9,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1635 - PN1650 Relation to, and treatment of, special subjects",9,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN661 - PN694 Medieval (to 1500)|PN688 - PN691 Poetry",9,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4133 - PQ4160 Drama",9,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1301 - PT1360 Prose",9,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism|PT5121 - PT5185 Special periods",9,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7220 - PT7262.5 Collections",9,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9547 - PT9639 Collections",9,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC620 - RC627 Nutritional diseases. Deficiency diseases",9,
        "R - Medicine|RF1 - RF547 Otorhinolaryngology|RF341 - RF437 Rhinology. Diseases of the nose, accessory sinuses, and nasopharynx",9,
        "R - Medicine|RX1 - RX681 Homeopathy",9,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF405.5 - SF407 Laboratory animals",9,
        "T - Technology.|T1 - T995 Technology (General)|T11.95 - T12.5 Industrial directories",9,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD201 - TD500 Water supply for domestic and industrial purposes|TD481 - TD493 Water distribution systems",9,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF1300 - TF1620 High speed ground transportation",9,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK4601 - TK4661 Electric heating",9,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT205 - TT267 Metalworking",9,
        "U - Military science (General)|UB1 - UB900 Military administration|UB410 - UB415 Officers",9,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG700 - UG705 Tactics",9,
        "V - Naval science|VG20 - VG2029 Minor services of navies",9,
        "B - Philosophy. Psychology. Religion|BC1 - BC199 Logic|BC11 - BC39 History|BC25 - BC39 By period",8,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1845 - BF1891 Fortune-telling",8,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1100 - BL1107.5 General",8,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT93 - BT93.6 Judaism",8,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6101 - BX6193 Adventists",8,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8551 - BX8593 Moravian Church. United Brethren. Unitas Fratrum. Herrnhuters",8,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH801 - DH811 Local history and description",8,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK61 - DJK77 Local history and description",8,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK503 - DK503.95 Estonia",8,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL301 - DL398 Iceland",8,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS155 - DS156 Asia Minor",8,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS560 - DS560.72 Democratic Republic (North Vietnam), 1945-",8,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT115 - DT154 Local history and description|DT139 - DT153.5 Cairo",8,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT545 - DT545.9 Cote d'Ivoire. Ivory Coast",8,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU150 - DU180 New South Wales",8,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E376 - E380 John Quincy Adams' administration, 1825-1829",8,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE323 - HE328 Transportation geography. Trade routes",8,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5446 - HF5459 Canvassing. Peddling",8,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG9651 - HG9899 Fire insurance",8,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG9956 - HG9969 Casualty insurance",8,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ3801 - HJ3844 Revenue from sources other than taxation",8,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1101 - HQ2030.7 Women. Feminism|HQ1871 - HQ2030.7 Women's clubs",8,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ981 - HQ996 Polygamy",8,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV4005 - HV4013 Immigrants",8,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration|JL599.5 - JL839 West Indies. Caribbean Area",8,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN5701 - JN5999 Netherlands",8,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN8423 - JN8661 Portugal",8,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K321 - K474 Schools of legal theory|K330 - K344 Positivism",8,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1026 - K1045 Sale of goods",8,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KM - Asia and Eurasia, Africa, Pacific Area, and Antarctica. Asia",8,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KM - Asia and Eurasia, Africa, Pacific Area, and Antarctica. Asia|KM1 - KM999 General",8,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ221 - KZ1152 By region or country",8,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1340 - KZA1417 Concepts and principles|KZA1348 - KZA1405 Mare liberum doctrine",8,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2667 - LC2698 Latin Americans. Hispanic Americans|LC2680 - LC2688 Mexican Americans. Mexicans in the United States",8,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC6501 - LC6560.4 Lyceums and lecture courses. Forums",8,
        "L - Education|LD13 - LD7501 Individual institutions|LD13 - LD7501 United States|LD13 - LD7251 Universities. Colleges|LD7020 - LD7251 Women's colleges",8,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML1400 - ML3275 Vocal music|ML1499 - ML1554 Choral music",8,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML1100 - ML1165 Chamber music",8,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML475 - ML547 By region or country",8,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML749.5 - ML927 Bowed string instruments",8,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT180 - MT198 Organ",8,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT259 - MT338 String instruments|MT300 - MT318 Violoncello",8,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1390 - ND1393 Still life",8,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1648 - NK1678 Religious art",8,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P375 - P381 Linguistic geography",8,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC2700 - PC3708 Dialects. Provincialisms|PC3371 - PC3420.5 Modern patois of South France",8,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian|PD2501 - PD2999 Norwegian",8,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ3001 - PJ3097 Semitic philology and literature",8,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6135 - PK6199.9 Middle Iranian languages",8,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages|PL3551 - PL4001 Tibeto-Burman languages|PL3851 - PL4001 Assam and Burma",8,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN3203 - PN3299 Tableaux, pageants, 'Happenings,' etc.",8,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6130 - PN6140 Letters",8,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6279 - PN6288 Epigrams",8,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature|PT500 - PT597 Poetry",8,
        "R - Medicine|RE1 - RE994 Opthamology|RE925 - RE939 Refraction and errors of refraction and accommodation",8,
        "R - Medicine|RE1 - RE994 Opthamology|RE939.2 - RE981 Optometry. Opticians. Eyeglasses",8,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S604.5 - S604.64 Agricultural conservation",8,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB418 - SB418.4 Container gardening",8,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF380 - SF388 Goats",8,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF781 - SF809 Communicable diseases of animals (General)",8,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF84.82 - SF85.6 Rangelands. Range management. Grazing",8,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH346 - SH351 Fishery for individual species",8,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH388.7 - SH391.5 Algae culture. Seaweed",8,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC601 - TC791 Canals and inland navigation. Waterways",8,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC801 - TC978 Irrigation engineering. Reclamation of wasteland. Drainage",8,
        "T - Technology.|TH1 - TH9745 Building construction|TH7700 - TH7975 Illumination. Lighting",8,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ940 - TJ940.5 Vacuum technology",8,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF638 - BF648 New Thought. Menticulture, etc.",7,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF908 - BF940 The hand. Palmistry",7,
        "B - Philosophy. Psychology. Religion|BF1001 - BF1389 Parapsychology|BF1111 - BF1156 Hypnotism. Suggestion. Mesmerism. Subliminal projection",7,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL175 - BL265 Natural theology|BL224 - BL227 Creation. Theory of the Earth",7,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions",7,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4620 - BQ4905 Buddhist pantheon",7,
        "C - Auxiliary Sciences of History|CJ1 - CJ6661 Numismatics|CJ5501 - CJ6661 Medals and medallions",7,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History|DH571 - DH694 By period",7,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR279 - DR296 Local history and description",7,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History|DR481 - DR605 By period|DR568 - DR575 1861-1909. War with Russia, 1877-1878",7,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS555 - DS555.98 Laos",7,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.5 - DS646.59 Timor",7,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States|DT241 - DT269 Tunisia (Tunis)",7,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT3031 - DT3145 Zambia. Northern Rhodesia",7,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT546.1 - DT546.49 French-speaking Equatorial Africa|DT546.4 - DT546.49 Chad (Tchad)",7,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU350 - DU380 Western Australia",7,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E784 - E805 1919-1933. Harding-Coolidge-Hoover era. The twenties|E791 - E796 Coolidge's administration, August 2, 1923-1929",7,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E838 - E840.8 General|E840.6 - E840.8 Biography (General)",7,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3200 - G3202 World maps",7,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography|GA300 - GA325 World maps, general atlases, etc.",7,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1218.5 - GV1220.8 Toys",7,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training|GV435 - GV436.7 Physical measurements. Physical tests, etc.",7,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1470 - HD1476 Size of farms",7,
        "H - Social sciences|HG1 - HG9999 Finance|HG6105 - HG6270.9 Lotteries",7,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV1442 - HV1448 Women",7,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN1187 - JN1371 Scotland",7,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN7721 - JN7997 Sweden",7,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV6021 - JV6032 History",7,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ1305 - JZ2060 Scope of international relations|JZ1328 - JZ1395 By period",7,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K288 - K296 Interpretation and construction of law. Lacunae in law",7,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3566 - K3578 Public health",7,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR190 - KBR2154.5 Sources",7,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4850 - KZ5490 Intergovernmental organizations. IGOs|KZ4853 - KZ4934 The League of Nations",7,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2366 - LB2367.75 College examinations",7,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2630 - LC2638 Asian Americans. Asians in the United States",7,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC5451 - LC5493 Aged education",7,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC129 - LC139 Compulsory education",7,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1049 - LC1049.8 Cooperative education",7,
        "L - Education|LT6 - LT501 Textbooks",7,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2400 - NA2460 Museums. Exhibitions",7,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2599.5 - NA2599.9 Architectural criticism",7,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1400 - NE1879 Metal engraving",7,
        "N - Fine Arts|NE1 - NE3002 Print media|NE2236 - NE2240.6 Serigraphy",7,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P326 - P326.5 Lexicology",7,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German|PF5000 - PF5951 Dialects. Provincialism, etc.",7,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2830 - PG2847 Belarusian",7,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1001 - PJ1989 Egyptology|PJ1091 - PJ1109 Egyptian writing and its decipherment",7,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK101 - PK185 General",7,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1550 - PK1569 Assamese",7,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6135 - PK6199.9 Middle Iranian languages|PK6141 - PK6199.5 Pahlavi",7,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6701 - PK6821 Afghan (Pashto, Pushto, Pushtu, etc.)",7,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL7001 - PL7101 Australian languages",7,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN905 - PN1008 Folk literature|PN980 - PN995 Fables",7,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature|PT605 - PT709 Drama",7,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5400 - PT5547 Collections",7,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7001 - PT7099 Scandinavian literature|PT7001 - PT7099 General|PT7001 - PT7087 Literary history and criticism",7,
        "Q - Science|QL1 - QL991 Zoology|QL799 - QL799.5 Morphology",7,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC970 - RC986 Military medicine. Naval medicine",7,
        "R - Medicine|RD1 - RD811 Surgery|RD701 - RD811 Orthopedic surgery|RD792 - RD811 Physical rehabilitation",7,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ245 - RJ247 Nursing of children. Pediatric nursing",7,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ250 - RJ250.3 Premature infants",7,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ50 - RJ51 Examination. Diagnosis",7,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM260 - RM263 Chemotherapy",7,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM283 - RM298 Endocrinotherapy. Organotherapy",7,
        "R - Medicine|RZ201 - RZ999 Other systems of medicine|RZ400 - RZ408 Mental healing",7,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD390 - SD390.43 Forest soils",7,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE175 - TE176.5 Highway design. Interchanges and intersections",7,
        "T - Technology.|TS1 - TS2301 Manufactures|TS800 - TS937 Wood technology. Lumber|TS920 - TS937 Chemical processing of wood",7,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG637 - UG639 Education and training",7,
        "V - Naval science|V1 - V995 Naval science (General)|V160 - V165 Strategy",7,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z49 - Z51 Typewriters. Typewriting. Keyboards. Keyboarding",7,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B790 - B5802 Modern|B5800 - B5802 By religion",6,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF207 - BF209 Psychotropic drugs and other substances",6,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1153.69 - BL1168 By region or country",6,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6195 - BX6197 Arminians. Remonstrants",6,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7801 - BX7843 German Baptist Brethren. Church of the Brethren. Dunkards",6,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology|CC83 - CC97 Study and teaching. Research",6,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ95 - DJ292 History|DJ151 - DJ292 By period|DJ215 - DJ292 19th-20th centuries",6,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK26 - DJK28 Ethnography",6,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK911 - DK919.5 Kyrgyzstan. Kirghiz S.S.R. Kirghizia",6,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History|DK4348.5 - DK4395 1795-1918. 19th century (General)",6,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period|DR267 - DR267.5 1944-1989",6,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History|DR481 - DR605 By period|DR556 - DR567 1789-1861. 19th century",6,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS491 - DS492.9 Bhutan",6,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS591 - DS599 Malaysia. Malay Peninsula. Straits Settlements|DS597.36 - DS597.39 Sarawak",6,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT160 - DT177 North Africa|DT167 - DT176 History",6,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT367 - DT367.8 Northeast Africa",6,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5429.7 - HF5430.6 Shopping centers. Shopping malls",6,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ2042 - HQ2044 Life style",6,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT161 - HT165 Garden cities. The 'city beautiful'",6,
        "J - Political Science|JA1 - JA92 Political science (General)|JA60 - JA64 Dictionaries and encyclopedias",6,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ3675 - JZ3875 State territory and its different parts",6,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ4835 - JZ5490 International organizations and associations|JZ4850 - JZ5490 Intergovernmental organizations. IGOs|JZ4853 - JZ4934 The League of Nations",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K280 - K286 Sources of law",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3289 - K3367 Organs of government|K3332 - K3363 Heads of state and the central government",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3615 - K3622 Veterinary laws. Veterinary medicine and hygiene. Prevention of cruelty to animals",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3740 - K3762 Education",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM1 - KBM523.72 Halakah",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KUQ1 - KUQ4990 New Zealand",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ118 - KZ194 Treaties and other international agreements",6,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB1805 - LB2151 State teachers colleges|LB1811 - LB1987 United States",6,
        "L - Education|LF14 - LF5627 Individual institutions|LF2402 - LF3197 Germany",6,
        "L - Education|LF14 - LF5627 Individual institutions|LF3248 - LF3897 Italy",6,
        "L - Education|LF14 - LF5627 Individual institutions|LF4610 - LF4827 Spain",6,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa",6,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML1299 - ML1354 Band",6,
        "M - Music|MT1 - MT960 Musical instruction and study|MT820 - MT915 Singing and vocal technique|MT825 - MT850 Systems and methods",6,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1293 - NB1895 Special forms|NB1293 - NB1310 Portrait sculpture",6,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1400 - ND1403 Flowers. Fruit. Trees",6,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1630 - ND1662 Examination and conservation of paintings",6,
        "N - Fine Arts|ND25 - ND3416 Painting|ND25 - ND48 General",6,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3375 - NK3496.3 Wallpapers",6,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature|PA6141 - PA6144 Criticism, interpretation, etc.",6,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic",6,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ601 - PJ989 Special groups",6,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ601 - PJ989 Special groups|PJ701 - PJ989 Islamic",6,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2591 - PK2610 Pahari",6,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2801 - PK2891 Sinhalese (Singhalese)",6,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK3591 - PK4485 Sanskrit|PK4471 - PK4485 Translations",6,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK4501 - PK4681 Pali literature",6,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL700 - PL889 Japanese literature|PL885 - PL889 Local literature",6,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM8001 - PM8995 Artificial languages|PM8201 - PM8298 Esperanto",6,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN801 - PN820 Romance literature",6,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6121 - PN6129 Orations",6,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6259 - PN6268 Anecdotes. Table talk",6,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1300 - PQ1595 Old French literature (To ca. 1500/1550)|PQ1300 - PQ1391 Collections",6,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6058 - PQ6060 Early to 1500",6,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism|PQ9000 - PQ9034 General",6,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9131 - PQ9188 Collections",6,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1375 - PT1479 Middle High German",6,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7001 - PT7099 Scandinavian literature|PT7001 - PT7099 General|PT7090 - PT7099 Collections",6,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT7601 - PT7869 Literary history and criticism",6,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT7945 - PT8046 Collections",6,
        "Q - Science|QA1 - QA939 Mathematics|QA47 - QA59 Tables",6,
        "Q - Science|QV1 - QV835 Pharmacology",6,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA619 - RA637 Disposal of the dead. Undertaking. Burial. Cremation. Cemeteries",6,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC924 - RC924.5 Diseases of the connective tissues",6,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB992 - SB998 Economic zoology applied to crops. Agricultural zoology (including animals injurious and beneficial to plants)",6,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD250 - SD363.3 Forestry education",6,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF411 - SF459 Pets|SF451 - SF455 Rabbits and hares",6,
        "S - Agriculture|SK1 - SK663 Hunting|SK295 - SK305 Big game",6,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T60 - T60.8 Work measurement. Methods engineering",6,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ1350 - TJ1418 Hoisting and conveying machinery",6,
        "T - Technology.|TS1 - TS2301 Manufactures|TS940 - TS1047 Leather industries. Tanning",6,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA940 - UA945 Military communication",6,
        "U - Military science (General)|UD1 - UD495 Infantry|UD330 - UD335 Firing. Military sharpshooting",6,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG590 - UG613.5 Military telegraphy and telephony",6,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG615 - UG620 Military motor vehicles",6,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK1250 - VK1299 Shipwrecks and fires",6,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing|Z235 - Z236 Printer's marks, mottoes, etc.",6,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z52 - Z52.5 Word processing",6,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z53 - Z102 Shorthand. Stenography. Phonography",6,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1243.72 - BL1243.78 Monasteries. Temples, etc.",5,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL2195 - BL2228 Japan|BL2216 - BL2227.8 Shinto",5,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT95 - BT97.2 Divine law. Moral government",5,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX800 - BX4795 Catholic Church|BX4600 - BX4644 Churches, cathedrals, abbeys (as parish churches), etc.",5,
        "C - Auxiliary Sciences of History|CE1 - CE97 Technical Chronology. Calendar|CE51 - CE85 Medieval and modern",5,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR1179 - CR3395 Family heraldry",5,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR3499 - CR4420 Titles of honor, rank, precedence, etc",5,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D299 - D472 -1789|D301 - D309 Period of the French Revolution",5,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History|DK4397 - DK4420 1918-1945",5,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal|DP702 - DP802 Local history and description",5,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ30 - DQ49.5 Antiquities. Social life and customs. Ethnography",5,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period|DR268 - DR269.6 -1989",5,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR927 - DR978.52 History|DR954 - DR978.52 By period|DR961 - DR969 1501-1912. Turkish rule",5,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS600 - DS605 Malay Archipelago",5,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT2421 - DT2525 Botswana. Bechuanaland",5,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT3291 - DT3415 Mozambique",5,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT547 - DT547.9 Niger",5,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT551 - DT551.9 Mali. Mali Federation. Sudanese Republic. French Sudan",5,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT591 - DT615.9 Portuguese-speaking West Africa|DT613 - DT613.9 Guinea-Bissau. Portuguese Guinea",5,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E386 - E390 Van Buren's administration, 1837-1841",5,
        "E - History: America|E151 - E889 United States|E660 - E738 Late nineteenth century, 1865-1900|E660 - E664 General|E663 - E664 Biography",5,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1780 - G2799 Eastern Hemisphere. Eurasia, Africa, etc.|G2110 - G2196 Former Soviet republics. Union of Soviet Socialist Republics. Russia (Empire)",5,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography|GA110 - GA115 Projection",5,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology|GB461 - GB468.99 Reefs",5,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC100 - GC103 Seawater",5,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV181.35 - GV181.6 Recreation leadership. Administration of recreation services",5,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV200.6 - GV200.66 Caving. Spelunking",5,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV743 - GV749 Athletic and sporting goods, supplies, etc.",5,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV750 - GV770.27 Air sports: Airplane flying, kiteflying, bungee-jumping, etc.",5,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5482 - HF5482.4 Secondhand trade",5,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ809 - HQ809.3 Family violence",5,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN5001 - JN5191 Greece",5,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN8701 - JN9599 Switzerland",5,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS1701 - JS1800 Canada",5,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV1 - JV5399 Colonies and colonization|JV412 - JV461 Administration and organization",5,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7120 - K7197 Persons",5,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1319 - KZ1327 International legal regimes",5,
        "L - Education|LF14 - LF5627 Individual institutions|LF14 - LF1257 Great Britain|LF960 - LF1137 Scotland",5,
        "L - Education|LH1 - LH9 College and school magazines and papers",5,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1625 - M1626 Recitations with music",5,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2190 - M2196 Sacred vocal music for children",5,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML475 - ML547 By region or country|ML489 - ML522 Europe",5,
        "M - Music|MT1 - MT960 Musical instruction and study|MT90 - MT146 Analysis and appreciation of musical works|MT140 - MT145 Chamber and solo instrumental music",5,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2335 - NA2360 Competitions",5,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1 - NB50 General",5,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK4700 - NK4890 Costume",5,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC2700 - PC3708 Dialects. Provincialisms|PC2813 - PC2898 Old French",5,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian|PD2401 - PD2446 Modern Icelandic",5,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK1 - PK85 General",5,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1801 - PK1831.95 Bihari",5,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM1 - PM94 Hyperborean languages of Arctic Asia and America",5,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6299 - PN6308 Maxims",5,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ5901 - PQ5999 Regional, provincial, local, etc.",5,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9300 - PQ9326 Individual authors, 2001-",5,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1341 - PR1349 Letters",5,
        "P - Language and literature|PR1 - PR9680 English literature|PR921 - PR928 Essays",5,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8650 - PT8733 Collections",5,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH705 - QH705.5 Economic biology",5,
        "R - Medicine|RD1 - RD811 Surgery|RD151 - RD498 Military and naval surgery",5,
        "R - Medicine|RK1 - RK715 Dentistry|RK60.7 - RK60.8 Preventive dentistry",5,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM671 - RM671.5 Nonprescription drugs. Patent medicines",5,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF361 - SF361.73 Donkeys",5,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF41 - SF55 History",5,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF541 - SF560 Sericulture. Silk culture",5,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH344 - SH344.8 Methods and gear. Catching of fish",5,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP250 - TP261 Industrial electrochemistry",5,
        "U - Military science (General)|UB1 - UB900 Military administration|UB275 - UB277 Psychological warfare. Propaganda",5,
        "V - Naval science|VF1 - VF580 Naval ordnance",5,
        "W - Health Sciences|W1 - W925 Health Professions",5,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z674.2 - Z674.5 Information services. Information centers",5,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z680.3 - Z680.6 Library communication systems",5,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z716 - Z716.1 Library extension. Library commissions. Traveling libraries",5,
        "A - General Works|AN - Newspapers",4,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL425 - BL490 Religious doctrines (General)|BL465 - BL470 Worship of human beings",4,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL2230 - BL2240 Korea",4,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL71.5 - BL73 Biography",4,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9701 - BX9743 Salvation Army",4,
        "C - Auxiliary Sciences of History|CJ1 - CJ6661 Numismatics|CJ4801 - CJ5450 Tokens",4,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR191 - CR1020 Public and official heraldry",4,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR51 - CR79 Crests, monograms, devices, badges, mottoes",4,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC941 - DC947 Monaco",4,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK507 - DK507.95 Belarus. Byelorussian S.S.R.  White Russia",4,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK680 - DK689.5 Armenia (Republic). Armenian S.S.R.",4,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL101 - DL291 Denmark|DL143 - DL263.3 History|DL160 - DL263.3 By period",4,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL443 - DL537 History",4,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-|DP161.5 - DP166 1479-1516. Fernando V and Isabel I",4,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP91 - DP96 Earliest to 711",4,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal|DP535 - DP682.2 History|DP558 - DP682.2 By period|DP558 - DP618 Early and medieval to 1580",4,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period|DR84.9 - DR89.8 1878-1944",4,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR927 - DR978.52 History|DR954 - DR978.52 By period|DR969.8 - DR978.52 20th century",4,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.4 - DS646.49 Celebes. Sulawesi",4,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.6 - DS646.69 Moluccas. Maluku",4,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS901 - DS937 Korea|DS924 - DS925 Local history and description",4,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT391 - DT398 Eritrea",4,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT491 - DT516.9 British West Africa|DT509 - DT509.9 Gambia",4,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT543 - DT543.9 Guinea",4,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT554 - DT554.9 Mauritania",4,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT555 - DT555.9 Burkina Faso. Upper Volta",4,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU300 - DU330 South Australia",4,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E431 - E435 Pierce's administration, 1853-1857",4,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada|F1121 - F1139 Newfoundland and Labrador|F1135 - F1139 Labrador",4,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G2800 - G3064 Oceans (General)",4,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3195 - G3199 Moon",4,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.|G7000 - G7342 Former Soviet republics. Union of Soviet Socialist Republics.  Russia (Empire)",4,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV733 - GV734.5 Professionalism in sports. Professional sports (General)",4,
        "H - Social sciences|HA1 - HA4737 Statistics|HA36 - HA37 Statistical services. Statistical bureaus",4,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE5880 - HE5990 Express service",4,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE9719 - HE9721 Artificial satellite telecommunications",4,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ2321 - HJ2323 Tax incidence. Tax shifting. Tax equity",4,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ2035 - HQ2039 Life skills. Coping skills. Everyday living skills",4,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary|HV8081 - HV8099 Private detectives. Detective bureaus",4,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC345 - JC347 Symbolism",4,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF201 - JF619 Organs and functions of government|JF331 - JF341 Parliamentary government",4,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN7401 - JN7695 Norway",4,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1 - JQ1849 Asia|JQ1070 - JQ1199 Central Asia. Including former republics of the Soviet Union",4,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5511.2 - JZ6299 Promotion of peace. Peaceful change|JZ5514 - JZ5526 Societies. Associations, etc.",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K300 - K304 Classification of law. Typology",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1112 - K1116 Investments",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1241 - K1287 Insurance",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3289 - K3367 Organs of government|K3290 - K3304 The people. Election law",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3400 - K3431 Administrative law|K3402 - K3417 The administrative process",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3661 - K3674 Public safety",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3921 - K3925 Manufacturing industries",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4720 - K4780 National defense. Military law",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4720 - K4780 National defense. Military law|K4740 - K4760 Military criminal law and procedure",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K600 - K615 Private law",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K805 - K821 Succession upon death",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7120 - K7197 Persons|K7125 - K7140 Natural persons",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM639 - KBM1424 Dinei mamonot",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KH1 - KH999 South America (General)",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1284 - KZ1285.5 Methodology",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli|KZ6427 - KZ6437 Warfare on land",4,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3503 - LC3520 Romanies. Gypsies",4,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE3 - LE5 Canada",4,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG60 - LG170.2 India. Pakistan. Bangladesh. Burma. Sri Lanka. Nepal",4,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2147 - M2188 Liturgy and ritual|M2161 - M2183 Protestant churches",4,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML3400 - ML3465 Dance music",4,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML999 - ML1015 Plucked instruments",4,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT640 - MT654 Lute, balalaika, etc.",4,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1293 - NB1895 Special forms|NB1330 - NB1685 Sculptural monuments",4,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1400 - NE1879 Metal engraving|NE1850 - NE1879 Color prints",4,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature|PA3520 - PA3564 Criticism, interpretation, etc.",4,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB2001 - PB3029 Brittanic group|PB2801 - PB2932 Breton. Armorican",4,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian|PD2201 - PD2393 Old Norse. Old Icelandic and Old Norwegian",4,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian|PD3001 - PD3929 Danish",4,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF1401 - PF1541 Friesian",4,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism|PG3071 - PG3089 Drama",4,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2351 - PK2418 Marathi",4,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6001 - PK6099 General",4,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3501 - PL3509 Non-Aryan languages of India and Southeastern Asia in general",4,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages|PL4301 - PL4470 Mon-Khmer (Mon-Anam) languages|PL4423 - PL4470 Bru, Chrau, Khasi, Muong, etc.",4,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN3175 - PN3191 College and school theatricals",4,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN611 - PN649 Ancient",4,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN821 - PN840 Germanic literature",4,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6233 - PN6238 Anacreontic literature",4,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR481 - PR488 21st century",4,
        "P - Language and literature|PR1 - PR9680 English literature|PR911 - PR918 Letters",4,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism|PT5001 - PT5112 General",4,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7450 - PT7495 Collections",4,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9201 - PT9499 Literary history and criticism|PT9460 - PT9499 Prose",4,
        "Q - Science|QK1 - QK989 Botany|QK474.8 - QK495 Spermatophyta. Phanerogams|QK494 - QK494.5 Gymnosperms",4,
        "Q - Science|QV1 - QV835 Pharmacology|QV701 - QV835 Pharmacy and Pharmaceutics",4,
        "Q - Science|QV1 - QV835 Pharmacology|QV701 - QV835 Pharmacy and Pharmaceutics|QV738 - QV772 Drug Standardization. Pharmacognosy. Medicinal Plants",4,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA771 - RA771.7 Rural health and hygiene. Rural health services",4,
        "R - Medicine|RD1 - RD811 Surgery|RD98 - RD98.4 Surgical complications",4,
        "R - Medicine|RL1 - RL803 Dermatology|RL110 - RL120 Therapeutics",4,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM146 - RM146.7 Misues of therapeutic drugs. Medication Errors",4,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS200 - RS201 Pharmaceutical dosage forms",4,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB170 - SB172.5 Tree crops",4,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF780.2 - SF780.7 Veterinary microbiology, bacteriology, virology, mycology",4,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF84 - SF84.64 Economic zoology",4,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH20.3 - SH191 Aquaculture|SH33 - SH134.6 By region or country",4,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH213 - SH216.55 By oceans and seas",4,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH327.5 - SH327.7 Fishery resources. Fishery conservation",4,
        "S - Agriculture|SK1 - SK663 Hunting|SK281 - SK293 Special methods and types of hunting (including bolos, game calling, tracking, trapping, dressing)",4,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC183 - TC201 General preliminary operations. Dredging. Submarine building",4,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE200 - TE205 Materials for roadmaking",4,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF670 - TF851 Local and light railways|TF840 - TF851 Elevated railways and subways",4,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK301 - TK399 Electric meters",4,
        "T - Technology.|TR1 - TR1050 Photography|TR504 - TR508 Transparencies, Diapositives",4,
        "U - Military science (General)|UB1 - UB900 Military administration|UB370 - UB375 Military pensions, etc.",4,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC20 - UC258 Organization of the service. By region or country",4,
        "U - Military science (General)|UD1 - UD495 Infantry|UD157 - UD302 Tactics. Maneuvers. Drill regulations",4,
        "U - Military science (General)|UE1 - UE500 Cavalry. Armor. Including horse cavalry, armored cavalry, mechanized cavalry|UE157 - UE302 Tactics. Maneuvers. Drill regulations",4,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG640 - UG645 Military aeronautical research",4,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG730 - UG735 Air defenses",4,
        "U - Military science (General)|UH20 - UH910 Other services|UH20 - UH25 Chaplains",4,
        "V - Naval science|V1 - V995 Naval science (General)|V210 - V214.5 Submarine warfare",4,
        "V - Naval science|VB15 - VB345 Naval administration|VB320 - VB325 Minorities, women, etc. in navies",4,
        "W - Health Sciences|W1 - W925 Health Professions|W32 - W64 Law. Ethics. Professional-Patient Relations",4,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z681 - Z681.3 Reproduction of library materials. Storage media of library materials",4,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z691 - Z692 Special classes of materials. Including manuscripts, maps, microforms, serials",4,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z703.5 - Z703.6 Moving. Disposition of books on shelves, etc. Including discarding, weeding",4,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA3201 - ZA3250 Information superhighway",4,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1783 - BF1815 Seers. Prophets. Prophecies",3,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL630 - BL632 Religious organization",3,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP176 - BP181 The five duties of a Moslem.  Pillars of Islam",3,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP186 - BP186.97 Special days and seasons, fasts, feasts, festivals, etc.",3,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP87 - BP89 Islamic literature",3,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ4965 - BQ5030 Ceremonies and rites. Ceremonial rules",3,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ5140 - BQ5355 Buddhist ministry. Priesthood. Organization",3,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9884 - BX9886 United Church of Christ",3,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9901 - BX9969 Universalism. Universalists",3,
        "C - Auxiliary Sciences of History|CN1 - CN1355 Inscriptions. Epigraphy|CN870 - CN1355 By region or country",3,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History|DH571 - DH694 By period|DH677 - DH694 20th century",3,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ401 - DJ411 Local history and description",3,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK61 - DJK77 Local history and description|DJK61 - DJK66 Black Sea region",3,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK509.1 - DK509.95 Moldova. Moldovian S.S.R.  Bessarabia",3,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History|DL1050 - DL1141.6 By period|DL1055 - DL1141.6 Modern, 1523-|DL1090 - DL1105 1939-1945",3,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History|DL1050 - DL1141.6 By period|DL1055 - DL1141.6 Modern, 1523-|DL1090 - DL1105 1939-1945|DL1095 - DL1105 Russo-Finnish War, 1939-1940",3,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL101 - DL291 Denmark|DL143 - DL263.3 History|DL160 - DL263.3 By period|DL184 - DL263.3 Modern, 1523-",3,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History|DQ78 - DQ210 By period",3,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History|DQ78 - DQ210 By period|DQ201 - DQ210 20th century",3,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR50 - DR50.84 Thrace",3,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period|DR89.9 - DR93.34 1944-1990",3,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period|DR93.4 - DR93.47 -1990",3,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS498 - DS498.8 Goa. Portuguese in India",3,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS591 - DS599 Malaysia. Malay Peninsula. Straits Settlements|DS597.33 - DS597.34 Sabah. British North Borneo",3,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS650 - DS650.99 Brunei",3,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT541 - DT541.9 Benin. Dahomey",3,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT546.1 - DT546.49 French-speaking Equatorial Africa|DT546.1 - DT546.19 Gabon (Gaboon, Gabun)",3,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT546.1 - DT546.49 French-speaking Equatorial Africa|DT546.2 - DT546.29 Congo (Brazaville). Middle Congo",3,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT619 - DT620.9 Spanish West Africa",3,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT619 - DT620.9 Spanish West Africa|DT620 - DT620.9 Equatorial Guinea (Spanish Guinea)",3,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT7 - DT12.25 Description and travel",3,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU392 - DU398 Northern Territory of Australia",3,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E337.8 - E340 General|E339 - E340 Biography",3,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E371 - E375 Monroe's administrations, 1817-1825",3,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E396 - E400 Tyler's administration, April 4, 1841-1845",3,
        "F - America: local history|F1 - F975 United States local history|F296 - F301 Gulf States. West Florida",3,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G3290 - G5668 America. Western Hemisphere|G5200 - G5668 South America",3,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN49 - GN298 Physical anthropology. Somatology|GN51 - GN59 Anthropometry",3,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR620 - GR640 Cosmic phenomena",3,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR650 - GR690 Geographical topics",3,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR890 - GR910 Occupations",3,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR940 - GR941 Mythical places",3,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV182 - GV182.5 Recreational areas and facilities. Recreation centers",3,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1483 - HD1486 Agricultural associations, societies, etc.",3,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE5751 - HE5870 Ferries",3,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5484 - HF5495 Warehouses. Storage",3,
        "H - Social sciences|HG1 - HG9999 Finance|HG4301 - HG4480.9 Trust services. Trust companies",3,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT751 - HT815 Serfdom",3,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK1606 - JK1685 Government property, etc.",3,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration|JL1400 - JL1679 Central America",3,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN1601 - JN2191 Austria-Hungary. Austria. Hungary",3,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN2210 - JN2229 Czech Republic. Czechoslovakia",3,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6750 - JN6769 Poland",3,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN7011 - JN7066 Scandinavia. Northern Europe",3,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS2101 - JS2143 Mexico",3,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS8001 - JS8490 Australia. New Zealand. Pacific Ocean islands",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K190 - K195 Ethnological jurisprudence. Primitive law",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1370 - K1395 Insolvency and bankruptcy. Creditors' rights",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1700 - K1973 Social legislation|K1960 - K1973 Public welfare. Public assistance",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3400 - K3431 Administrative law|K3420 - K3431 Administrative organization",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3926 - K3935 Food processing industries",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K795 - K798 Trusts and trustees",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB400 - KB4855 Interdisciplinary discussion of subjects",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU2210 - KBU2212 The codes of canon law",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLN1 - KLN489 Russian S.F.S.R. (to 1991)",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KWX - Antarctica",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli|KZ6540 - KZ6660 Warfare on sea",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli|KZ6665 - KZ6714 Air warfare",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD3489 - KZD4406 Peaceful uses of outer space",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD3489 - KZD4406 Peaceful uses of outer space|KZD3489.5 - KZD3608 Space resources",3,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB1805 - LB2151 State teachers colleges|LB1991 - LB2151 Other regions or countries",3,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2335.86 - LB2335.88 Trade unions",3,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB3497 - LB3499 Hygiene in universities and colleges",3,
        "L - Education|LF14 - LF5627 Individual institutions|LF1341 - LF1537 Austria",3,
        "L - Education|LF14 - LF5627 Individual institutions|LF1711 - LF2397 France",3,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML475 - ML547 By region or country|ML525 - ML541 Asia",3,
        "M - Music|ML1 - ML3930 Literature on music|ML25 - ML28 Societies and organizations",3,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT733 - MT733.6 Band",3,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1290 - ND1293 Human figure",3,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1370 - ND1375 Marine painting",3,
        "N - Fine Arts|NE1 - NE3002 Print media|NE2800 - NE2880 Printing of engravings",3,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK2975 - NK3049 Tapestries",3,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3175 - NK3296.3 Upholstery. Drapery",3,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX420 - NX430 Exhibitions",3,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1001 - PD1350 Old Germanic dialects",3,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1001 - PD1350 Old Germanic dialects|PD1101 - PD1211 Gothic",3,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German|PF4043 - PF4350 Middle High German",3,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3475 - PG3476 1917-1960",3,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH1 - PH87 General",3,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH701 - PH735 Sami",3,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ2001 - PJ2199 Coptic",3,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ2401 - PJ2594 Cushitic languages",3,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4001 - PJ4091 Sumerian",3,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2781 - PK2790 Sindhi",3,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2896 - PK2899 Romani",3,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK4990 - PK5046 Prakrit literature",3,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6101 - PK6119 Avestan",3,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1560 - PN1590 The performing arts. Show business|PN1585 - PN1589 Centers for the performing arts",3,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2131 - PN2193 By period|PN2152 - PN2160 Medieval",3,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN20 - PN30 Societies",3,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism|PQ9035 - PQ9055 Special periods",3,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism|PQ9061 - PQ9081 Poetry",3,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism|PT5300 - PT5348 Prose",3,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6500 - PT6592.36 Afrikaans literature|PT6550 - PT6575 Collections",3,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8301 - PT8574 Literary history and criticism",3,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9201 - PT9499 Literary history and criticism|PT9320 - PT9370 Special periods",3,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9547 - PT9639 Collections|PT9580 - PT9599 Poetry",3,
        "Q - Science|QB1 - QB991 Astronomy|QB455 - QB456 Astrogelogy",3,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC501 - QC718.8 Electricity|QC676 - QC678.6 Radio waves (Theory)",3,
        "Q - Science|QC1 - QC999 Physics|QC851 - QC999 Meteorology. Climatology (including the earth's atmosphere)|QC974.5 - QC976 Meteorological optics",3,
        "Q - Science|QD1 - QD999 Chemistry|QD450 - QD801 Physical and theoretical chemistry|QD625 - QD655 Radiation chemistry",3,
        "Q - Science|QT1 - QT275 Physiology",3,
        "Q - Science|QU1 - QU500 Biochemistry",3,
        "Q - Science|QZ1 - QZ380 Pathology",3,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC91 - RC103 Diseases due to physical and chemical agents",3,
        "R - Medicine|RD1 - RD811 Surgery|RD75 - RD79 Examinations. Diagnosis",3,
        "R - Medicine|RD1 - RD811 Surgery|RD99 - RD99.35 Surgical nursing",3,
        "R - Medicine|RV1 - RV431 Botanic, Thomsonian, and eclectic medicine",3,
        "R - Medicine|RZ201 - RZ999 Other systems of medicine|RZ201 - RZ275 Chiropractic",3,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB354 - SB402 Fruit culture and orchard care|SB381 - SB386 Berries and Small Fruits",3,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF408 - SF408.6 Zoo animals",3,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP700 - TP746 Illuminating industries (Nonelectric)",3,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT300 - TT382.8 Painting. Wood finishing",3,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT950 - TT979 Hairdressing. Beauty culture. Barbers' work",3,
        "U - Military science (General)|U1 - U900 Military science (General)|U250 - U255 Maneuvers (combined arms)",3,
        "U - Military science (General)|UD1 - UD495 Infantry|UD480 - UD485 Airborne troops. Parachute troops",3,
        "U - Military science (General)|UH20 - UH910 Other services|UH520 - UH551 Care of sick and wounded. Relief societies",3,
        "V - Naval science|V1 - V995 Naval science (General)|V167 - V178 Tactics",3,
        "V - Naval science|V1 - V995 Naval science (General)|V390 - V395 Naval research",3,
        "V - Naval science|VC10 - VC580 Naval maintenance",3,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK321 - VK369.8 Harbors. Ports",3,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK401 - VK529 Study and teaching",3,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA5050 - ZA5185 Information from specific providers",3,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA5050 - ZA5185 Information from specific providers|ZA5050 - ZA5185 Government information",3,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF889 - BF905 Graphology. Study of handwriting",2,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1300 - BL1380 Jainism|BL1310 - BL1314.2 Sacred books. Sources",2,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7301 - BX7343 Disciples of Christ. Campbellites",2,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX800 - BX4795 Catholic Church|BX4716.4 - BX4795 Dissenting sects other than Protestant",2,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology|CC200 - CC260 Bells. Campanology. Cowbells",2,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology|CC300 - CC350 Crosses",2,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD84 - DD257.4 History|DD121 - DD257.4 By period|DD121 - DD124 Earliest to 481",2,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History|DH571 - DH694 By period|DH585 - DH619 1555-1794. Spanish and Austrian rule",2,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History|DH571 - DH694 By period|DH620 - DH676 1794-1909",2,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History|DK4445 - DK4452 -1989",2,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden|DL643 - DL879 History|DL660 - DL879 By period|DL660 - DL700.9 Early and medieval to 1523. Union of Kalmar, 1397",2,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-|DP192 - DP200.8 1700-1808. Bourbons",2,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ1 - DQ20 General",2,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period|DR250 - DR266.5 1866/1881-1944",2,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR95 - DR98 Local history and description",2,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT1991 - DT2054 Cape Province. Cape of Good Hope",2,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT2181 - DT2278 KwaZulu-Natal. Natal",2,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT179.2 - DT179.9 Northwest Africa",2,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT450.5 - DT450.95 Burundi",2,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT546.1 - DT546.49 French-speaking Equatorial Africa|DT546.3 - DT546.39 Central African Republic. Central African Empire. Ubangi-Shari",2,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT582 - DT582.9 Togo. Togoland",2,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E391 - E393 William H. Harrison's administration, March 4-April 4, 1841",2,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E421 - E423 Taylor's administiration, 1849-July 9, 1850",2,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E761 - E765 Tafts' administration, 1909-1913",2,
        "F - America: local history|F1 - F975 United States local history|F476 - F485 Old Northwest. Northwest Territory",2,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1780 - G2799 Eastern Hemisphere. Eurasia, Africa, etc.|G2740 - G2799 Australasia",2,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G3100 - G3102 Antarctica",2,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3260 - G3272 Polar regions",2,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.|G8200 - G8904 Africa",2,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC200 - GC376 Dynamics of the ocean|GC297 - GC299 Water masses and ocean mixing",2,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV200.4 - GV200.5 Orienteering. Wilderness survival",2,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1428 - HD1431 International cooperation",2,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD2321 - HD4730.9 Industry|HD2331 - HD2336 Home labor. Home-based businesses",2,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5520 - HF5541 Office equipment and supplies",2,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1685 - HG1704 Drafts. Checks",2,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8053.5 - HG8054.45 Insurance for professions. Malpractice",2,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8111 - HG8123 Government policy. State supervision",2,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ2326 - HJ2327 Progressive taxation",2,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ2336 - HJ2337 Tax exemption",2,
        "H - Social sciences|HN1 - HN995 Social history and conditions. Social problems. Social reform|HN41 - HN46 Community centers. Social centers",2,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1501 - HS2460.7 Other societies. By classes|HS1601 - HS2265 Race socieities",2,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV551.2 - HV639 Emergency management|HV553 - HV639 Relief in case of disasters|HV560 - HV583 Red Cross. Red Crescent",2,
        "J - Political Science|JJ1000 - JJ1019 Political institutions and public administration",2,
        "J - Political Science|JJ1000 - JJ1019 Political institutions and public administration|JJ1000 - JJ1019 North America",2,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6101 - JN6371 Belgium",2,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6630 - JN6639 Ukraine",2,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS2300 - JS2778 South America",2,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ24 - JZ38 Societies. Associations, etc.",2,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5511.2 - JZ6299 Promotion of peace. Peaceful change|JZ5527 - JZ5532 Congresses and conferences",2,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ63 - JZ1153 Sources",2,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ6422 - JZ6422.5 Neutrality",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1150 - K1231 Maritime law|K1195 - K1223 Maritime social legislation",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3289 - K3367 Organs of government|K3310 - K3329 The legislature",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K4360 - K4375 Professions and occupations",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7260 - K7338 Obligations",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7260 - K7338 Obligations|K7265 - K7305 Contracts",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7550 - K7582 Intellectual property",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7611 - K7688 Civil procedure. International civil procedure",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB162 - KB250 Legal systems compared",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM2070 - KBM2614 Constitutional law. Constitutional principles of the Jewish community",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM3098 - KBM3122 Medical legislation",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR2310 - KBR3026 Constitution of the Church",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU2310 - KBU3026 Constitution of the Church",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU3040 - KBU3070 The teaching office of the Church. Magisterium. De ecclesiae munere docendi",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU3500 - KBU3774 Sanctions in the Church. Criminal law. De sanctionibus in Ecclesia. De lege poenali",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU4112 - KBU4820 Local Church government",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL147 - KL177 Ancient legal systems compared",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL2800 - KL3099 Egypt",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLW1 - KLW490 Uzbekistan",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KQ - Africa",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KQ - Africa|KQ2010 - KQ9000 Law of indigenous peoples",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KV - Pacific area",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1287 - KZ1296 Codification of the law of nations",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ118 - KZ194 Treaties and other international agreements|KZ119 - KZ165 To 1920",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli|KZ6730 - KZ6785 The end of war. Armistice. Surrender. Postliminy",2,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2667 - LC2698 Latin Americans. Hispanic Americans|LC2690 - LC2698 Puerto Ricans. Puerto Ricans in the United States",2,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3551 - LC3593 Jews",2,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC6571 - LC6581 Radio and television extension courses. Instruction by radio and television",2,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC215 - LC238.4 Community and the school|LC230 - LC235 Parent-teacher associations. Home and school associations",2,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC241 - LC245 Foundations, endowments, funds",2,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC68 - LC70 Demographic aspects of education",2,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America",2,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE7 - LE9 Mexico",2,
        "L - Education|LF14 - LF5627 Individual institutions|LF3211 - LF3247 Greece",2,
        "L - Education|LF14 - LF5627 Individual institutions|LF3911 - LF4067 Belgium",2,
        "L - Education|LF14 - LF5627 Individual institutions|LF4449.2 - LF4449.5 Ukraine",2,
        "L - Education|LF14 - LF5627 Individual institutions|LF4831 - LF4887 Portugal",2,
        "L - Education|LF14 - LF5627 Individual institutions|LF4901 - LF5047 Switzerland",2,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG351 - LG357 Lebanon",2,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG51 - LG53 China",2,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2147 - M2188 Liturgy and ritual|M2186 - M2187 Jewish",2,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M1356 - M1356.2 Dance orchestra and instrumental ensembles",2,
        "M - Music|ML1 - ML3930 Literature on music|ML40 - ML44 Programs",2,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT259 - MT338 String instruments|MT320 - MT334 Double bass",2,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT339 - MT533 Wind instruments|MT360 - MT379 Oboe",2,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT339 - MT533 Wind instruments|MT380 - MT392 Clarinet (A, Bb, C, Eb, etc.)",2,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT600 - MT612 Mandolin",2,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1380 - ND1383 Animals. Birds",2,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1330 - NE1336 Linoleum block prints",2,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1940 - NE2232.5 Etching and aquatint|NE2120 - NE2140 General works",2,
        "N - Fine Arts|NE1 - NE3002 Print media|NE2242 - NE2246 Monotype (Printmaking)",2,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC901 - PC986 Raeto-Romance. Including Romansh",2,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3500 - PG3505 Provincial, local, etc.",2,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG5631 - PG5689 Sorbian (Wendic)",2,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH1101 - PH1109 Udmurt",2,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ2340 - PJ2399 Libyco-Berber languages. Berber languages",2,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ2340 - PJ2399 Libyco-Berber languages. Berber languages|PJ2369 - PJ2399 Berber languages",2,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5301 - PJ5329.5 East Aramaic",2,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5301 - PJ5329.5 East Aramaic|PJ5321 - PJ5329.5 Mandaean",2,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1201 - PK1409.5 Prakrit",2,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures|PK1981 - PK2000 Hindustani language",2,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2701 - PK2708.9 Rajasthani",2,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK201 - PK379 Vedic",2,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1 - PL481 Ural-Altaic languages|PL400 - PL431 Mongolian languages",2,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature|PL8015 - PL8021 Languages. By region or country",2,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature|PL8024 - PL8027 Special families of languages",2,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM101 - PM2711 American languages (Aboriginal)|PM401 - PM501 American languages of the United States (and Mexico)",2,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6080 - PN6095 Quotations|PN6086 - PN6089 French",2,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6080 - PN6095 Quotations|PN6090 - PN6110 German",2,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6288.5 - PN6298 Epitaphs",2,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6309 - PN6318 Mottoes",2,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism|PQ9097 - PQ9119 Prose",2,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT881 - PT951 Folk literature|PT923 - PT937 Faust legend",2,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism|PT5201 - PT5243 Poetry",2,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7101 - PT7211 Literary history and criticism|PT7170 - PT7176 Poetry",2,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7298 - PT7309 Religious works",2,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7326 - PT7338 Individual authors or works before 1540",2,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT7900 - PT7930 Folk literature",2,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9547 - PT9639 Collections|PT9626 - PT9639 Prose",2,
        "Q - Science|QT1 - QT275 Physiology|QT34 - QT37.5 Physics. Mathematics. Engineering",2,
        "Q - Science|QU1 - QU500 Biochemistry|QU55 - QU70 Proteins. Amino Acids. Peptides",2,
        "Q - Science|QV1 - QV835 Pharmacology|QV1 - QV55 Reference Works. General Works",2,
        "Q - Science|QZ1 - QZ380 Pathology|QZ200 - QZ380 Neoplasms. Cysts",2,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA604 - RA618 Parks, public baths, public carriers, buildings, etc.",2,
        "R - Medicine|RE1 - RE994 Opthamology|RE991 - RE991 Ocular therapeutics",2,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ242 - RJ243 Hospital care",2,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ52 - RJ53 Therapeutics",2,
        "R - Medicine|RL1 - RL803 Dermatology|RL391 - RL489 Atrophies. Hypertrophies",2,
        "R - Medicine|RL1 - RL803 Dermatology|RL760 - RL785 Diseases due to parasites",2,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB406.7 - SB406.83 Plant propagation",2,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB442.8 - SB443.4 Marketing, cut flower industry",2,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases|SB617 - SB618 Poisonous plants",2,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF911 - SF914.4 Veterinary surgery|SF914.3 - SF914.4 Veterinary traumatology. Veterinary emergencies",2,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH343.2 - SH343.3 Fishery oceanography. Fishery meteorology",2,
        "S - Agriculture|SK1 - SK663 Hunting|SK281 - SK293 Special methods and types of hunting (including bolos, game calling, tracking, trapping, dressing)|SK284 - SK287 Fox hunting",2,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF340 - TF499 Railway equipment and supplies",2,
        "T - Technology.|TS1 - TS2301 Manufactures|TS2220 - TS2283 Tobacco industry",2,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT161 - TT170.7 Manual training. School shops",2,
        "T - Technology.|TX1 - TX1110 Home economics.|TX955 - TX985 Building operations and housekeeping",2,
        "U - Military science (General)|UB1 - UB900 Military administration|UB160 - UB165 Records, returns, muster rolls, etc.",2,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC400 - UC440 Barracks. Quarters. Camps",2,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC700 - UC780 Subsistence",2,
        "U - Military science (General)|UE1 - UE500 Cavalry. Armor. Including horse cavalry, armored cavalry, mechanized cavalry|UE460 - UE475 Horses",2,
        "U - Military science (General)|UF1 - UF910 Artillery|UF400 - UF405 Field artillery",2,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG760 - UG765 Aerial reconnaissance",2,
        "V - Naval science|V1 - V995 Naval science (General)|V400 - V695 Naval education",2,
        "V - Naval science|V1 - V995 Naval science (General)|V720 - V743 Naval life, manners and customs, antiquities, etc.",2,
        "V - Naval science|VB15 - VB345 Naval administration|VB21 - VB124 By region or country",2,
        "V - Naval science|VF1 - VF580 Naval ordnance|VF21 - VF124 Naval ordnance",2,
        "V - Naval science|VG20 - VG2029 Minor services of navies|VG50 - VG55 Coast guard and coast signal service",2,
        "V - Naval science|VG20 - VG2029 Minor services of navies|VG90 - VG95 Naval aviation",2,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK381 - VK397 Signaling",2,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK798 - VK997 Sailing directions. Pilot guides",2,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z681.5 - Z681.7 Trustees. Library boards, committees, etc.",2,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA4050 - ZA4750 Information in specific formats or media|ZA4050 - ZA4460 Electronic information resources|ZA4450 - ZA4460 Databases",2,
        "A - General Works|AP1 - AP230 Periodicals|AP101 - AP115 Humorous periodicals",1,
        "A - General Works|AS1 - AS945 Academies and learned societies|AS2.5 - AS4 International associations, congresses, conferences, etc.",1,
        "B - Philosophy. Psychology. Religion|BF1001 - BF1389 Parapsychology|BF1161 - BF1171 Telepathy. Mind reading. Though transference",1,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ1365 - BJ1385 Positivist ethics",1,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL350 - BL385 Classification of religions",1,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1108.19 - BL1108.7 Religious education",1,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1300 - BL1380 Jainism|BL1315 - BL1317 Jain literature",1,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions|BL1600 - BL1605 General",1,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions|BL1615 - BL1616 Sumerian",1,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions|BL1680 - BL1685 Arabian (except Islam)",1,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP170.3 - BP170.5 Missionary work of Islam",1,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP188 - BP190 Islamic religious life|BP188.2 - BP188.3 Devotional literature",1,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ5070 - BQ5075 Altar, liturgical objects, ornaments, memorials, etc.",1,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ5100 - BQ5125 Symbols and symbolism",1,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV1620 - BV1652 Social life, recreation, etc. in the church",1,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6801 - BX6843 Christian Reformed Church",1,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7020 - BX7060 Church of God",1,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8799 - BX8809 Plymouth Brethren. Darbyites",1,
        "C - Auxiliary Sciences of History|CD1 - CD6471 Diplomatics. Archives. Seals|CD1 - CD511 Diplomatics",1,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR4501 - CR6305 Chivalry and knighthood (Orders, decorations, etc.)|CR4571 - CR4595 Duels and dueling",1,
        "C - Auxiliary Sciences of History|CS1 - CS3090 Genealogy|CS23 - CS35 Genealogical lists, etc., covering more than one country or continent",1,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK61 - DJK77 Local history and description|DJK71 - DJK76 Carpathian Mountain region",1,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK931 - DK939.5 Turkmenistan. Turkmen S.S.R.  Turkmenia",1,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History|DL1050 - DL1141.6 By period|DL1055 - DL1141.6 Modern, 1523-|DL1070 - DL1078 Revolution, 1917-1918. Civil War",1,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL101 - DL291 Denmark|DL143 - DL263.3 History|DL160 - DL263.3 By period|DL160 - DL183.9 Early and medieval to 1523",1,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL443 - DL537 History|DL460 - DL537 By period",1,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL443 - DL537 History|DL460 - DL537 By period|DL460 - DL478 Early and medieval to 1387",1,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL576 - DL596 Local history and description",1,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ20.5 - DQ26 Description and travel",1,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History|DQ51 - DQ57 General",1,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period|DR238 - DR240.5 Early and medieval to 1601. Roman period",1,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period|DR73.7 - DR80.8 Early and medieval",1,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period|DR81 - DR84 Turkish rule, 1396-1878",1,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR927 - DR978.52 History|DR954 - DR978.52 By period|DR954 - DR960.5 To 1501",1,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR996 - DR998 Local history and description",1,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.1 - DS646.15 Sumatra",1,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT2291 - DT2378 Transvaal. South African Republic",1,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT2541 - DT2686 Lesotho. Basutoland",1,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT2701 - DT2825 Swaziland",1,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT411 - DT411.9 Djibouti. French Territory of the Afars and Issas. French Somaliland",1,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT56.8 - DT69.5 Antiquities|DT68 - DT68.8 Religious antiquities",1,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU182 - DU198 Tasmania. Van Diemen's Land",1,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E426 - E430 Fillmore's administration, July 9, 1850-1853",1,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1000 - G1000.5 Atlases of the moon, planets, etc.",1,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1059 - G1061 Maritime atlases (General)",1,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1100 - G1779 America. Western Hemisphere|G1445 - G2739 Africa",1,
        "G - Geography. Anthropology. Recreation|G3160 - G3171 Globes",1,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3180 - G3182 Universe. Solar system",1,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.|G8950 - G9084 Australasia",1,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR931 - GR935 Signs and symbols",1,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD2321 - HD4730.9 Industry|HD2337 - HD2339 Sweatshops",1,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD6941 - HD6948 Employers' associations",1,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE9723 - HE9737 Signaling",1,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE9751 - HE9756 Messenger service",1,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5419 - HF5422 Wholesale trade",1,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5482.6 - HF5482.65 Black market",1,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ4919 - HJ4936 Capitation. Poll tax",1,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ1001 - HQ1006 The state and marriage",1,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ1051 - HQ1057 The church and marriage",1,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ961 - HQ967 Free love",1,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ998 - HQ999 Illegitimacy. Unmarried mothers",1,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1501 - HS2460.7 Other societies. By classes|HS1501 - HS1510 Benevolent and friendly societies and mutual assessment fraternities",1,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1501 - HS2460.7 Other societies. By classes|HS1525 - HS1560 Religious socieities",1,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS951 - HS1179 Odd Fellows",1,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT621 - HT635 Orgin of social classes",1,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV4961 - HV4995 Degeneration",1,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary|HV8031 - HV8080 Police duty. Methods of protection|HV8079.5 - HV8079.55 Traffic control. Traffic accident investigation",1,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC109 - JC121 Medieval state",1,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK9663 - JK9993 Confederate States of America",1,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN7390 - JN7399 Finland",1,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS55 - JS67 History",1,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ3675 - JZ3875 State territory and its different parts|JZ3686 - JZ3875 International waters",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K215 - K218 History",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K270 - K274 Acts and events",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K486 - K487 Relation of law to other topics",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1021 - K1022 Commercial agency",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1130 - K1132 Carriage of goods and passengers. Carriers",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1700 - K1973 Social legislation|K1861 - K1929 Social insurance",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4700 - K4705 Government measures in time of war, national emergency, or economic crisis",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K5000 - K5582 Criminal law and procedure|K5575 - K5582 Juvenile criminal law and procedure",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7060 - K7081 Choice of law",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7120 - K7197 Persons|K7155 - K7197 Domestic relations. Family law",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7120 - K7197 Persons|K7155 - K7197 Domestic relations. Family law|K7181 - K7197 Parent and child. Guardian and ward",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7340 - K7512 Commercial law",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7340 - K7512 Commercial law|K7510 - K7512 Insolvency and bankruptcy. Creditors' rights",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7550 - K7582 Intellectual property|K7570 - K7582 Industrial property",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB270 - KB280 Theory, philosophy, and science of religious law",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB400 - KB4855 Interdisciplinary discussion of subjects|KB2101 - KB2862 Constitutions and religion. Constitutional and administrative law",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB400 - KB4855 Interdisciplinary discussion of subjects|KB531 - KB619 Domestic relations. Family law",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB400 - KB4855 Interdisciplinary discussion of subjects|KB810 - KB962.8 Obligations. Contracts and transactions",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM524.12 - KBM524.26 The concept of Jewish law",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM531 - KBM619 Domestic relations. Family law",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR3040 - KBR3070 The teaching office of the church. Magisterium. De ecclesiae munere docendi",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR3077 - KBR3165 Sacraments. Administration of sacraments. De sacramentis et administratione",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR3780 - KBR3983 Judiciary. Ecclesiastical courts and procedure. De processibus",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR4000 - KBR4090 Church and state relationships. De relationibus inter ecclesiam et status. Ius publicum ecclesiae",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU3184 - KBU3256 Other acts of divine worship. De ceteris actibus Cultus Divini",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU3780 - KBU3985 Courts and procedure. De processibus",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU4000 - KBU4097 Church and state relationships. De relationibus inter ecclesiam et status. Ius publicum ecclesiae",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF1 - KF9827 Federal law. Common and collective state law",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL700 - KL2215 Mesopotamia. Assyro",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLH1 - KLH490 Georgia (Republic)",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLV1 - KLV490 Turkmenistan",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1234 - KZ1236 Legal research. Legal bibliography",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ24 - KZ38 Societies, etc.",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security|KZ5615 - KZ5893 Arms control and disarmament regimes|KZ5637 - KZ5645 Conventional arms control",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security|KZ5615 - KZ5893 Arms control and disarmament regimes|KZ5870 - KZ5893 Mutual and balanced reduction of armed forces",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ118 - KZ194 Treaties and other international agreements|KZ170 - KZ173 -1920",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ118 - KZ194 Treaties and other international agreements|KZ184 - KZ194 Peace treaties",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ199 - KZ218 Judicial decisions and arbitral awards. Law reports",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1118 - KZA1122 Treaties and other international agreements",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1430 - KZA1690 Maritime boundaries|KZA1630 - KZA1664 Continental shelf",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD1420 - KZD1455 Boundaries",1,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2799 - LB2799.3 Educational consultants and consulting",1,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB3525 - LB3575 Special days",1,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2580 - LC2582 Student",1,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3530 - LC3540 Lapps",1,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5161 - LC5163 Fundamental education",1,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC5701 - LC5771 Vacation schools. Summer schools",1,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC5900 - LC6101 Correspondence schools",1,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education|LC47 - LC58.7 Private school education|LC58 - LC58.7 Preparatory schools. Preparatory school education",1,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1036 - LC1036.8 Community education",1,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE15 - LE17 West Indies",1,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE21 - LE23 Argentina",1,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE31 - LE33 Brazil",1,
        "L - Education|LF14 - LF5627 Individual institutions|LF14 - LF1257 Great Britain|LF800 - LF957 Ireland",1,
        "L - Education|LF14 - LF5627 Individual institutions|LF1541 - LF1549 Czech Republic",1,
        "L - Education|LF14 - LF5627 Individual institutions|LF4440 - LF4441 Estonia",1,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG341 - LG345 Israel. Palestine",1,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG405 - LG411 South Africa",1,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG421 - LG423 Uganda",1,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG631 - LG632 Morocco",1,
        "L - Education|LG21 - LG961 Individual institutions|LG715 - LG720 Australia",1,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2147 - M2188 Liturgy and ritual|M2156 - M2160.87 Orthodox churches",1,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML465 - ML471 By period",1,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT339 - MT533 Wind instruments|MT400 - MT415 Bassoon",1,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT540 - MT557 Harp",1,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT728 - MT728.3 Chamber music",1,
        "M - Music|MT1 - MT960 Musical instruction and study|MT20 - MT32 Special methods",1,
        "M - Music|MT1 - MT960 Musical instruction and study|MT90 - MT146 Analysis and appreciation of musical works|MT110 - MT115 Oratorios, cantatas, etc.",1,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4150 - NA4160 Classed by form",1,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC1280 - NC1284 Printed ephemera. Imagerie populaire",1,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1000 - NE1027 General",1,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1220 - NE1233 General works",1,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1940 - NE2232.5 Etching and aquatint|NE1940 - NE1975 General",1,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB1101 - PB1200 Goidelic. Gaelic",1,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC2700 - PC3708 Dialects. Provincialisms|PC3420.8 - PC3495 Langue d'oc dialects",1,
        "P - Language and literature|PE1 - PE3729 English language|PE814 - PE896 Early Modern English",1,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German|PF3801 - PF3991 Old High German",1,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German|PF5971 - PF5999 Slang. Argot, etc.",1,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG7900 - PG7925 Lechitic dialects",1,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH1201 - PH1409 Ugric languages",1,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH751 - PH785 Mordvin",1,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4101 - PJ4197 West and North Semitic languages",1,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1001 - PK1095 Pali",1,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1421 - PK1429.5 Apabhrams'a",1,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1471 - PK1490 Middle Indo-Aryan dialects",1,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK3591 - PK4485 Sanskrit|PK3801 - PK4251 Special subjects",1,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6121 - PK6129 Old Persian",1,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3301 - PL3311 Non-Chinese languages of China",1,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages|PL3551 - PL4001 Tibeto-Burman languages|PL3561 - PL3801 Tibeto-Himalayan languages|PL3781 - PL3801 Himalayan languages",1,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL6601 - PL6621 Papuan languages",1,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1341 - PN1347 Folk poetry",1,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2131 - PN2193 By period|PN2131 - PN2145 Ancient",1,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4001 - PN4355 Oratory. Elocution, etc.|PN4071 - PN4095 Study and teaching",1,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.|PN4825 - PN4830 Amateur journalism",1,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6249 - PN6258 Ana",1,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6319 - PN6328 Sayings, bon mots, etc.",1,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6340 - PN6348 Toasts",1,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4064 - PQ4075 Early to 1500",1,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6155 - PQ6167 Folk literature",1,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1321 - PR1329 Oratory",1,
        "P - Language and literature|PR1 - PR9680 English literature|PR901 - PR907.2 Oratory",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism|PT5250 - PT5295 Drama",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5901 - PT5980 Provincial, local, foreign",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6000 - PT6466.36 Flemish literature since 1830|PT6300 - PT6397 Collections",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6500 - PT6592.36 Afrikaans literature|PT6500 - PT6530 Literary history and criticism",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7581 - PT7599 Faroese literature",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT8050 - PT8176.36 Individual authors or works|PT8060 - PT8098 16th-18th centuries",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8301 - PT8574 Literary history and criticism|PT8420 - PT8456 Special periods",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8301 - PT8574 Literary history and criticism|PT8460 - PT8489 Poetry",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8600 - PT8637 Folk literature",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9201 - PT9499 Literary history and criticism|PT9375 - PT9404 Poetry",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9547 - PT9639 Collections|PT9565 - PT9570 Translations",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9547 - PT9639 Collections|PT9605 - PT9625 Drama",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9950 - PT9999 Provincial, local, foreign",1,
        "Q - Science|QT1 - QT275 Physiology|QT180 - QT245 Physiology. Hygiene",1,
        "Q - Science|QU1 - QU500 Biochemistry|QU100 - QU133 Biochemistry of the Human Body",1,
        "Q - Science|QZ1 - QZ380 Pathology|QZ40 - QZ109 Pathogenesis. Etiology",1,
        "R - Medicine|R5 - R920 Medicine (General)|R722 - R722.32 Missionary medicine. Medical missionaries",1,
        "R - Medicine|RE1 - RE994 Opthamology|RE986 - RE988 Artificial eyes and other prostheses",1,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG484 - RG485 Urogynecology and obstetric urology. Urogynecologic surgery",1,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ47.3 - RJ47.4 Genetic aspects",1,
        "R - Medicine|RL1 - RL803 Dermatology|RL701 - RL751 Diseases due to psychosomatic and nerve disorders. Dermatoneuroses",1,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS139 - RS141.9 Pharmacopoeias",1,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS151.2 - RS151.9 Dispensatories",1,
        "R - Medicine|RX1 - RX681 Homeopathy|RX601 - RX675 Materia medica and therapeutics",1,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S589.8 - S589.87 Plant growing media. Potting soils",1,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S71 - S87 History",1,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S770 - S790.3 Agricultural structures. Farm buildings",1,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB444 - SB446.6 Horticultural service industry",1,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD390.5 - SD390.7 Forest meteorology. Forest microclimatology",1,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF101 - SF103.5 Brands and branding, and other means of identifying",1,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF114 - SF121 Exhibitions",1,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF170 - SF180 Working animals",1,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF402 - SF405 Fur-bearing animals",1,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH334.5 - SH334.7 Fishery technology",1,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH400 - SH400.8 Seafood gathering",1,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T59 - T59.2 Standardization",1,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD813 - TD870 Street cleaning. Litter and its removal",1,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE177 - TE178.8 Roadside development. Landscaping",1,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE279.5 - TE298 Pedestrian facilities",1,
        "T - Technology.|TH1 - TH9745 Building construction|TH8001 - TH8581 Decoration and decorative furnishings",1,
        "T - Technology.|TH1 - TH9745 Building construction|TH900 - TH915 Construction equipment in buildings",1,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ1425 - TJ1475 Lifting and pressing machinery",1,
        "T - Technology.|TS1 - TS2301 Manufactures|TS2120 - TS2159 Cereals and grain. Milling industry",1,
        "U - Military science (General)|U1 - U900 Military science (General)|U320 - U325 Physical training of soldiers",1,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA910 - UA915 Mobilization",1,
        "U - Military science (General)|UB1 - UB900 Military administration|UB180 - UB197 Civilian personnel departments",1,
        "U - Military science (General)|UB1 - UB900 Military administration|UB440 - UB449.5 Retired military personnel",1,
        "U - Military science (General)|UF1 - UF910 Artillery|UF157 - UF302 Tactics. Maneuvers. Drill regulations",1,
        "U - Military science (General)|UF1 - UF910 Artillery|UF460 - UF465 Siege artillery",1,
        "U - Military science (General)|UF1 - UF910 Artillery|UF540 - UF545 Arsenals, magazines, armories, etc.",1,
        "U - Military science (General)|UF1 - UF910 Artillery|UF820 - UF830 Ballistics. Velocities and motions of projectiles",1,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG360 - UG390 Field engineering",1,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG470 - UG474 Military surveying, topography, and mapping",1,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG570 - UG582 Military signaling",1,
        "V - Naval science|VB15 - VB345 Naval administration|VB310 - VB315 Officers",1,
        "V - Naval science|VC10 - VC580 Naval maintenance|VC260 - VC268 Supplies and stores",1,
        "V - Naval science|VC10 - VC580 Naval maintenance|VC350 - VC410 Subsistence. Provisioning",1,
        "V - Naval science|VD7 - VD430 Naval seamen",1,
        "V - Naval science|VD7 - VD430 Naval seamen|VD21 - VD124 By region or country",1,
        "V - Naval science|VE7 - VE500 Marines|VE430 - VE435 Training camps",1,
        "V - Naval science|VF1 - VF580 Naval ordnance|VF346 - VF348 Naval weapons systems",1,
        "V - Naval science|VF1 - VF580 Naval ordnance|VF350 - VF375 Ordnance and arms (General)",1,
        "V - Naval science|VF1 - VF580 Naval ordnance|VF390 - VF510 Ordnance material (Ordnance proper)",1,
        "V - Naval science|VG20 - VG2029 Minor services of navies|VG500 - VG505 Public relations. Press. War correspondents",1,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK1300 - VK1491 Saving of life and property",1,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK573 - VK587 Nautical instruments",1,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK588 - VK597 Marine hydrography. Hydrographic surveying",1,
        "W - Health Sciences|W1 - W925 Health Professions|W82 - W83.1 Biomedical Technology",1,
        "W - Health Sciences|WE1 - WE890 Musculoskeletal System",1,
        "W - Health Sciences|WE1 - WE890 Musculoskeletal System|WE500 - WE600 Muscles and Tendons",1,
        "W - Health Sciences|WH1 - WH700 Hemic and Lymphatic Systems",1,
        "W - Health Sciences|WH1 - WH700 Hemic and Lymphatic Systems|WH120 - WH540 Hematologic Diseases. Immunologic Factors. Blood Banks",1,
        "W - Health Sciences|WL1 - WL710 Nervous System",1,
        "W - Health Sciences|WL1 - WL710 Nervous System|WL1 - WL102.9 Reference Works. General Works",1,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z684 - Z685 Supplies. Shelving. Bookstacks",1],
      "language_f":[
        "English",632168,
        "Latin",27661,
        "French",24840,
        "German",17122,
        "Dutch",9062,
        "Spanish",8975,
        "Italian",8464,
        "Russian",8370,
        "Chinese",4298,
        "Danish",3463,
        "Multiple languages",2720],
      "publication_year_isort":[
        "2021",29514,
        "2020",28462,
        "2019",25793,
        "2018",24988,
        "2016",24817,
        "2015",24288,
        "2017",24232,
        "2014",23752,
        "2013",23082,
        "2012",21942,
        "2011",19386,
        "2010",16917,
        "2022",16889,
        "2009",15307,
        "2008",14163,
        "2007",13398,
        "2006",13087,
        "2005",11567,
        "2004",8155,
        "2003",7524,
        "2000",7108,
        "2001",7088,
        "2002",7029,
        "1999",6520,
        "1998",6179,
        "1992",6007,
        "1996",5901,
        "2023",5773,
        "1997",5644,
        "1995",5544,
        "1991",5534,
        "1994",5384,
        "1993",5352,
        "1642",5191,
        "1988",5181,
        "1987",5044,
        "1984",4909,
        "1989",4877,
        "1990",4788,
        "1986",4708,
        "1985",4658,
        "1983",4461,
        "1982",4003,
        "1980",3966,
        "1981",3833,
        "1979",3654,
        "1978",3507,
        "1974",3427,
        "1976",3283,
        "1977",3283,
        "1975",3200,
        "1643",3116,
        "1660",3083,
        "1648",2995,
        "1973",2908,
        "1972",2706,
        "1968",2673,
        "1969",2635,
        "1970",2615,
        "1971",2570,
        "1641",2541,
        "1644",2524,
        "1700",2523,
        "1967",2462,
        "1647",2355,
        "1649",2354,
        "1689",2295,
        "1680",2274,
        "1659",2260,
        "1962",2243,
        "1964",2243,
        "1966",2204,
        "1690",2185,
        "1963",2185,
        "1645",2137,
        "1965",2135,
        "1685",2070,
        "1695",2065,
        "1681",2015,
        "1961",1959,
        "1646",1950,
        "1960",1930,
        "1949",1925,
        "1688",1924,
        "1650",1922,
        "1682",1881,
        "1679",1840,
        "1653",1831,
        "1699",1808,
        "1696",1771,
        "1654",1764,
        "1661",1763,
        "1683",1763,
        "1684",1759,
        "1652",1730,
        "1959",1730,
        "1691",1719,
        "1655",1664,
        "1697",1633,
        "1651",1606],
      "author_facet_f":[
        "Anon",54500,
        "Geological Survey (U.S.)",5346,
        "André Savine Collection (University of North Carolina at Chapel Hill)",5303,
        "Rand Corporation",3777,
        "William S. Hein & Company",1654,
        "Duke University. Rare Book, Manuscript, and Special Collections Library",1636,
        "Church of England",1070,
        "Watts, Isaac, 1674-1748",776,
        "England",771,
        "Anderson-Riggins Memorial Fund",742,
        "Shakespeare, William, 1564-1616",713],
      "subject_genre_f":[
        "Nonfiction",540997,
        "Fiction",54580,
        "Biography",43996,
        "Congresses",29069,
        "Conference papers and proceedings",23342,
        "Reference",21846,
        "History",16409,
        "Poetry",13502,
        "Early works to 1800",13110,
        "Bibliography",10655,
        "Juvenile literature",10155],
      "subject_geographic_f":[
        "United States",67327,
        "Great Britain",17586,
        "North Carolina",9840,
        "England",9553,
        "China",7240,
        "India",7027,
        "France",7024,
        "Europe",6091,
        "Germany",5743,
        "New York (State)",5192,
        "Italy",3864],
      "subject_chronological_f":[
        "20th century",27309,
        "19th century",15051,
        "21st century",9003,
        "18th century",6000,
        "1900-1999",3714,
        "17th century",3096,
        "Civil War, 1861-1865",2441,
        "16th century",2280,
        "2000-2099",1994,
        "To 1500",1750,
        "1800-1899",1216]},
    "facet_ranges":{},
    "facet_intervals":{},
    "facet_heatmaps":{}},
  "stats":{
    "stats_fields":{
      "publication_year_isort":{
        "min":800.0,
        "max":2023.0,
        "count":890644,
        "missing":12520,
        "sum":1.701313348E9,
        "sumOfSquares":3.269787538458E12,
        "mean":1910.2058151180495,
        "stddev":149.58557020293324}}}}

    http_version: null
  recorded_at: Wed, 30 Nov 2022 15:14:03 GMT
recorded_with: VCR 5.1.0
